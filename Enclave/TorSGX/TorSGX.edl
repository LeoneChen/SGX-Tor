enclave {
		include "time.h"
		include "orconfig.h"		
		from "sgx_tkey_exchange.edl" import *; 
    include "sgx_key_exchange.h" 
/*    include "sgx_trts.h" */
    trusted {
        /* define ECALLs here. */
/*
		public void StartTorSGX(int argc, [in, size=argv_len]char** argv, int argv_len, 
			[in, size=version_size]void *version, int version_size,
			unsigned long long app_errno, unsigned long long app_environ,
			[in, string] const char *app_conf_root,
			[in, string] const char *app_torrc, 
			[in, string] const char *app_system_dir,
			[in, size=64]MEMORYSTATUSEX *app_mse,
			[in, size=64]SYSTEM_INFO *app_info);
*/
		public void StartTorSGX(int argc, [in, size=argv_len]char** argv, int argv_len, 
			unsigned long long app_errno, unsigned long long app_environ,
			[in, string] const char *app_torrc); 

		public void sgx_start_gencert([out, size=8192]char * tor_cert, unsigned long long  app_errno, 
			[in, string]const char *month, [in, string]const char *address);
/*		public void sgx_start_fingerprint([out, size=1024]char *fingerprint, [in, string]char *data_dir, 
			[in, string]const char *app_torrc, unsigned long long app_errno, [in, size=64]MEMORYSTATUSEX *app_mse); */
		public void sgx_start_fingerprint([out, size=1024]char *fingerprint, [in, string]char *data_dir, 
			[in, string]const char *app_torrc, unsigned long long app_errno);
		public void sgx_seal_files([in, string]char *fname, [out, size=8192]void *fcont);
		public void sgx_unseal_files([in, string]char *fname, [in, size=8192]void *fcont);

		public void enclave_func_caller([in, size=args_len]void *args, int args_len);
		public void sgx_signal_handle_caller(int signum, int f_id);

		public sgx_status_t enclave_init_ra(int b_pse,
				                                    [out] sgx_ra_context_t *p_context);
		public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
		public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
																	                  		[in,size=message_size] uint8_t* message, 
															                  				size_t message_size, 
												                  							[in,size=mac_size] uint8_t* mac, 
												                 							size_t mac_size);
				
		public void sgx_start_remote_attestation_server(int remote_server_port,
														[in, size=sgx_cert_size]void *sgx_cert_cont, int sgx_cert_size, 
														[in, size=sgx_pkey_size]void *sgx_pkey_cont, int sgx_pkey_size,
														unsigned long given_my_ip);

		public void test_sgx_put_gencert([in, string]char *fname, [in, size=fcont_len]char *fcont, int fcont_len);
    };

    untrusted {
        /* define OCALLs here. */
		int ocall_sgx_process_msg_all([in, size=p_req_size]const void *p_req, int p_req_size, 
									  [out, size=8]void **p_resp);
		void ocall_sgx_ra_free_network_response_buffer([in, size=8]void **resp);
		unsigned long long ocall_sgx_malloc(int m_size);
		void *ocall_sgx_calloc(int m_cnt, int m_size);
		void *ocall_sgx_realloc(unsigned long long old_mem, int m_size);
		void ocall_sgx_free(unsigned long long ptr);
		
		int ocall_sgx_fileno_stdout(void);
		/* void ocall_sgx_GetSystemTimeAsFileTime([out, size=ft_size]FILETIME *ft, int ft_size); */
/*
		unsigned long ocall_sgx_GetAdaptersAddresses(unsigned long family, unsigned long flags, 
			[in, out, size=addresses_size]void *addresses, unsigned long addresses_size, 
			[in, out, size=4]unsigned long *psize);
*/
/*		unsigned long ocall_sgx_TlsAlloc(void);
		void *ocall_sgx_TlsGetValue(unsigned long index);
		int ocall_sgx_TlsSetValue(unsigned long index, [in, size=4]void *val);
*/

		void *ocall_sgx_pthread_getspecific(int key);
		int ocall_sgx_pthread_setspecific(int key, [in, size=4]const void *value);
/*		void ocall_sgx_Sleep(unsigned long milli); */
		void ocall_sgx_sleep(unsigned int seconds); 

		int ocall_sgx_poll([in, out, size=fd_size]void *fds, int fd_size, int nfds, int timeout);
		int ocall_sgx_gettimeofday([in, out, size=tv_size]struct timeval *tv, int tv_size); 
		int ocall_sgx_clock_gettime(clockid_t clk_id, [out, size=tp_size]struct timespec *tp, int tp_size);

		int ocall_sgx_select(int nfds, [in, out, size=fd_size]void *rfd, [in, out, size=fd_size]void *wfd,  [in, out, size=fd_size]void *efd, int fd_size, 
																[in, size=tv_size]struct timeval *timeout, int tv_size);
/*		void ocall_print_string([in, string] const char *str); */
		/* Libevent start */
/*		int ocall_sgx_accept(int s, [out, size=addr_size]struct sockaddr *addr, int addr_size, [in, out, size=4]int *addrlen); */
		int ocall_sgx_setsockopt(int s, int level, int optname, [in, size=optlen]const char *optval, int optlen);
		int ocall_sgx_socketpair(int domain, int type, int protocol, [out, size=2]int *sv);
		int ocall_sgx_accept(int s, [out, size=addr_size]struct sockaddr *addr, int addr_size, [in, out, size=4]int *addrlen); 
		int ocall_sgx_bind(int s, [in, size=addr_size]const struct sockaddr *addr, int addr_size);
		int ocall_sgx_fstat(int fd, [out, size=buflen]struct stat *buf, int buflen);
		int ocall_sgx_socket(int af, int type, int protocol);
		int ocall_sgx_listen(int s, int backlog);
		int ocall_sgx_connect(int s, [in, size=addrlen]const struct sockaddr *addr, int addrlen);
/*		int ocall_sgx_ioctlsocket(int s, long cmd, [in, out, size=argp_len]unsigned long *argp, int argp_len); 
		void ocall_sgx_EnterCriticalSection([in, size=lock_len]void *lock, int lock_len);
		void ocall_sgx_LeaveCriticalSection([in, size=lock_len]void *lock, int lock_len);
		void ocall_sgx_DeleteCriticalSection([in, size=lock_len]void *lock, int lock_len);
		void ocall_sgx_InitializeCriticalSectionAndSpinCount([in, size=lock_len]void *lock, int lock_len, int count);
*/
		struct hostent *ocall_sgx_gethostbyname([in, string]const char *name); 
/*
		void ocall_sgx_WaitForSingleObject(int handle, unsigned long ms_);
		int ocall_sgx_CryptGenRandom(unsigned long long prov, int buf_len, [out, size=buf_len]unsigned char *buf);
		int ocall_sgx_CryptReleaseContext(unsigned long long hProv, unsigned long dwFlags);
		int ocall_sgx_CloseHandle(int hObject);
		int ocall_sgx_GetLastError(void);
		int ocall_sgx_CreateIoCompletionPort(int FileHandle, int p, unsigned long k, unsigned long numthreads);
		int ocall_sgx_GetQueuedCompletionStatus(int p, [in, size=numbytes_len]unsigned long *numbytes, int numbytes_len, [in, size=k_len]__int64 *k, int k_len, [in, size=lpOverlapped_len]void *lpOverlapped, int lpOverlapped_len, unsigned long dwMilliseconds); 
		unsigned ocall_sgx_GetSystemDirectory([out, size=uSize]char *lpBuffer, unsigned int uSize);
		unsigned long long ocall_sgx_LoadLibrary([in, string]char* lpFileName);
*/
		int ocall_sgx_open([in, string]const char *pathname, int flags, unsigned mode);
/*		void ocall_sgx_ftime([out,size=size_timeb]struct _timeb *tb, int size_timeb); */
		void ocall_sgx_ftime([out,size=size_timeb]struct timeb *tb, int size_timeb); 
/*
		int ocall_sgx_CreateSemaphore([in, size=attr_len]void *attr, int attr_len, long initcount, long maxcount, [in, size=name_len]void *name, int name_len);
		int ocall_sgx_ReleaseSemaphore(int hSemaphore, long lReleaseCount, [in, size=lp_len]long* lpPreviousCount, int lp_len);
		int ocall_sgx_CryptAcquireContext([out, size=8]void *prov, [in, size=0]void *container, 
								[in, size=0]void *provider, unsigned long provtype, unsigned long dwflags);
*/
		int ocall_sgx_getenv([in,size=envlen]const char *env, int envlen, [out,size=ret_len]char *ret_str,int ret_len);
		int ocall_sgx_getaddrinfo([in, string]const char *node, [in, string]const char *service, [in,out, size=hints_len]const void *hints, int hints_len, [out, size=res_len]void **res, int res_len); 
		void ocall_sgx_freeaddrinfo([in,out, size=res_len]void *res, int res_len);
		int ocall_sgx_getsockname(int s, [out, size=nlen]struct sockaddr *name, int nlen, [in, size=4]int *namelen);
		int ocall_sgx_getsockopt(int s, int level, int optname, [out, size=optval_len]char *optval, int optval_len, [in,out, size=4]int* optlen);
		void ocall_sgx_getservbyname([in, size=name_len]const char *name, int name_len, [in, size=proto_len]const char *proto, int proto_len, [out, size=serv_len]void *serv_ptr, int serv_len);
		void ocall_sgx_getprotobynumber(int number, [out, size=proto_len]void *proto, int proto_len, [out, size=proto_name_len]char *proto_name, int proto_name_len);
/*
		unsigned long long ocall_sgx_beginthread([in,size = port_len]void *port, int port_len);
		void ocall_sgx_endthread(void);
		int ocall_sgx_PostQueuedCompletionStatus(int p, unsigned int n, unsigned int key, [in, size=o_len]void *o, int o_len);
*/
		int ocall_sgx_pthread_create([in, size=port_len]void *port, int port_len);
		int ocall_sgx_epoll_wait(int epfd, [in,out, size=events_len]void *events, int events_len, int maxevents, int timeout);
		int ocall_sgx_epoll_ctl(int epfd, int op, int fd, [in,out, size=event_len]void *event, int event_len);
		int ocall_sgx_epoll_create(int size);
		void ocall_sgx_signal(int signum, int f_id);
		int ocall_sgx_eventfd(unsigned int initval, int flags);
/*		int ocall_sgx_atexit(int f_id); */
		int ocall_sgx_sigfillset([in,out, size=setlen]void *set, int setlen);
		int ocall_sgx_sigemptyset([in,out, size=setlen]void *set, int setlen);
		int ocall_sgx_sigaction(int signum, [in, size=act_len]const void *act, int act_len, [in,out, size=oldact_len]void *oldact, int oldact_len);
		int ocall_sgx_fcntl(int fd, int cmd, long arg);
		int ocall_sgx_fcntl2(int fd, int cmd, [in, size=lock_len]void *lock, int lock_len);
		int ocall_sgx_chmod([in, string]const char *pathname, int mode);
		int ocall_sgx_chdir([in, string]const char *path);
		int ocall_sgx_pipe([in,out, size=2]int *pipefd);
		int ocall_sgx_sysctl([in, size=nlen]int *name, int nlen, [in,out, size=oldval_len]void *oldval, int oldval_len, [in,out, size=8]size_t *oldlenp, [in,out, size=newlen]void *newval, size_t newlen);
		pid_t ocall_sgx_fork(void);
		unsigned short ocall_sgx_ntohs(unsigned short netshort);
		unsigned long ocall_sgx_ntohl(unsigned long netlong);
		time_t ocall_get_time([out, size=t_len]time_t *timep, int t_len);
		int ocall_sgx_recv(int s, [out, size=len]char *buf, int len, int flags);
		int ocall_sgx_direct_recv(int s, unsigned long long buf, int len, int flags);
		int ocall_sgx_send(int s, [in, size=len]const char *buf, int len, int flags);
		int ocall_sgx_direct_send(int s, unsigned long long buf, int len, int flags);
/*
		int ocall_sgx_WSAGetLastError(void);
		void ocall_sgx_SetLastError(int e);
		void ocall_sgx_WSASetLastError(int e);
*/
		int ocall_sgx_rename([in, string]const char *from_str, [in, string]const char *to_str);
		int ocall_sgx_unlink([in, string]const char *filename);
		int ocall_sgx_close(int fd);
		int ocall_sgx_ftruncate(int fd, off_t length);
/*		int ocall_sgx_chsize(int fd, long val); */
/*		int ocall_sgx_closesocket(int fd);   */
/*		int ocall_sgx_shutdown(int fd); */
		int ocall_sgx_shutdown(int fd, int how); 
		void ocall_sgx_exit(int exit_status);
		int ocall_sgx_write(int fd, [in, size=n]const void *buf, int n);
		int ocall_sgx_direct_write(int fd, unsigned long long buf, int n);
		int ocall_sgx_read(int fd, [out, size=n]void *buf, int n);
		int ocall_sgx_direct_read(int fd, unsigned long long buf, int n);
		pid_t ocall_sgx_waitpid(unsigned int pid, [in,out, size=status_len]int *_status, int status_len, int options);
		pid_t ocall_sgx_getpid(void);
		pid_t ocall_sgx_setsid(void);
		int ocall_sgx_getgroups(int size, [in,out, size=list_num]unsigned int *list, int list_num);
		int ocall_sgx_setgroups(size_t size, [in, size=list_num]const unsigned int *list, int list_num);
		int ocall_sgx_setuid(unsigned int uid);
		int ocall_sgx_setgid(unsigned int gid);
		int ocall_sgx_seteuid(unsigned int uid);
		int ocall_sgx_setegid(unsigned int gid);
		int ocall_sgx_dup2(int oldfd, int newfd);
		uid_t ocall_sgx_getuid(void);
		gid_t ocall_sgx_getgid(void);
		uid_t ocall_sgx_geteuid(void);
		gid_t ocall_sgx_getegid(void);
		off_t ocall_sgx_lseek(int fildes, off_t offset, int whence);
/*		int ocall_sgx_locking(int fd, int mode, long num); */
		int ocall_sgx_gethostname([out, size=namelen]char *name, size_t namelen);
		struct tm *ocall_sgx_localtime([in, size=t_len]const time_t *timep, int t_len);
		struct tm *ocall_sgx_gmtime([in, size=t_len]const time_t *timep, int t_len);
		time_t ocall_sgx_mktime([in, size=tm_len]struct tm *timeptr, int tm_len);
/*		unsigned long ocall_sgx_GetNetworkParams([out, size=fixed_sz]void *fixed, unsigned long fixed_sz, [in, out, size=4]unsigned long *fixed_size); */
		int ocall_sgx_sendto(int s, [in, size =len]const void *msg, int len, int flags, [in,size =tolen]const struct sockaddr *to, int tolen); 
/*		int ocall_sgx_recvfrom(int s, [out, size=len]void *msg, int len, int flags, [out, size=frlen]struct sockaddr *fr, int frlen, [in, out, size=4]int *in_len); */
		int ocall_sgx_recvfrom(int s, [out, size=len]void *msg, int len, int flags, [out, size=frlen]struct sockaddr *fr, int frlen, [in, out, size=4]int *in_len);
		/* int ocall_sgx_SHGetSpecialFolderPathA(HWND hwnd, [out, size=path_len]char *path, int path_len, int csidl, int fCreate); */
/*		int ocall_sgx_fputs([in, string]const char *str, [in, out, size=stream_size]FILE *stream, int stream_size); */
		int ocall_sgx_fclose([in, size=file_size]FILE *file, int file_size); 
		int ocall_sgx_stat([in, string]const char  *filename, [out, size=stat_size]struct stat *st, int stat_size);
/*		int ocall_sgx_mkdir([in, string]const char *path); */
		int ocall_sgx_mkdir([in, string]const char *path, int mode); 
/*
		int ocall_sgx_UnmapViewOfFile(unsigned long long  lpBaseAddress);
		void *ocall_sgx_MapViewOfFile(
				int hFileMappingObject,
				unsigned long dwDesiredAccess,
				unsigned long dwFileOffsetHigh,
				unsigned long dwFileOffsetLow,
				unsigned long long dwNumberOfBytesToMap);
		int ocall_sgx_CreateFileMapping(
				int hFile,
				[in, size=0]void *_null,
				unsigned long flProtect,
				unsigned long dwMaximumSizeHigh,
				unsigned long dwMaximumSizeLow,
				[in, string]const char* lpName);
		unsigned long ocall_sgx_GetFileSize(int hFile, [out, size=4]unsigned long *lpFileSizeHigh);
*/
		/* HANDLE ocall_sgx_CreateFile(
			[in, string]const char *lpFileName,
			unsigned long dwDesiredAccess,
			unsigned long dwShareMode,
			[in, size=0]void *_null,
			unsigned long dwCreationDisposition,
			unsigned long dwFlagsAndAttributes,
			int hTemplateFile); */
		long ocall_sgx_clock(void);
/*		char *ocall_sgx_strdup([in, string]const char *str); */
	};
};
