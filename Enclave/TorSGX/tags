!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A01	routerparse.c	270;"	d	file:
ABSOLUTE_MIN_BW_VALUE_TO_CONSIDER_KB	dirserv.c	1389;"	d	file:
ABSOLUTE_MIN_VALUE_FOR_FAST_FLAG	dirserv.c	1516;"	d	file:
ACCT_MAX	or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	e	enum:__anon24::__anon27
ACCT_SUM	or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	e	enum:__anon24::__anon27
ADDR	tortls.c	97;"	d	file:
ADDRESSMAP_PRIVATE	addressmap.c	7;"	d	file:
ADDRESS_PRIVATE	address.c	11;"	d	file:
ADDRMAPSRC_AUTOMAP	or.h	/^  ADDRMAPSRC_AUTOMAP,$/;"	e	enum:__anon32
ADDRMAPSRC_CONTROLLER	or.h	/^  ADDRMAPSRC_CONTROLLER,$/;"	e	enum:__anon32
ADDRMAPSRC_DNS	or.h	/^  ADDRMAPSRC_DNS,$/;"	e	enum:__anon32
ADDRMAPSRC_NONE	or.h	/^  ADDRMAPSRC_NONE$/;"	e	enum:__anon32
ADDRMAPSRC_TORRC	or.h	/^  ADDRMAPSRC_TORRC,$/;"	e	enum:__anon32
ADDRMAPSRC_TRACKEXIT	or.h	/^  ADDRMAPSRC_TRACKEXIT,$/;"	e	enum:__anon32
ADDR_POLICY_ACCEPT	or.h	/^  ADDR_POLICY_ACCEPT=1,$/;"	e	enum:__anon11
ADDR_POLICY_ACCEPTED	or.h	/^  ADDR_POLICY_ACCEPTED=0,$/;"	e	enum:__anon40
ADDR_POLICY_PROBABLY_ACCEPTED	or.h	/^  ADDR_POLICY_PROBABLY_ACCEPTED=1,$/;"	e	enum:__anon40
ADDR_POLICY_PROBABLY_REJECTED	or.h	/^  ADDR_POLICY_PROBABLY_REJECTED=2,$/;"	e	enum:__anon40
ADDR_POLICY_REJECT	or.h	/^  ADDR_POLICY_REJECT=2,$/;"	e	enum:__anon11
ADDR_POLICY_REJECTED	or.h	/^  ADDR_POLICY_REJECTED=-1,$/;"	e	enum:__anon40
ADD_ENTROPY	crypto.c	2275;"	d	file:
ADD_MALLINFO_LINE	directory.c	3173;"	d	file:
AF_12844	orconfig.h	1475;"	d
AF_APPLETALK	orconfig.h	1466;"	d
AF_ATM	orconfig.h	1472;"	d
AF_BAN	orconfig.h	1471;"	d
AF_CCITT	orconfig.h	1460;"	d
AF_CHAOS	orconfig.h	1453;"	d
AF_CLUSTER	orconfig.h	1474;"	d
AF_DATAKIT	orconfig.h	1459;"	d
AF_DECnet	orconfig.h	1462;"	d
AF_DLI	orconfig.h	1463;"	d
AF_ECMA	orconfig.h	1458;"	d
AF_FIREFOX	orconfig.h	1469;"	d
AF_HYLINK	orconfig.h	1465;"	d
AF_IMPLINK	orconfig.h	1451;"	d
AF_INET	orconfig.h	1450;"	d
AF_INET6	orconfig.h	1473;"	d
AF_IPX	orconfig.h	1455;"	d
AF_IRDA	orconfig.h	1476;"	d
AF_ISO	orconfig.h	1456;"	d
AF_LAT	orconfig.h	1464;"	d
AF_NETBIOS	orconfig.h	1467;"	d
AF_NETDES	orconfig.h	1477;"	d
AF_NS	orconfig.h	1454;"	d
AF_OSI	orconfig.h	1457;"	d
AF_PUP	orconfig.h	1452;"	d
AF_SNA	orconfig.h	1461;"	d
AF_UNIX	compat_threads.h	21;"	d
AF_UNIX	orconfig.h	1449;"	d
AF_UNKNOWN1	orconfig.h	1470;"	d
AF_UNSPEC	orconfig.h	1448;"	d
AF_VOICEVIEW	orconfig.h	1468;"	d
ALIGN	ed25519-donna-portable.h	170;"	d
ALIGN	ed25519-donna-portable.h	171;"	d
ALIGN	ed25519-donna-portable.h	19;"	d
ALIGN	ed25519-donna-portable.h	27;"	d
ALIGN	ed25519-donna-portable.h	28;"	d
ALLOC	routerparse.c	3915;"	d	file:
ALLOC	routerparse.c	4181;"	d	file:
ALLOC_ZERO	routerparse.c	3914;"	d	file:
ALLOC_ZERO	routerparse.c	4182;"	d	file:
ALLOW_DIRECTORY_TIME_SKEW	directory.c	102;"	d	file:
ALLOW_INVALID_ENTRY	or.h	/^  ALLOW_INVALID_ENTRY       =1,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_EXIT	or.h	/^  ALLOW_INVALID_EXIT        =2,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_INTRODUCTION	or.h	/^  ALLOW_INVALID_INTRODUCTION=16,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_MIDDLE	or.h	/^  ALLOW_INVALID_MIDDLE      =4,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_RENDEZVOUS	or.h	/^  ALLOW_INVALID_RENDEZVOUS  =8,$/;"	e	enum:invalid_router_usage_t
ALL_DIRINFO	or.h	2630;"	d
AMR_FLAG_USE_AUTOMAP	addressmap.h	22;"	d
AMR_FLAG_USE_IPV4_DNS	addressmap.h	19;"	d
AMR_FLAG_USE_IPV6_DNS	addressmap.h	20;"	d
AMR_FLAG_USE_MAPADDRESS	addressmap.h	21;"	d
AMR_FLAG_USE_TRACKEXIT	addressmap.h	23;"	d
APPDATA_PATH	config.c	4170;"	d	file:
APPEND	onion_ntor.c	55;"	d	file:
AP_CONN_STATE_CIRCUIT_WAIT	or.h	345;"	d
AP_CONN_STATE_CONNECT_WAIT	or.h	347;"	d
AP_CONN_STATE_CONTROLLER_WAIT	or.h	343;"	d
AP_CONN_STATE_IS_UNATTACHED	or.h	359;"	d
AP_CONN_STATE_MAX_	or.h	355;"	d
AP_CONN_STATE_MIN_	or.h	335;"	d
AP_CONN_STATE_NATD_WAIT	or.h	354;"	d
AP_CONN_STATE_OPEN	or.h	351;"	d
AP_CONN_STATE_RENDDESC_WAIT	or.h	340;"	d
AP_CONN_STATE_RESOLVE_WAIT	or.h	349;"	d
AP_CONN_STATE_SOCKS_WAIT	or.h	337;"	d
ARGS	routerparse.c	273;"	d	file:
ARGUMENT_NECESSARY	config.c	/^  ARGUMENT_NECESSARY = 1,$/;"	e	enum:__anon124	file:
ARGUMENT_OPTIONAL	config.c	/^  ARGUMENT_OPTIONAL = 2$/;"	e	enum:__anon124	file:
ARRAY_LENGTH	util.h	636;"	d
ASOCKS_NOEVENTFD	compat_threads.h	121;"	d
ASOCKS_NOEVENTFD2	compat_threads.h	120;"	d
ASOCKS_NOPIPE	compat_threads.h	123;"	d
ASOCKS_NOPIPE2	compat_threads.h	122;"	d
ASOCKS_NOSOCKETPAIR	compat_threads.h	124;"	d
ASSERT_CAPACITY	container.c	89;"	d	file:
AT	policies.c	1478;"	d	file:
ATTR_CONST	compat.h	119;"	d
ATTR_CONST	compat.h	152;"	d
ATTR_MALLOC	compat.h	120;"	d
ATTR_MALLOC	compat.h	153;"	d
ATTR_NONNULL	compat.h	131;"	d
ATTR_NONNULL	compat.h	155;"	d
ATTR_NORETURN	compat.h	118;"	d
ATTR_NORETURN	compat.h	121;"	d
ATTR_NORETURN	compat.h	151;"	d
ATTR_NORETURN	compat.h	154;"	d
ATTR_UNUSED	compat.h	132;"	d
ATTR_UNUSED	compat.h	156;"	d
AT_END	routerparse.c	218;"	d	file:
AT_START	routerparse.c	217;"	d	file:
AUTHENTICATION_COOKIE_LEN	control.c	97;"	d	file:
AUTHORITY_NS_CACHE_INTERVAL	networkstatus.c	703;"	d	file:
AUTHTYPE_RSA_SHA256_TLSSECRET	or.h	1367;"	d
AUTH_INPUT_LEN	onion_ntor.c	104;"	d	file:
A_FEW_KILOBYTES	torgzip.c	580;"	d	file:
A_FEW_KILOBYTES	torgzip.c	601;"	d	file:
A_LAST_LISTED	routerparse.c	/^  A_LAST_LISTED,$/;"	e	enum:__anon97	file:
A_PURPOSE	routerparse.c	/^  A_PURPOSE,$/;"	e	enum:__anon97	file:
A_UNKNOWN_	routerparse.c	/^  A_UNKNOWN_,$/;"	e	enum:__anon97	file:
AccelDir	or.h	/^  char *AccelDir; \/**< Optional hardware acceleration engine search dir. *\/$/;"	m	struct:__anon24
AccelName	or.h	/^  char *AccelName; \/**< Optional hardware acceleration engine name. *\/$/;"	m	struct:__anon24
AccountingBytesAtSoftLimit	or.h	/^  uint64_t AccountingBytesAtSoftLimit;$/;"	m	struct:__anon30
AccountingBytesReadInInterval	or.h	/^  uint64_t AccountingBytesReadInInterval;$/;"	m	struct:__anon30
AccountingBytesWrittenInInterval	or.h	/^  uint64_t AccountingBytesWrittenInInterval;$/;"	m	struct:__anon30
AccountingExpectedUsage	or.h	/^  uint64_t AccountingExpectedUsage;$/;"	m	struct:__anon30
AccountingIntervalStart	or.h	/^  time_t AccountingIntervalStart;$/;"	m	struct:__anon30
AccountingMax	or.h	/^  uint64_t AccountingMax; \/**< How many bytes do we allow per accounting$/;"	m	struct:__anon24
AccountingRule	or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon27
AccountingRule_option	or.h	/^  char *AccountingRule_option;$/;"	m	struct:__anon24
AccountingSecondsActive	or.h	/^  int AccountingSecondsActive;$/;"	m	struct:__anon30
AccountingSecondsToReachSoftLimit	or.h	/^  int AccountingSecondsToReachSoftLimit;$/;"	m	struct:__anon30
AccountingSoftLimitHitAt	or.h	/^  time_t AccountingSoftLimitHitAt;$/;"	m	struct:__anon30
AccountingStart	or.h	/^  char *AccountingStart; \/**< How long is the accounting interval, and when$/;"	m	struct:__anon24
Address	or.h	/^  char *Address; \/**< OR only: configured address for this onion router. *\/$/;"	m	struct:__anon24
AddressMap	or.h	/^  config_line_t *AddressMap; \/**< List of address map directives. *\/$/;"	m	struct:__anon24
AllDirActionsPrivate	or.h	/^  int AllDirActionsPrivate; \/**< Should every directory action be sent$/;"	m	struct:__anon24
AllowDotExit	or.h	/^  int AllowDotExit;$/;"	m	struct:__anon24
AllowInvalidNodes	or.h	/^  smartlist_t *AllowInvalidNodes;$/;"	m	struct:__anon24
AllowInvalid_	or.h	/^  invalid_router_usage_t AllowInvalid_;$/;"	m	struct:__anon24
AllowNonRFC953Hostnames	or.h	/^  int AllowNonRFC953Hostnames; \/**< If true, we allow connections to hostnames$/;"	m	struct:__anon24
AllowSingleHopCircuits	or.h	/^  int AllowSingleHopCircuits;$/;"	m	struct:__anon24
AllowSingleHopExits	or.h	/^  int AllowSingleHopExits;$/;"	m	struct:__anon24
AlternateBridgeAuthority	or.h	/^  config_line_t *AlternateBridgeAuthority;$/;"	m	struct:__anon24
AlternateDirAuthority	or.h	/^  config_line_t *AlternateDirAuthority;$/;"	m	struct:__anon24
AssumeReachable	or.h	/^  int AssumeReachable; \/**< Whether to publish our descriptor regardless. *\/$/;"	m	struct:__anon24
AuthDirBadExit	or.h	/^  config_line_t *AuthDirBadExit; \/**< Address policy for descriptors to$/;"	m	struct:__anon24
AuthDirBadExitCCs	or.h	/^  smartlist_t *AuthDirBadExitCCs;$/;"	m	struct:__anon24
AuthDirFastGuarantee	or.h	/^  uint64_t AuthDirFastGuarantee;$/;"	m	struct:__anon24
AuthDirGuardBWGuarantee	or.h	/^  uint64_t AuthDirGuardBWGuarantee;$/;"	m	struct:__anon24
AuthDirHasIPv6Connectivity	or.h	/^  int AuthDirHasIPv6Connectivity; \/**< Boolean: are we on IPv6?  *\/$/;"	m	struct:__anon24
AuthDirInvalid	or.h	/^  config_line_t *AuthDirInvalid; \/**< Address policy for descriptors to$/;"	m	struct:__anon24
AuthDirInvalidCCs	or.h	/^  smartlist_t *AuthDirInvalidCCs;$/;"	m	struct:__anon24
AuthDirListBadExits	or.h	/^  int AuthDirListBadExits; \/**< True iff we should list bad exits,$/;"	m	struct:__anon24
AuthDirMaxServersPerAddr	or.h	/^  int AuthDirMaxServersPerAddr; \/**< Do not permit more than this$/;"	m	struct:__anon24
AuthDirMaxServersPerAuthAddr	or.h	/^  int AuthDirMaxServersPerAuthAddr; \/**< Do not permit more than this$/;"	m	struct:__anon24
AuthDirPinKeys	or.h	/^  int AuthDirPinKeys; \/**< Boolean: Do we enforce key-pinning? *\/$/;"	m	struct:__anon24
AuthDirReject	or.h	/^  config_line_t *AuthDirReject; \/**< Address policy for descriptors to$/;"	m	struct:__anon24
AuthDirRejectCCs	or.h	/^  smartlist_t *AuthDirRejectCCs;$/;"	m	struct:__anon24
AuthoritativeDir	or.h	/^  int AuthoritativeDir; \/**< Boolean: is this an authoritative directory? *\/$/;"	m	struct:__anon24
AutomapHostsOnResolve	or.h	/^  int AutomapHostsOnResolve; \/**< If true, when we get a resolve request for a$/;"	m	struct:__anon24
AutomapHostsSuffixes	or.h	/^  smartlist_t *AutomapHostsSuffixes;$/;"	m	struct:__anon24
AvoidDiskWrites	or.h	/^  int AvoidDiskWrites; \/**< Boolean: should we never cache things to disk?$/;"	m	struct:__anon24
BAD_HOSTNAME	connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
BAD_SIGNING_KEYS	routerlist.c	/^static const char *BAD_SIGNING_KEYS[] = {$/;"	v	file:
BANDWIDTH_RECHECK_INTERVAL	main.c	1580;"	d	file:
BASE32_CHARS	util_format.h	24;"	d
BASE64_DIGEST256_LEN	crypto.h	71;"	d
BASE64_DIGEST_LEN	crypto.h	68;"	d
BASE64_ENCODE_MULTILINE	util_format.h	13;"	d
BASE64_OPENSSL_LINELEN	util_format.c	109;"	d	file:
BASE64_OPENSSL_LINELEN	util_format.c	323;"	d	file:
BASE_CHAN_TO_TLS	channeltls.h	15;"	d
BASE_CONNECTION_MAGIC	or.h	1199;"	d
BEGIN_END_OVERHEAD_LEN	routerparse.c	672;"	d	file:
BEGIN_FLAG_IPV4_NOT_OK	connection_edge.h	117;"	d
BEGIN_FLAG_IPV6_OK	connection_edge.h	112;"	d
BEGIN_FLAG_IPV6_PREFERRED	connection_edge.h	120;"	d
BIDI_FACTOR	rephist.c	2674;"	d	file:
BIDI_INTERVAL	rephist.c	2678;"	d	file:
BIDI_THRESHOLD	rephist.c	2669;"	d	file:
BIT	container.h	646;"	d
BIT	container.h	677;"	d
BITARRAY_MASK	container.h	582;"	d
BITARRAY_SHIFT	container.h	576;"	d
BITARRAY_SHIFT	container.h	578;"	d
BOOL	orconfig.h	/^typedef int                 BOOL;$/;"	t
BOOTSTRAP_MSG_LEN	control.c	119;"	d	file:
BOOTSTRAP_PCT_INCREMENT	control.c	5958;"	d	file:
BOOTSTRAP_PROBLEM_THRESHOLD	control.c	5952;"	d	file:
BOOTSTRAP_STATUS_CIRCUIT_CREATE	or.h	/^  BOOTSTRAP_STATUS_CIRCUIT_CREATE=90,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_CONN_DIR	or.h	/^  BOOTSTRAP_STATUS_CONN_DIR=5,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_CONN_OR	or.h	/^  BOOTSTRAP_STATUS_CONN_OR=80,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_DONE	or.h	/^  BOOTSTRAP_STATUS_DONE=100$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_HANDSHAKE	or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE=-2,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_HANDSHAKE_DIR	or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE_DIR=10,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_HANDSHAKE_OR	or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE_OR=85,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_LOADING_DESCRIPTORS	or.h	/^  BOOTSTRAP_STATUS_LOADING_DESCRIPTORS=50,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_LOADING_KEYS	or.h	/^  BOOTSTRAP_STATUS_LOADING_KEYS=40,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_LOADING_STATUS	or.h	/^  BOOTSTRAP_STATUS_LOADING_STATUS=25,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_ONEHOP_CREATE	or.h	/^  BOOTSTRAP_STATUS_ONEHOP_CREATE=15,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_REQUESTING_DESCRIPTORS	or.h	/^  BOOTSTRAP_STATUS_REQUESTING_DESCRIPTORS=45,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_REQUESTING_STATUS	or.h	/^  BOOTSTRAP_STATUS_REQUESTING_STATUS=20,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_STARTING	or.h	/^  BOOTSTRAP_STATUS_STARTING=0,$/;"	e	enum:__anon33
BOOTSTRAP_STATUS_UNDEF	or.h	/^  BOOTSTRAP_STATUS_UNDEF=-1,$/;"	e	enum:__anon33
BRIDGE_DIRINFO	or.h	/^  BRIDGE_DIRINFO  = 1 << 4,$/;"	e	enum:__anon18
BRIDGE_MAX_BELIEVABLE_BANDWIDTH	routerlist.c	1961;"	d	file:
BRIDGE_MIN_BELIEVABLE_BANDWIDTH	routerlist.c	1960;"	d	file:
BRIDGE_REQUIRED_MIN_BANDWIDTH	or.h	5034;"	d
BRIDGE_STATUSFILE_INTERVAL	main.c	1700;"	d	file:
BSWAP64	trunnel.c	27;"	d	file:
BUFFERS_PRIVATE	buffers.c	13;"	d	file:
BUFFER_MAGIC	buffers.h	124;"	d
BUILDDIR	orconfig.h	18;"	d
BUILDTIMEOUT_SET_EVENT_COMPUTED	or.h	/^  BUILDTIMEOUT_SET_EVENT_COMPUTED  = 0,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_DISCARD	or.h	/^  BUILDTIMEOUT_SET_EVENT_DISCARD = 3,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_RESET	or.h	/^  BUILDTIMEOUT_SET_EVENT_RESET     = 1,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_RESUME	or.h	/^  BUILDTIMEOUT_SET_EVENT_RESUME = 4$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_SUSPENDED	or.h	/^  BUILDTIMEOUT_SET_EVENT_SUSPENDED = 2,$/;"	e	enum:buildtimeout_set_event_t
BWHistoryDirReadEnds	or.h	/^  time_t      BWHistoryDirReadEnds;$/;"	m	struct:__anon30
BWHistoryDirReadInterval	or.h	/^  int         BWHistoryDirReadInterval;$/;"	m	struct:__anon30
BWHistoryDirReadMaxima	or.h	/^  smartlist_t *BWHistoryDirReadMaxima;$/;"	m	struct:__anon30
BWHistoryDirReadValues	or.h	/^  smartlist_t *BWHistoryDirReadValues;$/;"	m	struct:__anon30
BWHistoryDirWriteEnds	or.h	/^  time_t      BWHistoryDirWriteEnds;$/;"	m	struct:__anon30
BWHistoryDirWriteInterval	or.h	/^  int         BWHistoryDirWriteInterval;$/;"	m	struct:__anon30
BWHistoryDirWriteMaxima	or.h	/^  smartlist_t *BWHistoryDirWriteMaxima;$/;"	m	struct:__anon30
BWHistoryDirWriteValues	or.h	/^  smartlist_t *BWHistoryDirWriteValues;$/;"	m	struct:__anon30
BWHistoryReadEnds	or.h	/^  time_t      BWHistoryReadEnds;$/;"	m	struct:__anon30
BWHistoryReadInterval	or.h	/^  int         BWHistoryReadInterval;$/;"	m	struct:__anon30
BWHistoryReadMaxima	or.h	/^  smartlist_t *BWHistoryReadMaxima;$/;"	m	struct:__anon30
BWHistoryReadValues	or.h	/^  smartlist_t *BWHistoryReadValues;$/;"	m	struct:__anon30
BWHistoryWriteEnds	or.h	/^  time_t      BWHistoryWriteEnds;$/;"	m	struct:__anon30
BWHistoryWriteInterval	or.h	/^  int         BWHistoryWriteInterval;$/;"	m	struct:__anon30
BWHistoryWriteMaxima	or.h	/^  smartlist_t *BWHistoryWriteMaxima;$/;"	m	struct:__anon30
BWHistoryWriteValues	or.h	/^  smartlist_t *BWHistoryWriteValues;$/;"	m	struct:__anon30
BW_MAX_WEIGHT_SCALE	or.h	4474;"	d
BW_MIN_WEIGHT_SCALE	or.h	4473;"	d
BW_WEIGHTS_BALANCE_EG_ERROR	dirvote.c	/^ BW_WEIGHTS_BALANCE_EG_ERROR = 6$/;"	e	enum:__anon112	file:
BW_WEIGHTS_BALANCE_MID_ERROR	dirvote.c	/^ BW_WEIGHTS_BALANCE_MID_ERROR = 5,$/;"	e	enum:__anon112	file:
BW_WEIGHTS_NO_ERROR	dirvote.c	/^ BW_WEIGHTS_NO_ERROR = 0,$/;"	e	enum:__anon112	file:
BW_WEIGHTS_RANGE_ERROR	dirvote.c	/^ BW_WEIGHTS_RANGE_ERROR = 1,$/;"	e	enum:__anon112	file:
BW_WEIGHTS_SUMD_ERROR	dirvote.c	/^ BW_WEIGHTS_SUMD_ERROR = 4,$/;"	e	enum:__anon112	file:
BW_WEIGHTS_SUME_ERROR	dirvote.c	/^ BW_WEIGHTS_SUME_ERROR = 3,$/;"	e	enum:__anon112	file:
BW_WEIGHTS_SUMG_ERROR	dirvote.c	/^ BW_WEIGHTS_SUMG_ERROR = 2,$/;"	e	enum:__anon112	file:
BW_WEIGHT_SCALE	or.h	4472;"	d
BandwidthBurst	or.h	/^  uint64_t BandwidthBurst; \/**< How much bandwidth, at maximum, are we willing$/;"	m	struct:__anon24
BandwidthRate	or.h	/^  uint64_t BandwidthRate; \/**< How much bandwidth, on average, are we willing$/;"	m	struct:__anon24
Bi	ge_double_scalarmult.c	/^static ge_precomp Bi[8] = {$/;"	v	file:
BridgeAuthoritativeDir	or.h	/^  int BridgeAuthoritativeDir; \/**< Boolean: is this an authoritative directory$/;"	m	struct:__anon24
BridgePassword	or.h	/^  char *BridgePassword;$/;"	m	struct:__anon24
BridgePassword_AuthDigest_	or.h	/^  char *BridgePassword_AuthDigest_;$/;"	m	struct:__anon24
BridgeRecordUsageByCountry	or.h	/^  int BridgeRecordUsageByCountry;$/;"	m	struct:__anon24
BridgeRelay	or.h	/^  int BridgeRelay; \/**< Boolean: are we acting as a bridge relay? We make$/;"	m	struct:__anon24
Bridges	or.h	/^  config_line_t *Bridges; \/**< List of bootstrap bridge addresses. *\/$/;"	m	struct:__anon24
BuildtimeHistogram	or.h	/^  config_line_t * BuildtimeHistogram;$/;"	m	struct:__anon30
CACHED_RESOLVE_MAGIC	dns_structs.h	15;"	d
CACHE_STATE_CACHED	dns_structs.h	31;"	d
CACHE_STATE_DONE	dns_structs.h	28;"	d
CACHE_STATE_PENDING	dns_structs.h	24;"	d
CASE	tortls.c	283;"	d	file:
CASE	tortls.c	290;"	d	file:
CASE_ANY_LISTENER_TYPE	connection.c	106;"	d	file:
CASE_TOR_TLS_ERROR_ANY	tortls.h	49;"	d
CASE_TOR_TLS_ERROR_ANY_NONIO	tortls.h	40;"	d
CATCH_SYSCALL	tortls.c	402;"	d	file:
CATCH_ZERO	tortls.c	403;"	d	file:
CBT_BIN_TO_MS	circuitstats.c	26;"	d	file:
CBT_BIN_WIDTH	or.h	4481;"	d
CBT_BUILD_ABANDONED	or.h	4495;"	d
CBT_BUILD_TIME_MAX	or.h	4496;"	d
CBT_DEFAULT_CLOSE_QUANTILE	or.h	4507;"	d
CBT_DEFAULT_MAX_RECENT_TIMEOUT_COUNT	or.h	4527;"	d
CBT_DEFAULT_MIN_CIRCUITS_TO_OBSERVE	or.h	4532;"	d
CBT_DEFAULT_NUM_XM_MODES	or.h	4484;"	d
CBT_DEFAULT_QUANTILE_CUTOFF	or.h	4537;"	d
CBT_DEFAULT_RECENT_CIRCUITS	or.h	4515;"	d
CBT_DEFAULT_TEST_FREQUENCY	or.h	4543;"	d
CBT_DEFAULT_TIMEOUT_INITIAL_VALUE	or.h	4553;"	d
CBT_DEFAULT_TIMEOUT_MIN_VALUE	or.h	4548;"	d
CBT_MAX_CLOSE_QUANTILE	or.h	4509;"	d
CBT_MAX_MAX_RECENT_TIMEOUT_COUNT	or.h	4529;"	d
CBT_MAX_MIN_CIRCUITS_TO_OBSERVE	or.h	4534;"	d
CBT_MAX_NUM_XM_MODES	or.h	4486;"	d
CBT_MAX_QUANTILE_CUTOFF	or.h	4539;"	d
CBT_MAX_RECENT_CIRCUITS	or.h	4517;"	d
CBT_MAX_TEST_FREQUENCY	or.h	4545;"	d
CBT_MAX_TIMEOUT_INITIAL_VALUE	or.h	4555;"	d
CBT_MAX_TIMEOUT_MIN_VALUE	or.h	4550;"	d
CBT_MIN_CLOSE_QUANTILE	or.h	4508;"	d
CBT_MIN_MAX_RECENT_TIMEOUT_COUNT	or.h	4528;"	d
CBT_MIN_MIN_CIRCUITS_TO_OBSERVE	or.h	4533;"	d
CBT_MIN_NUM_XM_MODES	or.h	4485;"	d
CBT_MIN_QUANTILE_CUTOFF	or.h	4538;"	d
CBT_MIN_RECENT_CIRCUITS	or.h	4516;"	d
CBT_MIN_TEST_FREQUENCY	or.h	4544;"	d
CBT_MIN_TIMEOUT_INITIAL_VALUE	or.h	4554;"	d
CBT_MIN_TIMEOUT_MIN_VALUE	or.h	4549;"	d
CBT_NCIRCUITS_TO_OBSERVE	or.h	4478;"	d
CBT_SAVE_STATE_EVERY	or.h	4499;"	d
CEIL_DIV	util.h	227;"	d
CELL_AUTHENTICATE	or.h	879;"	d
CELL_AUTHORIZE	or.h	880;"	d
CELL_AUTH_CHALLENGE	or.h	878;"	d
CELL_CERTS	or.h	877;"	d
CELL_COMMAND_MAX_	or.h	881;"	d
CELL_CREATE	or.h	864;"	d
CELL_CREATE2	or.h	873;"	d
CELL_CREATED	or.h	865;"	d
CELL_CREATED2	or.h	874;"	d
CELL_CREATED_FAST	or.h	869;"	d
CELL_CREATE_FAST	or.h	868;"	d
CELL_DESTROY	or.h	867;"	d
CELL_DIRECTION_IN	or.h	/^  CELL_DIRECTION_IN=1, \/**< The cell is moving towards the origin. *\/$/;"	e	enum:__anon6
CELL_DIRECTION_OUT	or.h	/^  CELL_DIRECTION_OUT=2, \/**< The cell is moving away from the origin. *\/$/;"	e	enum:__anon6
CELL_MAX_NETWORK_SIZE	or.h	914;"	d
CELL_NETINFO	or.h	871;"	d
CELL_PADDING	or.h	863;"	d
CELL_PAYLOAD_SIZE	or.h	911;"	d
CELL_QUEUE_FIXED	channel.h	/^    CELL_QUEUE_FIXED,$/;"	e	enum:cell_queue_entry_s::__anon74
CELL_QUEUE_HIGHWATER_SIZE	relay.c	69;"	d	file:
CELL_QUEUE_LOWWATER_SIZE	relay.c	72;"	d	file:
CELL_QUEUE_PACKED	channel.h	/^    CELL_QUEUE_PACKED$/;"	e	enum:cell_queue_entry_s::__anon74
CELL_QUEUE_VAR	channel.h	/^    CELL_QUEUE_VAR,$/;"	e	enum:cell_queue_entry_s::__anon74
CELL_RELAY	or.h	866;"	d
CELL_RELAY_EARLY	or.h	872;"	d
CELL_VERSIONS	or.h	870;"	d
CELL_VPADDING	or.h	876;"	d
CERTEXT_FLAG_AFFECTS_VALIDATION	ed25519_cert.h	13;"	d
CERTEXT_SIGNED_WITH_KEY	ed25519_cert.h	12;"	d
CERTIFICATE_MEMBERS	routerparse.c	380;"	d	file:
CERTTYPE_ED_ID_SIGN	link_handshake.h	15;"	d
CERTTYPE_ED_SIGN_AUTH	link_handshake.h	17;"	d
CERTTYPE_ED_SIGN_LINK	link_handshake.h	16;"	d
CERTTYPE_RSA1024_ID_AUTH	link_handshake.h	14;"	d
CERTTYPE_RSA1024_ID_EDID	link_handshake.h	18;"	d
CERTTYPE_RSA1024_ID_ID	link_handshake.h	13;"	d
CERTTYPE_RSA1024_ID_LINK	link_handshake.h	12;"	d
CERT_FLAG_INCLUDE_SIGNING_KEY	torcert.h	16;"	d
CERT_TYPE_ID_SIGNING	torcert.h	11;"	d
CERT_TYPE_ONION_ID	torcert.h	14;"	d
CERT_TYPE_SIGNING_AUTH	torcert.h	13;"	d
CERT_TYPE_SIGNING_LINK	torcert.h	12;"	d
CFG_AUTO_PORT	or.h	3407;"	d
CHANNELTLS_PRIVATE	channeltls.c	16;"	d	file:
CHANNEL_CAN_HANDLE_CELLS	channel.h	530;"	d
CHANNEL_CLOSE_FOR_ERROR	channel.h	/^    CHANNEL_CLOSE_FOR_ERROR$/;"	e	enum:channel_s::__anon71
CHANNEL_CLOSE_FROM_BELOW	channel.h	/^    CHANNEL_CLOSE_FROM_BELOW,$/;"	e	enum:channel_s::__anon71
CHANNEL_CLOSE_REQUESTED	channel.h	/^    CHANNEL_CLOSE_REQUESTED,$/;"	e	enum:channel_s::__anon71
CHANNEL_CONDEMNED	channel.h	527;"	d
CHANNEL_FINISHED	channel.h	524;"	d
CHANNEL_IS_CLOSED	channel.h	511;"	d
CHANNEL_IS_CLOSING	channel.h	519;"	d
CHANNEL_IS_ERROR	channel.h	521;"	d
CHANNEL_IS_MAINT	channel.h	517;"	d
CHANNEL_IS_OPEN	channel.h	515;"	d
CHANNEL_IS_OPENING	channel.h	513;"	d
CHANNEL_LISTENER_CLOSE_FOR_ERROR	channel.h	/^    CHANNEL_LISTENER_CLOSE_FOR_ERROR$/;"	e	enum:channel_listener_s::__anon73
CHANNEL_LISTENER_CLOSE_FROM_BELOW	channel.h	/^    CHANNEL_LISTENER_CLOSE_FROM_BELOW,$/;"	e	enum:channel_listener_s::__anon73
CHANNEL_LISTENER_CLOSE_REQUESTED	channel.h	/^    CHANNEL_LISTENER_CLOSE_REQUESTED,$/;"	e	enum:channel_listener_s::__anon73
CHANNEL_LISTENER_NOT_CLOSING	channel.h	/^    CHANNEL_LISTENER_NOT_CLOSING = 0,$/;"	e	enum:channel_listener_s::__anon73
CHANNEL_LISTENER_STATE_CLOSED	or.h	/^  CHANNEL_LISTENER_STATE_CLOSED = 0,$/;"	e	enum:__anon8
CHANNEL_LISTENER_STATE_CLOSING	or.h	/^  CHANNEL_LISTENER_STATE_CLOSING,$/;"	e	enum:__anon8
CHANNEL_LISTENER_STATE_ERROR	or.h	/^  CHANNEL_LISTENER_STATE_ERROR,$/;"	e	enum:__anon8
CHANNEL_LISTENER_STATE_LAST	or.h	/^  CHANNEL_LISTENER_STATE_LAST$/;"	e	enum:__anon8
CHANNEL_LISTENER_STATE_LISTENING	or.h	/^  CHANNEL_LISTENER_STATE_LISTENING,$/;"	e	enum:__anon8
CHANNEL_NOT_CLOSING	channel.h	/^    CHANNEL_NOT_CLOSING = 0,$/;"	e	enum:channel_s::__anon71
CHANNEL_PRIVATE_	channel.c	17;"	d	file:
CHANNEL_STATE_CLOSED	or.h	/^  CHANNEL_STATE_CLOSED = 0,$/;"	e	enum:__anon7
CHANNEL_STATE_CLOSING	or.h	/^  CHANNEL_STATE_CLOSING,$/;"	e	enum:__anon7
CHANNEL_STATE_ERROR	or.h	/^  CHANNEL_STATE_ERROR,$/;"	e	enum:__anon7
CHANNEL_STATE_LAST	or.h	/^  CHANNEL_STATE_LAST$/;"	e	enum:__anon7
CHANNEL_STATE_MAINT	or.h	/^  CHANNEL_STATE_MAINT,$/;"	e	enum:__anon7
CHANNEL_STATE_OPEN	or.h	/^  CHANNEL_STATE_OPEN,$/;"	e	enum:__anon7
CHANNEL_STATE_OPENING	or.h	/^  CHANNEL_STATE_OPENING,$/;"	e	enum:__anon7
CHECK_DEFAULT	config.c	3729;"	d	file:
CHECK_DEFAULT	config.c	3760;"	d	file:
CHECK_DESCRIPTOR_INTERVAL	main.c	1550;"	d	file:
CHECK_EQ	dirvote.c	706;"	d	file:
CHECK_EXPIRED_NS_INTERVAL	main.c	1451;"	d	file:
CHECK_FOR_COMPRESSION_BOMB_AFTER	torgzip.c	133;"	d	file:
CHECK_LENGTH	routerparse.c	4460;"	d	file:
CHECK_LENGTH	routerparse.c	4498;"	d	file:
CHECK_PRINTF	compat.h	65;"	d
CHECK_PRINTF	compat.h	68;"	d
CHECK_REMAINING	ed25519_cert.c	24;"	d	file:
CHECK_REMAINING	link_handshake.c	24;"	d	file:
CHECK_REMAINING	pwbox.c	24;"	d	file:
CHECK_SCANF	compat.h	71;"	d
CHECK_SCANF	compat.h	74;"	d
CHECK_SENTINEL	memarea.c	52;"	d	file:
CHECK_SENTINEL	memarea.c	60;"	d	file:
CHECK_STRTOX_RESULT	util.c	1207;"	d	file:
CHECK_V3_CERTIFICATE_INTERVAL	main.c	1435;"	d	file:
CHECK_WRITE_STATS_INTERVAL	main.c	1458;"	d	file:
CHILD_STATE_CLOSEFD	util.c	4507;"	d	file:
CHILD_STATE_DUPERR	util.c	4505;"	d	file:
CHILD_STATE_DUPIN	util.c	4506;"	d	file:
CHILD_STATE_DUPOUT	util.c	4504;"	d	file:
CHILD_STATE_EXEC	util.c	4508;"	d	file:
CHILD_STATE_FAILEXEC	util.c	4509;"	d	file:
CHILD_STATE_FORK	util.c	4503;"	d	file:
CHILD_STATE_INIT	util.c	4500;"	d	file:
CHILD_STATE_MAXFD	util.c	4502;"	d	file:
CHILD_STATE_PIPE	util.c	4501;"	d	file:
CHOSEN_ON_DATE_SLOP	entrynodes.c	376;"	d	file:
CHUNK_ALLOC_SIZE	buffers.c	74;"	d	file:
CHUNK_HEADER_LEN	buffers.c	70;"	d	file:
CHUNK_HEADER_SIZE	memarea.c	97;"	d	file:
CHUNK_REMAINING_CAPACITY	buffers.c	/^CHUNK_REMAINING_CAPACITY(const chunk_t *chunk)$/;"	f	file:
CHUNK_SIZE	memarea.c	100;"	d	file:
CHUNK_SIZE_WITH_ALLOC	buffers.c	77;"	d	file:
CHUNK_WRITE_PTR	buffers.c	/^CHUNK_WRITE_PTR(chunk_t *chunk)$/;"	f	file:
CIPHER	tortls.c	713;"	d	file:
CIPHER	tortls.c	723;"	d	file:
CIPHERS_ERR	tortls.c	146;"	d	file:
CIPHERS_UNRESTRICTED	tortls.c	156;"	d	file:
CIPHERS_V1	tortls.c	148;"	d	file:
CIPHERS_V2	tortls.c	152;"	d	file:
CIPHER_IV_LEN	crypto.h	60;"	d
CIPHER_KEY_LEN	crypto.h	58;"	d
CIRCLAUNCH_IS_INTERNAL	circuituse.h	45;"	d
CIRCLAUNCH_NEED_CAPACITY	circuituse.h	42;"	d
CIRCLAUNCH_NEED_UPTIME	circuituse.h	40;"	d
CIRCLAUNCH_ONEHOP_TUNNEL	circuituse.h	38;"	d
CIRCUITBUILD_PRIVATE	circuitbuild.c	12;"	d	file:
CIRCUITBUILD_PRIVATE	circuitbuild.c	17;"	d	file:
CIRCUITLIST_PRIVATE	circuitlist.c	11;"	d	file:
CIRCUITSTATS_PRIVATE	circuitstats.c	7;"	d	file:
CIRCUIT_IS_ORCIRC	or.h	549;"	d
CIRCUIT_IS_ORIGIN	or.h	542;"	d
CIRCUIT_PURPOSE_CONTROLLER	or.h	525;"	d
CIRCUIT_PURPOSE_C_ESTABLISH_REND	or.h	502;"	d
CIRCUIT_PURPOSE_C_GENERAL	or.h	493;"	d
CIRCUIT_PURPOSE_C_INTRODUCE_ACKED	or.h	500;"	d
CIRCUIT_PURPOSE_C_INTRODUCE_ACK_WAIT	or.h	498;"	d
CIRCUIT_PURPOSE_C_INTRODUCING	or.h	495;"	d
CIRCUIT_PURPOSE_C_MAX_	or.h	512;"	d
CIRCUIT_PURPOSE_C_MEASURE_TIMEOUT	or.h	511;"	d
CIRCUIT_PURPOSE_C_REND_JOINED	or.h	509;"	d
CIRCUIT_PURPOSE_C_REND_READY	or.h	504;"	d
CIRCUIT_PURPOSE_C_REND_READY_INTRO_ACKED	or.h	507;"	d
CIRCUIT_PURPOSE_INTRO_POINT	or.h	464;"	d
CIRCUIT_PURPOSE_IS_CLIENT	or.h	538;"	d
CIRCUIT_PURPOSE_IS_ESTABLISHED_REND	or.h	545;"	d
CIRCUIT_PURPOSE_IS_ORIGIN	or.h	535;"	d
CIRCUIT_PURPOSE_MAX_	or.h	528;"	d
CIRCUIT_PURPOSE_MIN_	or.h	457;"	d
CIRCUIT_PURPOSE_OR	or.h	462;"	d
CIRCUIT_PURPOSE_OR_MAX_	or.h	469;"	d
CIRCUIT_PURPOSE_OR_MIN_	or.h	460;"	d
CIRCUIT_PURPOSE_PATH_BIAS_TESTING	or.h	527;"	d
CIRCUIT_PURPOSE_REND_ESTABLISHED	or.h	468;"	d
CIRCUIT_PURPOSE_REND_POINT_WAITING	or.h	466;"	d
CIRCUIT_PURPOSE_S_CONNECT_REND	or.h	519;"	d
CIRCUIT_PURPOSE_S_ESTABLISH_INTRO	or.h	514;"	d
CIRCUIT_PURPOSE_S_INTRO	or.h	517;"	d
CIRCUIT_PURPOSE_S_REND_JOINED	or.h	521;"	d
CIRCUIT_PURPOSE_TESTING	or.h	523;"	d
CIRCUIT_PURPOSE_UNKNOWN	or.h	531;"	d
CIRCUIT_STATE_BUILDING	or.h	448;"	d
CIRCUIT_STATE_CHAN_WAIT	or.h	453;"	d
CIRCUIT_STATE_ONIONSKIN_PENDING	or.h	450;"	d
CIRCUIT_STATE_OPEN	or.h	455;"	d
CIRCUIT_TIMEOUT_BEFORE_RECHECK_IP	circuitstats.c	1206;"	d	file:
CIRCWINDOW_INCREMENT	or.h	842;"	d
CIRCWINDOW_START	or.h	838;"	d
CIRCWINDOW_START_MAX	or.h	840;"	d
CIRCWINDOW_START_MIN	or.h	839;"	d
CIRC_ATTEMPT_NOTICE_INTERVAL	circpathbias.c	395;"	d	file:
CIRC_EVENT_BUILT	or.h	/^  CIRC_EVENT_BUILT    = 1,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_CLOSED	or.h	/^  CIRC_EVENT_CLOSED   = 4,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_EXTENDED	or.h	/^  CIRC_EVENT_EXTENDED = 2,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_FAILED	or.h	/^  CIRC_EVENT_FAILED   = 3,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_LAUNCHED	or.h	/^  CIRC_EVENT_LAUNCHED = 0,$/;"	e	enum:circuit_status_event_t
CIRC_ID_TYPE_HIGHER	or.h	/^  CIRC_ID_TYPE_HIGHER=1, \/**< Pick from 1<<15..1<<16-1. *\/$/;"	e	enum:__anon5
CIRC_ID_TYPE_LOWER	or.h	/^  CIRC_ID_TYPE_LOWER=0, \/**< Pick from 0..1<<15-1. *\/$/;"	e	enum:__anon5
CIRC_ID_TYPE_NEITHER	or.h	/^  CIRC_ID_TYPE_NEITHER=2$/;"	e	enum:__anon5
CIRC_MINOR_EVENT_CANNIBALIZED	or.h	/^  CIRC_MINOR_EVENT_CANNIBALIZED,$/;"	e	enum:circuit_status_minor_event_t
CIRC_MINOR_EVENT_PURPOSE_CHANGED	or.h	/^  CIRC_MINOR_EVENT_PURPOSE_CHANGED,$/;"	e	enum:circuit_status_minor_event_t
CLAMP	util.h	235;"	d
CLEAN_CACHES_INTERVAL	main.c	1528;"	d	file:
CLIENT_CIPHER_LIST	tortls.c	/^static const char CLIENT_CIPHER_LIST[] =$/;"	v	file:
CLIENT_IDLE_TIME_FOR_PRIORITY	connection.c	2594;"	d	file:
CL_PORT_ALLOW_EXTRA_LISTENADDR	config.c	5871;"	d	file:
CL_PORT_DFLT_GROUP_WRITABLE	config.c	5876;"	d	file:
CL_PORT_FORBID_NONLOCAL	config.c	5873;"	d	file:
CL_PORT_IS_UNIXSOCKET	config.c	5875;"	d	file:
CL_PORT_NO_STREAM_OPTIONS	config.c	5869;"	d	file:
CL_PORT_SERVER_OPTIONS	config.c	5872;"	d	file:
CL_PORT_TAKES_HOSTNAMES	config.c	5874;"	d	file:
CL_PORT_WARN_NONLOCAL	config.c	5870;"	d	file:
CMDLINE_ONLY_OPTIONS	config.c	/^} CMDLINE_ONLY_OPTIONS[] = {$/;"	v	typeref:struct:__anon125	file:
CMD_DUMP_CONFIG	or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon24::__anon25
CMD_HASH_PASSWORD	or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon24::__anon25
CMD_KEYGEN	or.h	/^    CMD_KEYGEN$/;"	e	enum:__anon24::__anon25
CMD_LIST_FINGERPRINT	or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon24::__anon25
CMD_RUN_TOR	or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon24::__anon25
CMD_RUN_UNITTESTS	or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon24::__anon25
CMD_VERIFY_CONFIG	or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon24::__anon25
CMP_EXACT	address.h	/^  CMP_EXACT,$/;"	e	enum:__anon4
CMP_SEMANTIC	address.h	/^  CMP_SEMANTIC,$/;"	e	enum:__anon4
COMPAT_PRIVATE	compat.c	26;"	d	file:
COMPILER_CLANG	ed25519-donna-portable-identify.h	42;"	d
COMPILER_GCC	ed25519-donna-portable-identify.h	33;"	d
COMPILER_GCC	ed25519-donna-portable-identify.h	35;"	d
COMPILER_INTEL	ed25519-donna-portable-identify.h	29;"	d
COMPILER_MSVC	ed25519-donna-portable-identify.h	26;"	d
COMPILER_PATHCC	ed25519-donna-portable-identify.h	39;"	d
COMPLAIN	config.c	2611;"	d	file:
COMPLAIN	config.c	2614;"	d	file:
COMPLAIN	config.c	3899;"	d	file:
CONCAT_ARGS	routerparse.c	277;"	d	file:
CONDITIONAL_CONSENSUS_FPR_LEN	directory.c	1086;"	d	file:
CONFDIR	orconfig.h	21;"	d
CONFIG_CHECK	confparse.h	96;"	d
CONFIG_LINE_APPEND	or.h	3386;"	d
CONFIG_LINE_CLEAR	or.h	3388;"	d
CONFIG_LINE_NORMAL	or.h	3383;"	d
CONFIG_PRIVATE	config.c	12;"	d	file:
CONFIG_TYPE_AUTOBOOL	confparse.h	/^  CONFIG_TYPE_AUTOBOOL,     \/**< A boolean+auto value, expressed 0 for false,$/;"	e	enum:config_type_t
CONFIG_TYPE_BOOL	confparse.h	/^  CONFIG_TYPE_BOOL,         \/**< A boolean value, expressed as 0 or 1. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_CSV	confparse.h	/^  CONFIG_TYPE_CSV,          \/**< A list of strings, separated by commas and$/;"	e	enum:config_type_t
CONFIG_TYPE_CSV_INTERVAL	confparse.h	/^  CONFIG_TYPE_CSV_INTERVAL, \/**< A list of strings, separated by commas and$/;"	e	enum:config_type_t
CONFIG_TYPE_DOUBLE	confparse.h	/^  CONFIG_TYPE_DOUBLE,       \/**< A floating-point value *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_FILENAME	confparse.h	/^  CONFIG_TYPE_FILENAME,     \/**< A filename: some prefixes get expanded. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_INT	confparse.h	/^  CONFIG_TYPE_INT,          \/**< Any integer. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_INTERVAL	confparse.h	/^  CONFIG_TYPE_INTERVAL,     \/**< A number of seconds, with optional units*\/$/;"	e	enum:config_type_t
CONFIG_TYPE_ISOTIME	confparse.h	/^  CONFIG_TYPE_ISOTIME,      \/**< An ISO-formatted time relative to UTC. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST	confparse.h	/^  CONFIG_TYPE_LINELIST,     \/**< Uninterpreted config lines *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST_S	confparse.h	/^  CONFIG_TYPE_LINELIST_S,   \/**< Uninterpreted, context-sensitive config lines,$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST_V	confparse.h	/^  CONFIG_TYPE_LINELIST_V,   \/**< Catch-all "virtual" option to summarize$/;"	e	enum:config_type_t
CONFIG_TYPE_MEMUNIT	confparse.h	/^  CONFIG_TYPE_MEMUNIT,      \/**< A number of bytes, with optional units*\/$/;"	e	enum:config_type_t
CONFIG_TYPE_MSEC_INTERVAL	confparse.h	/^  CONFIG_TYPE_MSEC_INTERVAL,\/**< A number of milliseconds, with optional$/;"	e	enum:config_type_t
CONFIG_TYPE_OBSOLETE	confparse.h	/^  CONFIG_TYPE_OBSOLETE,     \/**< Obsolete (ignored) option. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_PORT	confparse.h	/^  CONFIG_TYPE_PORT,         \/**< A port from 1...65535, 0 for "not set", or$/;"	e	enum:config_type_t
CONFIG_TYPE_ROUTERSET	confparse.h	/^  CONFIG_TYPE_ROUTERSET,    \/**< A list of router names, addrs, and fps,$/;"	e	enum:config_type_t
CONFIG_TYPE_STRING	confparse.h	/^  CONFIG_TYPE_STRING = 0,   \/**< An arbitrary string. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_UINT	confparse.h	/^  CONFIG_TYPE_UINT,         \/**< A non-negative integer less than MAX_INT *\/$/;"	e	enum:config_type_t
CONNECTION_EDGE_PRIVATE	connection_edge.c	11;"	d	file:
CONNECTION_PRIVATE	connection.c	13;"	d	file:
CONNECTION_PRIVATE	connection.c	21;"	d	file:
CONN_IS_CLOSED	connection.c	721;"	d	file:
CONN_IS_EDGE	or.h	271;"	d
CONN_LOG_PROTECT	or.h	4674;"	d
CONN_TYPE_AP	or.h	210;"	d
CONN_TYPE_AP_DNS_LISTENER	or.h	227;"	d
CONN_TYPE_AP_LISTENER	or.h	207;"	d
CONN_TYPE_AP_NATD_LISTENER	or.h	225;"	d
CONN_TYPE_AP_TRANS_LISTENER	or.h	222;"	d
CONN_TYPE_CONTROL	or.h	219;"	d
CONN_TYPE_CONTROL_LISTENER	or.h	217;"	d
CONN_TYPE_DIR	or.h	214;"	d
CONN_TYPE_DIR_LISTENER	or.h	212;"	d
CONN_TYPE_EXIT	or.h	205;"	d
CONN_TYPE_EXT_OR	or.h	230;"	d
CONN_TYPE_EXT_OR_LISTENER	or.h	232;"	d
CONN_TYPE_MAX_	or.h	234;"	d
CONN_TYPE_MIN_	or.h	198;"	d
CONN_TYPE_OR	or.h	203;"	d
CONN_TYPE_OR_LISTENER	or.h	200;"	d
CONSENSUS_FLAVORED_PREFIX	directory.c	2695;"	d	file:
CONSENSUS_MIN_SECONDS_BEFORE_CACHING	networkstatus.c	814;"	d	file:
CONSENSUS_PATH_EXIT	nodelist.h	/^  CONSENSUS_PATH_EXIT = 1$/;"	e	enum:__anon99
CONSENSUS_PATH_INTERNAL	nodelist.h	/^  CONSENSUS_PATH_INTERNAL = 0,$/;"	e	enum:__anon99
CONSENSUS_PATH_UNKNOWN	nodelist.h	/^  CONSENSUS_PATH_UNKNOWN = -1,$/;"	e	enum:__anon99
CONSENSUS_URL_PREFIX	directory.c	2694;"	d	file:
CONST_TO_ORIGIN_CIRCUIT	or.h	/^static INLINE const origin_circuit_t *CONST_TO_ORIGIN_CIRCUIT($/;"	f
CONST_TO_OR_CIRCUIT	or.h	/^static INLINE const or_circuit_t *CONST_TO_OR_CIRCUIT(const circuit_t *x)$/;"	f
CONTENT_LENGTH	buffers.c	1208;"	d	file:
CONTROL_CONNECTION_MAGIC	or.h	1204;"	d
CONTROL_CONN_STATE_MAX_	or.h	387;"	d
CONTROL_CONN_STATE_MIN_	or.h	381;"	d
CONTROL_CONN_STATE_NEEDAUTH	or.h	386;"	d
CONTROL_CONN_STATE_OPEN	or.h	383;"	d
CONTROL_EVENT_STATUS_BODY	control.c	5599;"	d	file:
CONTROL_PRIVATE	control.c	11;"	d	file:
COUNTER	aes.c	267;"	d	file:
COUNTER	aes.c	269;"	d	file:
COUNT_DISTINCT_DIGESTS	routerparse.c	1037;"	d	file:
CPATH_KEY_MATERIAL_LEN	or.h	2713;"	d
CPATH_STATE_AWAITING_KEYS	or.h	2687;"	d
CPATH_STATE_CLOSED	or.h	2686;"	d
CPATH_STATE_OPEN	or.h	2688;"	d
CPD_CHECK	util.h	395;"	d
CPD_CHECK_MODE_ONLY	util.h	398;"	d
CPD_CREATE	util.h	394;"	d
CPD_GROUP_OK	util.h	396;"	d
CPD_GROUP_READ	util.h	397;"	d
CPD_NONE	util.h	393;"	d
CPUWORKER_REPLY_MAGIC	cpuworker.c	106;"	d	file:
CPUWORKER_REQUEST_MAGIC	cpuworker.c	105;"	d	file:
CPU_64BITS	ed25519-donna-portable-identify.h	88;"	d
CPU_ALPHA	ed25519-donna-portable-identify.h	83;"	d
CPU_HPPA	ed25519-donna-portable-identify.h	79;"	d
CPU_IA64	ed25519-donna-portable-identify.h	57;"	d
CPU_POWER7	ed25519-donna-portable-identify.h	70;"	d
CPU_PPC	ed25519-donna-portable-identify.h	68;"	d
CPU_PPC32	ed25519-donna-portable-identify.h	74;"	d
CPU_PPC64	ed25519-donna-portable-identify.h	72;"	d
CPU_SPARC	ed25519-donna-portable-identify.h	61;"	d
CPU_SPARC64	ed25519-donna-portable-identify.h	63;"	d
CPU_X86	ed25519-donna-portable-identify.h	51;"	d
CPU_X86	ed25519-donna-portable-identify.h	53;"	d
CPU_X86	ed25519-donna-portable-identify.h	55;"	d
CPU_X86_64	ed25519-donna-portable-identify.h	49;"	d
CREATED_FAST_LEN	onion_fast.h	16;"	d
CREATE_ALWAYS	orconfig.h	1274;"	d
CREATE_FAST_LEN	onion_fast.h	15;"	d
CREATE_NEW	orconfig.h	1273;"	d
CREDENTIAL_LOG_LEVEL	compat.c	1923;"	d	file:
CRN_ALLOW_INVALID	or.h	/^  CRN_ALLOW_INVALID = 1<<3,$/;"	e	enum:__anon42
CRN_NEED_CAPACITY	or.h	/^  CRN_NEED_CAPACITY = 1<<1,$/;"	e	enum:__anon42
CRN_NEED_DESC	or.h	/^  CRN_NEED_DESC = 1<<6$/;"	e	enum:__anon42
CRN_NEED_GUARD	or.h	/^  CRN_NEED_GUARD = 1<<2,$/;"	e	enum:__anon42
CRN_NEED_UPTIME	or.h	/^  CRN_NEED_UPTIME = 1<<0,$/;"	e	enum:__anon42
CRN_WEIGHT_AS_EXIT	or.h	/^  CRN_WEIGHT_AS_EXIT = 1<<5,$/;"	e	enum:__anon42
CRYPTO_BYTES	api.h	3;"	d
CRYPTO_CURVE25519_PRIVATE	crypto_curve25519.c	6;"	d	file:
CRYPTO_DETERMINISTIC	api.h	4;"	d
CRYPTO_INT32_H	crypto_int32.h	4;"	d
CRYPTO_INT64_H	crypto_int64.h	4;"	d
CRYPTO_PRIVATE	crypto.c	28;"	d	file:
CRYPTO_PUBLICKEYBYTES	api.h	2;"	d
CRYPTO_PWBOX_H_INCLUDED_	crypto_pwbox.h	2;"	d
CRYPTO_S2K_PRIVATE	crypto_s2k.c	7;"	d	file:
CRYPTO_SECRETKEYBYTES	api.h	1;"	d
CRYPTO_dynlock_value	crypto.c	/^struct CRYPTO_dynlock_value {$/;"	s	file:
CRYPT_PATH_MAGIC	or.h	2632;"	d
CRYPT_VERIFYCONTEXT	orconfig.h	2010;"	d
CST_CHECK_AUTHORITY	routerparse.c	563;"	d	file:
CST_NO_CHECK_OBJTYPE	routerparse.c	564;"	d	file:
CURVE25519_BASE64_PADDED_LEN	crypto_curve25519.h	68;"	d
CURVE25519_OUTPUT_LEN	crypto_curve25519.h	15;"	d
CURVE25519_PUBKEY_LEN	crypto_curve25519.h	11;"	d
CURVE25519_SECKEY_LEN	crypto_curve25519.h	13;"	d
C_CLIENT_KEY	routerparse.c	/^  C_CLIENT_KEY,$/;"	e	enum:__anon97	file:
C_CLIENT_NAME	routerparse.c	/^  C_CLIENT_NAME,$/;"	e	enum:__anon97	file:
C_DESCRIPTOR_COOKIE	routerparse.c	/^  C_DESCRIPTOR_COOKIE,$/;"	e	enum:__anon97	file:
CellStatistics	or.h	/^  int CellStatistics;$/;"	m	struct:__anon24
Ch	ed25519-hash.h	70;"	d
ChangeServiceConfig2A_fn	ntmain.c	/^  BOOL (WINAPI *ChangeServiceConfig2A_fn)($/;"	m	struct:service_fns	file:
CircuitBuildAbandonedCount	or.h	/^  unsigned int CircuitBuildAbandonedCount;$/;"	m	struct:__anon30
CircuitBuildTimeout	or.h	/^  int CircuitBuildTimeout; \/**< Cull non-open circuits that were born at$/;"	m	struct:__anon24
CircuitIdleTimeout	or.h	/^  int CircuitIdleTimeout; \/**< Cull open clean circuits that were born$/;"	m	struct:__anon24
CircuitPriorityHalflife	or.h	/^  double CircuitPriorityHalflife;$/;"	m	struct:__anon24
CircuitStreamTimeout	or.h	/^  int CircuitStreamTimeout; \/**< If non-zero, detach streams from circuits$/;"	m	struct:__anon24
ClientDNSRejectInternalAddresses	or.h	/^  int ClientDNSRejectInternalAddresses;$/;"	m	struct:__anon24
ClientOnly	or.h	/^  int ClientOnly; \/**< Boolean: should we never evolve into a server role? *\/$/;"	m	struct:__anon24
ClientPreferIPv6ORPort	or.h	/^  int ClientPreferIPv6ORPort;$/;"	m	struct:__anon24
ClientRejectInternalAddresses	or.h	/^  int ClientRejectInternalAddresses;$/;"	m	struct:__anon24
ClientTransportPlugin	or.h	/^  config_line_t *ClientTransportPlugin; \/**< List of client$/;"	m	struct:__anon24
ClientUseIPv6	or.h	/^  int ClientUseIPv6;$/;"	m	struct:__anon24
CloseHSClientCircuitsImmediatelyOnTimeout	or.h	/^  int CloseHSClientCircuitsImmediatelyOnTimeout;$/;"	m	struct:__anon24
CloseHSServiceRendCircuitsImmediatelyOnTimeout	or.h	/^  int CloseHSServiceRendCircuitsImmediatelyOnTimeout;$/;"	m	struct:__anon24
CloseServiceHandle_fn	ntmain.c	/^  BOOL (WINAPI *CloseServiceHandle_fn)($/;"	m	struct:service_fns	file:
ConnDirectionStatistics	or.h	/^  int ConnDirectionStatistics;$/;"	m	struct:__anon24
ConnLimit	or.h	/^  int ConnLimit; \/**< Demanded minimum number of simultaneous connections. *\/$/;"	m	struct:__anon24
ConnLimit_	or.h	/^  int ConnLimit_; \/**< Maximum allowed number of simultaneous connections. *\/$/;"	m	struct:__anon24
ConsensusParams	or.h	/^  char *ConsensusParams;$/;"	m	struct:__anon24
ConstrainedSockSize	or.h	/^  uint64_t ConstrainedSockSize; \/**< Size of constrained buffers. *\/$/;"	m	struct:__anon24
ConstrainedSockets	or.h	/^  int ConstrainedSockets; \/**< Shrink xmit and recv socket buffers. *\/$/;"	m	struct:__anon24
ContactInfo	or.h	/^  char *ContactInfo; \/**< Contact info to be published in the directory. *\/$/;"	m	struct:__anon24
ControlListenAddress	or.h	/^  config_line_t *ControlListenAddress;$/;"	m	struct:__anon24
ControlPortFileGroupReadable	or.h	/^  int ControlPortFileGroupReadable;$/;"	m	struct:__anon24
ControlPortWriteToFile	or.h	/^  char *ControlPortWriteToFile;$/;"	m	struct:__anon24
ControlPort_lines	or.h	/^  config_line_t *ControlPort_lines; \/**< Ports to listen on for control$/;"	m	struct:__anon24
ControlPort_set	or.h	/^  unsigned int ControlPort_set : 1;$/;"	m	struct:__anon24
ControlService_fn	ntmain.c	/^  BOOL (WINAPI *ControlService_fn)($/;"	m	struct:service_fns	file:
ControlSocket	or.h	/^  config_line_t *ControlSocket; \/**< List of Unix Domain Sockets to listen on$/;"	m	struct:__anon24
ControlSocketsGroupWritable	or.h	/^  int ControlSocketsGroupWritable; \/**< Boolean: Are control sockets g+rw? *\/$/;"	m	struct:__anon24
CookieAuthFile	or.h	/^  char *CookieAuthFile; \/**< Filesystem location of a ControlPort$/;"	m	struct:__anon24
CookieAuthFileGroupReadable	or.h	/^  int CookieAuthFileGroupReadable; \/**< Boolean: Is the CookieAuthFile g+r? *\/$/;"	m	struct:__anon24
CookieAuthentication	or.h	/^  int CookieAuthentication; \/**< Boolean: do we enable cookie-based auth for$/;"	m	struct:__anon24
CountPrivateBandwidth	or.h	/^  int CountPrivateBandwidth;$/;"	m	struct:__anon24
CreateServiceA_fn	ntmain.c	/^  SC_HANDLE (WINAPI *CreateServiceA_fn)($/;"	m	struct:service_fns	file:
DBG_alloc	buffers.h	/^  size_t DBG_alloc;$/;"	m	struct:chunk_t
DBL_TO_U64	compat.h	104;"	d
DEAD_CERT_LIFETIME	routerlist.c	477;"	d	file:
DEAD_CERT_LIFETIME	routerlist.c	517;"	d	file:
DEAD_CIRCUIT_MAGIC	or.h	2751;"	d
DEBUGGING_CLOSE	sandbox.c	38;"	d	file:
DEBUG_AREA_ALLOC	routerparse.c	572;"	d	file:
DEBUG_CHUNK_ALLOC	buffers.h	107;"	d
DEBUG_ROUTER_DUMP_ROUTER_TO_STRING	router.c	2368;"	d	file:
DEBUG_SOCKET_COUNTING	compat.c	1249;"	d	file:
DECLARE_CTYPE_FN	compat.h	305;"	d
DECLARE_HANDLE	orconfig.h	1730;"	d
DECLARE_MAP_FNS	container.h	344;"	d
DECLARE_MAP_FNS	container.h	369;"	d
DECLARE_MAP_FNS	fp_pair.h	42;"	d
DECLARE_TYPED_DIGESTMAP_FNS	container.h	500;"	d
DEC_ONIONSKIN	or.h	/^  ENC_ONIONSKIN, DEC_ONIONSKIN,$/;"	e	enum:__anon41
DEFAULT_CLIENT_NICKNAME	or.h	892;"	d
DEFAULT_DNS_TTL	or.h	167;"	d
DEFAULT_EXIT_POLICY	policies.c	982;"	d	file:
DEFAULT_IF_MODIFIED_SINCE_DELAY	directory.c	453;"	d	file:
DEFAULT_LIFETIME	tor-gencert.c	38;"	d	file:
DEFAULT_MAX_BELIEVABLE_BANDWIDTH	routerlist.c	1855;"	d	file:
DEFAULT_MAX_FD	util.c	4397;"	d	file:
DEFAULT_MAX_UNMEASURED_BW_KB	dirvote.h	99;"	d
DEFAULT_MINIMUM_ENTITIES	orconfig.h	1908;"	d
DEFAULT_NUM_NTORS_PER_TAP	onion.c	193;"	d	file:
DEFAULT_ROUTE_LEN	or.h	4467;"	d
DEFINE_MAP_STRUCTS	container.c	1042;"	d	file:
DELAY_WHILE_FETCHING_CERTS	networkstatus.c	735;"	d	file:
DESCRIPTOR_FAILURE_RESET_INTERVAL	main.c	180;"	d	file:
DFLT_GUARD_LIFETIME	entrynodes.c	534;"	d	file:
DFLT_PATH_BIAS_DROP_GUARDS	circpathbias.c	116;"	d	file:
DFLT_PATH_BIAS_EXTREME_PCT	circpathbias.c	100;"	d	file:
DFLT_PATH_BIAS_EXTREME_USE_PCT	circpathbias.c	205;"	d	file:
DFLT_PATH_BIAS_MIN_CIRC	circpathbias.c	58;"	d	file:
DFLT_PATH_BIAS_MIN_USE	circpathbias.c	176;"	d	file:
DFLT_PATH_BIAS_NOTICE_PCT	circpathbias.c	71;"	d	file:
DFLT_PATH_BIAS_NOTICE_USE_PCT	circpathbias.c	189;"	d	file:
DFLT_PATH_BIAS_SCALE_THRESHOLD	circpathbias.c	133;"	d	file:
DFLT_PATH_BIAS_SCALE_USE_THRESHOLD	circpathbias.c	223;"	d	file:
DFLT_PATH_BIAS_WARN_PCT	circpathbias.c	84;"	d	file:
DFLT_PCT_USABLE_NEEDED	nodelist.c	1637;"	d	file:
DGV_BY_ID	dirvote.h	141;"	d
DGV_INCLUDE_PENDING	dirvote.h	142;"	d
DGV_INCLUDE_PREVIOUS	dirvote.h	143;"	d
DH_BYTES	crypto.h	64;"	d
DH_GENERATOR	crypto.c	1860;"	d	file:
DH_KEY_LEN	or.h	2715;"	d
DH_PRIVATE_KEY_BITS	crypto.c	1946;"	d	file:
DH_TYPE_CIRCUIT	crypto.h	237;"	d
DH_TYPE_REND	crypto.h	238;"	d
DH_TYPE_TLS	crypto.h	239;"	d
DIGEST256MAP_FOREACH	container.h	483;"	d
DIGEST256MAP_FOREACH_END	container.h	488;"	d
DIGEST256MAP_FOREACH_MODIFY	container.h	485;"	d
DIGEST256_LEN	crypto.h	56;"	d
DIGESTMAP_FOREACH	container.h	467;"	d
DIGESTMAP_FOREACH_END	container.h	481;"	d
DIGESTMAP_FOREACH_MODIFY	container.h	478;"	d
DIGEST_LEN	crypto.h	53;"	d
DIGEST_SHA1	crypto.h	/^  DIGEST_SHA1 = 0,$/;"	e	enum:__anon64
DIGEST_SHA256	crypto.h	/^  DIGEST_SHA256 = 1,$/;"	e	enum:__anon64
DIRCOLLATE_PRIVATE	dircollate.c	13;"	d	file:
DIRIND_ANONYMOUS	directory.h	/^  DIRIND_ANONYMOUS=1,$/;"	e	enum:__anon102
DIRIND_ANON_DIRPORT	directory.h	/^  DIRIND_ANON_DIRPORT,$/;"	e	enum:__anon102
DIRIND_DIRECT_CONN	directory.h	/^  DIRIND_DIRECT_CONN,$/;"	e	enum:__anon102
DIRIND_ONEHOP	directory.h	/^  DIRIND_ONEHOP=0,$/;"	e	enum:__anon102
DIROBJ_MAX_SIG_LEN	routerparse.h	19;"	d
DIRPORTFRONTPAGE_CACHE_LIFETIME	directory.c	110;"	d	file:
DIRREQ_CHANNEL_BUFFER_FLUSHED	or.h	/^  DIRREQ_CHANNEL_BUFFER_FLUSHED = 4$/;"	e	enum:__anon39
DIRREQ_CIRC_QUEUE_FLUSHED	or.h	/^  DIRREQ_CIRC_QUEUE_FLUSHED = 3,$/;"	e	enum:__anon39
DIRREQ_DIRECT	or.h	/^  DIRREQ_DIRECT = 0,$/;"	e	enum:__anon38
DIRREQ_END_CELL_SENT	or.h	/^  DIRREQ_END_CELL_SENT = 2,$/;"	e	enum:__anon39
DIRREQ_FLUSHING_DIR_CONN_FINISHED	or.h	/^  DIRREQ_FLUSHING_DIR_CONN_FINISHED = 1,$/;"	e	enum:__anon39
DIRREQ_IS_FOR_NETWORK_STATUS	or.h	/^  DIRREQ_IS_FOR_NETWORK_STATUS = 0,$/;"	e	enum:__anon39
DIRREQ_TIMEOUT	geoip.c	679;"	d	file:
DIRREQ_TUNNELED	or.h	/^  DIRREQ_TUNNELED = 1,$/;"	e	enum:__anon38
DIRSERV_BUFFER_MIN	dirserv.c	3431;"	d	file:
DIRSERV_PRIVATE	dirserv.c	6;"	d	file:
DIRVOTE_PRIVATE	dirvote.c	6;"	d	file:
DIR_503_TIMEOUT	routerlist.c	1449;"	d	file:
DIR_CONNECTION_MAGIC	or.h	1203;"	d
DIR_CONN_IS_SERVER	or.h	379;"	d
DIR_CONN_STATE_CLIENT_FINISHED	or.h	370;"	d
DIR_CONN_STATE_CLIENT_READING	or.h	368;"	d
DIR_CONN_STATE_CLIENT_SENDING	or.h	366;"	d
DIR_CONN_STATE_CONNECTING	or.h	364;"	d
DIR_CONN_STATE_MAX_	or.h	375;"	d
DIR_CONN_STATE_MIN_	or.h	362;"	d
DIR_CONN_STATE_SERVER_COMMAND_WAIT	or.h	372;"	d
DIR_CONN_STATE_SERVER_WRITING	or.h	374;"	d
DIR_PURPOSE_FETCH_CERTIFICATE	or.h	416;"	d
DIR_PURPOSE_FETCH_CONSENSUS	or.h	413;"	d
DIR_PURPOSE_FETCH_DETACHED_SIGNATURES	or.h	410;"	d
DIR_PURPOSE_FETCH_EXTRAINFO	or.h	398;"	d
DIR_PURPOSE_FETCH_MICRODESC	or.h	427;"	d
DIR_PURPOSE_FETCH_RENDDESC_V2	or.h	425;"	d
DIR_PURPOSE_FETCH_SERVERDESC	or.h	395;"	d
DIR_PURPOSE_FETCH_STATUS_VOTE	or.h	407;"	d
DIR_PURPOSE_HAS_FETCHED_RENDDESC_V2	or.h	392;"	d
DIR_PURPOSE_IS_UPLOAD	or.h	432;"	d
DIR_PURPOSE_MAX_	or.h	428;"	d
DIR_PURPOSE_MIN_	or.h	389;"	d
DIR_PURPOSE_SERVER	or.h	419;"	d
DIR_PURPOSE_UPLOAD_DIR	or.h	400;"	d
DIR_PURPOSE_UPLOAD_RENDDESC_V2	or.h	422;"	d
DIR_PURPOSE_UPLOAD_SIGNATURES	or.h	404;"	d
DIR_PURPOSE_UPLOAD_VOTE	or.h	402;"	d
DIR_REGEN_SLACK_TIME	dirserv.c	42;"	d	file:
DIR_REQ_GRANULARITY	geoip.c	948;"	d	file:
DIR_SPOOL_CACHED_DIR	or.h	/^    DIR_SPOOL_CACHED_DIR, DIR_SPOOL_NETWORKSTATUS,$/;"	e	enum:__anon10
DIR_SPOOL_EXTRA_BY_DIGEST	or.h	/^    DIR_SPOOL_EXTRA_BY_DIGEST, DIR_SPOOL_EXTRA_BY_FP,$/;"	e	enum:__anon10
DIR_SPOOL_EXTRA_BY_FP	or.h	/^    DIR_SPOOL_EXTRA_BY_DIGEST, DIR_SPOOL_EXTRA_BY_FP,$/;"	e	enum:__anon10
DIR_SPOOL_MICRODESC	or.h	/^    DIR_SPOOL_MICRODESC, \/* NOTE: if we add another entry, add another bit. *\/$/;"	e	enum:__anon10
DIR_SPOOL_NETWORKSTATUS	or.h	/^    DIR_SPOOL_CACHED_DIR, DIR_SPOOL_NETWORKSTATUS,$/;"	e	enum:__anon10
DIR_SPOOL_NONE	or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon10
DIR_SPOOL_SERVER_BY_DIGEST	or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon10
DIR_SPOOL_SERVER_BY_FP	or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon10
DISABLE_DISABLING_ED25519	dirserv.c	238;"	d	file:
DISABLE_ENGINES	aes.c	43;"	d	file:
DISABLE_ENGINES	crypto.c	72;"	d	file:
DISABLE_ENGINES	orconfig.h	706;"	d
DISABLE_SSL3_HANDSHAKE	tortls.c	104;"	d	file:
DL_SCHED_BRIDGE	or.h	/^  DL_SCHED_BRIDGE = 2,$/;"	e	enum:__anon13
DL_SCHED_CONSENSUS	or.h	/^  DL_SCHED_CONSENSUS = 1,$/;"	e	enum:__anon13
DL_SCHED_GENERIC	or.h	/^  DL_SCHED_GENERIC = 0,$/;"	e	enum:__anon13
DMALLOC_ARGS	util.h	88;"	d
DMALLOC_ARGS	util.h	91;"	d
DMALLOC_FN_ARGS	util.c	137;"	d	file:
DMALLOC_FN_ARGS	util.c	150;"	d	file:
DMALLOC_PARAMS	util.h	87;"	d
DMALLOC_PARAMS	util.h	90;"	d
DNSListenAddress	or.h	/^  config_line_t *DNSListenAddress;$/;"	m	struct:__anon24
DNSPort_lines	or.h	/^  config_line_t *DNSPort_lines; \/**< Ports to listen on for DNS requests. *\/$/;"	m	struct:__anon24
DNSPort_set	or.h	/^  unsigned int DNSPort_set : 1;$/;"	m	struct:__anon24
DNS_PRIVATE	dns.c	14;"	d	file:
DNS_USE_OPENSSL_FOR_ID	eventdns_tor.h	8;"	d
DOC	control.c	2453;"	d	file:
DONNA_INLINE	ed25519-donna-portable.h	17;"	d
DONNA_INLINE	ed25519-donna-portable.h	24;"	d
DONNA_NOINLINE	ed25519-donna-portable.h	18;"	d
DONNA_NOINLINE	ed25519-donna-portable.h	25;"	d
DOT	routerparse.c	4750;"	d	file:
DOT	routerparse.c	4823;"	d	file:
DOUBLE_0_REP_IS_ZERO_BYTES	orconfig.h	27;"	d
DOUBLE_ROUND	csiphash.c	82;"	d	file:
DOWNCAST	or.h	1775;"	d
DSMAP_FOREACH	routerlist.c	59;"	d	file:
DSR_BASE64	directory.h	77;"	d
DSR_DIGEST256	directory.h	78;"	d
DSR_HEX	directory.h	76;"	d
DSR_SORT_UNIQ	directory.h	79;"	d
DUMMY_DOWNLOAD_INTERVAL	routerlist.c	4652;"	d	file:
DUMP_AREA	routerparse.c	575;"	d	file:
DUMP_AREA	routerparse.c	582;"	d	file:
DataDirectory	or.h	/^  char *DataDirectory; \/**< OR only: where to store long-term data. *\/$/;"	m	struct:__anon24
DebugLogFile	or.h	/^  char *DebugLogFile; \/**< Where to send verbose log messages. *\/$/;"	m	struct:__anon24
DeleteService_fn	ntmain.c	/^  BOOL (WINAPI *DeleteService_fn)($/;"	m	struct:service_fns	file:
DirAllowPrivateAddresses	or.h	/^  int DirAllowPrivateAddresses;$/;"	m	struct:__anon24
DirAuthorities	or.h	/^  config_line_t *DirAuthorities;$/;"	m	struct:__anon24
DirAuthorityFallbackRate	or.h	/^  double DirAuthorityFallbackRate;$/;"	m	struct:__anon24
DirListenAddress	or.h	/^  config_line_t *DirListenAddress;$/;"	m	struct:__anon24
DirPolicy	or.h	/^  config_line_t *DirPolicy; \/**< Lists of dir policy components *\/$/;"	m	struct:__anon24
DirPortFrontPage	or.h	/^  char *DirPortFrontPage; \/**< This is a full path to a file with an html$/;"	m	struct:__anon24
DirPort_lines	or.h	/^  config_line_t *DirPort_lines;$/;"	m	struct:__anon24
DirPort_set	or.h	/^  unsigned int DirPort_set : 1;$/;"	m	struct:__anon24
DirReqStatistics	or.h	/^  int DirReqStatistics;$/;"	m	struct:__anon24
DirReqStatistics_option	or.h	/^  int DirReqStatistics_option;$/;"	m	struct:__anon24
DisableAllSwap	or.h	/^  int DisableAllSwap; \/**< Boolean: Attempt to call mlockall() on our$/;"	m	struct:__anon24
DisableDebuggerAttachment	or.h	/^  int DisableDebuggerAttachment; \/**< Currently Linux only specific attempt to$/;"	m	struct:__anon24
DisableIOCP	or.h	/^  int DisableIOCP;$/;"	m	struct:__anon24
DisableNetwork	or.h	/^  int DisableNetwork;$/;"	m	struct:__anon24
DisablePredictedCircuits	or.h	/^  int DisablePredictedCircuits; \/**< Boolean: does Tor preemptively$/;"	m	struct:__anon24
DownloadExtraInfo	or.h	/^  int DownloadExtraInfo;$/;"	m	struct:__anon24
E	compat.c	3248;"	d	file:
EARLY_CONSENSUS_NOTICE_SKEW	networkstatus.c	1425;"	d	file:
EARLY_WARNING_INTERVAL	relay.c	1606;"	d	file:
ED25519_32BIT	ed25519-donna.h	19;"	d
ED25519_64BIT	ed25519-donna.h	17;"	d
ED25519_64BIT_TABLES	curve25519-donna-64bit.h	412;"	d
ED25519_BASE64_LEN	crypto_format.h	26;"	d
ED25519_FN	ed25519_tor.c	35;"	d	file:
ED25519_FN2	ed25519_tor.c	34;"	d	file:
ED25519_FN3	ed25519_tor.c	33;"	d	file:
ED25519_GCC_32BIT_SSE_CHOOSE	ed25519-donna.h	27;"	d
ED25519_GCC_64BIT_32BIT_CHOOSE	ed25519-donna.h	37;"	d
ED25519_GCC_64BIT_SSE_CHOOSE	ed25519-donna.h	29;"	d
ED25519_GCC_64BIT_X86_CHOOSE	ed25519-donna.h	35;"	d
ED25519_H	ed25519.h	2;"	d
ED25519_NO_INLINE_ASM	ed25519-donna-portable.h	146;"	d
ED25519_PUBKEY_LEN	crypto_ed25519.h	11;"	d
ED25519_SECKEY_LEN	crypto_ed25519.h	12;"	d
ED25519_SECKEY_SEED_LEN	crypto_ed25519.h	13;"	d
ED25519_SIG_BASE64_LEN	crypto_format.h	33;"	d
ED25519_SIG_LEN	crypto_ed25519.h	14;"	d
ED25519_SSE2	ed25519-donna-portable.h	156;"	d
ED25519_SSE2	ed25519-donna-portable.h	157;"	d
ED25519_SUFFIX	ed25519_tor.c	30;"	d	file:
EDGE_CONNECTION_MAGIC	or.h	1201;"	d
EDGE_TO_ENTRY_CONN	or.h	/^static INLINE entry_connection_t *EDGE_TO_ENTRY_CONN(edge_connection_t *c)$/;"	f
ED_DESC_SIGNATURE_PREFIX	routerparse.h	94;"	d
ED_GCC_VERSION	curve25519-donna-helpers.h	9;"	d
EIMAP_FOREACH	routerlist.c	57;"	d	file:
ELSE_IF_NO_BUFFEREVENT	or.h	1875;"	d
ELSE_IF_NO_BUFFEREVENT	or.h	1881;"	d
ENCODE_CHAR	util_format.c	188;"	d	file:
ENCODE_CHAR	util_format.c	251;"	d	file:
ENCODE_N	util_format.c	199;"	d	file:
ENCODE_N	util_format.c	249;"	d	file:
ENCODE_PAD	util_format.c	202;"	d	file:
ENCODE_PAD	util_format.c	250;"	d	file:
ENC_KEY_HEADER	routerkeys.c	11;"	d	file:
ENC_KEY_TAG	routerkeys.c	12;"	d	file:
ENC_ONIONSKIN	or.h	/^  ENC_ONIONSKIN, DEC_ONIONSKIN,$/;"	e	enum:__anon41
END_CIRC_AT_ORIGIN	or.h	678;"	d
END_CIRC_REASON_CHANNEL_CLOSED	or.h	691;"	d
END_CIRC_REASON_CONNECTFAILED	or.h	689;"	d
END_CIRC_REASON_DESTROYED	or.h	694;"	d
END_CIRC_REASON_FINISHED	or.h	692;"	d
END_CIRC_REASON_FLAG_REMOTE	or.h	701;"	d
END_CIRC_REASON_HIBERNATING	or.h	687;"	d
END_CIRC_REASON_INTERNAL	or.h	685;"	d
END_CIRC_REASON_IP_NOW_REDUNDANT	or.h	669;"	d
END_CIRC_REASON_MAX_	or.h	696;"	d
END_CIRC_REASON_MEASUREMENT_EXPIRED	or.h	673;"	d
END_CIRC_REASON_MIN_	or.h	682;"	d
END_CIRC_REASON_NONE	or.h	683;"	d
END_CIRC_REASON_NOPATH	or.h	676;"	d
END_CIRC_REASON_NOSUCHSERVICE	or.h	695;"	d
END_CIRC_REASON_OR_IDENTITY	or.h	690;"	d
END_CIRC_REASON_REQUESTED	or.h	686;"	d
END_CIRC_REASON_RESOURCELIMIT	or.h	688;"	d
END_CIRC_REASON_TIMEOUT	or.h	693;"	d
END_CIRC_REASON_TORPROTOCOL	or.h	684;"	d
END_OF_ALIASES	tinytest.h	73;"	d
END_OF_GROUPS	tinytest.h	67;"	d
END_OF_TABLE	routerparse.c	254;"	d	file:
END_OF_TESTCASES	tinytest.h	60;"	d
END_OR_CONN_REASON_CONNRESET	or.h	587;"	d
END_OR_CONN_REASON_DONE	or.h	584;"	d
END_OR_CONN_REASON_IO_ERROR	or.h	590;"	d
END_OR_CONN_REASON_MISC	or.h	593;"	d
END_OR_CONN_REASON_NO_ROUTE	or.h	589;"	d
END_OR_CONN_REASON_OR_IDENTITY	or.h	586;"	d
END_OR_CONN_REASON_PT_MISSING	or.h	592;"	d
END_OR_CONN_REASON_REFUSED	or.h	585;"	d
END_OR_CONN_REASON_RESOURCE_LIMIT	or.h	591;"	d
END_OR_CONN_REASON_TIMEOUT	or.h	588;"	d
END_STREAM_REASON_CANT_ATTACH	or.h	620;"	d
END_STREAM_REASON_CANT_FETCH_ORIG_DEST	or.h	629;"	d
END_STREAM_REASON_CONNECTREFUSED	or.h	599;"	d
END_STREAM_REASON_CONNRESET	or.h	608;"	d
END_STREAM_REASON_DESTROY	or.h	601;"	d
END_STREAM_REASON_DONE	or.h	602;"	d
END_STREAM_REASON_ENTRYPOLICY	or.h	611;"	d
END_STREAM_REASON_EXITPOLICY	or.h	600;"	d
END_STREAM_REASON_FLAG_ALREADY_SENT_CLOSED	or.h	645;"	d
END_STREAM_REASON_FLAG_ALREADY_SOCKS_REPLIED	or.h	649;"	d
END_STREAM_REASON_FLAG_REMOTE	or.h	642;"	d
END_STREAM_REASON_HIBERNATING	or.h	605;"	d
END_STREAM_REASON_INTERNAL	or.h	606;"	d
END_STREAM_REASON_INVALID_NATD_DEST	or.h	632;"	d
END_STREAM_REASON_MASK	or.h	638;"	d
END_STREAM_REASON_MISC	or.h	597;"	d
END_STREAM_REASON_NET_UNREACHABLE	or.h	623;"	d
END_STREAM_REASON_NOROUTE	or.h	604;"	d
END_STREAM_REASON_NOTDIRECTORY	or.h	610;"	d
END_STREAM_REASON_PRIVATE_ADDR	or.h	635;"	d
END_STREAM_REASON_RESOLVEFAILED	or.h	598;"	d
END_STREAM_REASON_RESOURCELIMIT	or.h	607;"	d
END_STREAM_REASON_SOCKSPROTOCOL	or.h	626;"	d
END_STREAM_REASON_TIMEOUT	or.h	603;"	d
END_STREAM_REASON_TORPROTOCOL	or.h	609;"	d
ENTROPY_INTERVAL	main.c	1399;"	d	file:
ENTRYNODES_PRIVATE	entrynodes.c	15;"	d	file:
ENTRY_ASSUME_REACHABLE	entrynodes.h	/^  ENTRY_ASSUME_REACHABLE = 1<<2,$/;"	e	enum:__anon100
ENTRY_CONNECTION_MAGIC	or.h	1202;"	d
ENTRY_GUARD_REMOVE_AFTER	entrynodes.c	512;"	d	file:
ENTRY_NEED_CAPACITY	entrynodes.h	/^  ENTRY_NEED_CAPACITY = 1<<1,$/;"	e	enum:__anon100
ENTRY_NEED_DESCRIPTOR	entrynodes.h	/^  ENTRY_NEED_DESCRIPTOR = 1<<3,$/;"	e	enum:__anon100
ENTRY_NEED_UPTIME	entrynodes.h	/^  ENTRY_NEED_UPTIME = 1<<0,$/;"	e	enum:__anon100
ENTRY_TO_CONN	or.h	1780;"	d
ENTRY_TO_EDGE_CONN	or.h	1778;"	d
ENUM_BF	compat.h	107;"	d
ENUM_BF	compat.h	113;"	d
ENUM_VALS_ARE_SIGNED	orconfig.h	33;"	d
EOF_	routerparse.c	/^  EOF_,$/;"	e	enum:__anon97	file:
EPOCH_BIAS	compat.c	2928;"	d	file:
EPSILON	circuitmux_ewma.c	30;"	d	file:
EQ	routerparse.c	281;"	d	file:
ERR	channeltls.c	1759;"	d	file:
ERR	channeltls.c	1916;"	d	file:
ERR	channeltls.c	1940;"	d	file:
ERR	channeltls.c	2014;"	d	file:
ERR	channeltls.c	2038;"	d	file:
ERR	channeltls.c	2163;"	d	file:
ERRNO_IS_ACCEPT_EAGAIN	compat.h	559;"	d
ERRNO_IS_ACCEPT_EAGAIN	compat.h	581;"	d
ERRNO_IS_CONN_EINPROGRESS	compat.h	555;"	d
ERRNO_IS_CONN_EINPROGRESS	compat.h	580;"	d
ERRNO_IS_EADDRINUSE	compat.h	565;"	d
ERRNO_IS_EADDRINUSE	compat.h	585;"	d
ERRNO_IS_EAGAIN	compat.h	550;"	d
ERRNO_IS_EAGAIN	compat.h	574;"	d
ERRNO_IS_EAGAIN	compat.h	576;"	d
ERRNO_IS_EINPROGRESS	compat.h	552;"	d
ERRNO_IS_EINPROGRESS	compat.h	579;"	d
ERRNO_IS_EINTR	compat.h	567;"	d
ERRNO_IS_EINTR	compat.h	578;"	d
ERRNO_IS_RESOURCE_LIMIT	compat.h	562;"	d
ERRNO_IS_RESOURCE_LIMIT	compat.h	583;"	d
ERROR_FILE_NOT_FOUND	orconfig.h	2063;"	d
ERROR_PATH_NOT_FOUND	orconfig.h	2064;"	d
ERR_	routerparse.c	/^  ERR_,$/;"	e	enum:__anon97	file:
EVENT_ADDRMAP	control.h	165;"	d
EVENT_AUTHDIR_NEWDESCS	control.h	36;"	d
EVENT_BANDWIDTH_USED	control.h	157;"	d
EVENT_BUILDTIMEOUT_SET	control.h	178;"	d
EVENT_CAPACITY_	control.h	192;"	d
EVENT_CELL_STATS	control.h	182;"	d
EVENT_CIRCUIT_STATUS	control.h	154;"	d
EVENT_CIRCUIT_STATUS_MINOR	control.h	158;"	d
EVENT_CIRC_BANDWIDTH_USED	control.h	184;"	d
EVENT_CLIENTS_SEEN	control.h	176;"	d
EVENT_CONF_CHANGED	control.h	180;"	d
EVENT_CONN_BW	control.h	181;"	d
EVENT_DEBUG_MSG	control.h	160;"	d
EVENT_DESCCHANGED	control.h	168;"	d
EVENT_ERR_MSG	control.h	164;"	d
EVENT_GOT_SIGNAL	control.h	179;"	d
EVENT_GUARD	control.h	174;"	d
EVENT_HS_DESC	control.h	186;"	d
EVENT_HS_DESC_CONTENT	control.h	187;"	d
EVENT_INFO_MSG	control.h	161;"	d
EVENT_IS_INTERESTING	control.c	92;"	d	file:
EVENT_MASK_	control.h	201;"	d
EVENT_MASK_ABOVE_MIN_	control.h	205;"	d
EVENT_MASK_ALL_	control.h	210;"	d
EVENT_MASK_BELOW_MAX_	control.h	206;"	d
EVENT_MASK_NONE_	control.h	203;"	d
EVENT_MAX_	control.h	189;"	d
EVENT_MIN_	control.h	153;"	d
EVENT_NETWORK_LIVENESS	control.h	188;"	d
EVENT_NEWCONSENSUS	control.h	177;"	d
EVENT_NEW_DESC	control.h	159;"	d
EVENT_NOTICE_MSG	control.h	162;"	d
EVENT_NS	control.h	37;"	d
EVENT_OR_CONN_STATUS	control.h	156;"	d
EVENT_STATUS_CLIENT	control.h	171;"	d
EVENT_STATUS_GENERAL	control.h	173;"	d
EVENT_STATUS_SERVER	control.h	172;"	d
EVENT_STREAM_BANDWIDTH_USED	control.h	175;"	d
EVENT_STREAM_STATUS	control.h	155;"	d
EVENT_TB_EMPTY	control.h	183;"	d
EVENT_TRANSPORT_LAUNCHED	control.h	185;"	d
EVENT_WARN_MSG	control.h	163;"	d
EVUTIL_SOCKET_DEFINED	compat_libevent.h	21;"	d
EWMA_DEFAULT_HALFLIFE	circuitmux_ewma.c	25;"	d	file:
EWMA_POL_CIRC_DATA_MAGIC	circuitmux_ewma.c	103;"	d	file:
EWMA_POL_DATA_MAGIC	circuitmux_ewma.c	102;"	d	file:
EWMA_TICK_LEN	circuitmux_ewma.c	21;"	d	file:
EXIT_CONN_STATE_CONNECTING	or.h	327;"	d
EXIT_CONN_STATE_MAX_	or.h	332;"	d
EXIT_CONN_STATE_MIN_	or.h	323;"	d
EXIT_CONN_STATE_OPEN	or.h	329;"	d
EXIT_CONN_STATE_RESOLVEFAILED	or.h	331;"	d
EXIT_CONN_STATE_RESOLVING	or.h	325;"	d
EXIT_HOSTNAME	connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
EXIT_POLICY_ADD_DEFAULT	policies.h	23;"	d
EXIT_POLICY_IPV6_ENABLED	policies.h	21;"	d
EXIT_POLICY_REJECT_PRIVATE	policies.h	22;"	d
EXIT_PURPOSE_CONNECT	or.h	439;"	d
EXIT_PURPOSE_MAX_	or.h	442;"	d
EXIT_PURPOSE_MIN_	or.h	437;"	d
EXIT_PURPOSE_RESOLVE	or.h	441;"	d
EXIT_STATS_NUM_PORTS	rephist.c	1980;"	d	file:
EXIT_STATS_ROUND_UP_BYTES	rephist.c	1976;"	d	file:
EXIT_STATS_ROUND_UP_STREAMS	rephist.c	1978;"	d	file:
EXIT_STATS_TOP_N_PORTS	rephist.c	1982;"	d	file:
EXPBIAS	crypto_s2k.c	189;"	d	file:
EXPBIAS	crypto_s2k.c	192;"	d	file:
EXPIRES_SOON	routerkeys.c	683;"	d	file:
EXPIRES_SOON	routerkeys.c	986;"	d	file:
EXPOSE_CLEAN_BACKTRACE	backtrace.c	37;"	d	file:
EXPOSE_CLEAN_BACKTRACE	sandbox.c	74;"	d	file:
EXTRAINFO_DIRINFO	or.h	/^  EXTRAINFO_DIRINFO=1 << 5,$/;"	e	enum:__anon18
EXTRAINFO_STORE	or.h	/^  EXTRAINFO_STORE = 1$/;"	e	enum:store_type_t
EXT_ORPORT_H	ext_orport.h	8;"	d
EXT_ORPORT_PRIVATE	ext_orport.c	9;"	d	file:
EXT_OR_AUTHTYPE_SAFECOOKIE	ext_orport.c	105;"	d	file:
EXT_OR_CMD_BT_CONTROL	ext_orport.c	428;"	d	file:
EXT_OR_CMD_BT_DENY	ext_orport.c	427;"	d	file:
EXT_OR_CMD_BT_OKAY	ext_orport.c	426;"	d	file:
EXT_OR_CMD_HEADER_SIZE	buffers.c	1538;"	d	file:
EXT_OR_CMD_TB_DONE	ext_orport.c	421;"	d	file:
EXT_OR_CMD_TB_TRANSPORT	ext_orport.c	423;"	d	file:
EXT_OR_CMD_TB_USERADDR	ext_orport.c	422;"	d	file:
EXT_OR_CONN_ID_LEN	or.h	1441;"	d
EXT_OR_CONN_STATE_AUTH_MAX	or.h	314;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_AUTH_TYPE	or.h	309;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_HASH	or.h	313;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_NONCE	or.h	311;"	d
EXT_OR_CONN_STATE_FLUSHING	or.h	320;"	d
EXT_OR_CONN_STATE_IS_AUTHENTICATING	ext_orport.c	522;"	d	file:
EXT_OR_CONN_STATE_MAX_	or.h	321;"	d
EXT_OR_CONN_STATE_MIN_	or.h	306;"	d
EXT_OR_CONN_STATE_OPEN	or.h	317;"	d
EXT_OR_PORT_AUTH_CLIENT_TO_SERVER_CONST	ext_orport.c	101;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_HEADER	ext_orport.c	93;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_HEADER_LEN	ext_orport.c	91;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_LEN	ext_orport.c	89;"	d	file:
EXT_OR_PORT_AUTH_HASH_LEN	ext_orport.c	95;"	d	file:
EXT_OR_PORT_AUTH_NONCE_LEN	ext_orport.c	97;"	d	file:
EXT_OR_PORT_AUTH_SERVER_TO_CLIENT_CONST	ext_orport.c	99;"	d	file:
E_CASE	reasons.c	152;"	d	file:
E_CASE	reasons.c	155;"	d	file:
EnforceDistinctSubnets	or.h	/^  int EnforceDistinctSubnets; \/**< If true, don't allow multiple routers in the$/;"	m	struct:__anon24
EntryGuards	or.h	/^  config_line_t *EntryGuards;$/;"	m	struct:__anon30
EntryNodes	or.h	/^  routerset_t *EntryNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon24
EntryStatistics	or.h	/^  int EntryStatistics;$/;"	m	struct:__anon24
ExcludeExitNodes	or.h	/^  routerset_t *ExcludeExitNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon24
ExcludeExitNodesUnion_	or.h	/^  routerset_t *ExcludeExitNodesUnion_;$/;"	m	struct:__anon24
ExcludeNodes	or.h	/^  routerset_t *ExcludeNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon24
ExcludeSingleHopRelays	or.h	/^  int ExcludeSingleHopRelays;$/;"	m	struct:__anon24
ExitNodes	or.h	/^  routerset_t *ExitNodes; \/**< Structure containing nicknames, digests,$/;"	m	struct:__anon24
ExitPolicy	or.h	/^  config_line_t *ExitPolicy; \/**< Lists of exit policy components. *\/$/;"	m	struct:__anon24
ExitPolicyRejectPrivate	or.h	/^  int ExitPolicyRejectPrivate; \/**< Should we not exit to local addresses? *\/$/;"	m	struct:__anon24
ExitPortStatistics	or.h	/^  int ExitPortStatistics;$/;"	m	struct:__anon24
ExitRelay	or.h	/^  int ExitRelay;$/;"	m	struct:__anon24
ExtORPortCookieAuthFile	or.h	/^  char *ExtORPortCookieAuthFile; \/**< Filesystem location of Extended$/;"	m	struct:__anon24
ExtORPortCookieAuthFileGroupReadable	or.h	/^  int ExtORPortCookieAuthFileGroupReadable; \/**< Boolean: Is the$/;"	m	struct:__anon24
ExtORPort_lines	or.h	/^  config_line_t *ExtORPort_lines;$/;"	m	struct:__anon24
ExtORPort_set	or.h	/^  unsigned int ExtORPort_set : 1;$/;"	m	struct:__anon24
ExtendAllowPrivateAddresses	or.h	/^  int ExtendAllowPrivateAddresses;$/;"	m	struct:__anon24
ExtraInfoStatistics	or.h	/^  int ExtraInfoStatistics;$/;"	m	struct:__anon24
ExtraLines	or.h	/^  config_line_t *ExtraLines;$/;"	m	struct:__anon30
F	curve25519-donna-32bit.h	417;"	d
F	curve25519-donna-32bit.h	430;"	d
F	curve25519-donna-32bit.h	508;"	d
F	curve25519-donna-32bit.h	526;"	d
F	curve25519-donna-64bit.h	298;"	d
F	curve25519-donna-sse2.h	1013;"	d
F	curve25519-donna-sse2.h	1031;"	d
F	curve25519-donna.c	436;"	d	file:
F	curve25519-donna.c	451;"	d	file:
F	curve25519-donna.c	604;"	d	file:
F	curve25519-donna.c	621;"	d	file:
FAIL	routerkeys.c	669;"	d	file:
FAIL	routerkeys.c	953;"	d	file:
FAST_GUARD_STATE_FLUSH_TIME	entrynodes.c	1481;"	d	file:
FAST_RETRY_DESCRIPTOR_INTERVAL	router.c	2122;"	d	file:
FD_SETSIZE	orconfig.h	2281;"	d
FE_H	fe.h	2;"	d
FIFO_READ_MAX	util.c	3046;"	d	file:
FIFO_READ_MAX	util.c	3147;"	d	file:
FILE	orconfig.h	/^typedef struct _iobuf FILE;$/;"	t	typeref:struct:_iobuf
FILE_ACTION_ADDED	orconfig.h	1243;"	d
FILE_ACTION_MODIFIED	orconfig.h	1245;"	d
FILE_ACTION_REMOVED	orconfig.h	1244;"	d
FILE_ACTION_RENAMED_NEW_NAME	orconfig.h	1247;"	d
FILE_ACTION_RENAMED_OLD_NAME	orconfig.h	1246;"	d
FILE_ATTRIBUTE_ARCHIVE	orconfig.h	1222;"	d
FILE_ATTRIBUTE_COMPRESSED	orconfig.h	1228;"	d
FILE_ATTRIBUTE_DEVICE	orconfig.h	1223;"	d
FILE_ATTRIBUTE_DIRECTORY	orconfig.h	1221;"	d
FILE_ATTRIBUTE_ENCRYPTED	orconfig.h	1231;"	d
FILE_ATTRIBUTE_HIDDEN	orconfig.h	1219;"	d
FILE_ATTRIBUTE_INTEGRITY_STREAM	orconfig.h	1232;"	d
FILE_ATTRIBUTE_NORMAL	orconfig.h	1224;"	d
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED	orconfig.h	1230;"	d
FILE_ATTRIBUTE_NO_SCRUB_DATA	orconfig.h	1234;"	d
FILE_ATTRIBUTE_OFFLINE	orconfig.h	1229;"	d
FILE_ATTRIBUTE_READONLY	orconfig.h	1218;"	d
FILE_ATTRIBUTE_REPARSE_POINT	orconfig.h	1227;"	d
FILE_ATTRIBUTE_SPARSE_FILE	orconfig.h	1226;"	d
FILE_ATTRIBUTE_SYSTEM	orconfig.h	1220;"	d
FILE_ATTRIBUTE_TEMPORARY	orconfig.h	1225;"	d
FILE_ATTRIBUTE_VIRTUAL	orconfig.h	1233;"	d
FILE_CASE_PRESERVED_NAMES	orconfig.h	1251;"	d
FILE_CASE_SENSITIVE_SEARCH	orconfig.h	1250;"	d
FILE_FILE_COMPRESSION	orconfig.h	1254;"	d
FILE_INVALID_FILE_ID	orconfig.h	1271;"	d
FILE_MAP_ALL_ACCESS	orconfig.h	2061;"	d
FILE_MAP_READ	orconfig.h	2060;"	d
FILE_MAP_WRITE	orconfig.h	2059;"	d
FILE_NAMED_STREAMS	orconfig.h	1262;"	d
FILE_NOTIFY_CHANGE_ATTRIBUTES	orconfig.h	1237;"	d
FILE_NOTIFY_CHANGE_CREATION	orconfig.h	1241;"	d
FILE_NOTIFY_CHANGE_DIR_NAME	orconfig.h	1236;"	d
FILE_NOTIFY_CHANGE_FILE_NAME	orconfig.h	1235;"	d
FILE_NOTIFY_CHANGE_LAST_ACCESS	orconfig.h	1240;"	d
FILE_NOTIFY_CHANGE_LAST_WRITE	orconfig.h	1239;"	d
FILE_NOTIFY_CHANGE_SECURITY	orconfig.h	1242;"	d
FILE_NOTIFY_CHANGE_SIZE	orconfig.h	1238;"	d
FILE_PERSISTENT_ACLS	orconfig.h	1253;"	d
FILE_READ_ONLY_VOLUME	orconfig.h	1263;"	d
FILE_SEQUENTIAL_WRITE_ONCE	orconfig.h	1264;"	d
FILE_SHARE_DELETE	orconfig.h	1217;"	d
FILE_SHARE_READ	orconfig.h	1215;"	d
FILE_SHARE_WRITE	orconfig.h	1216;"	d
FILE_SUPPORTS_ENCRYPTION	orconfig.h	1261;"	d
FILE_SUPPORTS_EXTENDED_ATTRIBUTES	orconfig.h	1267;"	d
FILE_SUPPORTS_HARD_LINKS	orconfig.h	1266;"	d
FILE_SUPPORTS_INTEGRITY_STREAMS	orconfig.h	1270;"	d
FILE_SUPPORTS_OBJECT_IDS	orconfig.h	1260;"	d
FILE_SUPPORTS_OPEN_BY_FILE_ID	orconfig.h	1268;"	d
FILE_SUPPORTS_REMOTE_STORAGE	orconfig.h	1258;"	d
FILE_SUPPORTS_REPARSE_POINTS	orconfig.h	1257;"	d
FILE_SUPPORTS_SPARSE_FILES	orconfig.h	1256;"	d
FILE_SUPPORTS_TRANSACTIONS	orconfig.h	1265;"	d
FILE_SUPPORTS_USN_JOURNAL	orconfig.h	1269;"	d
FILE_UNICODE_ON_DISK	orconfig.h	1252;"	d
FILE_VOLUME_IS_COMPRESSED	orconfig.h	1259;"	d
FILE_VOLUME_QUOTAS	orconfig.h	1255;"	d
FINGERPRINT_LEN	crypto.h	81;"	d
FIOASYNC	orconfig.h	1613;"	d
FIONBIO	orconfig.h	1612;"	d
FIONREAD	orconfig.h	1611;"	d
FLAGS	address.c	1374;"	d	file:
FLAV_MICRODESC	or.h	/^  FLAV_MICRODESC = 1,$/;"	e	enum:__anon16
FLAV_NS	or.h	/^  FLAV_NS = 0,$/;"	e	enum:__anon16
FLEXIBLE_ARRAY_MEMBER	orconfig.h	42;"	d
FN_DIR	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon106
FN_EMPTY	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon106
FN_ERROR	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon106
FN_FILE	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon106
FN_NOENT	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon106
FORCE_PASSPHRASE_AUTO	or.h	/^    FORCE_PASSPHRASE_AUTO=0,$/;"	e	enum:__anon24::__anon29
FORCE_PASSPHRASE_OFF	or.h	/^    FORCE_PASSPHRASE_OFF$/;"	e	enum:__anon24::__anon29
FORCE_PASSPHRASE_ON	or.h	/^    FORCE_PASSPHRASE_ON,$/;"	e	enum:__anon24::__anon29
FORCE_REGENERATE_DESCRIPTOR_INTERVAL	router.c	2118;"	d	file:
FORMAT_MESSAGE_ALLOCATE_BUFFER	orconfig.h	2065;"	d
FORMAT_MESSAGE_ARGUMENT_ARRAY	orconfig.h	2071;"	d
FORMAT_MESSAGE_FROM_HMODULE	orconfig.h	2069;"	d
FORMAT_MESSAGE_FROM_STRING	orconfig.h	2068;"	d
FORMAT_MESSAGE_FROM_SYSTEM	orconfig.h	2070;"	d
FORMAT_MESSAGE_IGNORE_INSERTS	orconfig.h	2067;"	d
FORMAT_MESSAGE_MAX_WIDTH_MASK	orconfig.h	2072;"	d
FP_BADEXIT	dirserv.c	82;"	d	file:
FP_INVALID	dirserv.c	79;"	d	file:
FP_REJECT	dirserv.c	80;"	d	file:
FRACTION_OF_DATA_TO_RETAIN_ON_OOM	circuitlist.c	2044;"	d	file:
FULLNESS_PCT_THRESHOLD	status.c	128;"	d	file:
FULL_DIR_CACHE_LIFETIME	directory.c	108;"	d	file:
F_DUPFD	orconfig.h	940;"	d
F_GETFD	orconfig.h	941;"	d
F_GETFL	orconfig.h	943;"	d
F_GETLK	orconfig.h	946;"	d
F_GETOWN	orconfig.h	952;"	d
F_GETSIG	orconfig.h	956;"	d
F_RDLCK	orconfig.h	935;"	d
F_SETFD	orconfig.h	942;"	d
F_SETFL	orconfig.h	944;"	d
F_SETLK	orconfig.h	947;"	d
F_SETLKW	orconfig.h	948;"	d
F_SETOWN	orconfig.h	951;"	d
F_SETSIG	orconfig.h	955;"	d
F_UNLCK	orconfig.h	937;"	d
F_WRLCK	orconfig.h	936;"	d
FallbackDir	or.h	/^  config_line_t *FallbackDir;$/;"	m	struct:__anon24
FascistFirewall	or.h	/^  int FascistFirewall; \/**< Whether to prefer ORs reachable on open ports. *\/$/;"	m	struct:__anon24
FastFirstHopPK	or.h	/^  int FastFirstHopPK; \/**< If Tor believes it is safe, should we save a third$/;"	m	struct:__anon24
FetchDirInfoEarly	or.h	/^  int FetchDirInfoEarly;$/;"	m	struct:__anon24
FetchDirInfoExtraEarly	or.h	/^  int FetchDirInfoExtraEarly;$/;"	m	struct:__anon24
FetchHidServDescriptors	or.h	/^  int FetchHidServDescriptors; \/**< and hidden service descriptors? *\/$/;"	m	struct:__anon24
FetchServerDescriptors	or.h	/^  int FetchServerDescriptors; \/**< Do we fetch server descriptors as normal? *\/$/;"	m	struct:__anon24
FetchUselessDescriptors	or.h	/^  int FetchUselessDescriptors; \/**< Do we fetch non-running descriptors too? *\/$/;"	m	struct:__anon24
FirewallPorts	or.h	/^  smartlist_t *FirewallPorts; \/**< Which ports our firewall allows$/;"	m	struct:__anon24
G0	ed25519-hash.h	74;"	d
G1	ed25519-hash.h	75;"	d
GCC_VERSION	tortls.c	28;"	d	file:
GE	routerparse.c	279;"	d	file:
GENERATED_FILE_COMMENT	config.c	6851;"	d	file:
GENERATED_FILE_PREFIX	config.c	6847;"	d	file:
GENERIC_ALL	orconfig.h	1213;"	d
GENERIC_EXECUTE	orconfig.h	1212;"	d
GENERIC_READ	orconfig.h	1210;"	d
GENERIC_WRITE	orconfig.h	1211;"	d
GENSRV_DESCRIPTION	ntmain.c	31;"	d	file:
GENSRV_DISPLAYNAME	ntmain.c	30;"	d	file:
GENSRV_SERVICENAME	ntmain.c	29;"	d	file:
GENSRV_USERACCT	ntmain.c	33;"	d	file:
GEOIP_CLIENT_CONNECT	or.h	/^  GEOIP_CLIENT_CONNECT = 0,$/;"	e	enum:__anon36
GEOIP_CLIENT_NETWORKSTATUS	or.h	/^  GEOIP_CLIENT_NETWORKSTATUS = 1,$/;"	e	enum:__anon36
GEOIP_NS_RESPONSE_NUM	or.h	4784;"	d
GEOIP_PRIVATE	geoip.c	12;"	d	file:
GEOIP_REJECT_BUSY	or.h	/^  GEOIP_REJECT_BUSY = 5,$/;"	e	enum:__anon37
GEOIP_REJECT_NOT_ENOUGH_SIGS	or.h	/^  GEOIP_REJECT_NOT_ENOUGH_SIGS = 1,$/;"	e	enum:__anon37
GEOIP_REJECT_NOT_FOUND	or.h	/^  GEOIP_REJECT_NOT_FOUND = 3,$/;"	e	enum:__anon37
GEOIP_REJECT_NOT_MODIFIED	or.h	/^  GEOIP_REJECT_NOT_MODIFIED = 4,$/;"	e	enum:__anon37
GEOIP_REJECT_UNAVAILABLE	or.h	/^  GEOIP_REJECT_UNAVAILABLE = 2,$/;"	e	enum:__anon37
GEOIP_SUCCESS	or.h	/^  GEOIP_SUCCESS = 0,$/;"	e	enum:__anon37
GE_H	ge.h	2;"	d
GID_SIZE	ias_ra.h	93;"	d
GID_SIZE	remote_attestation_result.h	75;"	d
GRD_FLAG_ADDR_ONLY	channel.h	123;"	d
GRD_FLAG_ORIGINAL	channel.h	122;"	d
GREEDY_DESCRIPTOR_RETRY_INTERVAL	main.c	174;"	d	file:
GUARDFRACTION_DATE_STR	dirserv.c	2407;"	d	file:
GUARDFRACTION_GUARD	dirserv.c	2409;"	d	file:
GUARDFRACTION_INPUTS	dirserv.c	2408;"	d	file:
GUARDFRACTION_VERSION	dirserv.c	2410;"	d	file:
GZIP_METHOD	torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon66
GeoIPExcludeUnknown	or.h	/^  int GeoIPExcludeUnknown;$/;"	m	struct:__anon24
GeoIPFile	or.h	/^  char *GeoIPFile;$/;"	m	struct:__anon24
GeoIPv6File	or.h	/^  char *GeoIPv6File;$/;"	m	struct:__anon24
Group	or.h	/^  char *Group; \/**< Name of group to run Tor as. *\/$/;"	m	struct:__anon24
GuardLifetime	or.h	/^  int GuardLifetime;$/;"	m	struct:__anon24
GuardfractionFile	or.h	/^  char *GuardfractionFile;$/;"	m	struct:__anon24
H	ed25519-hash.h	/^	uint64_t H[8];$/;"	m	struct:sha512_state_t
HALF_ROUND	csiphash.c	76;"	d	file:
HASH_BLOCK_SIZE	ed25519-hash.h	5;"	d
HASH_DIGEST_SIZE	ed25519-hash.h	6;"	d
HAS_BUFFEREVENT	or.h	1870;"	d
HAS_BUFFEREVENT	or.h	1879;"	d
HAVE_ASSERT_H	orconfig.h	51;"	d
HAVE_DECL_MLOCKALL	orconfig.h	74;"	d
HAVE_DECL_SECUREZEROMEMORY	orconfig.h	78;"	d
HAVE_DECL__GETWCH	orconfig.h	82;"	d
HAVE_ERRNO_H	orconfig.h	93;"	d
HAVE_EVDNS_SET_DEFAULT_OUTGOING_BIND_ADDRESS	dns.c	37;"	d	file:
HAVE_EVENT2_BUFFEREVENT_SSL_H	orconfig.h	98;"	d
HAVE_EVENT2_DNS_H	orconfig.h	101;"	d
HAVE_EVENT2_EVENT_H	orconfig.h	104;"	d
HAVE_EVENT_BASE_LOOPEXIT	orconfig.h	692;"	d
HAVE_EVENT_GET_VERSION_NUMBER	orconfig.h	110;"	d
HAVE_EVUTIL_SECURE_RNG_INIT	orconfig.h	116;"	d
HAVE_EVUTIL_SECURE_RNG_SET_URANDOM_DEVICE_FILE	orconfig.h	120;"	d
HAVE_EXTERN_ENVIRON_DECLARED	orconfig.h	126;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	ed25519-donna-32bit-sse2.h	3;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	ed25519-donna-64bit-sse2.h	3;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	ed25519-donna-64bit-x86-32bit.h	3;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	ed25519-donna-64bit-x86.h	3;"	d
HAVE_IFADDRS_TO_SMARTLIST	address.h	29;"	d
HAVE_IFCONF_TO_SMARTLIST	address.h	37;"	d
HAVE_INT16_T	torint.h	47;"	d
HAVE_INT16_T	torint.h	88;"	d
HAVE_INT16_T	torint.h	99;"	d
HAVE_INT32_T	torint.h	108;"	d
HAVE_INT32_T	torint.h	137;"	d
HAVE_INT32_T	torint.h	50;"	d
HAVE_INT64_T	torint.h	149;"	d
HAVE_INT64_T	torint.h	163;"	d
HAVE_INT64_T	torint.h	180;"	d
HAVE_INT64_T	torint.h	53;"	d
HAVE_INT8_T	torint.h	44;"	d
HAVE_INT8_T	torint.h	77;"	d
HAVE_INTPTR_T	torint.h	68;"	d
HAVE_IP_ADAPTER_TO_SMARTLIST	address.h	33;"	d
HAVE_LIMITS_H	orconfig.h	195;"	d
HAVE_MACRO__FUNCTION__	orconfig.h	223;"	d
HAVE_MACRO__func__	orconfig.h	229;"	d
HAVE_MEMORY_H	orconfig.h	247;"	d
HAVE_NATIVE_UINT128	ed25519-donna-portable.h	36;"	d
HAVE_NATIVE_UINT128	ed25519-donna-portable.h	54;"	d
HAVE_NATIVE_UINT128	ed25519-donna-portable.h	57;"	d
HAVE_PERIODIC	compat_libevent.c	439;"	d	file:
HAVE_READPASSPHRASE	tor_readpassphrase.h	42;"	d
HAVE_SCRYPT	crypto_s2k.c	17;"	d	file:
HAVE_SSIZE_T	orconfig.h	318;"	d
HAVE_SSL_CIPHER_FIND	orconfig.h	321;"	d
HAVE_SSL_GET_CLIENT_CIPHERS	orconfig.h	324;"	d
HAVE_SSL_GET_CLIENT_RANDOM	orconfig.h	327;"	d
HAVE_SSL_GET_SERVER_RANDOM	orconfig.h	330;"	d
HAVE_SSL_SESSION_GET_MASTER_KEY	orconfig.h	333;"	d
HAVE_STDINT_H	orconfig.h	339;"	d
HAVE_STDLIB_H	orconfig.h	342;"	d
HAVE_STRINGS_H	orconfig.h	345;"	d
HAVE_STRING_H	orconfig.h	348;"	d
HAVE_STRTOULL	orconfig.h	366;"	d
HAVE_SYS_TYPES_H	orconfig.h	460;"	d
HAVE_TIME_H	orconfig.h	475;"	d
HAVE_UINT128	ed25519-donna-portable.h	39;"	d
HAVE_UINT128	ed25519-donna-portable.h	60;"	d
HAVE_UINT128	ed25519-donna-portable.h	77;"	d
HAVE_UINT16_T	torint.h	103;"	d
HAVE_UINT16_T	torint.h	59;"	d
HAVE_UINT16_T	torint.h	92;"	d
HAVE_UINT32_T	torint.h	112;"	d
HAVE_UINT32_T	torint.h	141;"	d
HAVE_UINT32_T	torint.h	153;"	d
HAVE_UINT32_T	torint.h	62;"	d
HAVE_UINT64_T	torint.h	167;"	d
HAVE_UINT64_T	torint.h	184;"	d
HAVE_UINT64_T	torint.h	65;"	d
HAVE_UINT8_T	torint.h	56;"	d
HAVE_UINT8_T	torint.h	81;"	d
HAVE_UINTPTR_T	torint.h	71;"	d
HAVE_USLEEP	orconfig.h	493;"	d
HEADER_VERSION	compat_libevent.c	351;"	d	file:
HEADER_VERSION	compat_libevent.c	353;"	d	file:
HEX_CHARACTERS	util.h	243;"	d
HEX_DIGEST256_LEN	crypto.h	85;"	d
HEX_DIGEST_LEN	crypto.h	83;"	d
HEX_ERRNO_SIZE	util.h	630;"	d
HIBERNATE_PRIVATE	hibernate.c	24;"	d	file:
HIBERNATE_STATE_DORMANT	hibernate.h	/^  HIBERNATE_STATE_DORMANT=4,$/;"	e	enum:__anon121
HIBERNATE_STATE_EXITING	hibernate.h	/^  HIBERNATE_STATE_EXITING=2,$/;"	e	enum:__anon121
HIBERNATE_STATE_INITIAL	hibernate.h	/^  HIBERNATE_STATE_INITIAL=5$/;"	e	enum:__anon121
HIBERNATE_STATE_LIVE	hibernate.h	/^  HIBERNATE_STATE_LIVE=1,$/;"	e	enum:__anon121
HIBERNATE_STATE_LOWBANDWIDTH	hibernate.h	/^  HIBERNATE_STATE_LOWBANDWIDTH=3,$/;"	e	enum:__anon121
HIBERNATION_PUBLICATION_SKEW	dirserv.c	815;"	d	file:
HIGH_COMPRESSION	torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon67
HKEY	orconfig.h	/^DECLARE_HANDLE(HKEY);$/;"	v
HMODULE	orconfig.h	/^DECLARE_HANDLE(HMODULE);$/;"	v
HTONL	TorSGX.cpp	1321;"	d	file:
HTONL	TorSGX.cpp	1329;"	d	file:
HTONS	TorSGX.cpp	1319;"	d	file:
HTONS	TorSGX.cpp	1326;"	d	file:
HTTPProxy	or.h	/^  char *HTTPProxy; \/**< hostname[:port] to use as http proxy, if any. *\/$/;"	m	struct:__anon24
HTTPProxyAddr	or.h	/^  tor_addr_t HTTPProxyAddr; \/**< Parsed IPv4 addr for http proxy, if any. *\/$/;"	m	struct:__anon24
HTTPProxyAuthenticator	or.h	/^  char *HTTPProxyAuthenticator; \/**< username:password string, if any. *\/$/;"	m	struct:__anon24
HTTPProxyPort	or.h	/^  uint16_t HTTPProxyPort; \/**< Parsed port for http proxy, if any. *\/$/;"	m	struct:__anon24
HTTPSProxy	or.h	/^  char *HTTPSProxy; \/**< hostname[:port] to use as https proxy, if any. *\/$/;"	m	struct:__anon24
HTTPSProxyAddr	or.h	/^  tor_addr_t HTTPSProxyAddr; \/**< Parsed addr for https proxy, if any. *\/$/;"	m	struct:__anon24
HTTPSProxyAuthenticator	or.h	/^  char *HTTPSProxyAuthenticator; \/**< username:password string, if any. *\/$/;"	m	struct:__anon24
HTTPSProxyPort	or.h	/^  uint16_t HTTPSProxyPort; \/**< Parsed port for https proxy, if any. *\/$/;"	m	struct:__anon24
HT_ASSERT_	ht.h	137;"	d
HT_ASSERT_	ht.h	139;"	d
HT_BUCKET_	ht.h	128;"	d
HT_BUCKET_NUM_	ht.h	124;"	d
HT_CLEAR	ht.h	60;"	d
HT_ELT_HASH_	ht.h	113;"	d
HT_ELT_HASH_	ht.h	118;"	d
HT_EMPTY	ht.h	42;"	d
HT_ENTRY	ht.h	29;"	d
HT_ENTRY	ht.h	34;"	d
HT_FIND	ht.h	53;"	d
HT_FIND_OR_INSERT_	ht.h	464;"	d
HT_FOI_INSERT_	ht.h	479;"	d
HT_FOREACH	ht.h	131;"	d
HT_GENERATE	ht.h	446;"	d
HT_GENERATE2	ht.h	321;"	d
HT_HEAD	ht.h	11;"	d
HT_H_INCLUDED_	ht.h	9;"	d
HT_INIT	ht.h	61;"	d
HT_INITIALIZER	ht.h	25;"	d
HT_INSERT	ht.h	54;"	d
HT_MEM_USAGE	ht.h	50;"	d
HT_NEXT	ht.h	58;"	d
HT_NEXT_RMV	ht.h	59;"	d
HT_PROTOTYPE	fp_pair.c	/^HT_PROTOTYPE(fp_pair_map_impl, fp_pair_map_entry_s, node,$/;"	f
HT_PROTOTYPE	ht.h	142;"	d
HT_PROTOTYPE	policies.c	/^HT_PROTOTYPE(policy_map, policy_map_ent_t, node, policy_hash,$/;"	f
HT_REMOVE	ht.h	56;"	d
HT_REPLACE	ht.h	55;"	d
HT_REP_IS_BAD_	ht.h	62;"	d
HT_SET_HASHVAL_	ht.h	111;"	d
HT_SET_HASHVAL_	ht.h	120;"	d
HT_SET_HASH_	ht.h	109;"	d
HT_SET_HASH_	ht.h	116;"	d
HT_SIZE	ht.h	46;"	d
HT_START	ht.h	57;"	d
HWND	orconfig.h	/^DECLARE_HANDLE(HWND);$/;"	v
HardwareAccel	or.h	/^  int HardwareAccel; \/**< Boolean: Should we enable OpenSSL hardware$/;"	m	struct:__anon24
HashedControlPassword	or.h	/^  config_line_t *HashedControlPassword;$/;"	m	struct:__anon24
HashedControlSessionPassword	or.h	/^  config_line_t *HashedControlSessionPassword;$/;"	m	struct:__anon24
HeartbeatPeriod	or.h	/^  int HeartbeatPeriod; \/**< Log heartbeat messages after this many seconds$/;"	m	struct:__anon24
HidServAuth	or.h	/^  config_line_t *HidServAuth; \/**< List of configuration lines for client-side$/;"	m	struct:__anon24
HiddenServiceStatistics	or.h	/^  int HiddenServiceStatistics;$/;"	m	struct:__anon24
I64_FORMAT	compat.h	242;"	d
I64_FORMAT	compat.h	245;"	d
I64_LITERAL	compat.h	228;"	d
I64_LITERAL	compat.h	235;"	d
I64_PRINTF_ARG	compat.h	226;"	d
I64_PRINTF_ARG	compat.h	233;"	d
I64_SCANF_ARG	compat.h	227;"	d
I64_SCANF_ARG	compat.h	234;"	d
IAS_PSE_ATTRIBUTES_INVALID	ias_ra.h	/^    IAS_PSE_ATTRIBUTES_INVALID,$/;"	e	enum:__anon90
IAS_PSE_DESC_TYPE_NOT_SUPPORTED	ias_ra.h	/^    IAS_PSE_DESC_TYPE_NOT_SUPPORTED,$/;"	e	enum:__anon90
IAS_PSE_ISVSVN_OUT_OF_DATE	ias_ra.h	/^    IAS_PSE_ISVSVN_OUT_OF_DATE,$/;"	e	enum:__anon90
IAS_PSE_MISCSELECT_INVALID	ias_ra.h	/^    IAS_PSE_MISCSELECT_INVALID,$/;"	e	enum:__anon90
IAS_PSE_MRSIGNER_INVALID	ias_ra.h	/^    IAS_PSE_MRSIGNER_INVALID,$/;"	e	enum:__anon90
IAS_PSE_OK	ias_ra.h	/^    IAS_PSE_OK,$/;"	e	enum:__anon90
IAS_PS_HW_CA_ID_INVALID	ias_ra.h	/^    IAS_PS_HW_CA_ID_INVALID,$/;"	e	enum:__anon90
IAS_PS_HW_GID_REVOKED	ias_ra.h	/^    IAS_PS_HW_GID_REVOKED,$/;"	e	enum:__anon90
IAS_PS_HW_PRIVKEY_RLVER_MISMATCH	ias_ra.h	/^    IAS_PS_HW_PRIVKEY_RLVER_MISMATCH,$/;"	e	enum:__anon90
IAS_PS_HW_PSDA_SVN_OUT_OF_DATE	ias_ra.h	/^    IAS_PS_HW_PSDA_SVN_OUT_OF_DATE,$/;"	e	enum:__anon90
IAS_PS_HW_SEC_INFO_INVALID	ias_ra.h	/^    IAS_PS_HW_SEC_INFO_INVALID,$/;"	e	enum:__anon90
IAS_PS_HW_SIG_RLVER_MISMATCH	ias_ra.h	/^    IAS_PS_HW_SIG_RLVER_MISMATCH,$/;"	e	enum:__anon90
IAS_QUOTE_GROUP_OUT_OF_DATE	ias_ra.h	/^    IAS_QUOTE_GROUP_OUT_OF_DATE,$/;"	e	enum:__anon89
IAS_QUOTE_GROUP_REVOKED	ias_ra.h	/^    IAS_QUOTE_GROUP_REVOKED,$/;"	e	enum:__anon89
IAS_QUOTE_KEY_REVOKED	ias_ra.h	/^    IAS_QUOTE_KEY_REVOKED,$/;"	e	enum:__anon89
IAS_QUOTE_OK	ias_ra.h	/^    IAS_QUOTE_OK,$/;"	e	enum:__anon89
IAS_QUOTE_SIGNATURE_INVALID	ias_ra.h	/^    IAS_QUOTE_SIGNATURE_INVALID,$/;"	e	enum:__anon89
IAS_QUOTE_SIGNATURE_REVOKED	ias_ra.h	/^    IAS_QUOTE_SIGNATURE_REVOKED,$/;"	e	enum:__anon89
IAS_QUOTE_SIGRL_VERSION_MISMATCH	ias_ra.h	/^    IAS_QUOTE_SIGRL_VERSION_MISMATCH,$/;"	e	enum:__anon89
IAS_REVOC_REASON_AA_COMPROMISE	ias_ra.h	/^    IAS_REVOC_REASON_AA_COMPROMISE,$/;"	e	enum:__anon91
IAS_REVOC_REASON_CA_COMPROMISED	ias_ra.h	/^    IAS_REVOC_REASON_CA_COMPROMISED,$/;"	e	enum:__anon91
IAS_REVOC_REASON_CERTIFICATE_HOLD	ias_ra.h	/^    IAS_REVOC_REASON_CERTIFICATE_HOLD,$/;"	e	enum:__anon91
IAS_REVOC_REASON_CESSATION_OF_OPERATION	ias_ra.h	/^    IAS_REVOC_REASON_CESSATION_OF_OPERATION,$/;"	e	enum:__anon91
IAS_REVOC_REASON_KEY_COMPROMISE	ias_ra.h	/^    IAS_REVOC_REASON_KEY_COMPROMISE,$/;"	e	enum:__anon91
IAS_REVOC_REASON_NONE	ias_ra.h	/^    IAS_REVOC_REASON_NONE,$/;"	e	enum:__anon91
IAS_REVOC_REASON_PRIVILEGE_WITHDRAWN	ias_ra.h	/^    IAS_REVOC_REASON_PRIVILEGE_WITHDRAWN,$/;"	e	enum:__anon91
IAS_REVOC_REASON_SUPERCEDED	ias_ra.h	/^    IAS_REVOC_REASON_SUPERCEDED,$/;"	e	enum:__anon91
IDENTITY_CERT_LIFETIME	tortls.c	95;"	d	file:
IDENTITY_KEY_BITS	tor-gencert.c	36;"	d	file:
IDLE_ONE_HOP_CIRC_TIMEOUT	circuituse.c	1350;"	d	file:
IDLE_OR_CONN_TIMEOUT_CANONICAL	connection_or.c	851;"	d	file:
IDLE_OR_CONN_TIMEOUT_NONCANONICAL	connection_or.c	850;"	d	file:
IDLE_TIMEOUT_WHILE_LEARNING	circuituse.c	1257;"	d	file:
IDXP	container.c	847;"	d	file:
IDX_OF_ITEM	container.c	854;"	d	file:
IFREQ_SIZE	address.c	1406;"	d	file:
IF_HAS_BUFFEREVENT	or.h	1871;"	d
IF_HAS_BUFFEREVENT	or.h	1880;"	d
IF_HAS_NO_BUFFEREVENT	or.h	1876;"	d
IF_HAS_NO_BUFFEREVENT	or.h	1882;"	d
IF_OPER_STATUS	orconfig.h	/^} IF_OPER_STATUS;$/;"	t	typeref:enum:__anon59
IMPLEMENT_MAP_FNS	container.c	1172;"	d	file:
IMPLEMENT_ORDER_FUNC	container.c	/^IMPLEMENT_ORDER_FUNC(find_nth_time, time_t)$/;"	f
IMPLEMENT_ORDER_FUNC	container.c	1426;"	d	file:
IMPOSSIBLE_TO_DOWNLOAD	or.h	1972;"	d
INADDR_ANY	orconfig.h	1002;"	d
INADDR_LOOPBACK	orconfig.h	1003;"	d
INET_NTOA_BUF_LEN	address.h	286;"	d
INIT_ED_KEY_CREATE	routerkeys.h	9;"	d
INIT_ED_KEY_EXPLICIT_FNAME	routerkeys.h	21;"	d
INIT_ED_KEY_EXTRA_STRONG	routerkeys.h	14;"	d
INIT_ED_KEY_INCLUDE_SIGNING_KEY_IN_CERT	routerkeys.h	15;"	d
INIT_ED_KEY_MISSING_SECRET_OK	routerkeys.h	12;"	d
INIT_ED_KEY_NEEDCERT	routerkeys.h	13;"	d
INIT_ED_KEY_NO_REPAIR	routerkeys.h	18;"	d
INIT_ED_KEY_OFFLINE_SECRET	routerkeys.h	20;"	d
INIT_ED_KEY_OMIT_SECRET	routerkeys.h	16;"	d
INIT_ED_KEY_REPLACE	routerkeys.h	10;"	d
INIT_ED_KEY_SPLIT	routerkeys.h	11;"	d
INIT_ED_KEY_SUGGEST_KEYGEN	routerkeys.h	19;"	d
INIT_ED_KEY_TRY_ENCRYPTED	routerkeys.h	17;"	d
INLINE	compat.h	79;"	d
INLINE	compat.h	81;"	d
INSTRUMENT_DOWNLOADS	or.h	21;"	d
INT	orconfig.h	/^typedef int INT;$/;"	t
INT16_MAX	torint.h	118;"	d
INT16_MIN	torint.h	121;"	d
INT32_MAX	torint.h	127;"	d
INT32_MIN	torint.h	130;"	d
INT64_HW_MEM	compat.c	3403;"	d	file:
INT64_HW_MEM	compat.c	3406;"	d	file:
INT64_MAX	torint.h	173;"	d
INT64_MAX	torint.h	190;"	d
INT64_MIN	torint.h	195;"	d
INTPTR_PRINTF_ARG	compat.h	250;"	d
INTPTR_PRINTF_ARG	compat.h	253;"	d
INTPTR_PRINTF_ARG	compat.h	256;"	d
INTPTR_T_FORMAT	compat.h	249;"	d
INTPTR_T_FORMAT	compat.h	252;"	d
INTPTR_T_FORMAT	compat.h	255;"	d
INTRO_CIRC_RETRY_PERIOD	rendservice.c	99;"	d	file:
INTRO_POINT_FAILURE_GENERIC	rendcommon.h	/^  INTRO_POINT_FAILURE_GENERIC     = 0,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_FAILURE_TIMEOUT	rendcommon.h	/^  INTRO_POINT_FAILURE_TIMEOUT     = 1,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_FAILURE_UNREACHABLE	rendcommon.h	/^  INTRO_POINT_FAILURE_UNREACHABLE = 2,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_LIFETIME_MAX_SECONDS	or.h	4904;"	d
INTRO_POINT_LIFETIME_MIN_SECONDS	or.h	4899;"	d
INTRO_POINT_MAX_LIFETIME_INTRODUCTIONS	or.h	4890;"	d
INTRO_POINT_MIN_LIFETIME_INTRODUCTIONS	or.h	4888;"	d
INT_MAX	torint.h	283;"	d
INT_MAX	torint.h	285;"	d
INVALID_FILE_SIZE	orconfig.h	2031;"	d
INVALID_HANDLE_VALUE	orconfig.h	2030;"	d
IOCPARM_MASK	orconfig.h	1598;"	d
IOC_IN	orconfig.h	1601;"	d
IOC_INOUT	orconfig.h	1602;"	d
IOC_OUT	orconfig.h	1600;"	d
IOC_VOID	orconfig.h	1599;"	d
IO_STREAM_CLOSED	util.h	/^  IO_STREAM_CLOSED$/;"	e	enum:stream_status
IO_STREAM_EAGAIN	util.h	/^  IO_STREAM_EAGAIN,$/;"	e	enum:stream_status
IO_STREAM_OKAY	util.h	/^  IO_STREAM_OKAY,$/;"	e	enum:stream_status
IO_STREAM_TERM	util.h	/^  IO_STREAM_TERM,$/;"	e	enum:stream_status
IPPROTO	orconfig.h	/^} IPPROTO, *PIPROTO;$/;"	t	typeref:enum:__anon54
IPPROTO_AH	orconfig.h	/^    IPPROTO_AH            = 51, \/\/ authentication header$/;"	e	enum:__anon54
IPPROTO_CBT	orconfig.h	/^    IPPROTO_CBT           = 7,$/;"	e	enum:__anon54
IPPROTO_DSTOPTS	orconfig.h	/^    IPPROTO_DSTOPTS       = 60, \/\/ IPv6 Destination options$/;"	e	enum:__anon54
IPPROTO_EGP	orconfig.h	/^    IPPROTO_EGP           = 8,$/;"	e	enum:__anon54
IPPROTO_ESP	orconfig.h	/^    IPPROTO_ESP           = 50, \/\/ encapsulating security payload$/;"	e	enum:__anon54
IPPROTO_FRAGMENT	orconfig.h	/^    IPPROTO_FRAGMENT      = 44, \/\/ IPv6 fragmentation header$/;"	e	enum:__anon54
IPPROTO_GGP	orconfig.h	/^    IPPROTO_GGP           = 3,$/;"	e	enum:__anon54
IPPROTO_HOPOPTS	orconfig.h	/^    IPPROTO_HOPOPTS       = 0,  \/\/ IPv6 Hop-by-Hop options$/;"	e	enum:__anon54
IPPROTO_ICLFXBM	orconfig.h	/^    IPPROTO_ICLFXBM       = 78,$/;"	e	enum:__anon54
IPPROTO_ICMP	orconfig.h	/^    IPPROTO_ICMP          = 1,$/;"	e	enum:__anon54
IPPROTO_ICMPV6	orconfig.h	/^    IPPROTO_ICMPV6        = 58, \/\/ ICMPv6$/;"	e	enum:__anon54
IPPROTO_IDP	orconfig.h	/^    IPPROTO_IDP           = 22,$/;"	e	enum:__anon54
IPPROTO_IGMP	orconfig.h	/^    IPPROTO_IGMP          = 2,$/;"	e	enum:__anon54
IPPROTO_IGP	orconfig.h	/^    IPPROTO_IGP           = 9,$/;"	e	enum:__anon54
IPPROTO_IPV4	orconfig.h	/^    IPPROTO_IPV4          = 4,$/;"	e	enum:__anon54
IPPROTO_IPV6	orconfig.h	/^    IPPROTO_IPV6          = 41, \/\/ IPv6 header$/;"	e	enum:__anon54
IPPROTO_L2TP	orconfig.h	/^    IPPROTO_L2TP          = 115,$/;"	e	enum:__anon54
IPPROTO_MAX	orconfig.h	/^    IPPROTO_MAX           = 256,$/;"	e	enum:__anon54
IPPROTO_ND	orconfig.h	/^    IPPROTO_ND            = 77,$/;"	e	enum:__anon54
IPPROTO_NONE	orconfig.h	/^    IPPROTO_NONE          = 59, \/\/ IPv6 no next header$/;"	e	enum:__anon54
IPPROTO_PGM	orconfig.h	/^    IPPROTO_PGM           = 113,$/;"	e	enum:__anon54
IPPROTO_PIM	orconfig.h	/^    IPPROTO_PIM           = 103,$/;"	e	enum:__anon54
IPPROTO_PUP	orconfig.h	/^    IPPROTO_PUP           = 12,$/;"	e	enum:__anon54
IPPROTO_RAW	orconfig.h	/^    IPPROTO_RAW           = 255,$/;"	e	enum:__anon54
IPPROTO_RDP	orconfig.h	/^    IPPROTO_RDP           = 27,$/;"	e	enum:__anon54
IPPROTO_RESERVED_IPSEC	orconfig.h	/^    IPPROTO_RESERVED_IPSEC  = 258,$/;"	e	enum:__anon54
IPPROTO_RESERVED_IPSECOFFLOAD	orconfig.h	/^    IPPROTO_RESERVED_IPSECOFFLOAD  = 259,$/;"	e	enum:__anon54
IPPROTO_RESERVED_MAX	orconfig.h	/^    IPPROTO_RESERVED_MAX  = 261$/;"	e	enum:__anon54
IPPROTO_RESERVED_RAW	orconfig.h	/^    IPPROTO_RESERVED_RAW  = 257,$/;"	e	enum:__anon54
IPPROTO_RESERVED_WNV	orconfig.h	/^    IPPROTO_RESERVED_WNV = 260,$/;"	e	enum:__anon54
IPPROTO_ROUTING	orconfig.h	/^    IPPROTO_ROUTING       = 43, \/\/ IPv6 Routing header$/;"	e	enum:__anon54
IPPROTO_SCTP	orconfig.h	/^    IPPROTO_SCTP          = 132,$/;"	e	enum:__anon54
IPPROTO_ST	orconfig.h	/^    IPPROTO_ST            = 5,$/;"	e	enum:__anon54
IPPROTO_TCP	orconfig.h	/^    IPPROTO_TCP           = 6,$/;"	e	enum:__anon54
IPPROTO_UDP	orconfig.h	/^    IPPROTO_UDP           = 17,$/;"	e	enum:__anon54
IP_DAD_STATE	orconfig.h	/^typedef NL_DAD_STATE IP_DAD_STATE;$/;"	t
IP_GRANULARITY	geoip.c	653;"	d	file:
IP_PREFIX_ORIGIN	orconfig.h	/^typedef NL_PREFIX_ORIGIN IP_PREFIX_ORIGIN;$/;"	t
IP_SUFFIX_ORIGIN	orconfig.h	/^typedef NL_SUFFIX_ORIGIN IP_SUFFIX_ORIGIN;$/;"	t
IPv6Exit	or.h	/^  int IPv6Exit; \/**< Do we support exiting to IPv6 addresses? *\/$/;"	m	struct:__anon24
ISO_CLIENTADDR	or.h	3341;"	d
ISO_CLIENTPROTO	or.h	3339;"	d
ISO_DEFAULT	or.h	3351;"	d
ISO_DESTADDR	or.h	3335;"	d
ISO_DESTPORT	or.h	3333;"	d
ISO_NYM_EPOCH	or.h	3345;"	d
ISO_SESSIONGRP	or.h	3343;"	d
ISO_SOCKSAUTH	or.h	3337;"	d
ISO_STREAM	or.h	3347;"	d
ISO_TIME_LEN	util.h	310;"	d
ISO_TIME_USEC_LEN	util.h	311;"	d
ISVSVN_SIZE	ias_ra.h	91;"	d
ISVSVN_SIZE	remote_attestation_result.h	73;"	d
IS_LEAPYEAR	util.c	1540;"	d	file:
IS_LITTLE_ENDIAN	trunnel.c	19;"	d	file:
IS_LITTLE_ENDIAN	trunnel.c	22;"	d	file:
IS_LITTLE_ENDIAN	trunnel.c	24;"	d	file:
IS_LITTLE_ENDIAN	trunnel.c	31;"	d	file:
IS_LITTLE_ENDIAN	trunnel.c	41;"	d	file:
ITEM	control.c	2451;"	d	file:
IfOperStatusDormant	orconfig.h	/^    IfOperStatusDormant,$/;"	e	enum:__anon59
IfOperStatusDown	orconfig.h	/^    IfOperStatusDown,$/;"	e	enum:__anon59
IfOperStatusLowerLayerDown	orconfig.h	/^    IfOperStatusLowerLayerDown$/;"	e	enum:__anon59
IfOperStatusNotPresent	orconfig.h	/^    IfOperStatusNotPresent,$/;"	e	enum:__anon59
IfOperStatusTesting	orconfig.h	/^    IfOperStatusTesting,$/;"	e	enum:__anon59
IfOperStatusUnknown	orconfig.h	/^    IfOperStatusUnknown,$/;"	e	enum:__anon59
IfOperStatusUp	orconfig.h	/^    IfOperStatusUp = 1,$/;"	e	enum:__anon59
IpDadStateDeprecated	orconfig.h	/^    IpDadStateDeprecated,$/;"	e	enum:__anon58
IpDadStateDuplicate	orconfig.h	/^    IpDadStateDuplicate,$/;"	e	enum:__anon58
IpDadStateInvalid	orconfig.h	/^    IpDadStateInvalid    = 0,$/;"	e	enum:__anon58
IpDadStatePreferred	orconfig.h	/^    IpDadStatePreferred,$/;"	e	enum:__anon58
IpDadStateTentative	orconfig.h	/^    IpDadStateTentative,$/;"	e	enum:__anon58
IpPrefixOriginDhcp	orconfig.h	/^    IpPrefixOriginDhcp,$/;"	e	enum:__anon56
IpPrefixOriginManual	orconfig.h	/^    IpPrefixOriginManual,$/;"	e	enum:__anon56
IpPrefixOriginOther	orconfig.h	/^    IpPrefixOriginOther = 0,$/;"	e	enum:__anon56
IpPrefixOriginRouterAdvertisement	orconfig.h	/^    IpPrefixOriginRouterAdvertisement,$/;"	e	enum:__anon56
IpPrefixOriginUnchanged	orconfig.h	/^    IpPrefixOriginUnchanged = 1 << 4$/;"	e	enum:__anon56
IpPrefixOriginWellKnown	orconfig.h	/^    IpPrefixOriginWellKnown,$/;"	e	enum:__anon56
IpSuffixOriginDhcp	orconfig.h	/^    IpSuffixOriginDhcp,$/;"	e	enum:__anon57
IpSuffixOriginLinkLayerAddress	orconfig.h	/^    IpSuffixOriginLinkLayerAddress,$/;"	e	enum:__anon57
IpSuffixOriginManual	orconfig.h	/^    IpSuffixOriginManual,$/;"	e	enum:__anon57
IpSuffixOriginOther	orconfig.h	/^    IpSuffixOriginOther = 0,$/;"	e	enum:__anon57
IpSuffixOriginRandom	orconfig.h	/^    IpSuffixOriginRandom,$/;"	e	enum:__anon57
IpSuffixOriginUnchanged	orconfig.h	/^    IpSuffixOriginUnchanged = 1 << 4$/;"	e	enum:__anon57
IpSuffixOriginWellKnown	orconfig.h	/^    IpSuffixOriginWellKnown,$/;"	e	enum:__anon57
JOURNAL_LINE_LEN	keypin.c	316;"	d	file:
KEYPIN_ADDED	keypin.h	22;"	d
KEYPIN_FOUND	keypin.h	21;"	d
KEYPIN_MISMATCH	keypin.h	23;"	d
KEYPIN_NOT_FOUND	keypin.h	24;"	d
KEYPIN_PRIVATE	keypin.c	4;"	d	file:
K_A	routerparse.c	/^  K_A,$/;"	e	enum:__anon97	file:
K_ACCEPT	routerparse.c	/^  K_ACCEPT = 0,$/;"	e	enum:__anon97	file:
K_ACCEPT6	routerparse.c	/^  K_ACCEPT6,$/;"	e	enum:__anon97	file:
K_ADDITIONAL_DIGEST	routerparse.c	/^  K_ADDITIONAL_DIGEST,$/;"	e	enum:__anon97	file:
K_ADDITIONAL_SIGNATURE	routerparse.c	/^  K_ADDITIONAL_SIGNATURE,$/;"	e	enum:__anon97	file:
K_ALLOW_SINGLE_HOP_EXITS	routerparse.c	/^  K_ALLOW_SINGLE_HOP_EXITS,$/;"	e	enum:__anon97	file:
K_BANDWIDTH	routerparse.c	/^  K_BANDWIDTH,$/;"	e	enum:__anon97	file:
K_BW_WEIGHTS	routerparse.c	/^  K_BW_WEIGHTS,$/;"	e	enum:__anon97	file:
K_CACHES_EXTRA_INFO	routerparse.c	/^  K_CACHES_EXTRA_INFO,$/;"	e	enum:__anon97	file:
K_CELL_CIRCS	routerparse.c	/^  K_CELL_CIRCS,$/;"	e	enum:__anon97	file:
K_CELL_END	routerparse.c	/^  K_CELL_END,$/;"	e	enum:__anon97	file:
K_CELL_PROCESSED	routerparse.c	/^  K_CELL_PROCESSED,$/;"	e	enum:__anon97	file:
K_CELL_QUEUED	routerparse.c	/^  K_CELL_QUEUED,$/;"	e	enum:__anon97	file:
K_CELL_TIME	routerparse.c	/^  K_CELL_TIME,$/;"	e	enum:__anon97	file:
K_CLIENT_VERSIONS	routerparse.c	/^  K_CLIENT_VERSIONS,$/;"	e	enum:__anon97	file:
K_CONSENSUS_DIGEST	routerparse.c	/^  K_CONSENSUS_DIGEST,$/;"	e	enum:__anon97	file:
K_CONSENSUS_METHOD	routerparse.c	/^  K_CONSENSUS_METHOD,$/;"	e	enum:__anon97	file:
K_CONSENSUS_METHODS	routerparse.c	/^  K_CONSENSUS_METHODS,$/;"	e	enum:__anon97	file:
K_CONTACT	routerparse.c	/^  K_CONTACT,$/;"	e	enum:__anon97	file:
K_DIRECTORY_FOOTER	routerparse.c	/^  K_DIRECTORY_FOOTER,$/;"	e	enum:__anon97	file:
K_DIRECTORY_SIGNATURE	routerparse.c	/^  K_DIRECTORY_SIGNATURE,$/;"	e	enum:__anon97	file:
K_DIRREQ_END	routerparse.c	/^  K_DIRREQ_END,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_DIR	routerparse.c	/^  K_DIRREQ_V2_DIR,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_IPS	routerparse.c	/^  K_DIRREQ_V2_IPS,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_REQS	routerparse.c	/^  K_DIRREQ_V2_REQS,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_RESP	routerparse.c	/^  K_DIRREQ_V2_RESP,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_SHARE	routerparse.c	/^  K_DIRREQ_V2_SHARE,$/;"	e	enum:__anon97	file:
K_DIRREQ_V2_TUN	routerparse.c	/^  K_DIRREQ_V2_TUN,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_DIR	routerparse.c	/^  K_DIRREQ_V3_DIR,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_IPS	routerparse.c	/^  K_DIRREQ_V3_IPS,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_REQS	routerparse.c	/^  K_DIRREQ_V3_REQS,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_RESP	routerparse.c	/^  K_DIRREQ_V3_RESP,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_SHARE	routerparse.c	/^  K_DIRREQ_V3_SHARE,$/;"	e	enum:__anon97	file:
K_DIRREQ_V3_TUN	routerparse.c	/^  K_DIRREQ_V3_TUN,$/;"	e	enum:__anon97	file:
K_DIR_ADDRESS	routerparse.c	/^  K_DIR_ADDRESS,$/;"	e	enum:__anon97	file:
K_DIR_IDENTITY_KEY	routerparse.c	/^  K_DIR_IDENTITY_KEY,$/;"	e	enum:__anon97	file:
K_DIR_KEY_CERTIFICATE_VERSION	routerparse.c	/^  K_DIR_KEY_CERTIFICATE_VERSION,$/;"	e	enum:__anon97	file:
K_DIR_KEY_CERTIFICATION	routerparse.c	/^  K_DIR_KEY_CERTIFICATION,$/;"	e	enum:__anon97	file:
K_DIR_KEY_CROSSCERT	routerparse.c	/^  K_DIR_KEY_CROSSCERT,$/;"	e	enum:__anon97	file:
K_DIR_KEY_EXPIRES	routerparse.c	/^  K_DIR_KEY_EXPIRES,$/;"	e	enum:__anon97	file:
K_DIR_KEY_PUBLISHED	routerparse.c	/^  K_DIR_KEY_PUBLISHED,$/;"	e	enum:__anon97	file:
K_DIR_OPTIONS	routerparse.c	/^  K_DIR_OPTIONS,$/;"	e	enum:__anon97	file:
K_DIR_SIGNING_KEY	routerparse.c	/^  K_DIR_SIGNING_KEY,$/;"	e	enum:__anon97	file:
K_DIR_SOURCE	routerparse.c	/^  K_DIR_SOURCE,$/;"	e	enum:__anon97	file:
K_ENTRY_END	routerparse.c	/^  K_ENTRY_END,$/;"	e	enum:__anon97	file:
K_ENTRY_IPS	routerparse.c	/^  K_ENTRY_IPS,$/;"	e	enum:__anon97	file:
K_EXIT_END	routerparse.c	/^  K_EXIT_END,$/;"	e	enum:__anon97	file:
K_EXIT_OPENED	routerparse.c	/^  K_EXIT_OPENED,$/;"	e	enum:__anon97	file:
K_EXIT_READ	routerparse.c	/^  K_EXIT_READ,$/;"	e	enum:__anon97	file:
K_EXIT_WRITTEN	routerparse.c	/^  K_EXIT_WRITTEN,$/;"	e	enum:__anon97	file:
K_EXTRA_INFO	routerparse.c	/^  K_EXTRA_INFO,$/;"	e	enum:__anon97	file:
K_EXTRA_INFO_DIGEST	routerparse.c	/^  K_EXTRA_INFO_DIGEST,$/;"	e	enum:__anon97	file:
K_FAMILY	routerparse.c	/^  K_FAMILY,$/;"	e	enum:__anon97	file:
K_FINGERPRINT	routerparse.c	/^  K_FINGERPRINT,$/;"	e	enum:__anon97	file:
K_FRESH_UNTIL	routerparse.c	/^  K_FRESH_UNTIL,$/;"	e	enum:__anon97	file:
K_HIBERNATING	routerparse.c	/^  K_HIBERNATING,$/;"	e	enum:__anon97	file:
K_HIDDEN_SERVICE_DIR	routerparse.c	/^  K_HIDDEN_SERVICE_DIR,$/;"	e	enum:__anon97	file:
K_ID	routerparse.c	/^  K_ID,$/;"	e	enum:__anon97	file:
K_IDENTITY_ED25519	routerparse.c	/^  K_IDENTITY_ED25519,$/;"	e	enum:__anon97	file:
K_IPV6_POLICY	routerparse.c	/^  K_IPV6_POLICY,$/;"	e	enum:__anon97	file:
K_KNOWN_FLAGS	routerparse.c	/^  K_KNOWN_FLAGS,$/;"	e	enum:__anon97	file:
K_LEGACY_DIR_KEY	routerparse.c	/^  K_LEGACY_DIR_KEY,$/;"	e	enum:__anon97	file:
K_M	routerparse.c	/^  K_M,$/;"	e	enum:__anon97	file:
K_MASTER_KEY_ED25519	routerparse.c	/^  K_MASTER_KEY_ED25519,$/;"	e	enum:__anon97	file:
K_NETWORK_STATUS	routerparse.c	/^  K_NETWORK_STATUS,$/;"	e	enum:__anon97	file:
K_NETWORK_STATUS_VERSION	routerparse.c	/^  K_NETWORK_STATUS_VERSION,$/;"	e	enum:__anon97	file:
K_NTOR_ONION_KEY_CROSSCERT	routerparse.c	/^  K_NTOR_ONION_KEY_CROSSCERT,$/;"	e	enum:__anon97	file:
K_ONION_KEY	routerparse.c	/^  K_ONION_KEY,$/;"	e	enum:__anon97	file:
K_ONION_KEY_CROSSCERT	routerparse.c	/^  K_ONION_KEY_CROSSCERT,$/;"	e	enum:__anon97	file:
K_ONION_KEY_NTOR	routerparse.c	/^  K_ONION_KEY_NTOR,$/;"	e	enum:__anon97	file:
K_OPT	routerparse.c	/^  K_OPT,$/;"	e	enum:__anon97	file:
K_OR_ADDRESS	routerparse.c	/^  K_OR_ADDRESS,$/;"	e	enum:__anon97	file:
K_P	routerparse.c	/^  K_P,$/;"	e	enum:__anon97	file:
K_P6	routerparse.c	/^  K_P6,$/;"	e	enum:__anon97	file:
K_PACKAGE	routerparse.c	/^  K_PACKAGE,$/;"	e	enum:__anon97	file:
K_PARAMS	routerparse.c	/^  K_PARAMS,$/;"	e	enum:__anon97	file:
K_PLATFORM	routerparse.c	/^  K_PLATFORM,$/;"	e	enum:__anon97	file:
K_PUBLISHED	routerparse.c	/^  K_PUBLISHED,$/;"	e	enum:__anon97	file:
K_R	routerparse.c	/^  K_R,$/;"	e	enum:__anon97	file:
K_READ_HISTORY	routerparse.c	/^  K_READ_HISTORY,$/;"	e	enum:__anon97	file:
K_RECOMMENDED_SOFTWARE	routerparse.c	/^  K_RECOMMENDED_SOFTWARE,$/;"	e	enum:__anon97	file:
K_REJECT	routerparse.c	/^  K_REJECT,$/;"	e	enum:__anon97	file:
K_REJECT6	routerparse.c	/^  K_REJECT6,$/;"	e	enum:__anon97	file:
K_ROUTER	routerparse.c	/^  K_ROUTER,$/;"	e	enum:__anon97	file:
K_ROUTER_SIGNATURE	routerparse.c	/^  K_ROUTER_SIGNATURE,$/;"	e	enum:__anon97	file:
K_ROUTER_SIG_ED25519	routerparse.c	/^  K_ROUTER_SIG_ED25519,$/;"	e	enum:__anon97	file:
K_ROUTER_STATUS	routerparse.c	/^  K_ROUTER_STATUS,$/;"	e	enum:__anon97	file:
K_RUNNING_ROUTERS	routerparse.c	/^  K_RUNNING_ROUTERS,$/;"	e	enum:__anon97	file:
K_S	routerparse.c	/^  K_S,$/;"	e	enum:__anon97	file:
K_SERVER_VERSIONS	routerparse.c	/^  K_SERVER_VERSIONS,$/;"	e	enum:__anon97	file:
K_SIGNED_DIRECTORY	routerparse.c	/^  K_SIGNED_DIRECTORY,$/;"	e	enum:__anon97	file:
K_SIGNING_KEY	routerparse.c	/^  K_SIGNING_KEY,$/;"	e	enum:__anon97	file:
K_UPTIME	routerparse.c	/^  K_UPTIME,$/;"	e	enum:__anon97	file:
K_V	routerparse.c	/^  K_V,$/;"	e	enum:__anon97	file:
K_VALID_AFTER	routerparse.c	/^  K_VALID_AFTER,$/;"	e	enum:__anon97	file:
K_VALID_UNTIL	routerparse.c	/^  K_VALID_UNTIL,$/;"	e	enum:__anon97	file:
K_VOTE_DIGEST	routerparse.c	/^  K_VOTE_DIGEST,$/;"	e	enum:__anon97	file:
K_VOTE_STATUS	routerparse.c	/^  K_VOTE_STATUS,$/;"	e	enum:__anon97	file:
K_VOTING_DELAY	routerparse.c	/^  K_VOTING_DELAY,$/;"	e	enum:__anon97	file:
K_W	routerparse.c	/^  K_W,$/;"	e	enum:__anon97	file:
K_WRITE_HISTORY	routerparse.c	/^  K_WRITE_HISTORY,$/;"	e	enum:__anon97	file:
KeepalivePeriod	or.h	/^  int KeepalivePeriod; \/**< How often do we send padding cells to keep$/;"	m	struct:__anon24
LANG_INVARIANT	orconfig.h	2077;"	d
LANG_NEUTRAL	orconfig.h	2076;"	d
LAST_HID_SERV_REQUEST_KEY_LEN	rendclient.c	494;"	d	file:
LAZY_DESCRIPTOR_RETRY_INTERVAL	main.c	177;"	d	file:
LD_ACCT	torlog.h	91;"	d
LD_APP	torlog.h	72;"	d
LD_BUG	torlog.h	80;"	d
LD_CHANNEL	torlog.h	99;"	d
LD_CIRC	torlog.h	76;"	d
LD_CONFIG	torlog.h	62;"	d
LD_CONTROL	torlog.h	74;"	d
LD_CRYPTO	torlog.h	58;"	d
LD_DIR	torlog.h	82;"	d
LD_DIRSERV	torlog.h	84;"	d
LD_EDGE	torlog.h	88;"	d
LD_EXIT	torlog.h	89;"	d
LD_FS	torlog.h	64;"	d
LD_GENERAL	torlog.h	56;"	d
LD_HANDSHAKE	torlog.h	95;"	d
LD_HEARTBEAT	torlog.h	97;"	d
LD_HIST	torlog.h	93;"	d
LD_HTTP	torlog.h	70;"	d
LD_MM	torlog.h	68;"	d
LD_NET	torlog.h	60;"	d
LD_NOCB	torlog.h	107;"	d
LD_NOFUNCNAME	torlog.h	110;"	d
LD_OR	torlog.h	86;"	d
LD_PROTOCOL	torlog.h	66;"	d
LD_REND	torlog.h	78;"	d
LD_SCHED	torlog.h	101;"	d
LEFT_CHILD	container.c	834;"	d	file:
LEGAL_NICKNAME_CHARACTERS	or.h	887;"	d
LEGAL_NICKNAME_CHARACTERS	tortls.c	91;"	d	file:
LE_OLD	compat_libevent.c	54;"	d	file:
LE_OTHER	compat_libevent.c	57;"	d	file:
LIBSECCOMP2	sandbox.h	/^  LIBSECCOMP2 = 0$/;"	e	enum:__anon84
LISTENER_CONNECTION_MAGIC	or.h	1205;"	d
LISTENER_STATE_READY	or.h	275;"	d
LOAD	ntmain.c	167;"	d	file:
LOAD	rephist.c	1648;"	d	file:
LOAD	rephist.c	1662;"	d	file:
LOCK_LOGS	log.c	151;"	d	file:
LOGFACILITY	orconfig.h	515;"	d
LOG_DEBUG	torlog.h	36;"	d
LOG_ERR	torlog.h	50;"	d
LOG_FN_CONN	control.h	27;"	d
LOG_INFO	torlog.h	39;"	d
LOG_NOTICE	torlog.h	44;"	d
LOG_ONEHALF	circuitmux_ewma.c	32;"	d	file:
LOG_PRIVATE	log.c	35;"	d	file:
LOG_PROTOCOL_WARN	or.h	3853;"	d
LOG_WARN	torlog.h	20;"	d
LOG_WARN	torlog.h	47;"	d
LONG_MAX	torint.h	273;"	d
LONG_MAX	torint.h	275;"	d
LOW_COMPRESSION	torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon67
LPCSTR	orconfig.h	/^typedef const char *LPCSTR, *PCSTR;$/;"	t
LPSOCKADDR	orconfig.h	/^} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;$/;"	t	typeref:struct:sockaddr
LastRotatedOnionKey	or.h	/^  time_t LastRotatedOnionKey;$/;"	m	struct:__anon30
LastWritten	or.h	/^  time_t LastWritten;$/;"	m	struct:__anon30
LearnCircuitBuildTimeout	or.h	/^  int LearnCircuitBuildTimeout; \/**< If non-zero, we attempt to learn a value$/;"	m	struct:__anon24
LeaveStreamsUnattached	or.h	/^  int LeaveStreamsUnattached; \/**< Boolean: Does Tor attach new streams to$/;"	m	struct:__anon24
LogMessageDomains	or.h	/^  int LogMessageDomains; \/**< Boolean: Should we log the domain(s) in which$/;"	m	struct:__anon24
LogTimeGranularity	or.h	/^  int LogTimeGranularity; \/**< Log resolution in milliseconds. *\/$/;"	m	struct:__anon24
Logs	or.h	/^  config_line_t *Logs; \/**< New-style list of configuration lines$/;"	m	struct:__anon24
LongLivedPorts	or.h	/^  smartlist_t *LongLivedPorts;$/;"	m	struct:__anon24
LookupAccountNameA_fn	ntmain.c	/^  BOOL (WINAPI *LookupAccountNameA_fn)($/;"	m	struct:service_fns	file:
MACOSX_KQUEUE_IS_BROKEN	compat_libevent.c	162;"	d	file:
MACOSX_KQUEUE_IS_BROKEN	compat_libevent.c	165;"	d	file:
MAILSLOT_NO_MESSAGE	orconfig.h	1248;"	d
MAILSLOT_WAIT_FOREVER	orconfig.h	1249;"	d
MAIN_PRIVATE	main.c	13;"	d	file:
MAKELANGID	orconfig.h	2074;"	d
MALLOC_MP_LIM	sandbox.c	23;"	d	file:
MALLOC_ZERO_WORKS	orconfig.h	518;"	d
MALLOC_ZERO_WORKS	util.c	108;"	d	file:
MAP_DEL_CURRENT	container.h	453;"	d
MAP_FOREACH	container.h	395;"	d
MAP_FOREACH_END	container.h	459;"	d
MAP_FOREACH_MODIFY	container.h	435;"	d
MAX	compat.h	656;"	d
MAX_ADAPTER_ADDRESS_LENGTH	orconfig.h	1907;"	d
MAX_ADAPTER_DESCRIPTION_LENGTH	orconfig.h	1905;"	d
MAX_ADAPTER_NAME_LENGTH	orconfig.h	1906;"	d
MAX_ADDRESSLEN	dns_structs.h	5;"	d
MAX_ADDRESS_LENGTH	address.c	668;"	d	file:
MAX_ANCIENT_ONEHOP_CIRCUITS_TO_LOG	circuituse.c	795;"	d	file:
MAX_ANNOTATION	routerparse.c	177;"	d	file:
MAX_ARGS	routerparse.c	4003;"	d	file:
MAX_ARGS	routerparse.c	4021;"	d	file:
MAX_BANDWIDTH_CHANGE_FREQ	router.c	2177;"	d	file:
MAX_BELIEVABLE_ONIONSKIN_DELAY	cpuworker.c	211;"	d	file:
MAX_BUF_SIZE	or.h	143;"	d
MAX_CAPACITY	container.c	66;"	d	file:
MAX_CAPACITY	container.c	90;"	d	file:
MAX_CELLS_TO_GET_FROM_CIRCUITS_FOR_UNLIMITED	channel.c	2167;"	d	file:
MAX_CERT_SIZE	routerparse.c	1882;"	d	file:
MAX_CERT_TYPE_WANTED	channeltls.c	1747;"	d	file:
MAX_CHUNK_ALLOC	buffers.c	164;"	d	file:
MAX_CIRCID_ATTEMPTS	circuitbuild.c	96;"	d	file:
MAX_CIRCUIT_FAILURES	circuituse.c	1667;"	d	file:
MAX_COMMAND_LINE_LENGTH	control.c	4189;"	d	file:
MAX_CONNECTED_CELL_PAYLOAD_LEN	connection_edge.c	419;"	d	file:
MAX_CONSTRAINED_TCP_BUFFER	or.h	3324;"	d
MAX_DEFAULT_MAXMEM	config.c	3913;"	d	file:
MAX_DEPTH	backtrace.c	54;"	d	file:
MAX_DEPTH	sandbox.c	1585;"	d	file:
MAX_DESCRIPTOR_UPLOAD_SIZE	or.h	157;"	d
MAX_DESCR_LEN	channeltls.c	534;"	d	file:
MAX_DETECTABLE_CPUS	compat.c	2896;"	d	file:
MAX_DHCPV6_DUID_LENGTH	orconfig.h	1912;"	d
MAX_DIRECTORY_OBJECT_SIZE	directory.c	2246;"	d	file:
MAX_DIR_DL_SIZE	or.h	145;"	d
MAX_DIR_PERIOD	config.c	2575;"	d	file:
MAX_DIR_UL_SIZE	or.h	152;"	d
MAX_DL_TO_DELAY	routerlist.c	4423;"	d	file:
MAX_DNS_ENTRY_AGE	or.h	164;"	d
MAX_DNS_LABEL_SIZE	crypto.c	76;"	d	file:
MAX_DNS_SUFFIX_STRING_LENGTH	orconfig.h	1913;"	d
MAX_DNS_TTL	or.h	169;"	d
MAX_DOMAIN_NAME_LEN	orconfig.h	1910;"	d
MAX_EXITPOLICY_SUMMARY_LEN	dirserv.h	30;"	d
MAX_EXTRAINFO_UPLOAD_SIZE	or.h	160;"	d
MAX_FREELIST_LEN	memarea.c	109;"	d	file:
MAX_GUARDFRACTION_FILE_AGE	dirserv.c	2404;"	d	file:
MAX_GUARD_LIFETIME	entrynodes.c	536;"	d	file:
MAX_HEADERS_SIZE	or.h	149;"	d
MAX_HEX_NICKNAME_LEN	or.h	137;"	d
MAX_HIST_VALUE_LEN	rephist.c	1435;"	d	file:
MAX_HOSTNAME_LEN	orconfig.h	1909;"	d
MAX_INTRO_CIRCS_PER_PERIOD	rendservice.c	102;"	d	file:
MAX_INTRO_POINTS	rendcache.h	26;"	d
MAX_INTRO_POINT_CIRCUIT_RETRIES	or.h	4909;"	d
MAX_INTRO_POINT_REACHABILITY_FAILURES	or.h	4883;"	d
MAX_KNOWN_FLAGS_IN_VOTE	or.h	2372;"	d
MAX_LAST_SEEN_IN_MINUTES	geoip.c	482;"	d	file:
MAX_LINE_LENGTH	routerparse.c	4037;"	d	file:
MAX_LINK_PROTO_TO_LOG	rephist.c	3128;"	d	file:
MAX_MAX_CIRCUIT_DIRTINESS	config.c	2583;"	d	file:
MAX_MAX_CLIENT_CIRCUITS_PENDING	or.h	4182;"	d
MAX_MEASUREMENT_AGE	dirserv.h	115;"	d
MAX_NICKNAME_LEN	or.h	134;"	d
MAX_NUM_NTORS_PER_TAP	onion.c	195;"	d	file:
MAX_ONIONSKIN_CHALLENGE_LEN	onion.h	30;"	d
MAX_ONIONSKIN_REPLY_LEN	onion.h	31;"	d
MAX_ONION_HANDSHAKE_TYPE	or.h	2639;"	d
MAX_OR_INBUF_WHEN_NONOPEN	connection_or.c	521;"	d	file:
MAX_OVERHEAD	crypto_pwbox.c	20;"	d	file:
MAX_PATH	orconfig.h	1735;"	d
MAX_POPULATE_ATTEMPTS	circuitbuild.c	398;"	d	file:
MAX_PREDICTED_CIRCS_RELEVANCE	config.c	2572;"	d	file:
MAX_REASONS_TO_REPORT	connection_or.c	345;"	d	file:
MAX_RELAY_EARLY_CELLS_PER_CIRCUIT	or.h	2921;"	d
MAX_REND_FAILURES	rendservice.c	105;"	d	file:
MAX_REND_TIMEOUT	rendservice.c	108;"	d	file:
MAX_RESOLVE_FAILURES	relay.c	712;"	d	file:
MAX_SANE_PATH_LENGTH	compat.c	2418;"	d	file:
MAX_SCANF_WIDTH	util.c	3508;"	d	file:
MAX_SCOPE_ID_LEN	orconfig.h	1911;"	d
MAX_SERVICE_WAIT_TIME	ntmain.c	424;"	d	file:
MAX_SIGNEWNYM_RATE	main.c	143;"	d	file:
MAX_SIGSAFE_FDS	log.c	535;"	d	file:
MAX_SOCKS5_AUTH_FIELD_SIZE	connection.h	102;"	d
MAX_SOCKS5_AUTH_SIZE_TOTAL	connection.h	106;"	d
MAX_SOCKS_ADDR_LEN	or.h	4400;"	d
MAX_SOCKS_MESSAGE_LEN	buffers.c	1373;"	d	file:
MAX_SOCKS_REPLY_LEN	or.h	4399;"	d
MAX_SSL_KEY_LIFETIME_INTERNAL	or.h	177;"	d
MAX_STARTUP_MSG_LEN	log.c	148;"	d	file:
MAX_STATUS_TAG_LEN	or.h	5123;"	d
MAX_STREAM_WARN_INTERVAL	rendservice.c	3827;"	d	file:
MAX_SUPPORTED_CONSENSUS_METHOD	dirvote.h	58;"	d
MAX_THREADS	workqueue.c	365;"	d	file:
MAX_TIMEOUT	circuitstats.c	1394;"	d	file:
MAX_TIMEOUT	circuitstats.c	1410;"	d	file:
MAX_UNCOMPRESSION_FACTOR	torgzip.c	132;"	d	file:
MAX_UNPARSED_OBJECT_SIZE	routerparse.c	4034;"	d	file:
MAX_UNTRUSTED_NETWORKSTATUSES	dirserv.c	45;"	d	file:
MAX_UNUSED_OPEN_CIRCUITS	circuituse.c	988;"	d	file:
MAX_VERBOSE_NICKNAME_LEN	or.h	140;"	d
MAX_VOTE_DL_SIZE	directory.c	2248;"	d	file:
MAX_V_LINE_LEN	dirserv.h	33;"	d
MEDIUM_COMPRESSION	torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon67
MEMAREA_ALIGN	memarea.c	22;"	d	file:
MEMAREA_ALIGN_MASK	memarea.c	25;"	d	file:
MEMAREA_ALIGN_MASK	memarea.c	27;"	d	file:
MEMORY_PRESSURE_INTERVAL	relay.c	2389;"	d	file:
MICRODESC_CACHE_LIFETIME	directory.c	115;"	d	file:
MICRODESC_DIRINFO	or.h	/^  MICRODESC_DIRINFO=1 << 6,$/;"	e	enum:__anon18
MIN	circuitbuild.c	49;"	d	file:
MIN	compat.h	659;"	d
MIN	crypto.c	2094;"	d	file:
MIN	crypto.c	2095;"	d	file:
MIN_ANNOTATION	routerparse.c	176;"	d	file:
MIN_BW_TO_ADVERTISE_DIRPORT	router.c	1158;"	d	file:
MIN_CHUNK_ALLOC	buffers.c	162;"	d	file:
MIN_CIRCUITS_HANDLING_STREAM	or.h	553;"	d
MIN_CIRCUIT_STREAM_TIMEOUT	config.c	2587;"	d	file:
MIN_CONSTRAINED_TCP_BUFFER	or.h	3323;"	d
MIN_DIR_REQ_RESPONSES	geoip.c	963;"	d	file:
MIN_DIST_SECONDS	dirvote.h	34;"	d
MIN_DIST_SECONDS_TESTING	dirvote.h	36;"	d
MIN_DL_PER_REQUEST	routerlist.c	4417;"	d	file:
MIN_DNS_TTL	or.h	172;"	d
MIN_GUARD_LIFETIME	entrynodes.c	535;"	d	file:
MIN_HEARTBEAT_PERIOD	config.c	2591;"	d	file:
MIN_IPS_TO_NOTE_ANYTHING	geoip.c	650;"	d	file:
MIN_IPS_TO_NOTE_COUNTRY	geoip.c	647;"	d	file:
MIN_LINK_PROTO_FOR_WIDE_CIRC_IDS	connection_or.h	103;"	d
MIN_MAX_CIRCUIT_DIRTINESS	config.c	2579;"	d	file:
MIN_METHOD_FOR_A_LINES	dirvote.h	65;"	d
MIN_METHOD_FOR_ED25519_ID_IN_MD	dirvote.h	91;"	d
MIN_METHOD_FOR_ED25519_ID_VOTING	dirvote.h	94;"	d
MIN_METHOD_FOR_GUARDFRACTION	dirvote.h	87;"	d
MIN_METHOD_FOR_ID_HASH_IN_MD	dirvote.h	80;"	d
MIN_METHOD_FOR_MANDATORY_MICRODESC	dirvote.h	62;"	d
MIN_METHOD_FOR_NTOR_KEY	dirvote.h	72;"	d
MIN_METHOD_FOR_P6_LINES	dirvote.h	68;"	d
MIN_METHOD_FOR_PACKAGE_LINES	dirvote.h	83;"	d
MIN_METHOD_TO_CLIP_UNMEASURED_BW	dirvote.h	76;"	d
MIN_NUM_NTORS_PER_TAP	onion.c	194;"	d	file:
MIN_ONION_KEY_LIFETIME	or.h	175;"	d
MIN_READ_LEN	buffers.c	160;"	d	file:
MIN_REND_INITIAL_POST_DELAY	rendservice.c	3620;"	d	file:
MIN_REND_INITIAL_POST_DELAY_TESTING	rendservice.c	3621;"	d	file:
MIN_REND_POST_PERIOD	config.c	2566;"	d	file:
MIN_REND_POST_PERIOD_TESTING	config.c	2567;"	d	file:
MIN_REQUESTS	routerlist.c	4420;"	d	file:
MIN_SUPPORTED_CONSENSUS_METHOD	dirvote.h	55;"	d
MIN_TIME_FOR_MEASUREMENT	hibernate.c	441;"	d	file:
MIN_TOR_TLS_ERROR_VAL_	tortls.h	25;"	d
MIN_VOTES_FOR_PARAM	dirvote.c	607;"	d	file:
MIN_VOTE_INTERVAL	dirvote.h	39;"	d
MIN_VOTE_INTERVAL_TESTING	dirvote.h	48;"	d
MIN_VOTE_INTERVAL_TESTING_INITIAL	dirvote.h	51;"	d
MIN_VOTE_SECONDS	dirvote.h	29;"	d
MIN_VOTE_SECONDS_TESTING	dirvote.h	31;"	d
MOCK	testsupport.h	63;"	d
MOCK_DECL	testsupport.h	57;"	d
MOCK_DECL	testsupport.h	72;"	d
MOCK_IMPL	address.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	address.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	address.c	/^MOCK_IMPL(smartlist_t *,get_interface_address6_list,(int severity,$/;"	f
MOCK_IMPL	buffers.c	/^MOCK_IMPL(size_t,$/;"	f
MOCK_IMPL	channel.c	/^MOCK_IMPL(ssize_t,$/;"	f
MOCK_IMPL	channel.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	circuitlist.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	circuitlist.c	/^MOCK_IMPL(void, channel_note_destroy_not_pending,$/;"	f
MOCK_IMPL	circuitlist.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	circuitmux.c	/^MOCK_IMPL(const circuitmux_policy_t *,$/;"	f
MOCK_IMPL	circuitmux.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	circuitmux.c	/^MOCK_IMPL(unsigned int,$/;"	f
MOCK_IMPL	circuitmux.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	compat.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	compat.c	/^MOCK_IMPL(tor_socket_t,$/;"	f
MOCK_IMPL	compat_libevent.c	/^MOCK_IMPL(struct event_base *,$/;"	f
MOCK_IMPL	config.c	/^MOCK_IMPL(const or_options_t *,$/;"	f
MOCK_IMPL	config.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	config.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	connection.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	connection_edge.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	connection_or.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	connection_or.c	/^MOCK_IMPL(or_connection_t *,$/;"	f
MOCK_IMPL	connection_or.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	container.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	container.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	control.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	control.c	/^MOCK_IMPL(const char *,$/;"	f
MOCK_IMPL	control.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	crypto.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	directory.c	/^MOCK_IMPL(void, directory_get_from_dirserver, (uint8_t dir_purpose,$/;"	f
MOCK_IMPL	dns.c	/^MOCK_IMPL(STATIC int,$/;"	f
MOCK_IMPL	dns.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	dns.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	entrynodes.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	geoip.c	/^MOCK_IMPL(country_t,$/;"	f
MOCK_IMPL	geoip.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	hibernate.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	hibernate.c	/^MOCK_IMPL(time_t,$/;"	f
MOCK_IMPL	keypin.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	log.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	main.c	/^MOCK_IMPL(long,$/;"	f
MOCK_IMPL	main.c	/^MOCK_IMPL(uint64_t,$/;"	f
MOCK_IMPL	main.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	networkstatus.c	/^MOCK_IMPL(download_status_t *,$/;"	f
MOCK_IMPL	networkstatus.c	/^MOCK_IMPL(networkstatus_t *,$/;"	f
MOCK_IMPL	networkstatus.c	/^MOCK_IMPL(routerstatus_t *,$/;"	f
MOCK_IMPL	nodelist.c	/^MOCK_IMPL(const node_t *,$/;"	f
MOCK_IMPL	nodelist.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	policies.c	/^MOCK_IMPL(addr_policy_result_t,$/;"	f
MOCK_IMPL	relay.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	router.c	/^MOCK_IMPL(const routerinfo_t *,$/;"	f
MOCK_IMPL	router.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	routerlist.c	/^MOCK_IMPL(STATIC void, initiate_descriptor_downloads,$/;"	f
MOCK_IMPL	routerlist.c	/^MOCK_IMPL(STATIC was_router_added_t,$/;"	f
MOCK_IMPL	routerlist.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	routerlist.c	/^MOCK_IMPL(signed_descriptor_t *,$/;"	f
MOCK_IMPL	routerparse.c	/^MOCK_IMPL(addr_policy_t *,$/;"	f
MOCK_IMPL	scheduler.c	/^MOCK_IMPL(STATIC int,$/;"	f
MOCK_IMPL	scheduler.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	statefile.c	/^MOCK_IMPL(or_state_t *,$/;"	f
MOCK_IMPL	testsupport.h	60;"	d
MOCK_IMPL	testsupport.h	74;"	d
MOCK_IMPL	tortls.c	/^MOCK_IMPL(double,$/;"	f
MOCK_IMPL	tortls.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	tortls.c	/^MOCK_IMPL(tor_x509_cert_t *,$/;"	f
MOCK_IMPL	transports.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	transports.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	util.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	util.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	util.c	/^MOCK_IMPL(void,$/;"	f
MONTH_NAMES	util.c	/^static const char *MONTH_NAMES[] =$/;"	v	file:
MTBF_TO_GUARANTEE_STABLE	dirserv.c	1267;"	d	file:
M_SYSCALL	sandbox.c	100;"	d	file:
M_SYSCALL	sandbox.c	88;"	d	file:
M_SYSCALL	sandbox.c	96;"	d	file:
Maj	ed25519-hash.h	71;"	d
MaxAdvertisedBandwidth	or.h	/^  uint64_t MaxAdvertisedBandwidth; \/**< How much bandwidth are we willing to$/;"	m	struct:__anon24
MaxCircuitDirtiness	or.h	/^  int MaxCircuitDirtiness; \/**< Never use circs that were first used more than$/;"	m	struct:__anon24
MaxClientCircuitsPending	or.h	/^  int MaxClientCircuitsPending;$/;"	m	struct:__anon24
MaxMemInQueues	or.h	/^  uint64_t MaxMemInQueues;\/**< If we have more memory than this allocated$/;"	m	struct:__anon24
MaxMemInQueues_low_threshold	or.h	/^  uint64_t MaxMemInQueues_low_threshold;$/;"	m	struct:__anon24
MaxMemInQueues_raw	or.h	/^  uint64_t MaxMemInQueues_raw;$/;"	m	struct:__anon24
MaxOnionQueueDelay	or.h	/^  int MaxOnionQueueDelay; \/**<DOCDOC*\/$/;"	m	struct:__anon24
MinMeasuredBWsForAuthToIgnoreAdvertised	or.h	/^  int MinMeasuredBWsForAuthToIgnoreAdvertised;$/;"	m	struct:__anon24
MinUptimeHidServDirectoryV2	or.h	/^  int MinUptimeHidServDirectoryV2; \/**< As directory authority, accept hidden$/;"	m	struct:__anon24
MyFamily	or.h	/^  char *MyFamily; \/**< Declared family for this OR. *\/$/;"	m	struct:__anon24
N2N_TAGGING_IS_POSSIBLE	circpathbias.c	269;"	d	file:
NATDListenAddress	or.h	/^  config_line_t *NATDListenAddress;$/;"	m	struct:__anon24
NATDPort_lines	or.h	/^  config_line_t *NATDPort_lines; \/**< Ports to listen on for transparent natd$/;"	m	struct:__anon24
NATDPort_set	or.h	/^  unsigned int NATDPort_set : 1;$/;"	m	struct:__anon24
NEED_ERSATZ_SOCKETPAIR	compat.h	688;"	d
NEED_KEY	routerparse.c	/^  NEED_KEY,      \/**< Object is required, and must be a public key. *\/$/;"	e	enum:__anon98	file:
NEED_KEY_1024	routerparse.c	/^  NEED_KEY_1024, \/**< Object is required, and must be a 1024 bit public key *\/$/;"	e	enum:__anon98	file:
NEED_OBJ	routerparse.c	/^  NEED_OBJ,      \/**< Object is required. *\/$/;"	e	enum:__anon98	file:
NEED_SKEY_1024	routerparse.c	/^  NEED_SKEY_1024,\/**< Object is required, and must be a 1024 bit private key *\/$/;"	e	enum:__anon98	file:
NETINFO_NOTICE_SKEW	channeltls.c	1663;"	d	file:
NETWORKSTATUS_ALLOW_SKEW	networkstatus.c	548;"	d	file:
NETWORKSTATUS_CACHE_LIFETIME	directory.c	111;"	d	file:
NETWORKSTATUS_PRIVATE	networkstatus.c	13;"	d	file:
NEW_CHAN_GRACE_PERIOD	channel.c	3220;"	d	file:
NEXT_LINE	routerparse.c	4465;"	d	file:
NEXT_LINE	routerparse.c	4499;"	d	file:
NGROUPS_MAX	orconfig.h	917;"	d
NID_tor_default_ecdhe_group	tortls.c	1118;"	d	file:
NIL_	routerparse.c	/^  NIL_$/;"	e	enum:__anon97	file:
NL_DAD_STATE	orconfig.h	/^} NL_DAD_STATE;$/;"	t	typeref:enum:__anon58
NL_PREFIX_ORIGIN	orconfig.h	/^} NL_PREFIX_ORIGIN;$/;"	t	typeref:enum:__anon56
NL_SUFFIX_ORIGIN	orconfig.h	/^} NL_SUFFIX_ORIGIN;$/;"	t	typeref:enum:__anon57
NODE_DESC_BUF_LEN	router.h	127;"	d
NONAUTHORITY_NS_CACHE_INTERVAL	networkstatus.c	707;"	d	file:
NON_ANONYMOUS_MODE_ENABLED	or.h	130;"	d
NORMAL_HOSTNAME	connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
NOTE_BYTES	hibernate.c	499;"	d	file:
NOTE_INTERVAL	hibernate.c	497;"	d	file:
NO_ARGS	routerparse.c	275;"	d	file:
NO_BACKTRACE_IMPL	backtrace.c	46;"	d	file:
NO_DIRINFO	or.h	/^  NO_DIRINFO      = 0,$/;"	e	enum:__anon18
NO_METHOD	torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon66
NO_OBJ	routerparse.c	/^  NO_OBJ,        \/**< No object, ever. *\/$/;"	e	enum:__anon98	file:
NO_WEIGHTING	or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
NSIG	orconfig.h	845;"	d
NSSET_ACCEPT_OBSOLETE	networkstatus.h	76;"	d
NSSET_DONT_DOWNLOAD_CERTS	networkstatus.h	75;"	d
NSSET_FROM_CACHE	networkstatus.h	73;"	d
NSSET_REQUIRE_FLAVOR	networkstatus.h	77;"	d
NSSET_WAS_WAITING_FOR_CERTS	networkstatus.h	74;"	d
NS_CONTROL_PORT	or.h	/^  NS_CONTROL_PORT,$/;"	e	enum:__anon35
NS_EXPIRY_SLOP	main.c	1446;"	d	file:
NS_TYPE_CONSENSUS	or.h	/^  NS_TYPE_CONSENSUS,$/;"	e	enum:__anon15
NS_TYPE_OPINION	or.h	/^  NS_TYPE_OPINION,$/;"	e	enum:__anon15
NS_TYPE_VOTE	or.h	/^  NS_TYPE_VOTE,$/;"	e	enum:__anon15
NS_V2	or.h	/^  NS_V2,$/;"	e	enum:__anon35
NS_V3_CONSENSUS	or.h	/^  NS_V3_CONSENSUS,$/;"	e	enum:__anon35
NS_V3_CONSENSUS_MICRODESC	or.h	/^  NS_V3_CONSENSUS_MICRODESC$/;"	e	enum:__anon35
NS_V3_VOTE	or.h	/^  NS_V3_VOTE,$/;"	e	enum:__anon35
NTOHL	TorSGX.cpp	1322;"	d	file:
NTOHL	TorSGX.cpp	1334;"	d	file:
NTOHS	TorSGX.cpp	1320;"	d	file:
NTOHS	TorSGX.cpp	1327;"	d	file:
NTOR_CREATE_MAGIC	onion.c	691;"	d	file:
NTOR_ONIONSKIN_LEN	onion_ntor.h	16;"	d
NTOR_REPLY_LEN	onion_ntor.h	18;"	d
NT_SERVICE	ntmain.h	17;"	d
NT_SERVICE_ERROR_TORINIT_FAILED	ntmain.c	38;"	d	file:
NULL_REP_IS_ZERO_BYTES	orconfig.h	521;"	d
NUMBER	routerparse.c	4742;"	d	file:
NUMBER	routerparse.c	4822;"	d	file:
NUM_CIRCUITS_LAUNCHED_THRESHOLD	or.h	1651;"	d
NUM_INTRO_POINTS_DEFAULT	rendservice.c	91;"	d	file:
NUM_INTRO_POINTS_EXTRA	rendservice.c	96;"	d	file:
NUM_INTRO_POINTS_MAX	rendservice.c	93;"	d	file:
NUM_JUMPED_SECONDS_BEFORE_WARN	main.c	1827;"	d	file:
NUM_PARALLEL_TESTING_CIRCS	circuituse.c	1383;"	d	file:
NUM_SECS_BW_SUM_INTERVAL	rephist.c	1138;"	d	file:
NUM_SECS_BW_SUM_IS_VALID	rephist.c	1140;"	d	file:
NUM_SECS_ROLLING_MEASURE	rephist.c	1136;"	d	file:
NUM_TOTALS	rephist.c	1142;"	d	file:
N_AUTH_CERT_DL_FAILURES_TO_BUG_USER	routerlist.c	689;"	d	file:
N_BW_EVENTS_TO_CACHE	control.c	5103;"	d	file:
N_CONSENSUS_FLAVORS	or.h	2441;"	d
N_DIGEST_ALGORITHMS	crypto.h	91;"	d
N_LOGGING_DOMAINS	torlog.h	103;"	d
N_WILDCARD_CHECKS	dns.c	1934;"	d	file:
NewCircuitPeriod	or.h	/^  int NewCircuitPeriod; \/**< How long do we use a circuit before building$/;"	m	struct:__anon24
Nickname	or.h	/^  char *Nickname; \/**< OR only: nickname of this onion router. *\/$/;"	m	struct:__anon24
NldsDeprecated	orconfig.h	/^    NldsDeprecated,$/;"	e	enum:__anon58
NldsDuplicate	orconfig.h	/^    NldsDuplicate,$/;"	e	enum:__anon58
NldsInvalid	orconfig.h	/^    NldsInvalid,$/;"	e	enum:__anon58
NldsPreferred	orconfig.h	/^    NldsPreferred,$/;"	e	enum:__anon58
NldsTentative	orconfig.h	/^    NldsTentative,$/;"	e	enum:__anon58
NlsoDhcp	orconfig.h	/^    NlsoDhcp,$/;"	e	enum:__anon57
NlsoLinkLayerAddress	orconfig.h	/^    NlsoLinkLayerAddress,$/;"	e	enum:__anon57
NlsoManual	orconfig.h	/^    NlsoManual,$/;"	e	enum:__anon57
NlsoOther	orconfig.h	/^    NlsoOther = 0,$/;"	e	enum:__anon57
NlsoRandom	orconfig.h	/^    NlsoRandom,$/;"	e	enum:__anon57
NlsoWellKnown	orconfig.h	/^    NlsoWellKnown,$/;"	e	enum:__anon57
NodeFamilies	or.h	/^  config_line_t *NodeFamilies; \/**< List of config lines for$/;"	m	struct:__anon24
NodeFamilySets	or.h	/^  smartlist_t *NodeFamilySets; \/**< List of parsed NodeFamilies values. *\/$/;"	m	struct:__anon24
NumCPUs	or.h	/^  int NumCPUs; \/**< How many CPUs should we try to use? *\/$/;"	m	struct:__anon24
NumDirectoryGuards	or.h	/^  int NumDirectoryGuards; \/**< How many dir guards do we try to establish?$/;"	m	struct:__anon24
NumEntryGuards	or.h	/^  int NumEntryGuards; \/**< How many entry guards do we try to establish? *\/$/;"	m	struct:__anon24
OBJ_OK	routerparse.c	/^  OBJ_OK,        \/**< Object is optional. *\/$/;"	e	enum:__anon98	file:
OBSOLETE	config.c	136;"	d	file:
OBSOLETE	config.c	546;"	d	file:
OCSP_RESPONSE	crypto.c	23;"	d	file:
OLD_CERT_LIFETIME	routerlist.c	518;"	d	file:
OLD_ROUTER_DESC_MAX_AGE	or.h	186;"	d
ONE_GIGABYTE	config.c	3910;"	d	file:
ONE_MEGABYTE	config.c	3911;"	d	file:
ONIONQUEUE_WAIT_CUTOFF	onion.c	37;"	d	file:
ONIONS_SEEN_BIN_SIZE	rephist.c	3052;"	d	file:
ONIONS_SEEN_DELTA_F	rephist.c	3045;"	d	file:
ONIONS_SEEN_EPSILON	rephist.c	3049;"	d	file:
ONION_HANDSHAKE_TYPE_FAST	or.h	2637;"	d
ONION_HANDSHAKE_TYPE_NTOR	or.h	2638;"	d
ONION_HANDSHAKE_TYPE_TAP	or.h	2636;"	d
ONION_HOSTNAME	connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
ONION_NTOR_PRIVATE	onion_ntor.c	6;"	d	file:
OPEN	main.c	3107;"	d	file:
OPENSSL_V	crypto.h	39;"	d
OPENSSL_VER	crypto.h	31;"	d
OPENSSL_V_NOPATCH	crypto.h	44;"	d
OPENSSL_V_SERIES	crypto.h	49;"	d
OPEN_ALWAYS	orconfig.h	1276;"	d
OPEN_DATADIR	main.c	3110;"	d	file:
OPEN_DATADIR2	main.c	3113;"	d	file:
OPEN_DATADIR2_SUFFIX	main.c	3121;"	d	file:
OPEN_DATADIR_SUFFIX	main.c	3116;"	d	file:
OPEN_EXISTING	orconfig.h	1275;"	d
OPEN_FLAGS_APPEND	util.h	403;"	d
OPEN_FLAGS_DONT_REPLACE	util.h	404;"	d
OPEN_FLAGS_REPLACE	util.h	402;"	d
OPTIONS_DUMP_ALL	config.h	41;"	d
OPTIONS_DUMP_DEFAULTS	config.h	40;"	d
OPTIONS_DUMP_MINIMAL	config.h	39;"	d
OP_EQ	compat.h	187;"	d
OP_GE	compat.h	185;"	d
OP_GT	compat.h	184;"	d
OP_LE	compat.h	186;"	d
OP_LT	compat.h	183;"	d
OP_NE	compat.h	188;"	d
ORCIRC_MAX_MIDDLE_CELLS	or.h	856;"	d
ORCIRC_MAX_MIDDLE_KILL_THRESH	or.h	860;"	d
ORIGIN_CIRCUIT_MAGIC	or.h	2745;"	d
ORListenAddress	or.h	/^  config_line_t *ORListenAddress;$/;"	m	struct:__anon24
ORPort_lines	or.h	/^  config_line_t *ORPort_lines; \/**< Ports to listen on for OR connections. *\/$/;"	m	struct:__anon24
ORPort_set	or.h	/^  unsigned int ORPort_set : 1;$/;"	m	struct:__anon24
OR_AUTH_CHALLENGE_LEN	or.h	1337;"	d
OR_CERT_TYPE_AUTH_1024	or.h	1356;"	d
OR_CERT_TYPE_ID_1024	or.h	1352;"	d
OR_CERT_TYPE_RSA_ED_CROSSCERT	or.h	1358;"	d
OR_CERT_TYPE_TLS_LINK	or.h	1349;"	d
OR_CIRCUIT_MAGIC	or.h	2747;"	d
OR_CONNECTION_MAGIC	or.h	1200;"	d
OR_CONN_EVENT_CLOSED	or.h	/^  OR_CONN_EVENT_CLOSED       = 3,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_CONNECTED	or.h	/^  OR_CONN_EVENT_CONNECTED    = 1,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_FAILED	or.h	/^  OR_CONN_EVENT_FAILED       = 2,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_LAUNCHED	or.h	/^  OR_CONN_EVENT_LAUNCHED     = 0,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_NEW	or.h	/^  OR_CONN_EVENT_NEW          = 4,$/;"	e	enum:or_conn_status_event_t
OR_CONN_HIGHWATER	or.h	1449;"	d
OR_CONN_LOWWATER	or.h	1453;"	d
OR_CONN_STATE_CONNECTING	or.h	279;"	d
OR_CONN_STATE_MAX_	or.h	302;"	d
OR_CONN_STATE_MIN_	or.h	277;"	d
OR_CONN_STATE_OPEN	or.h	301;"	d
OR_CONN_STATE_OR_HANDSHAKING_V2	or.h	295;"	d
OR_CONN_STATE_OR_HANDSHAKING_V3	or.h	299;"	d
OR_CONN_STATE_PROXY_HANDSHAKING	or.h	281;"	d
OR_CONN_STATE_TLS_CLIENT_RENEGOTIATING	or.h	287;"	d
OR_CONN_STATE_TLS_HANDSHAKING	or.h	284;"	d
OR_CONN_STATE_TLS_SERVER_RENEGOTIATING	or.h	291;"	d
OR_DEADCODE_DUMMY	ed25519_cert.c	19;"	d	file:
OR_DEADCODE_DUMMY	ed25519_cert.c	21;"	d	file:
OR_DEADCODE_DUMMY	link_handshake.c	19;"	d	file:
OR_DEADCODE_DUMMY	link_handshake.c	21;"	d	file:
OR_DEADCODE_DUMMY	pwbox.c	19;"	d	file:
OR_DEADCODE_DUMMY	pwbox.c	21;"	d	file:
OR_OPTIONS_MAGIC	config.c	592;"	d	file:
OR_STATE_MAGIC	statefile.c	102;"	d	file:
OS_BSD	ed25519-donna-portable-identify.h	12;"	d
OS_LINUX	ed25519-donna-portable-identify.h	10;"	d
OS_MAC	ed25519-donna-portable-identify.h	16;"	d
OS_NIX	ed25519-donna-portable-identify.h	8;"	d
OS_OPENBSD	ed25519-donna-portable-identify.h	18;"	d
OS_OSX	ed25519-donna-portable-identify.h	14;"	d
OS_SOLARIS	ed25519-donna-portable-identify.h	5;"	d
OS_WINDOWS	ed25519-donna-portable-identify.h	3;"	d
OVERFLOW_SAFE_SIGNED_LSHIFT	crypto_int32.h	16;"	d
OVERFLOW_SAFE_SIGNED_LSHIFT	crypto_int64.h	16;"	d
O_APPEND	orconfig.h	1186;"	d
O_BINARY	orconfig.h	1191;"	d
O_BINARY	util.h	41;"	d
O_CREAT	orconfig.h	1187;"	d
O_EXCL	orconfig.h	1189;"	d
O_NOINHERIT	orconfig.h	1194;"	d
O_NONBLOCK	orconfig.h	1185;"	d
O_RANDOM	orconfig.h	1196;"	d
O_RAW	orconfig.h	1192;"	d
O_RDONLY	orconfig.h	1182;"	d
O_RDWR	orconfig.h	1184;"	d
O_SEQUENTIAL	orconfig.h	1195;"	d
O_TEMPORARY	orconfig.h	1193;"	d
O_TEXT	orconfig.h	1190;"	d
O_TEXT	util.h	44;"	d
O_TRUNC	orconfig.h	1188;"	d
O_WRONLY	orconfig.h	1183;"	d
OfflineMasterKey	or.h	/^  int OfflineMasterKey;$/;"	m	struct:__anon24
OpenSCManagerA_fn	ntmain.c	/^  SC_HANDLE (WINAPI *OpenSCManagerA_fn)($/;"	m	struct:service_fns	file:
OpenServiceA_fn	ntmain.c	/^  SC_HANDLE (WINAPI *OpenServiceA_fn)($/;"	m	struct:service_fns	file:
OptimisticData	or.h	/^  int OptimisticData;$/;"	m	struct:__anon24
OutboundBindAddress	or.h	/^  config_line_t *OutboundBindAddress;$/;"	m	struct:__anon24
OutboundBindAddressIPv4_	or.h	/^  tor_addr_t OutboundBindAddressIPv4_;$/;"	m	struct:__anon24
OutboundBindAddressIPv6_	or.h	/^  tor_addr_t OutboundBindAddressIPv6_;$/;"	m	struct:__anon24
OwningControllerProcess	or.h	/^  char *OwningControllerProcess;$/;"	m	struct:__anon24
PACKAGE	orconfig.h	527;"	d
PACKAGE_BUGREPORT	orconfig.h	530;"	d
PACKAGE_NAME	orconfig.h	533;"	d
PACKAGE_STRING	orconfig.h	536;"	d
PACKAGE_TARNAME	orconfig.h	539;"	d
PACKAGE_URL	orconfig.h	542;"	d
PACKAGE_VERSION	orconfig.h	545;"	d
PAD	util_format.c	329;"	d	file:
PAD	util_format.c	442;"	d	file:
PAGE_READONLY	orconfig.h	2050;"	d
PARAM_NUM	sandbox.h	53;"	d
PARAM_PTR	sandbox.h	52;"	d
PARENT	container.c	836;"	d	file:
PATHBIAS_COUNT_INTERVAL	circpathbias.c	296;"	d	file:
PATHBIAS_SHOULDCOUNT_COUNTED	or.h	3045;"	d
PATHBIAS_SHOULDCOUNT_IGNORED	or.h	3044;"	d
PATHBIAS_SHOULDCOUNT_UNDECIDED	or.h	3043;"	d
PATH_SEPARATOR	compat.h	419;"	d
PATH_SEPARATOR	compat.h	421;"	d
PATH_STATE_ALREADY_COUNTED	or.h	/^    PATH_STATE_ALREADY_COUNTED = 6,$/;"	e	enum:__anon23
PATH_STATE_BUILD_ATTEMPTED	or.h	/^    PATH_STATE_BUILD_ATTEMPTED = 1,$/;"	e	enum:__anon23
PATH_STATE_BUILD_SUCCEEDED	or.h	/^    PATH_STATE_BUILD_SUCCEEDED = 2,$/;"	e	enum:__anon23
PATH_STATE_NEW_CIRC	or.h	/^    PATH_STATE_NEW_CIRC = 0,$/;"	e	enum:__anon23
PATH_STATE_USE_ATTEMPTED	or.h	/^    PATH_STATE_USE_ATTEMPTED = 3,$/;"	e	enum:__anon23
PATH_STATE_USE_FAILED	or.h	/^    PATH_STATE_USE_FAILED = 5,$/;"	e	enum:__anon23
PATH_STATE_USE_SUCCEEDED	or.h	/^    PATH_STATE_USE_SUCCEEDED = 4,$/;"	e	enum:__anon23
PBKDF2_KEY_LEN	crypto_s2k.c	48;"	d	file:
PBKDF2_SPEC_LEN	crypto_s2k.c	47;"	d	file:
PCSTR	orconfig.h	/^typedef const char *LPCSTR, *PCSTR;$/;"	t
PDS_ALLOW_SELF	or.h	5042;"	d
PDS_FOR_GUARD	or.h	5069;"	d
PDS_IGNORE_FASCISTFIREWALL	or.h	5052;"	d
PDS_NO_EXISTING_MICRODESC_FETCH	or.h	5065;"	d
PDS_NO_EXISTING_SERVERDESC_FETCH	or.h	5059;"	d
PDS_RETRY_IF_NO_SERVERS	or.h	5046;"	d
PERIODIC_FLAGS	compat_libevent.c	440;"	d	file:
PERIODIC_FLAGS	compat_libevent.c	442;"	d	file:
PERIODIC_TIMER_FLAGS	procmon.c	169;"	d	file:
PERIODIC_TIMER_FLAGS	procmon.c	171;"	d	file:
PF_APPLETALK	orconfig.h	1497;"	d
PF_ATM	orconfig.h	1502;"	d
PF_BAN	orconfig.h	1501;"	d
PF_CCITT	orconfig.h	1491;"	d
PF_CHAOS	orconfig.h	1484;"	d
PF_DATAKIT	orconfig.h	1490;"	d
PF_DECnet	orconfig.h	1493;"	d
PF_DLI	orconfig.h	1494;"	d
PF_ECMA	orconfig.h	1489;"	d
PF_FIREFOX	orconfig.h	1499;"	d
PF_HYLINK	orconfig.h	1496;"	d
PF_IMPLINK	orconfig.h	1482;"	d
PF_INET	orconfig.h	1481;"	d
PF_INET6	orconfig.h	1503;"	d
PF_IPX	orconfig.h	1486;"	d
PF_ISO	orconfig.h	1487;"	d
PF_LAT	orconfig.h	1495;"	d
PF_NS	orconfig.h	1485;"	d
PF_OSI	orconfig.h	1488;"	d
PF_PUP	orconfig.h	1483;"	d
PF_SNA	orconfig.h	1492;"	d
PF_UNIX	orconfig.h	1480;"	d
PF_UNKNOWN1	orconfig.h	1500;"	d
PF_UNSPEC	orconfig.h	1479;"	d
PF_VOICEVIEW	orconfig.h	1498;"	d
PID_T_FORMAT	procmon.c	36;"	d	file:
PID_T_FORMAT	procmon.c	38;"	d	file:
PID_T_FORMAT	procmon.c	40;"	d	file:
PID_T_FORMAT	procmon.c	42;"	d	file:
PIPROTO	orconfig.h	/^} IPPROTO, *PIPROTO;$/;"	t	typeref:enum:__anon54
PKCS1_OAEP_PADDING_OVERHEAD	crypto.h	77;"	d
PK_BYTES	crypto.h	62;"	d
PK_PKCS1_OAEP_PADDING	crypto.h	74;"	d
PLURAL	confparse.h	53;"	d
POLICY_BUF_LEN	policies.h	19;"	d
PORT_FORWARDING_CHECK_INTERVAL	main.c	1709;"	d	file:
PREDICT_LIKELY	compat.h	141;"	d
PREDICT_LIKELY	compat.h	157;"	d
PREDICT_UNLIKELY	compat.h	149;"	d
PREDICT_UNLIKELY	compat.h	158;"	d
PREFIX	control.c	2452;"	d	file:
PRINTF	rephist.c	813;"	d	file:
PRINTF	rephist.c	876;"	d	file:
PRIVATE_KEY_OK	crypto.c	81;"	d	file:
PROCESS_CELL	channeltls.c	1021;"	d	file:
PROCESS_CELL	command.c	151;"	d	file:
PROCESS_EXIT_ERROR	util.h	562;"	d
PROCESS_EXIT_EXITED	util.h	561;"	d
PROCESS_EXIT_RUNNING	util.h	560;"	d
PROCESS_STATUS_ERROR	util.h	527;"	d
PROCESS_STATUS_NOTRUNNING	util.h	525;"	d
PROCESS_STATUS_RUNNING	util.h	526;"	d
PROCMON_POLLS	procmon.c	49;"	d	file:
PROTOID	onion_ntor.c	45;"	d	file:
PROTOID_LEN	onion_ntor.c	46;"	d	file:
PROTO_CMETHOD	transports.c	119;"	d	file:
PROTO_CMETHODS_DONE	transports.c	123;"	d	file:
PROTO_CMETHOD_ERROR	transports.c	121;"	d	file:
PROTO_ENV_ERROR	transports.c	116;"	d	file:
PROTO_NEG_FAIL	transports.c	118;"	d	file:
PROTO_NEG_SUCCESS	transports.c	117;"	d	file:
PROTO_PROXY_DONE	transports.c	125;"	d	file:
PROTO_PROXY_ERROR	transports.c	126;"	d	file:
PROTO_SMETHOD	transports.c	120;"	d	file:
PROTO_SMETHODS_DONE	transports.c	124;"	d	file:
PROTO_SMETHOD_ERROR	transports.c	122;"	d	file:
PROTO_VERSION_ONE	transports.c	130;"	d	file:
PROV_RSA_FULL	orconfig.h	2009;"	d
PROXY_CONNECT	or.h	240;"	d
PROXY_CONNECTED	or.h	268;"	d
PROXY_HTTPS_WANT_CONNECT_OK	or.h	254;"	d
PROXY_INFANT	or.h	252;"	d
PROXY_NONE	or.h	239;"	d
PROXY_PLUGGABLE	or.h	248;"	d
PROXY_SOCKS4	or.h	241;"	d
PROXY_SOCKS4_WANT_CONNECT_OK	or.h	256;"	d
PROXY_SOCKS5	or.h	242;"	d
PROXY_SOCKS5_WANT_AUTH_METHOD_NONE	or.h	259;"	d
PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929	or.h	262;"	d
PROXY_SOCKS5_WANT_AUTH_RFC1929_OK	or.h	264;"	d
PROXY_SOCKS5_WANT_CONNECT_OK	or.h	266;"	d
PSDA_SVN_SIZE	ias_ra.h	92;"	d
PSDA_SVN_SIZE	remote_attestation_result.h	74;"	d
PSOCKADDR	orconfig.h	/^} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;$/;"	t	typeref:struct:sockaddr
PSVN_SIZE	ias_ra.h	94;"	d
PSVN_SIZE	remote_attestation_result.h	76;"	d
PTHREAD_CREATE_DETACHED	compat_pthreads.c	334;"	d	file:
PTHREAD_MUTEX_DEFAULT	orconfig.h	924;"	d
PTHREAD_MUTEX_ERRORCHECK	orconfig.h	923;"	d
PTHREAD_MUTEX_NORMAL	orconfig.h	921;"	d
PTHREAD_MUTEX_RECURSIVE	orconfig.h	922;"	d
PT_PRIVATE	transports.c	92;"	d	file:
PT_PROTO_ACCEPTING_METHODS	transports.h	/^  PT_PROTO_ACCEPTING_METHODS, \/* accepting methods *\/$/;"	e	enum:pt_proto_state
PT_PROTO_BROKEN	transports.h	/^  PT_PROTO_BROKEN, \/* broke during the protocol *\/$/;"	e	enum:pt_proto_state
PT_PROTO_COMPLETED	transports.h	/^  PT_PROTO_COMPLETED, \/* configure and registered its transports *\/$/;"	e	enum:pt_proto_state
PT_PROTO_CONFIGURED	transports.h	/^  PT_PROTO_CONFIGURED, \/* configured successfully *\/$/;"	e	enum:pt_proto_state
PT_PROTO_FAILED_LAUNCH	transports.h	/^  PT_PROTO_FAILED_LAUNCH \/* failed while launching *\/$/;"	e	enum:pt_proto_state
PT_PROTO_INFANT	transports.h	/^  PT_PROTO_INFANT, \/* was just born *\/$/;"	e	enum:pt_proto_state
PT_PROTO_LAUNCHED	transports.h	/^  PT_PROTO_LAUNCHED, \/* was just launched *\/$/;"	e	enum:pt_proto_state
PUBLIC_KEY_OK	crypto.c	79;"	d	file:
PUT	rephist.c	812;"	d	file:
PUT	rephist.c	875;"	d	file:
PWBOX0_CONST0	pwbox.h	12;"	d
PWBOX0_CONST1	pwbox.h	13;"	d
PathBiasCircThreshold	or.h	/^  int PathBiasCircThreshold;$/;"	m	struct:__anon24
PathBiasDropGuards	or.h	/^  int PathBiasDropGuards;$/;"	m	struct:__anon24
PathBiasExtremeRate	or.h	/^  double PathBiasExtremeRate;$/;"	m	struct:__anon24
PathBiasExtremeUseRate	or.h	/^  double PathBiasExtremeUseRate;$/;"	m	struct:__anon24
PathBiasNoticeRate	or.h	/^  double PathBiasNoticeRate;$/;"	m	struct:__anon24
PathBiasNoticeUseRate	or.h	/^  double PathBiasNoticeUseRate;$/;"	m	struct:__anon24
PathBiasScaleThreshold	or.h	/^  int PathBiasScaleThreshold;$/;"	m	struct:__anon24
PathBiasScaleUseThreshold	or.h	/^  int PathBiasScaleUseThreshold;$/;"	m	struct:__anon24
PathBiasUseThreshold	or.h	/^  int PathBiasUseThreshold;$/;"	m	struct:__anon24
PathBiasWarnRate	or.h	/^  double PathBiasWarnRate;$/;"	m	struct:__anon24
PathsNeededToBuildCircuits	or.h	/^  double PathsNeededToBuildCircuits;$/;"	m	struct:__anon24
PerConnBWBurst	or.h	/^  uint64_t PerConnBWBurst; \/**< Allowed burst on a single TLS conn, if set. *\/$/;"	m	struct:__anon24
PerConnBWRate	or.h	/^  uint64_t PerConnBWRate; \/**< Long-term bw on a single TLS conn, if set. *\/$/;"	m	struct:__anon24
PidFile	or.h	/^  char *PidFile; \/**< Where to store PID of Tor process. *\/$/;"	m	struct:__anon24
PortForwarding	or.h	/^  int PortForwarding; \/**< If true, use NAT-PMP or UPnP to automatically$/;"	m	struct:__anon24
PortForwardingHelper	or.h	/^  char *PortForwardingHelper; \/** < Filename or full path of the port$/;"	m	struct:__anon24
PredictedPortsRelevanceTime	or.h	/^  int PredictedPortsRelevanceTime; \/** How long after we've requested a$/;"	m	struct:__anon24
ProtocolWarnings	or.h	/^  int ProtocolWarnings; \/**< Boolean: when other parties screw up the Tor$/;"	m	struct:__anon24
PublishHidServDescriptors	or.h	/^  int PublishHidServDescriptors;$/;"	m	struct:__anon24
PublishServerDescriptor	or.h	/^  smartlist_t *PublishServerDescriptor;$/;"	m	struct:__anon24
PublishServerDescriptor_	or.h	/^  dirinfo_type_t PublishServerDescriptor_;$/;"	m	struct:__anon24
QueryServiceStatus_fn	ntmain.c	/^  BOOL (WINAPI *QueryServiceStatus_fn)($/;"	m	struct:service_fns	file:
RANGE_CHECK	dirvote.c	700;"	d	file:
RATELIM_INIT	util.h	362;"	d
RCS_BADDESC	rendcache.h	/^  RCS_BADDESC = -1, \/**< This descriptor is no good. *\/$/;"	e	enum:__anon2
RCS_NOTDIR	rendcache.h	/^  RCS_NOTDIR = -2, \/**< We're not a directory *\/$/;"	e	enum:__anon2
RCS_OKAY	rendcache.h	/^  RCS_OKAY = 0 \/**< All worked as expected *\/$/;"	e	enum:__anon2
REACHABILITY_MODULO_PER_TEST	dirserv.h	20;"	d
REACHABILITY_TEST_CYCLE_PERIOD	dirserv.h	26;"	d
REACHABILITY_TEST_INTERVAL	dirserv.h	23;"	d
REACHABLE_TIMEOUT	dirserv.c	810;"	d	file:
READ_EVENT	main.h	/^  READ_EVENT=0x02, \/**< We want to know when a connection is readable *\/$/;"	e	enum:watchable_events
REASONABLY_LIVE_TIME	networkstatus.c	1049;"	d	file:
RECOMMENDED_MIN_CIRCUIT_BUILD_TIMEOUT	config.c	2598;"	d	file:
RECV	TorSGX.cpp	/^int RECV(int s, void *msg, int size)$/;"	f
REG_SYSCALL	sandbox.c	87;"	d	file:
REG_SYSCALL	sandbox.c	95;"	d	file:
REJECT	config.c	2608;"	d	file:
REJECT	config.c	3898;"	d	file:
REJECT	policies.c	431;"	d	file:
REJECT	policies.c	506;"	d	file:
REJECT_CUTOFF_COUNT	policies.c	1480;"	d	file:
RELAY_BRIDGE_STATS_DELAY	config.c	1720;"	d	file:
RELAY_COMMAND_BEGIN	or.h	557;"	d
RELAY_COMMAND_BEGIN_DIR	or.h	569;"	d
RELAY_COMMAND_CONNECTED	or.h	560;"	d
RELAY_COMMAND_DATA	or.h	558;"	d
RELAY_COMMAND_DROP	or.h	566;"	d
RELAY_COMMAND_END	or.h	559;"	d
RELAY_COMMAND_ESTABLISH_INTRO	or.h	573;"	d
RELAY_COMMAND_ESTABLISH_RENDEZVOUS	or.h	574;"	d
RELAY_COMMAND_EXTEND	or.h	562;"	d
RELAY_COMMAND_EXTEND2	or.h	570;"	d
RELAY_COMMAND_EXTENDED	or.h	563;"	d
RELAY_COMMAND_EXTENDED2	or.h	571;"	d
RELAY_COMMAND_INTRODUCE1	or.h	575;"	d
RELAY_COMMAND_INTRODUCE2	or.h	576;"	d
RELAY_COMMAND_INTRODUCE_ACK	or.h	581;"	d
RELAY_COMMAND_INTRO_ESTABLISHED	or.h	579;"	d
RELAY_COMMAND_RENDEZVOUS1	or.h	577;"	d
RELAY_COMMAND_RENDEZVOUS2	or.h	578;"	d
RELAY_COMMAND_RENDEZVOUS_ESTABLISHED	or.h	580;"	d
RELAY_COMMAND_RESOLVE	or.h	567;"	d
RELAY_COMMAND_RESOLVED	or.h	568;"	d
RELAY_COMMAND_SENDME	or.h	561;"	d
RELAY_COMMAND_TRUNCATE	or.h	564;"	d
RELAY_COMMAND_TRUNCATED	or.h	565;"	d
RELAY_HEADER_SIZE	or.h	938;"	d
RELAY_PAYLOAD_SIZE	or.h	940;"	d
RELAY_PRIVATE	relay.c	13;"	d	file:
RELAY_REQUIRED_MIN_BANDWIDTH	or.h	5033;"	d
REMAP_STREAM_SOURCE_CACHE	or.h	653;"	d
REMAP_STREAM_SOURCE_EXIT	or.h	656;"	d
RENAME_SUFFIX	main.c	3167;"	d	file:
RENAME_SUFFIX2	main.c	3172;"	d	file:
RENDSERVICE_PRIVATE	rendservice.c	10;"	d	file:
REND_BASIC_AUTH	or.h	/^  REND_BASIC_AUTH   = 1,$/;"	e	enum:rend_auth_type_t
REND_BASIC_AUTH_CLIENT_ENTRY_LEN	or.h	756;"	d
REND_BASIC_AUTH_CLIENT_ID_LEN	or.h	747;"	d
REND_BASIC_AUTH_CLIENT_MULTIPLE	or.h	752;"	d
REND_CACHE_FAILURE_MAX_AGE	rendcache.h	22;"	d
REND_CACHE_MAX_AGE	rendcache.h	17;"	d
REND_CACHE_MAX_SKEW	rendcache.h	20;"	d
REND_CELLS_BIN_SIZE	rephist.c	3041;"	d	file:
REND_CELLS_DELTA_F	rephist.c	3034;"	d	file:
REND_CELLS_EPSILON	rephist.c	3038;"	d	file:
REND_CLIENT	or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon41
REND_CLIENTNAME_MAX_LEN	or.h	768;"	d
REND_COOKIE_LEN	or.h	772;"	d
REND_DESC_COOKIE_LEN	or.h	739;"	d
REND_DESC_COOKIE_LEN	rendcommon.c	52;"	d	file:
REND_DESC_COOKIE_LEN_BASE64	or.h	743;"	d
REND_DESC_ID_V2_LEN_BASE32	or.h	727;"	d
REND_DESC_MAX_SIZE	or.h	760;"	d
REND_HID_SERV_DIR_REQUERY_PERIOD	rendclient.c	474;"	d	file:
REND_INTRO_POINT_ID_LEN_BASE32	or.h	735;"	d
REND_LEGAL_CLIENTNAME_CHARACTERS	or.h	764;"	d
REND_MID	or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon41
REND_NO_AUTH	or.h	/^  REND_NO_AUTH      = 0,$/;"	e	enum:rend_auth_type_t
REND_NUMBER_OF_CONSECUTIVE_REPLICAS	or.h	724;"	d
REND_NUMBER_OF_NON_CONSECUTIVE_REPLICAS	or.h	721;"	d
REND_PROTOCOL_VERSION_BITMASK_WIDTH	or.h	4973;"	d
REND_REPLAY_TIME_INTERVAL	or.h	828;"	d
REND_REPLICA_LEN	rendcommon.c	56;"	d	file:
REND_SECRET_ID_PART_LEN_BASE32	or.h	731;"	d
REND_SERVER	or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon41
REND_SERVICE_ADDRESS_LEN	or.h	707;"	d
REND_SERVICE_ID_LEN	or.h	710;"	d
REND_SERVICE_ID_LEN_BASE32	or.h	704;"	d
REND_STEALTH_AUTH	or.h	/^  REND_STEALTH_AUTH = 2,$/;"	e	enum:rend_auth_type_t
REND_TIME_PERIOD_OVERLAPPING_V2_DESCS	or.h	717;"	d
REND_TIME_PERIOD_V2_DESC_VALIDITY	or.h	713;"	d
REND_TOKEN_LEN	or.h	3257;"	d
REPLAYCACHE_PRIVATE	replaycache.c	10;"	d	file:
RESOLVED_TYPE_AUTO	dns.c	509;"	d	file:
RESOLVED_TYPE_ERROR	or.h	663;"	d
RESOLVED_TYPE_ERROR_TRANSIENT	or.h	662;"	d
RESOLVED_TYPE_HOSTNAME	or.h	659;"	d
RESOLVED_TYPE_IPV4	or.h	660;"	d
RESOLVED_TYPE_IPV6	or.h	661;"	d
RESOLVE_MAX_TIMEOUT	dns.c	88;"	d	file:
RESPONSE_GRANULARITY	geoip.c	1226;"	d	file:
RESPONSE_GRANULARITY	geoip.c	1231;"	d	file:
RES_STATUS_DONE_ERR	dns_structs.h	41;"	d
RES_STATUS_DONE_OK	dns_structs.h	39;"	d
RES_STATUS_INFLIGHT	dns_structs.h	37;"	d
RETRY_DNS_INTERVAL	main.c	1536;"	d	file:
RET_ERR	routerparse.c	3919;"	d	file:
RET_ERR	routerparse.c	4180;"	d	file:
REVERSE_LOOKUP_NAME_BUF_LEN	address.h	228;"	d
RFC1123_TIME_LEN	util.h	307;"	d
RFTS_BIN	util.h	450;"	d
RFTS_IGNORE_MISSING	util.h	452;"	d
RIGHT_CHILD	container.c	835;"	d	file:
RIMAP_FOREACH	routerlist.c	55;"	d	file:
ROBOTS_CACHE_LIFETIME	directory.c	114;"	d	file:
ROTATE	csiphash.c	74;"	d	file:
ROTL32	ed25519-donna-portable.h	20;"	d
ROTL32	ed25519-donna-portable.h	29;"	d
ROTR32	ed25519-donna-portable.h	21;"	d
ROTR32	ed25519-donna-portable.h	30;"	d
ROUND_UP	hibernate.c	632;"	d	file:
ROUND_UP	hibernate.c	655;"	d	file:
ROUTERDESC_BY_DIGEST_CACHE_LIFETIME	directory.c	113;"	d	file:
ROUTERDESC_CACHE_LIFETIME	directory.c	112;"	d	file:
ROUTERLIST_PRIVATE	routerlist.c	14;"	d	file:
ROUTERPARSE_PRIVATE	routerparse.c	12;"	d	file:
ROUTERSET_PRIVATE	routerset.c	7;"	d	file:
ROUTER_ADDED_NOTIFY_GENERATOR	or.h	/^  ROUTER_ADDED_NOTIFY_GENERATOR = 0,$/;"	e	enum:was_router_added_t
ROUTER_ADDED_SUCCESSFULLY	or.h	/^  ROUTER_ADDED_SUCCESSFULLY = 1,$/;"	e	enum:was_router_added_t
ROUTER_ALLOW_SKEW	dirserv.c	40;"	d	file:
ROUTER_ALLOW_UPTIME_DRIFT	routerlist.c	4823;"	d	file:
ROUTER_ANNOTATION_BUF_LEN	or.h	1977;"	d
ROUTER_AUTHDIR_REJECTS	or.h	/^  ROUTER_AUTHDIR_REJECTS = -5,$/;"	e	enum:was_router_added_t
ROUTER_BAD_EI	or.h	/^  ROUTER_BAD_EI = -1,$/;"	e	enum:was_router_added_t
ROUTER_CERTS_EXPIRED	or.h	/^  ROUTER_CERTS_EXPIRED = -8$/;"	e	enum:was_router_added_t
ROUTER_IS_ALREADY_KNOWN	or.h	/^  ROUTER_IS_ALREADY_KNOWN = -2,$/;"	e	enum:was_router_added_t
ROUTER_MAX_AGE	or.h	181;"	d
ROUTER_MAX_AGE_TO_PUBLISH	or.h	184;"	d
ROUTER_MAX_COSMETIC_TIME_DIFFERENCE	routerlist.c	4820;"	d	file:
ROUTER_MAX_DECLARED_BANDWIDTH	or.h	5036;"	d
ROUTER_NOT_IN_CONSENSUS	or.h	/^  ROUTER_NOT_IN_CONSENSUS = -3,$/;"	e	enum:was_router_added_t
ROUTER_NOT_IN_CONSENSUS_OR_NETWORKSTATUS	or.h	/^  ROUTER_NOT_IN_CONSENSUS_OR_NETWORKSTATUS = -4,$/;"	e	enum:was_router_added_t
ROUTER_PRIVATE	router.c	7;"	d	file:
ROUTER_PURPOSE_BRIDGE	or.h	2097;"	d
ROUTER_PURPOSE_CONTROLLER	or.h	2093;"	d
ROUTER_PURPOSE_GENERAL	or.h	2089;"	d
ROUTER_PURPOSE_UNKNOWN	or.h	2100;"	d
ROUTER_STORE	or.h	/^  ROUTER_STORE = 0,$/;"	e	enum:store_type_t
ROUTER_WAS_NOT_WANTED	or.h	/^  ROUTER_WAS_NOT_WANTED = -6,$/;"	e	enum:was_router_added_t
ROUTER_WAS_TOO_OLD	or.h	/^  ROUTER_WAS_TOO_OLD = -7, \/* note contrast with 'NOT_NEW' *\/$/;"	e	enum:was_router_added_t
RPP_ECHO_OFF	tor_readpassphrase.h	32;"	d
RPP_ECHO_ON	tor_readpassphrase.h	33;"	d
RPP_FORCELOWER	tor_readpassphrase.h	35;"	d
RPP_FORCEUPPER	tor_readpassphrase.h	36;"	d
RPP_REQUIRE_TTY	tor_readpassphrase.h	34;"	d
RPP_SEVENBIT	tor_readpassphrase.h	37;"	d
RPP_STDIN	tor_readpassphrase.h	38;"	d
RRS_DONT_REMOVE_OLD	routerlist.c	1033;"	d	file:
RRS_FORCE	routerlist.c	1032;"	d	file:
RSAE_ADDREXISTS	rendservice.h	/^  RSAE_ADDREXISTS = -3, \/**< Onion address collision *\/$/;"	e	enum:__anon120
RSAE_BADPRIVKEY	rendservice.h	/^  RSAE_BADPRIVKEY = -2, \/**< Invalid public key *\/$/;"	e	enum:__anon120
RSAE_BADVIRTPORT	rendservice.h	/^  RSAE_BADVIRTPORT = -4, \/**< Invalid VIRTPORT\/TARGET(s) *\/$/;"	e	enum:__anon120
RSAE_INTERNAL	rendservice.h	/^  RSAE_INTERNAL = -1, \/**< Internal error *\/$/;"	e	enum:__anon120
RSAE_OKAY	rendservice.h	/^  RSAE_OKAY = 0 \/**< Service added as expected *\/$/;"	e	enum:__anon120
RSHIFT_DOES_SIGN_EXTEND	orconfig.h	551;"	d
RUNNINGROUTERS_CACHE_LIFETIME	directory.c	109;"	d	file:
R_INTRODUCTION_POINTS	routerparse.c	/^  R_INTRODUCTION_POINTS,$/;"	e	enum:__anon97	file:
R_IPO_IDENTIFIER	routerparse.c	/^  R_IPO_IDENTIFIER,$/;"	e	enum:__anon97	file:
R_IPO_IP_ADDRESS	routerparse.c	/^  R_IPO_IP_ADDRESS,$/;"	e	enum:__anon97	file:
R_IPO_ONION_KEY	routerparse.c	/^  R_IPO_ONION_KEY,$/;"	e	enum:__anon97	file:
R_IPO_ONION_PORT	routerparse.c	/^  R_IPO_ONION_PORT,$/;"	e	enum:__anon97	file:
R_IPO_SERVICE_KEY	routerparse.c	/^  R_IPO_SERVICE_KEY,$/;"	e	enum:__anon97	file:
R_PERMANENT_KEY	routerparse.c	/^  R_PERMANENT_KEY,$/;"	e	enum:__anon97	file:
R_PROTOCOL_VERSIONS	routerparse.c	/^  R_PROTOCOL_VERSIONS,$/;"	e	enum:__anon97	file:
R_PUBLICATION_TIME	routerparse.c	/^  R_PUBLICATION_TIME,$/;"	e	enum:__anon97	file:
R_RENDEZVOUS_SERVICE_DESCRIPTOR	routerparse.c	/^  R_RENDEZVOUS_SERVICE_DESCRIPTOR,$/;"	e	enum:__anon97	file:
R_SECRET_ID_PART	routerparse.c	/^  R_SECRET_ID_PART,$/;"	e	enum:__anon97	file:
R_SIGNATURE	routerparse.c	/^  R_SIGNATURE,$/;"	e	enum:__anon97	file:
R_VERSION	routerparse.c	/^  R_VERSION,$/;"	e	enum:__anon97	file:
ReachableAddresses	or.h	/^  config_line_t *ReachableAddresses; \/**< IP:ports our firewall allows. *\/$/;"	m	struct:__anon24
ReachableDirAddresses	or.h	/^  config_line_t *ReachableDirAddresses; \/**< IP:ports for Dir conns. *\/$/;"	m	struct:__anon24
ReachableORAddresses	or.h	/^  config_line_t *ReachableORAddresses; \/**< IP:ports for OR conns. *\/$/;"	m	struct:__anon24
RecommendedClientVersions	or.h	/^  config_line_t *RecommendedClientVersions;$/;"	m	struct:__anon24
RecommendedPackages	or.h	/^  config_line_t *RecommendedPackages;$/;"	m	struct:__anon24
RecommendedServerVersions	or.h	/^  config_line_t *RecommendedServerVersions;$/;"	m	struct:__anon24
RecommendedVersions	or.h	/^  config_line_t *RecommendedVersions;$/;"	m	struct:__anon24
RefuseUnknownExits	or.h	/^  int RefuseUnknownExits;$/;"	m	struct:__anon24
RegisterServiceCtrlHandlerA_fn	ntmain.c	/^  SERVICE_STATUS_HANDLE (WINAPI *RegisterServiceCtrlHandlerA_fn)($/;"	m	struct:service_fns	file:
RejectPlaintextPorts	or.h	/^  smartlist_t *RejectPlaintextPorts;$/;"	m	struct:__anon24
RelayBandwidthBurst	or.h	/^  uint64_t RelayBandwidthBurst; \/**< How much bandwidth, at maximum, will we$/;"	m	struct:__anon24
RelayBandwidthRate	or.h	/^  uint64_t RelayBandwidthRate; \/**< How much bandwidth, on average, are we$/;"	m	struct:__anon24
ReloadTorrcOnSIGHUP	or.h	/^  int ReloadTorrcOnSIGHUP;$/;"	m	struct:__anon24
RendConfigLines	or.h	/^  config_line_t *RendConfigLines; \/**< List of configuration lines$/;"	m	struct:__anon24
RendPostPeriod	or.h	/^  int RendPostPeriod; \/**< How often do we post each rendezvous service$/;"	m	struct:__anon24
RephistTrackTime	or.h	/^  int RephistTrackTime; \/**< How many seconds do we keep rephist info? *\/$/;"	m	struct:__anon24
RunAsDaemon	or.h	/^  int RunAsDaemon; \/**< If true, run in the background. (Unix only) *\/$/;"	m	struct:__anon24
S0	ed25519-hash.h	72;"	d
S1	ed25519-hash.h	73;"	d
S1_SWINDOWSIZE	ed25519-donna-impl-base.h	246;"	d
S1_SWINDOWSIZE	ed25519-donna-impl-sse2.h	278;"	d
S1_TABLE_SIZE	ed25519-donna-impl-base.h	247;"	d
S1_TABLE_SIZE	ed25519-donna-impl-sse2.h	279;"	d
S2K_BAD_ALGORITHM	crypto_s2k.h	39;"	d
S2K_BAD_LEN	crypto_s2k.h	48;"	d
S2K_BAD_PARAMS	crypto_s2k.h	41;"	d
S2K_BAD_SECRET	crypto_s2k.h	37;"	d
S2K_FAILED	crypto_s2k.h	35;"	d
S2K_FLAG_LOW_MEM	crypto_s2k.h	24;"	d
S2K_FLAG_NO_SCRYPT	crypto_s2k.h	21;"	d
S2K_FLAG_USE_PBKDF2	crypto_s2k.h	27;"	d
S2K_MAXLEN	crypto_s2k.h	30;"	d
S2K_NO_SCRYPT_SUPPORT	crypto_s2k.h	43;"	d
S2K_OKAY	crypto_s2k.h	33;"	d
S2K_RFC2440_SPECIFIER_LEN	crypto_s2k.h	15;"	d
S2K_TRUNCATED	crypto_s2k.h	46;"	d
S2K_TYPE_PBKDF2	crypto_s2k.c	44;"	d	file:
S2K_TYPE_RFC2440	crypto_s2k.c	43;"	d	file:
S2K_TYPE_SCRYPT	crypto_s2k.c	45;"	d	file:
S2_SWINDOWSIZE	ed25519-donna-impl-base.h	248;"	d
S2_SWINDOWSIZE	ed25519-donna-impl-sse2.h	280;"	d
S2_TABLE_SIZE	ed25519-donna-impl-base.h	249;"	d
S2_TABLE_SIZE	ed25519-donna-impl-sse2.h	281;"	d
S6_ADDR16	compat.h	511;"	d
S6_ADDR16	compat.h	513;"	d
S6_ADDR32	compat.h	506;"	d
S6_ADDR32	compat.h	508;"	d
SAFECOOKIE_CONTROLLER_TO_SERVER_CONSTANT	control.c	109;"	d	file:
SAFECOOKIE_SERVER_NONCE_LEN	control.c	111;"	d	file:
SAFECOOKIE_SERVER_TO_CONTROLLER_CONSTANT	control.c	107;"	d	file:
SAFELOG_SCRUB_ALL	or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon24::__anon28
SAFELOG_SCRUB_NONE	or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon24::__anon28
SAFELOG_SCRUB_RELAY	or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon24::__anon28
SAMPLE_AES_CMAC_KDF_ID	service_provider.h	/^const uint16_t SAMPLE_AES_CMAC_KDF_ID = 0x0001;$/;"	v
SAMPLE_CPUSVN_SIZE	ias_ra.h	107;"	d
SAMPLE_ECP_KEY_SIZE	ias_ra.h	36;"	d
SAMPLE_FEBITSIZE	ias_ra.h	33;"	d
SAMPLE_FEBITSIZE	remote_attestation_result.h	39;"	d
SAMPLE_HASH_SIZE	ias_ra.h	96;"	d
SAMPLE_MAC_SIZE	ias_ra.h	97;"	d
SAMPLE_MAC_SIZE	remote_attestation_result.h	34;"	d
SAMPLE_NISTP256_KEY_SIZE	remote_attestation_result.h	42;"	d
SAMPLE_PLATFORM_INFO_SIZE	remote_attestation_result.h	78;"	d
SAMPLE_QUOTE_LINKABLE_SIGNATURE	ias_ra.h	168;"	d
SAMPLE_QUOTE_UNLINKABLE_SIGNATURE	ias_ra.h	167;"	d
SAMPLE_REPORT_DATA_SIZE	ias_ra.h	100;"	d
SAMPLE_SP_IV_SIZE	service_provider.h	51;"	d
SAMPLE_SP_TAG_SIZE	remote_attestation_result.h	52;"	d
SAMPLE_SP_TAG_SIZE	service_provider.h	50;"	d
SANDBOX_H_	sandbox.h	13;"	d
SAVED_IN_CACHE	or.h	/^  SAVED_IN_CACHE,$/;"	e	enum:__anon12
SAVED_IN_JOURNAL	or.h	/^  SAVED_IN_JOURNAL$/;"	e	enum:__anon12
SAVED_NOWHERE	or.h	/^  SAVED_NOWHERE=0,$/;"	e	enum:__anon12
SAVE_STABILITY_INTERVAL	main.c	1426;"	d	file:
SB_IMPL	sandbox.h	/^} SB_IMPL;$/;"	t	typeref:enum:__anon84
SB_NOCHANGE_STR	config.c	4051;"	d	file:
SB_NOCHANGE_STR	config.c	4065;"	d	file:
SCALE_TO_U64_MAX	routerlist.c	1882;"	d	file:
SCALE_TO_U64_MAX	routerlist.c	1896;"	d	file:
SCHEDULER_PRIVATE_	scheduler.c	15;"	d	file:
SCHED_CHAN_IDLE	channel.h	/^    SCHED_CHAN_IDLE = 0,$/;"	e	enum:channel_s::__anon72
SCHED_CHAN_PENDING	channel.h	/^    SCHED_CHAN_PENDING$/;"	e	enum:channel_s::__anon72
SCHED_CHAN_WAITING_FOR_CELLS	channel.h	/^    SCHED_CHAN_WAITING_FOR_CELLS,$/;"	e	enum:channel_s::__anon72
SCHED_CHAN_WAITING_TO_WRITE	channel.h	/^    SCHED_CHAN_WAITING_TO_WRITE,$/;"	e	enum:channel_s::__anon72
SCMP_CMP	sandbox.c	109;"	d	file:
SCMP_CMP	sandbox.c	110;"	d	file:
SCMP_CMP4	sandbox.c	113;"	d	file:
SCMP_CMP_MASKED	sandbox.c	118;"	d	file:
SCMP_CMP_STR	sandbox.c	111;"	d	file:
SCMP_stat	sandbox.c	1205;"	d	file:
SCMP_stat	sandbox.c	1207;"	d	file:
SCRYPT_KEY_LEN	crypto_s2k.c	51;"	d	file:
SCRYPT_SPEC_LEN	crypto_s2k.c	50;"	d	file:
SC_H	sc.h	2;"	d
SDMAP_FOREACH	routerlist.c	52;"	d	file:
SECRET_INPUT_LEN	onion_ntor.c	101;"	d	file:
SECTION_EXTEND_SIZE	orconfig.h	2056;"	d
SECTION_MAP_EXECUTE	orconfig.h	2055;"	d
SECTION_MAP_EXECUTE_EXPLICIT	orconfig.h	2057;"	d
SECTION_MAP_READ	orconfig.h	2054;"	d
SECTION_MAP_WRITE	orconfig.h	2053;"	d
SECTION_QUERY	orconfig.h	2052;"	d
SEEK_CUR	compat.c	1126;"	d	file:
SEEK_CUR	orconfig.h	1200;"	d
SEEK_END	compat.c	1129;"	d	file:
SEEK_END	orconfig.h	1201;"	d
SEEK_SET	compat.c	1123;"	d	file:
SEEK_SET	orconfig.h	1199;"	d
SELF_EXCLUDED_WARN_INTERVAL	router.c	1222;"	d	file:
SEND	TorSGX.cpp	/^int SEND(int s, void *msg, int size)$/;"	f
SEND_HS_DESC_FAILED_CONTENT	directory.c	2106;"	d	file:
SEND_HS_DESC_FAILED_EVENT	directory.c	2102;"	d	file:
SEND_HS_DESC_UPLOAD_FAILED_EVENT	directory.c	2188;"	d	file:
SENTINEL_LEN	memarea.c	44;"	d	file:
SENTINEL_LEN	memarea.c	58;"	d	file:
SENTINEL_VAL	memarea.c	42;"	d	file:
SERIAL_NUMBER_SIZE	tortls.c	573;"	d	file:
SERIAL_NUMBER_SIZE	tortls.c	653;"	d	file:
SERVER_CIPHER_LIST	tortls.c	658;"	d	file:
SERVER_STR	onion_ntor.c	98;"	d	file:
SERVER_STR_LEN	onion_ntor.c	99;"	d	file:
SESSION_GROUP_CONTROL_RESOLVE	or.h	3358;"	d
SESSION_GROUP_DIRCONN	or.h	3356;"	d
SESSION_GROUP_FIRST_AUTO	or.h	3360;"	d
SESSION_GROUP_UNSET	or.h	3354;"	d
SET	dns.c	1461;"	d	file:
SET	dns.c	1476;"	d	file:
SETOPT_ERR_MISC	or.h	/^  SETOPT_ERR_MISC = -1,$/;"	e	enum:setopt_err_t
SETOPT_ERR_PARSE	or.h	/^  SETOPT_ERR_PARSE = -2,$/;"	e	enum:setopt_err_t
SETOPT_ERR_SETTING	or.h	/^  SETOPT_ERR_SETTING = -4,$/;"	e	enum:setopt_err_t
SETOPT_ERR_TRANSITION	or.h	/^  SETOPT_ERR_TRANSITION = -3,$/;"	e	enum:setopt_err_t
SETOPT_OK	or.h	/^  SETOPT_OK = 0,$/;"	e	enum:setopt_err_t
SET_CERT	routerkeys.c	678;"	d	file:
SET_CERT	routerkeys.c	955;"	d	file:
SET_CUTOFF	circuituse.c	405;"	d	file:
SET_KEY	routerkeys.c	673;"	d	file:
SET_KEY	routerkeys.c	954;"	d	file:
SET_SENTINEL	memarea.c	47;"	d	file:
SET_SENTINEL	memarea.c	59;"	d	file:
SEVERITY_MASK_IDX	log.c	41;"	d	file:
SGX_CAST	TorSGX_u.h	11;"	d
SHARES	rephist.c	2373;"	d	file:
SHARES	rephist.c	2465;"	d	file:
SHARE_DATADIR	orconfig.h	691;"	d
SHL32	crypto_int32.h	20;"	d
SHL64	crypto_int64.h	20;"	d
SHL8	crypto_int32.h	22;"	d
SHORT_FILE__	compat.h	333;"	d
SHORT_FILE__	compat.h	336;"	d
SHORT_MAX	torint.h	305;"	d
SHORT_MAX	torint.h	307;"	d
SIGABRT	orconfig.h	964;"	d
SIGALRM	orconfig.h	973;"	d
SIGBUS	orconfig.h	966;"	d
SIGCHLD	orconfig.h	976;"	d
SIGCLEARDNSCACHE	or.h	120;"	d
SIGCONT	orconfig.h	977;"	d
SIGFPE	orconfig.h	967;"	d
SIGHEARTBEAT	or.h	121;"	d
SIGHUP	or.h	103;"	d
SIGHUP	orconfig.h	959;"	d
SIGILL	orconfig.h	962;"	d
SIGINT	or.h	106;"	d
SIGINT	orconfig.h	960;"	d
SIGIO	orconfig.h	988;"	d
SIGIOT	orconfig.h	965;"	d
SIGKILL	orconfig.h	968;"	d
SIGNED_KEY_TYPE_ED25519	torcert.h	9;"	d
SIGNEWNYM	or.h	119;"	d
SIGNING_KEY_BITS	tor-gencert.c	37;"	d	file:
SIGN_DIR	or.h	/^  SIGN_DIR, SIGN_RTR,$/;"	e	enum:__anon41
SIGN_RTR	or.h	/^  SIGN_DIR, SIGN_RTR,$/;"	e	enum:__anon41
SIGPIPE	orconfig.h	972;"	d
SIGPOLL	orconfig.h	989;"	d
SIGPROF	orconfig.h	986;"	d
SIGPWR	orconfig.h	993;"	d
SIGQUIT	orconfig.h	961;"	d
SIGRTMAX	orconfig.h	999;"	d
SIGRTMIN	orconfig.h	998;"	d
SIGSEGV	orconfig.h	970;"	d
SIGSTKFLT	orconfig.h	975;"	d
SIGSTOP	orconfig.h	978;"	d
SIGSYS	orconfig.h	994;"	d
SIGTERM	or.h	115;"	d
SIGTERM	orconfig.h	974;"	d
SIGTRAP	orconfig.h	963;"	d
SIGTSTP	orconfig.h	979;"	d
SIGTTIN	orconfig.h	980;"	d
SIGTTOU	orconfig.h	981;"	d
SIGUNUSED	orconfig.h	995;"	d
SIGURG	orconfig.h	982;"	d
SIGUSR1	or.h	109;"	d
SIGUSR1	orconfig.h	969;"	d
SIGUSR2	or.h	112;"	d
SIGUSR2	orconfig.h	971;"	d
SIGVTALRM	orconfig.h	985;"	d
SIGWINCH	orconfig.h	987;"	d
SIGXCPU	orconfig.h	983;"	d
SIGXFSZ	orconfig.h	984;"	d
SIG_DFL	orconfig.h	760;"	d
SIG_ERR	orconfig.h	762;"	d
SIG_IGN	orconfig.h	761;"	d
SIG_SETMASK	orconfig.h	919;"	d
SIPHASH_H	siphash.h	2;"	d
SIZEOF_CELL_T	orconfig.h	554;"	d
SIZEOF_CHAR	orconfig.h	557;"	d
SIZEOF_INT	orconfig.h	560;"	d
SIZEOF_INT16_T	orconfig.h	563;"	d
SIZEOF_INT32_T	orconfig.h	566;"	d
SIZEOF_INT64_T	orconfig.h	569;"	d
SIZEOF_INT8_T	orconfig.h	572;"	d
SIZEOF_INTPTR_T	orconfig.h	575;"	d
SIZEOF_INTPTR_T	torint.h	221;"	d
SIZEOF_INTPTR_T	torint.h	230;"	d
SIZEOF_LONG	orconfig.h	578;"	d
SIZEOF_LONG_LONG	orconfig.h	581;"	d
SIZEOF_PID_T	orconfig.h	584;"	d
SIZEOF_SHORT	orconfig.h	587;"	d
SIZEOF_SIZE_T	orconfig.h	590;"	d
SIZEOF_SOCKLEN_T	orconfig.h	593;"	d
SIZEOF_TIME_T	orconfig.h	596;"	d
SIZEOF_UINT16_T	orconfig.h	599;"	d
SIZEOF_UINT32_T	orconfig.h	602;"	d
SIZEOF_UINT64_T	orconfig.h	605;"	d
SIZEOF_UINT8_T	orconfig.h	608;"	d
SIZEOF_UINTPTR_T	orconfig.h	611;"	d
SIZEOF_UINTPTR_T	torint.h	225;"	d
SIZEOF_UINTPTR_T	torint.h	234;"	d
SIZEOF_VOID_P	orconfig.h	614;"	d
SIZEOF___INT64	orconfig.h	617;"	d
SIZE_MAX	torint.h	200;"	d
SIZE_MAX	torint.h	202;"	d
SIZE_MAX	torint.h	341;"	d
SIZE_MAX	torint.h	343;"	d
SIZE_T_CEILING	torint.h	362;"	d
SLOW_GUARD_STATE_FLUSH_TIME	entrynodes.c	1478;"	d	file:
SMARTLIST_DEFAULT_CAPACITY	container.c	27;"	d	file:
SMARTLIST_DEL_CURRENT	container.h	244;"	d
SMARTLIST_DEL_CURRENT_KEEPORDER	container.h	254;"	d
SMARTLIST_FOREACH	container.h	236;"	d
SMARTLIST_FOREACH_BEGIN	container.h	216;"	d
SMARTLIST_FOREACH_END	container.h	224;"	d
SMARTLIST_FOREACH_JOIN	container.h	314;"	d
SMARTLIST_FOREACH_JOIN_END	container.h	340;"	d
SMARTLIST_REPLACE_CURRENT	container.h	265;"	d
SOCKADDR	orconfig.h	/^} SOCKADDR, *PSOCKADDR, *LPSOCKADDR;$/;"	t	typeref:struct:sockaddr
SOCKET_OK	compat.h	435;"	d
SOCKET_OK	compat.h	444;"	d
SOCKET_OK	compat.h	451;"	d
SOCKS4_GRANTED	connection_edge.c	74;"	d	file:
SOCKS4_NETWORK_LEN	or.h	898;"	d
SOCKS4_REJECT	connection_edge.c	75;"	d	file:
SOCKS4_STANDARD_BUFFER_SIZE	connection.c	1886;"	d	file:
SOCKS5_ADDRESS_TYPE_NOT_SUPPORTED	compat.h	/^  SOCKS5_ADDRESS_TYPE_NOT_SUPPORTED = 0x08,$/;"	e	enum:__anon126
SOCKS5_COMMAND_NOT_SUPPORTED	compat.h	/^  SOCKS5_COMMAND_NOT_SUPPORTED      = 0x07,$/;"	e	enum:__anon126
SOCKS5_CONNECTION_REFUSED	compat.h	/^  SOCKS5_CONNECTION_REFUSED         = 0x05,$/;"	e	enum:__anon126
SOCKS5_GENERAL_ERROR	compat.h	/^  SOCKS5_GENERAL_ERROR              = 0x01,$/;"	e	enum:__anon126
SOCKS5_HOST_UNREACHABLE	compat.h	/^  SOCKS5_HOST_UNREACHABLE           = 0x04,$/;"	e	enum:__anon126
SOCKS5_NET_UNREACHABLE	compat.h	/^  SOCKS5_NET_UNREACHABLE            = 0x03,$/;"	e	enum:__anon126
SOCKS5_NOT_ALLOWED	compat.h	/^  SOCKS5_NOT_ALLOWED                = 0x02,$/;"	e	enum:__anon126
SOCKS5_SUCCEEDED	compat.h	/^  SOCKS5_SUCCEEDED                  = 0x00,$/;"	e	enum:__anon126
SOCKS5_TTL_EXPIRED	compat.h	/^  SOCKS5_TTL_EXPIRED                = 0x06,$/;"	e	enum:__anon126
SOCKS_COMMAND_CONNECT	or.h	4405;"	d
SOCKS_COMMAND_IS_CONNECT	or.h	4412;"	d
SOCKS_COMMAND_IS_RESOLVE	or.h	4413;"	d
SOCKS_COMMAND_RESOLVE	or.h	4407;"	d
SOCKS_COMMAND_RESOLVE_PTR	or.h	4409;"	d
SOCKS_NO_AUTH	or.h	4401;"	d
SOCKS_USER_PASS	or.h	4402;"	d
SOCKS_WARN_INTERVAL	buffers.c	1340;"	d	file:
SOCK_DGRAM	orconfig.h	1438;"	d
SOCK_ERRNO	compat.h	548;"	d
SOCK_ERRNO	compat.h	571;"	d
SOCK_PACKET	orconfig.h	1442;"	d
SOCK_RAW	orconfig.h	1439;"	d
SOCK_RDM	orconfig.h	1440;"	d
SOCK_SEQPACKET	orconfig.h	1441;"	d
SOCK_STREAM	compat_threads.h	22;"	d
SOCK_STREAM	orconfig.h	1437;"	d
SOFT_LIM_BYTES	hibernate.c	743;"	d	file:
SOFT_LIM_MINUTES	hibernate.c	744;"	d	file:
SOFT_LIM_PCT	hibernate.c	742;"	d	file:
SOL_SOCKET	orconfig.h	1039;"	d
SOMAXCONN	orconfig.h	1034;"	d
SO_ACCEPTCONN	orconfig.h	1009;"	d
SO_BROADCAST	orconfig.h	1013;"	d
SO_DEBUG	orconfig.h	1008;"	d
SO_DONTROUTE	orconfig.h	1012;"	d
SO_ERROR	orconfig.h	1028;"	d
SO_KEEPALIVE	orconfig.h	1011;"	d
SO_LINGER	orconfig.h	1015;"	d
SO_OOBINLINE	orconfig.h	1016;"	d
SO_RCVBUF	orconfig.h	1023;"	d
SO_RCVLOWAT	orconfig.h	1025;"	d
SO_RCVTIMEO	orconfig.h	1027;"	d
SO_REUSEADDR	orconfig.h	1010;"	d
SO_REUSEPORT	orconfig.h	1017;"	d
SO_SNDBUF	orconfig.h	1022;"	d
SO_SNDLOWAT	orconfig.h	1024;"	d
SO_SNDTIMEO	orconfig.h	1026;"	d
SO_TYPE	orconfig.h	1029;"	d
SO_USELOOPBACK	orconfig.h	1014;"	d
SP	util_format.c	328;"	d	file:
SP	util_format.c	441;"	d	file:
SPAWN_ERROR_MESSAGE	util.h	492;"	d
SPECTYPE_IPV4	onion.c	810;"	d	file:
SPECTYPE_IPV6	onion.c	811;"	d	file:
SPECTYPE_LEGACY_ID	onion.c	812;"	d	file:
SPLIT_IGNORE_BLANK	container.h	142;"	d
SPLIT_SKIP_SPACE	container.h	141;"	d
SPLIT_STRIP_SPACE	container.h	143;"	d
SP_IAS_FAILED	service_provider.h	/^    SP_IAS_FAILED,$/;"	e	enum:__anon63
SP_INTEGRITY_FAILED	service_provider.h	/^    SP_INTEGRITY_FAILED,$/;"	e	enum:__anon63
SP_INTERNAL_ERROR	service_provider.h	/^    SP_INTERNAL_ERROR,$/;"	e	enum:__anon63
SP_OK	service_provider.h	/^    SP_OK,$/;"	e	enum:__anon63
SP_PROTOCOL_ERROR	service_provider.h	/^    SP_PROTOCOL_ERROR,$/;"	e	enum:__anon63
SP_QUOTE_VERIFICATION_FAILED	service_provider.h	/^    SP_QUOTE_VERIFICATION_FAILED,$/;"	e	enum:__anon63
SP_QUOTE_VERSION_ERROR	service_provider.h	/^    SP_QUOTE_VERSION_ERROR,$/;"	e	enum:__anon63
SP_UNSUPPORTED_EXTENDED_EPID_GROUP	service_provider.h	/^    SP_UNSUPPORTED_EXTENDED_EPID_GROUP,$/;"	e	enum:__anon63
SQRT_SIZE_MAX_P1	util.c	258;"	d	file:
SRC_EXT_ED25519_DONNA_H_INCLUDED_	ed25519_donna_tor.h	3;"	d
SRC_EXT_ED25519_REF10_H_INCLUDED_	ed25519_ref10.h	3;"	d
SSIZE_MAX	torint.h	351;"	d
SSIZE_MAX	torint.h	353;"	d
SSIZE_T_CEILING	torint.h	360;"	d
SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION	tortls.c	115;"	d	file:
SSLKeyLifetime	or.h	/^  int SSLKeyLifetime;$/;"	m	struct:__anon24
SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION	tortls.c	112;"	d	file:
SSL_SESSION_get_master_key	tortls.c	/^SSL_SESSION_get_master_key(SSL_SESSION *s, uint8_t *out, size_t len)$/;"	f	file:
SSL_get_client_random	tortls.c	/^SSL_get_client_random(SSL *s, uint8_t *out, size_t len)$/;"	f	file:
SSL_get_server_random	tortls.c	/^SSL_get_server_random(SSL *s, uint8_t *out, size_t len)$/;"	f	file:
STABILITY_ALPHA	rephist.c	37;"	d	file:
STABILITY_EPSILON	rephist.c	34;"	d	file:
STABILITY_INTERVAL	rephist.c	39;"	d	file:
START_PATH_LENGTH	compat.c	2415;"	d	file:
STATEFILE_PRIVATE	statefile.c	7;"	d	file:
STATE_IS_OPEN	control.c	73;"	d	file:
STATE_RELAY_CHECKPOINT_INTERVAL	statefile.c	415;"	d	file:
STATE_WRITE_RETRY_INTERVAL	statefile.c	410;"	d	file:
STATIC	testsupport.h	10;"	d
STATIC	testsupport.h	8;"	d
STATUS_PRIVATE	status.c	9;"	d	file:
STAT_DATADIR	main.c	3198;"	d	file:
STAT_DATADIR2	main.c	3201;"	d	file:
STDC_HEADERS	orconfig.h	620;"	d
STDERR_FILENO	orconfig.h	703;"	d
STDIN_FILENO	orconfig.h	695;"	d
STDOUT_FILENO	orconfig.h	699;"	d
STEP	ed25519-hash.h	78;"	d
STMT_BEGIN	compat.h	171;"	d
STMT_BEGIN	compat.h	174;"	d
STMT_BEGIN	compat.h	177;"	d
STMT_END	compat.h	172;"	d
STMT_END	compat.h	175;"	d
STMT_END	compat.h	178;"	d
STMT_NIL	compat.h	162;"	d
STMT_VOID	compat.h	166;"	d
STRDUP	routerparse.c	3916;"	d	file:
STRDUP	routerparse.c	4183;"	d	file:
STREAMWINDOW_INCREMENT	or.h	847;"	d
STREAMWINDOW_START	or.h	845;"	d
STREAM_EVENT_CLOSED	or.h	/^  STREAM_EVENT_CLOSED       = 4,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_FAILED	or.h	/^  STREAM_EVENT_FAILED       = 3,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_FAILED_RETRIABLE	or.h	/^  STREAM_EVENT_FAILED_RETRIABLE = 7,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_NEW	or.h	/^  STREAM_EVENT_NEW          = 5,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_NEW_RESOLVE	or.h	/^  STREAM_EVENT_NEW_RESOLVE  = 6,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_REMAP	or.h	/^  STREAM_EVENT_REMAP        = 8$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SENT_CONNECT	or.h	/^  STREAM_EVENT_SENT_CONNECT = 0,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SENT_RESOLVE	or.h	/^  STREAM_EVENT_SENT_RESOLVE = 1,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SUCCEEDED	or.h	/^  STREAM_EVENT_SUCCEEDED    = 2,$/;"	e	enum:stream_status_event_t
STRMAP_FOREACH	container.h	490;"	d
STRMAP_FOREACH_END	container.h	494;"	d
STRMAP_FOREACH_MODIFY	container.h	492;"	d
STRNDUP	routerparse.c	3917;"	d	file:
STRNDUP	routerparse.c	4184;"	d	file:
STRUCT_OFFSET	util.h	174;"	d
STRUCT_OFFSET	util.h	176;"	d
STRUCT_VAR_P	util.h	189;"	d
SUBLANG_DEFAULT	orconfig.h	2079;"	d
SUBTRACT_CLAMPED	rephist.c	394;"	d	file:
SUBTYPE_P	util.h	200;"	d
SUCCESS_NOTICE_INTERVAL	circpathbias.c	481;"	d	file:
SUPERSEDED_CERT_LIFETIME	routerlist.c	478;"	d	file:
SYS_SECCOMP	sandbox.h	24;"	d
S_CASE	reasons.c	153;"	d	file:
S_CASE	reasons.c	156;"	d	file:
S_IEXEC	orconfig.h	2028;"	d
S_IFCHR	orconfig.h	2023;"	d
S_IFDIR	orconfig.h	2022;"	d
S_IFIFO	orconfig.h	2024;"	d
S_IFMT	orconfig.h	2021;"	d
S_IFREG	orconfig.h	2025;"	d
S_IREAD	orconfig.h	2026;"	d
S_ISFIFO	util.c	111;"	d	file:
S_IWRITE	orconfig.h	2027;"	d
SafeLogging	or.h	/^  char *SafeLogging; \/**< Contains "relay", "1", "0" (meaning no scrubbing). *\/$/;"	m	struct:__anon24
SafeLogging_	or.h	/^  } SafeLogging_;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon28
SafeSocks	or.h	/^  int SafeSocks; \/**< Boolean: should we outright refuse application$/;"	m	struct:__anon24
Sandbox	or.h	/^  int Sandbox; \/**< Boolean: should sandboxing be enabled? *\/$/;"	m	struct:__anon24
SchedulerHighWaterMark__	or.h	/^  uint64_t SchedulerHighWaterMark__;$/;"	m	struct:__anon24
SchedulerLowWaterMark__	or.h	/^  uint64_t SchedulerLowWaterMark__;$/;"	m	struct:__anon24
SchedulerMaxFlushCells__	or.h	/^  int SchedulerMaxFlushCells__;$/;"	m	struct:__anon24
SecureZeroMemory	compat.c	/^SecureZeroMemory(PVOID ptr, SIZE_T cnt)$/;"	f	file:
ServerDNSAllowBrokenConfig	or.h	/^  int ServerDNSAllowBrokenConfig;$/;"	m	struct:__anon24
ServerDNSAllowNonRFC953Hostnames	or.h	/^  int ServerDNSAllowNonRFC953Hostnames;$/;"	m	struct:__anon24
ServerDNSDetectHijacking	or.h	/^  int ServerDNSDetectHijacking; \/**< Boolean: If true, check for DNS failure$/;"	m	struct:__anon24
ServerDNSRandomizeCase	or.h	/^  int ServerDNSRandomizeCase; \/**< Boolean: Use the 0x20-hack to prevent$/;"	m	struct:__anon24
ServerDNSResolvConfFile	or.h	/^  char *ServerDNSResolvConfFile; \/**< If provided, we configure our internal$/;"	m	struct:__anon24
ServerDNSSearchDomains	or.h	/^  int ServerDNSSearchDomains; \/**< Boolean: If set, we don't force exit$/;"	m	struct:__anon24
ServerDNSTestAddresses	or.h	/^  smartlist_t *ServerDNSTestAddresses; \/**< A list of addresses that definitely$/;"	m	struct:__anon24
ServerTransportListenAddr	or.h	/^  config_line_t *ServerTransportListenAddr;$/;"	m	struct:__anon24
ServerTransportOptions	or.h	/^  config_line_t *ServerTransportOptions;$/;"	m	struct:__anon24
ServerTransportPlugin	or.h	/^  config_line_t *ServerTransportPlugin; \/**< List of client$/;"	m	struct:__anon24
SetServiceStatus_fn	ntmain.c	/^  BOOL (WINAPI *SetServiceStatus_fn)(SERVICE_STATUS_HANDLE,$/;"	m	struct:service_fns	file:
ShutdownWaitLength	or.h	/^  int ShutdownWaitLength; \/**< When we get a SIGINT and we're a server, how$/;"	m	struct:__anon24
SigningKeyLifetime	or.h	/^  int SigningKeyLifetime;$/;"	m	struct:__anon24
Socks4Proxy	or.h	/^  char *Socks4Proxy; \/**< hostname:port to use as a SOCKS4 proxy, if any. *\/$/;"	m	struct:__anon24
Socks4ProxyAddr	or.h	/^  tor_addr_t Socks4ProxyAddr; \/**< Derived from Socks4Proxy. *\/$/;"	m	struct:__anon24
Socks4ProxyPort	or.h	/^  uint16_t Socks4ProxyPort; \/**< Derived from Socks4Proxy. *\/$/;"	m	struct:__anon24
Socks5Proxy	or.h	/^  char *Socks5Proxy; \/**< hostname:port to use as a SOCKS5 proxy, if any. *\/$/;"	m	struct:__anon24
Socks5ProxyAddr	or.h	/^  tor_addr_t Socks5ProxyAddr; \/**< Derived from Sock5Proxy. *\/$/;"	m	struct:__anon24
Socks5ProxyPassword	or.h	/^  char *Socks5ProxyPassword; \/**< Password for SOCKS5 authentication, if any *\/$/;"	m	struct:__anon24
Socks5ProxyPort	or.h	/^  uint16_t Socks5ProxyPort; \/**< Derived from Socks5Proxy. *\/$/;"	m	struct:__anon24
Socks5ProxyUsername	or.h	/^  char *Socks5ProxyUsername; \/**< Username for SOCKS5 authentication, if any *\/$/;"	m	struct:__anon24
SocksListenAddress	or.h	/^  config_line_t *SocksListenAddress;$/;"	m	struct:__anon24
SocksPolicy	or.h	/^  config_line_t *SocksPolicy; \/**< Lists of socks policy components *\/$/;"	m	struct:__anon24
SocksPort_lines	or.h	/^  config_line_t *SocksPort_lines;$/;"	m	struct:__anon24
SocksPort_set	or.h	/^  unsigned int SocksPort_set : 1;$/;"	m	struct:__anon24
SocksSocketsGroupWritable	or.h	/^  int SocksSocketsGroupWritable; \/**< Boolean: Are SOCKS sockets g+rw? *\/$/;"	m	struct:__anon24
SocksTimeout	or.h	/^  int SocksTimeout; \/**< How long do we let a socks connection wait$/;"	m	struct:__anon24
StartServiceA_fn	ntmain.c	/^  BOOL (WINAPI *StartServiceA_fn)($/;"	m	struct:service_fns	file:
StartServiceCtrlDispatcherA_fn	ntmain.c	/^  BOOL (WINAPI *StartServiceCtrlDispatcherA_fn)($/;"	m	struct:service_fns	file:
StartTorSGX	TorSGX.cpp	/^void StartTorSGX(int argc, char **argv, int argv_len, $/;"	f
StrictNodes	or.h	/^  int StrictNodes; \/**< Boolean: When none of our EntryNodes or ExitNodes$/;"	m	struct:__anon24
T	ed25519-hash.h	/^	uint64_t T[2];$/;"	m	struct:sha512_state_t
T	ge.h	/^  fe T;$/;"	m	struct:__anon80
T	ge.h	/^  fe T;$/;"	m	struct:__anon81
T	routerparse.c	256;"	d	file:
T	routerparse.c	521;"	d	file:
T01	routerparse.c	268;"	d	file:
T0N	routerparse.c	258;"	d	file:
T1	routerparse.c	260;"	d	file:
T1N	routerparse.c	266;"	d	file:
T1_END	routerparse.c	264;"	d	file:
T1_START	routerparse.c	262;"	d	file:
T2d	ge.h	/^  fe T2d;$/;"	m	struct:__anon83
TAKES_NO_ARGUMENT	config.c	/^  TAKES_NO_ARGUMENT = 0,$/;"	e	enum:__anon124	file:
TAPMP_EXTENDED_STAR	address.h	241;"	d
TAPMP_STAR_IPV4_ONLY	address.h	244;"	d
TAPMP_STAR_IPV6_ONLY	address.h	247;"	d
TAP_ONIONSKIN_CHALLENGE_LEN	onion_tap.h	15;"	d
TAP_ONIONSKIN_REPLY_LEN	onion_tap.h	18;"	d
TESTING_CIRCUIT_INTERVAL	circuituse.c	1109;"	d	file:
TIMEOUT_UNTIL_UNREACHABILITY_COMPLAINT	or.h	884;"	d
TIME_BEFORE_OR_CONN_IS_TOO_OLD	connection_or.c	960;"	d	file:
TIME_FNS_NEED_LOCKS	compat.c	2967;"	d	file:
TIME_KNOWN_TO_GUARANTEE_FAMILIAR	dirserv.c	1272;"	d	file:
TIME_MAX	torint.h	318;"	d
TIME_MAX	torint.h	320;"	d
TIME_MAX	torint.h	322;"	d
TIME_MAX	torint.h	330;"	d
TIME_MAX	torint.h	332;"	d
TIME_TO_EXEC_FWHELPER_FAIL	util.c	5832;"	d	file:
TIME_TO_EXEC_FWHELPER_SUCCESS	util.c	5829;"	d	file:
TIME_T_IS_SIGNED	orconfig.h	623;"	d
TINYTEST_H_INCLUDED_	tinytest.h	27;"	d
TINYTEST_MACROS_H_INCLUDED_	tinytest_macros.h	27;"	d
TLSECGroup	or.h	/^  char *TLSECGroup; \/**< One of "P256", "P224", or nil for auto *\/$/;"	m	struct:__anon24
TLSSECRET_MAGIC	tortls.c	2654;"	d	file:
TLS_CHAN_MAGIC	channeltls.h	18;"	d
TLS_CHAN_TO_BASE	channeltls.h	16;"	d
TLS_HANDSHAKE_C	or.h	/^  TLS_HANDSHAKE_C, TLS_HANDSHAKE_S,$/;"	e	enum:__anon41
TLS_HANDSHAKE_S	or.h	/^  TLS_HANDSHAKE_C, TLS_HANDSHAKE_S,$/;"	e	enum:__anon41
TLS_OUT_OF_INDEXES	orconfig.h	2154;"	d
TLS_OVERHEAD_THRESHOLD	status.c	129;"	d	file:
TOLERATE_MICRODESC_AGE	microdesc.c	407;"	d	file:
TORCERT_H_INCLUDED	torcert.h	5;"	d
TORSGX_U_H__	TorSGX_u.h	2;"	d
TOR_ADDRESSMAP_H	addressmap.h	8;"	d
TOR_ADDRESS_H	address.h	12;"	d
TOR_ADDR_BUF_LEN	address.h	180;"	d
TOR_ADDR_NULL	address.h	75;"	d
TOR_AES_H	aes.h	9;"	d
TOR_BACKTRACE_H	backtrace.h	5;"	d
TOR_BUFFERS_H	buffers.h	13;"	d
TOR_CHANNELTLS_H	channeltls.h	10;"	d
TOR_CHANNEL_H	channel.h	10;"	d
TOR_CHANNEL_INTERNAL_	channel.c	14;"	d	file:
TOR_CHANNEL_INTERNAL_	channeltls.c	14;"	d	file:
TOR_CHANNEL_INTERNAL_	connection.c	20;"	d	file:
TOR_CHANNEL_INTERNAL_	connection_or.c	18;"	d	file:
TOR_CHANNEL_INTERNAL_	scheduler.c	11;"	d	file:
TOR_CIRCLEQ_EMPTY	tor_queue.h	472;"	d
TOR_CIRCLEQ_END	tor_queue.h	468;"	d
TOR_CIRCLEQ_ENTRY	tor_queue.h	457;"	d
TOR_CIRCLEQ_FIRST	tor_queue.h	466;"	d
TOR_CIRCLEQ_FOREACH	tor_queue.h	475;"	d
TOR_CIRCLEQ_FOREACH_REVERSE	tor_queue.h	486;"	d
TOR_CIRCLEQ_FOREACH_REVERSE_SAFE	tor_queue.h	491;"	d
TOR_CIRCLEQ_FOREACH_SAFE	tor_queue.h	480;"	d
TOR_CIRCLEQ_HEAD	tor_queue.h	448;"	d
TOR_CIRCLEQ_HEAD_INITIALIZER	tor_queue.h	454;"	d
TOR_CIRCLEQ_INIT	tor_queue.h	500;"	d
TOR_CIRCLEQ_INSERT_AFTER	tor_queue.h	505;"	d
TOR_CIRCLEQ_INSERT_BEFORE	tor_queue.h	515;"	d
TOR_CIRCLEQ_INSERT_HEAD	tor_queue.h	525;"	d
TOR_CIRCLEQ_INSERT_TAIL	tor_queue.h	535;"	d
TOR_CIRCLEQ_LAST	tor_queue.h	467;"	d
TOR_CIRCLEQ_NEXT	tor_queue.h	469;"	d
TOR_CIRCLEQ_PREV	tor_queue.h	470;"	d
TOR_CIRCLEQ_REMOVE	tor_queue.h	545;"	d
TOR_CIRCLEQ_REPLACE	tor_queue.h	560;"	d
TOR_CIRCPATHBIAS_H	circpathbias.h	13;"	d
TOR_CIRCUITBUILD_H	circuitbuild.h	13;"	d
TOR_CIRCUITLIST_H	circuitlist.h	13;"	d
TOR_CIRCUITMUX_EWMA_C_	circuitmux_ewma.c	9;"	d	file:
TOR_CIRCUITMUX_EWMA_H	circuitmux_ewma.h	10;"	d
TOR_CIRCUITMUX_H	circuitmux.h	10;"	d
TOR_CIRCUITSTATS_H	circuitstats.h	13;"	d
TOR_CIRCUITUSE_H	circuituse.h	13;"	d
TOR_COMMAND_H	command.h	13;"	d
TOR_COMPAT_H	compat.h	7;"	d
TOR_COMPAT_LIBEVENT_H	compat_libevent.h	5;"	d
TOR_COMPAT_THREADS_H	compat_threads.h	7;"	d
TOR_CONFIG_H	config.h	13;"	d
TOR_CONFPARSE_H	confparse.h	8;"	d
TOR_CONNECTION_EDGE_H	connection_edge.h	13;"	d
TOR_CONNECTION_H	connection.h	13;"	d
TOR_CONNECTION_OR_H	connection_or.h	13;"	d
TOR_CONTAINER_H	container.h	7;"	d
TOR_CONTROL_H	control.h	13;"	d
TOR_CPUWORKER_H	cpuworker.h	13;"	d
TOR_CRYPTO_CURVE25519_H	crypto_curve25519.h	5;"	d
TOR_CRYPTO_ED25519_H	crypto_ed25519.h	5;"	d
TOR_CRYPTO_FORMAT_H	crypto_format.h	8;"	d
TOR_CRYPTO_H	crypto.h	14;"	d
TOR_CRYPTO_S2K_H_INCLUDED	crypto_s2k.h	8;"	d
TOR_DIRCOLLATE_H	dircollate.h	13;"	d
TOR_DIRECTORY_H	directory.h	13;"	d
TOR_DIRSERV_H	dirserv.h	13;"	d
TOR_DIRVOTE_H	dirvote.h	13;"	d
TOR_DI_OPS_H	di_ops.h	12;"	d
TOR_DNSSERV_H	dnsserv.h	13;"	d
TOR_DNS_H	dns.h	13;"	d
TOR_DNS_STRUCTS_H	dns_structs.h	2;"	d
TOR_ENTRYNODES_H	entrynodes.h	13;"	d
TOR_EVENTDNS_TOR_H	eventdns_tor.h	5;"	d
TOR_GEOIP_H	geoip.h	13;"	d
TOR_HIBERNATE_H	hibernate.h	13;"	d
TOR_INVALID_SOCKET	compat.h	436;"	d
TOR_INVALID_SOCKET	compat.h	445;"	d
TOR_INVALID_SOCKET	compat.h	453;"	d
TOR_ISALNUM_TABLE	compat.c	/^const uint32_t TOR_ISALNUM_TABLE[8] =$/;"	v
TOR_ISALPHA_TABLE	compat.c	/^const uint32_t TOR_ISALPHA_TABLE[8] =$/;"	v
TOR_ISDIGIT_TABLE	compat.c	/^const uint32_t TOR_ISDIGIT_TABLE[8] = { 0, 0x3ff0000, 0, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISLOWER_TABLE	compat.c	/^const uint32_t TOR_ISLOWER_TABLE[8] = { 0, 0, 0, 0x7fffffe, 0, 0, 0, 0 };$/;"	v
TOR_ISODIGIT	util.c	3214;"	d	file:
TOR_ISPRINT_TABLE	compat.c	/^const uint32_t TOR_ISPRINT_TABLE[8] =$/;"	v
TOR_ISSPACE_TABLE	compat.c	/^const uint32_t TOR_ISSPACE_TABLE[8] = { 0x3e00, 0x1, 0, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISUPPER_TABLE	compat.c	/^const uint32_t TOR_ISUPPER_TABLE[8] = { 0, 0, 0x7fffffe, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISXDIGIT_TABLE	compat.c	/^const uint32_t TOR_ISXDIGIT_TABLE[8] =$/;"	v
TOR_KEYPIN_H	keypin.h	5;"	d
TOR_LIST_EMPTY	tor_queue.h	188;"	d
TOR_LIST_END	tor_queue.h	186;"	d
TOR_LIST_ENTRY	tor_queue.h	176;"	d
TOR_LIST_FIRST	tor_queue.h	185;"	d
TOR_LIST_FOREACH	tor_queue.h	192;"	d
TOR_LIST_FOREACH_SAFE	tor_queue.h	197;"	d
TOR_LIST_HEAD	tor_queue.h	168;"	d
TOR_LIST_HEAD_INITIALIZER	tor_queue.h	173;"	d
TOR_LIST_INIT	tor_queue.h	205;"	d
TOR_LIST_INSERT_AFTER	tor_queue.h	209;"	d
TOR_LIST_INSERT_BEFORE	tor_queue.h	217;"	d
TOR_LIST_INSERT_HEAD	tor_queue.h	224;"	d
TOR_LIST_NEXT	tor_queue.h	190;"	d
TOR_LIST_REMOVE	tor_queue.h	231;"	d
TOR_LIST_REPLACE	tor_queue.h	240;"	d
TOR_MAIN_H	main.h	13;"	d
TOR_MEMAREA_H	memarea.h	6;"	d
TOR_MICRODESC_H	microdesc.h	13;"	d
TOR_NETWORKSTATUS_H	networkstatus.h	13;"	d
TOR_NODELIST_H	nodelist.h	13;"	d
TOR_NTMAIN_H	ntmain.h	13;"	d
TOR_ONION_FAST_H	onion_fast.h	13;"	d
TOR_ONION_H	onion.h	13;"	d
TOR_ONION_NTOR_H	onion_ntor.h	5;"	d
TOR_ONION_TAP_H	onion_tap.h	13;"	d
TOR_ORCONFIG_H	orconfig.h	5;"	d
TOR_OR_H	or.h	13;"	d
TOR_POLICIES_H	policies.h	13;"	d
TOR_PROCMON_H	procmon.h	10;"	d
TOR_QUEUE_H_	tor_queue.h	36;"	d
TOR_Q_INVALIDATE_	tor_queue.h	86;"	d
TOR_Q_INVALIDATE_	tor_queue.h	88;"	d
TOR_REASONS_H	reasons.h	13;"	d
TOR_RELAY_H	relay.h	13;"	d
TOR_RENDCACHE_H	rendcache.h	10;"	d
TOR_RENDCLIENT_H	rendclient.h	13;"	d
TOR_RENDCOMMON_H	rendcommon.h	13;"	d
TOR_RENDMID_H	rendmid.h	13;"	d
TOR_RENDSERVICE_H	rendservice.h	13;"	d
TOR_REPHIST_H	rephist.h	13;"	d
TOR_REPLAYCACHE_H	replaycache.h	10;"	d
TOR_ROUTERKEYS_H	routerkeys.h	5;"	d
TOR_ROUTERLIST_H	routerlist.h	12;"	d
TOR_ROUTERPARSE_H	routerparse.h	13;"	d
TOR_ROUTERSET_H	routerset.h	12;"	d
TOR_ROUTER_H	router.h	13;"	d
TOR_SCHEDULER_H	scheduler.h	10;"	d
TOR_SGX	orconfig.h	713;"	d
TOR_SIMPLEQ_EMPTY	tor_queue.h	273;"	d
TOR_SIMPLEQ_END	tor_queue.h	271;"	d
TOR_SIMPLEQ_ENTRY	tor_queue.h	262;"	d
TOR_SIMPLEQ_FIRST	tor_queue.h	270;"	d
TOR_SIMPLEQ_FOREACH	tor_queue.h	277;"	d
TOR_SIMPLEQ_FOREACH_SAFE	tor_queue.h	282;"	d
TOR_SIMPLEQ_HEAD	tor_queue.h	253;"	d
TOR_SIMPLEQ_HEAD_INITIALIZER	tor_queue.h	259;"	d
TOR_SIMPLEQ_INIT	tor_queue.h	290;"	d
TOR_SIMPLEQ_INSERT_AFTER	tor_queue.h	307;"	d
TOR_SIMPLEQ_INSERT_HEAD	tor_queue.h	295;"	d
TOR_SIMPLEQ_INSERT_TAIL	tor_queue.h	301;"	d
TOR_SIMPLEQ_NEXT	tor_queue.h	275;"	d
TOR_SIMPLEQ_REMOVE_AFTER	tor_queue.h	318;"	d
TOR_SIMPLEQ_REMOVE_HEAD	tor_queue.h	313;"	d
TOR_SLIST_EMPTY	tor_queue.h	113;"	d
TOR_SLIST_END	tor_queue.h	111;"	d
TOR_SLIST_ENTRY	tor_queue.h	102;"	d
TOR_SLIST_FIRST	tor_queue.h	110;"	d
TOR_SLIST_FOREACH	tor_queue.h	116;"	d
TOR_SLIST_FOREACH_SAFE	tor_queue.h	121;"	d
TOR_SLIST_HEAD	tor_queue.h	94;"	d
TOR_SLIST_HEAD_INITIALIZER	tor_queue.h	99;"	d
TOR_SLIST_INIT	tor_queue.h	129;"	d
TOR_SLIST_INSERT_AFTER	tor_queue.h	133;"	d
TOR_SLIST_INSERT_HEAD	tor_queue.h	138;"	d
TOR_SLIST_NEXT	tor_queue.h	114;"	d
TOR_SLIST_REMOVE	tor_queue.h	151;"	d
TOR_SLIST_REMOVE_AFTER	tor_queue.h	143;"	d
TOR_SLIST_REMOVE_HEAD	tor_queue.h	147;"	d
TOR_SOCKET_T_FORMAT	compat.h	434;"	d
TOR_SOCKET_T_FORMAT	compat.h	443;"	d
TOR_SOCKET_T_FORMAT	compat.h	449;"	d
TOR_STATEFILE_H	statefile.h	8;"	d
TOR_STATUS_H	status.h	5;"	d
TOR_TAILQ_EMPTY	tor_queue.h	354;"	d
TOR_TAILQ_END	tor_queue.h	346;"	d
TOR_TAILQ_ENTRY	tor_queue.h	336;"	d
TOR_TAILQ_FIRST	tor_queue.h	345;"	d
TOR_TAILQ_FOREACH	tor_queue.h	357;"	d
TOR_TAILQ_FOREACH_REVERSE	tor_queue.h	369;"	d
TOR_TAILQ_FOREACH_REVERSE_SAFE	tor_queue.h	374;"	d
TOR_TAILQ_FOREACH_SAFE	tor_queue.h	362;"	d
TOR_TAILQ_HEAD	tor_queue.h	327;"	d
TOR_TAILQ_HEAD_INITIALIZER	tor_queue.h	333;"	d
TOR_TAILQ_INIT	tor_queue.h	383;"	d
TOR_TAILQ_INSERT_AFTER	tor_queue.h	405;"	d
TOR_TAILQ_INSERT_BEFORE	tor_queue.h	415;"	d
TOR_TAILQ_INSERT_HEAD	tor_queue.h	388;"	d
TOR_TAILQ_INSERT_TAIL	tor_queue.h	398;"	d
TOR_TAILQ_LAST	tor_queue.h	348;"	d
TOR_TAILQ_NEXT	tor_queue.h	347;"	d
TOR_TAILQ_PREV	tor_queue.h	351;"	d
TOR_TAILQ_REMOVE	tor_queue.h	422;"	d
TOR_TAILQ_REPLACE	tor_queue.h	433;"	d
TOR_TESTSUPPORT_H	testsupport.h	5;"	d
TOR_TLS_CLOSE	tortls.h	33;"	d
TOR_TLS_CTX_IS_PUBLIC_SERVER	tortls.h	59;"	d
TOR_TLS_CTX_USE_ECDHE_P224	tortls.h	61;"	d
TOR_TLS_CTX_USE_ECDHE_P256	tortls.h	60;"	d
TOR_TLS_DONE	tortls.h	36;"	d
TOR_TLS_ERROR_CONNREFUSED	tortls.h	29;"	d
TOR_TLS_ERROR_CONNRESET	tortls.h	30;"	d
TOR_TLS_ERROR_IO	tortls.h	28;"	d
TOR_TLS_ERROR_MISC	tortls.h	26;"	d
TOR_TLS_ERROR_NO_ROUTE	tortls.h	31;"	d
TOR_TLS_ERROR_TIMEOUT	tortls.h	32;"	d
TOR_TLS_IS_ERROR	tortls.h	53;"	d
TOR_TLS_MAGIC	tortls.c	159;"	d	file:
TOR_TLS_ST_BUFFEREVENT	tortls.c	/^    TOR_TLS_ST_BUFFEREVENT$/;"	e	enum:__anon105	file:
TOR_TLS_ST_CLOSED	tortls.c	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon105	file:
TOR_TLS_ST_GOTCLOSE	tortls.c	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon105	file:
TOR_TLS_ST_HANDSHAKE	tortls.c	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon105	file:
TOR_TLS_ST_OPEN	tortls.c	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon105	file:
TOR_TLS_ST_RENEGOTIATE	tortls.c	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon105	file:
TOR_TLS_ST_SENTCLOSE	tortls.c	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon105	file:
TOR_TLS_SYSCALL_	tortls.c	265;"	d	file:
TOR_TLS_WANTREAD	tortls.h	34;"	d
TOR_TLS_WANTWRITE	tortls.h	35;"	d
TOR_TLS_ZERORETURN_	tortls.c	266;"	d	file:
TOR_TOLOWER	compat.h	322;"	d
TOR_TOLOWER_TABLE	compat.c	/^const char TOR_TOLOWER_TABLE[256] = {$/;"	v
TOR_TORGZIP_H	torgzip.h	12;"	d
TOR_TORINT_H	torint.h	12;"	d
TOR_TORLOG_H	torlog.h	241;"	d
TOR_TORTLS_H	tortls.h	7;"	d
TOR_TOR_GENCERT_H	tor-gencert.h	2;"	d
TOR_TOR_MAIN_H	tor_main.h	2;"	d
TOR_TOUPPER	compat.h	323;"	d
TOR_TOUPPER_TABLE	compat.c	/^const char TOR_TOUPPER_TABLE[256] = {$/;"	v
TOR_TRANSPORTS_H	transports.h	12;"	d
TOR_UTIL_FORMAT_H	util_format.h	8;"	d
TOR_UTIL_H	util.h	12;"	d
TOR_UTIL_PROCESS_H	util_process.h	10;"	d
TOR_WEAK_RANDOM_MAX	util.h	610;"	d
TOR_WEAK_RNG_INIT	util.h	609;"	d
TOR_WORKQUEUE_H	workqueue.h	5;"	d
TOR_ZLIB_BUF_FULL	torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon68
TOR_ZLIB_DONE	torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon68
TOR_ZLIB_ERR	torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon68
TOR_ZLIB_OK	torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon68
TO_CIRCUIT	or.h	3272;"	d
TO_CMUX_POL_CIRC_DATA	circuitmux.h	98;"	d
TO_CMUX_POL_DATA	circuitmux.h	91;"	d
TO_CONN	or.h	1773;"	d
TO_CONTROL_CONN	or.h	/^static INLINE control_connection_t *TO_CONTROL_CONN(connection_t *c)$/;"	f
TO_DIR_CONN	or.h	/^static INLINE dir_connection_t *TO_DIR_CONN(connection_t *c)$/;"	f
TO_EDGE_CONN	or.h	/^static INLINE edge_connection_t *TO_EDGE_CONN(connection_t *c)$/;"	f
TO_ENTRY_CONN	or.h	/^static INLINE entry_connection_t *TO_ENTRY_CONN(connection_t *c)$/;"	f
TO_EWMA_POL_CIRC_DATA	circuitmux_ewma.c	/^TO_EWMA_POL_CIRC_DATA(circuitmux_policy_circ_data_t *pol)$/;"	f	file:
TO_EWMA_POL_DATA	circuitmux_ewma.c	/^TO_EWMA_POL_DATA(circuitmux_policy_data_t *pol)$/;"	f	file:
TO_LISTENER_CONN	or.h	/^static INLINE listener_connection_t *TO_LISTENER_CONN(connection_t *c)$/;"	f
TO_ORIGIN_CIRCUIT	or.h	/^static INLINE origin_circuit_t *TO_ORIGIN_CIRCUIT(circuit_t *x)$/;"	f
TO_OR_CIRCUIT	or.h	/^static INLINE or_circuit_t *TO_OR_CIRCUIT(circuit_t *x)$/;"	f
TO_OR_CONN	or.h	/^static INLINE or_connection_t *TO_OR_CONN(connection_t *c)$/;"	f
TPT_DEFAULT	or.h	/^    TPT_DEFAULT,$/;"	e	enum:__anon24::__anon26
TPT_IPFW	or.h	/^    TPT_IPFW,$/;"	e	enum:__anon24::__anon26
TPT_PF_DIVERT	or.h	/^    TPT_PF_DIVERT,$/;"	e	enum:__anon24::__anon26
TPT_TPROXY	or.h	/^    TPT_TPROXY,$/;"	e	enum:__anon24::__anon26
TRACKHOSTEXITS_RETRIES	connection_edge.c	892;"	d	file:
TRANS_NETFILTER	connection_edge.c	48;"	d	file:
TRANS_NETFILTER	connection_edge.c	59;"	d	file:
TRANS_NETFILTER_IPV4	connection_edge.c	49;"	d	file:
TRANS_NETFILTER_IPV6	connection_edge.c	60;"	d	file:
TRANS_PF	connection_edge.c	67;"	d	file:
TRANS_TPROXY	connection_edge.c	71;"	d	file:
TRISTATE	address.c	1022;"	d	file:
TRUNCATED_STR	log.c	46;"	d	file:
TRUNCATED_STR_LEN	log.c	47;"	d	file:
TRUNCATE_EXISTING	orconfig.h	1277;"	d
TRUNNEL_DYNARRAY_ADD	trunnel-impl.h	191;"	d
TRUNNEL_DYNARRAY_CLEAR	trunnel-impl.h	203;"	d
TRUNNEL_DYNARRAY_EXPAND	trunnel-impl.h	177;"	d
TRUNNEL_DYNARRAY_GET	trunnel-impl.h	159;"	d
TRUNNEL_DYNARRAY_GET	trunnel-impl.h	163;"	d
TRUNNEL_DYNARRAY_HEAD	trunnel.h	19;"	d
TRUNNEL_DYNARRAY_INIT	trunnel.h	27;"	d
TRUNNEL_DYNARRAY_LEN	trunnel-impl.h	199;"	d
TRUNNEL_DYNARRAY_SET	trunnel-impl.h	168;"	d
TRUNNEL_DYNARRAY_WIPE	trunnel-impl.h	211;"	d
TRUNNEL_ED25519_CERT_H	ed25519_cert.h	6;"	d
TRUNNEL_H_INCLUDED_	trunnel.h	13;"	d
TRUNNEL_IMPL_H_INCLUDED_	trunnel-impl.h	13;"	d
TRUNNEL_LINK_HANDSHAKE_H	link_handshake.h	6;"	d
TRUNNEL_LOCAL_H_INCLUDED	trunnel-local.h	3;"	d
TRUNNEL_PWBOX_H	pwbox.h	6;"	d
TRUNNEL_SET_ERROR_CODE	ed25519_cert.c	10;"	d	file:
TRUNNEL_SET_ERROR_CODE	link_handshake.c	10;"	d	file:
TRUNNEL_SET_ERROR_CODE	pwbox.c	10;"	d	file:
TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_DIGEST	routerlist.h	27;"	d
TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_SK_DIGEST	routerlist.h	28;"	d
TRUSTED_DIRS_CERTS_SRC_FROM_STORE	routerlist.h	26;"	d
TRUSTED_DIRS_CERTS_SRC_FROM_VOTE	routerlist.h	29;"	d
TRUSTED_DIRS_CERTS_SRC_SELF	routerlist.h	25;"	d
TS_ANNOTATIONS_OK	routerparse.c	551;"	d	file:
TS_NOCHECK	routerparse.c	552;"	d	file:
TS_NO_NEW_ANNOTATIONS	routerparse.c	553;"	d	file:
TT_BLATHER	tinytest_macros.h	52;"	d
TT_DECLARE	tinytest_macros.h	41;"	d
TT_DIE	tinytest_macros.h	57;"	d
TT_ENABLED_	tinytest.h	34;"	d
TT_EXIT_TEST_FUNCTION	tinytest_macros.h	36;"	d
TT_FAIL	tinytest_macros.h	64;"	d
TT_FIRST_USER_FLAG	tinytest.h	38;"	d
TT_FORK	tinytest.h	30;"	d
TT_GRIPE	tinytest_macros.h	49;"	d
TT_OFF_BY_DEFAULT	tinytest.h	36;"	d
TT_SKIP	tinytest.h	32;"	d
TT_STMT_BEGIN	tinytest_macros.h	30;"	d
TT_STMT_END	tinytest_macros.h	31;"	d
TYPE_IAS_ATT_EVIDENCE	network_ra.h	/^     TYPE_IAS_ATT_EVIDENCE,$/;"	e	enum:_ias_msg_type_t
TYPE_IAS_ATT_RESULT	network_ra.h	/^     TYPE_IAS_ATT_RESULT,$/;"	e	enum:_ias_msg_type_t
TYPE_IAS_ENROLL	network_ra.h	/^     TYPE_IAS_ENROLL,$/;"	e	enum:_ias_msg_type_t
TYPE_IAS_GET_SIGRL	network_ra.h	/^     TYPE_IAS_GET_SIGRL,$/;"	e	enum:_ias_msg_type_t
TYPE_IAS_SIGRL	network_ra.h	/^     TYPE_IAS_SIGRL,$/;"	e	enum:_ias_msg_type_t
TYPE_RA_ATT_RESULT	network_ra.h	/^     TYPE_RA_ATT_RESULT,$/;"	e	enum:_ra_msg_type_t
TYPE_RA_MSG0	network_ra.h	/^     TYPE_RA_MSG0,$/;"	e	enum:_ra_msg_type_t
TYPE_RA_MSG1	network_ra.h	/^     TYPE_RA_MSG1,$/;"	e	enum:_ra_msg_type_t
TYPE_RA_MSG2	network_ra.h	/^     TYPE_RA_MSG2,$/;"	e	enum:_ra_msg_type_t
TYPE_RA_MSG3	network_ra.h	/^     TYPE_RA_MSG3,$/;"	e	enum:_ra_msg_type_t
TestSocks	or.h	/^  int TestSocks; \/**< Boolean: when we get a socks connection, do we loudly$/;"	m	struct:__anon24
TestingAuthDirTimeToLearnReachability	or.h	/^  int TestingAuthDirTimeToLearnReachability;$/;"	m	struct:__anon24
TestingAuthKeyLifetime	or.h	/^  int TestingAuthKeyLifetime;$/;"	m	struct:__anon24
TestingAuthKeySlop	or.h	/^  int TestingAuthKeySlop;$/;"	m	struct:__anon24
TestingBridgeDownloadSchedule	or.h	/^  smartlist_t *TestingBridgeDownloadSchedule;$/;"	m	struct:__anon24
TestingCertMaxDownloadTries	or.h	/^  int TestingCertMaxDownloadTries;$/;"	m	struct:__anon24
TestingClientConsensusDownloadSchedule	or.h	/^  smartlist_t *TestingClientConsensusDownloadSchedule;$/;"	m	struct:__anon24
TestingClientDownloadSchedule	or.h	/^  smartlist_t *TestingClientDownloadSchedule;$/;"	m	struct:__anon24
TestingClientMaxIntervalWithoutRequest	or.h	/^  int TestingClientMaxIntervalWithoutRequest;$/;"	m	struct:__anon24
TestingConsensusMaxDownloadTries	or.h	/^  int TestingConsensusMaxDownloadTries;$/;"	m	struct:__anon24
TestingDescriptorMaxDownloadTries	or.h	/^  int TestingDescriptorMaxDownloadTries;$/;"	m	struct:__anon24
TestingDirAuthVoteExit	or.h	/^  routerset_t *TestingDirAuthVoteExit;$/;"	m	struct:__anon24
TestingDirAuthVoteExitIsStrict	or.h	/^  int TestingDirAuthVoteExitIsStrict;$/;"	m	struct:__anon24
TestingDirAuthVoteGuard	or.h	/^  routerset_t *TestingDirAuthVoteGuard;$/;"	m	struct:__anon24
TestingDirAuthVoteGuardIsStrict	or.h	/^  int TestingDirAuthVoteGuardIsStrict;$/;"	m	struct:__anon24
TestingDirAuthVoteHSDir	or.h	/^  routerset_t *TestingDirAuthVoteHSDir;$/;"	m	struct:__anon24
TestingDirAuthVoteHSDirIsStrict	or.h	/^  int TestingDirAuthVoteHSDirIsStrict;$/;"	m	struct:__anon24
TestingDirConnectionMaxStall	or.h	/^  int TestingDirConnectionMaxStall;$/;"	m	struct:__anon24
TestingEnableCellStatsEvent	or.h	/^  int TestingEnableCellStatsEvent;$/;"	m	struct:__anon24
TestingEnableConnBwEvent	or.h	/^  int TestingEnableConnBwEvent;$/;"	m	struct:__anon24
TestingEnableTbEmptyEvent	or.h	/^  int TestingEnableTbEmptyEvent;$/;"	m	struct:__anon24
TestingEstimatedDescriptorPropagationTime	or.h	/^  int TestingEstimatedDescriptorPropagationTime;$/;"	m	struct:__anon24
TestingLinkCertLifetime	or.h	/^  int TestingLinkCertLifetime;$/;"	m	struct:__anon24
TestingLinkKeySlop	or.h	/^  int TestingLinkKeySlop;$/;"	m	struct:__anon24
TestingMicrodescMaxDownloadTries	or.h	/^  int TestingMicrodescMaxDownloadTries;$/;"	m	struct:__anon24
TestingMinExitFlagThreshold	or.h	/^  uint64_t TestingMinExitFlagThreshold;$/;"	m	struct:__anon24
TestingMinFastFlagThreshold	or.h	/^  uint64_t TestingMinFastFlagThreshold;$/;"	m	struct:__anon24
TestingServerConsensusDownloadSchedule	or.h	/^  smartlist_t *TestingServerConsensusDownloadSchedule;$/;"	m	struct:__anon24
TestingServerDownloadSchedule	or.h	/^  smartlist_t *TestingServerDownloadSchedule;$/;"	m	struct:__anon24
TestingSigningKeySlop	or.h	/^  int TestingSigningKeySlop;$/;"	m	struct:__anon24
TestingTorNetwork	or.h	/^  int TestingTorNetwork;$/;"	m	struct:__anon24
TestingV3AuthInitialDistDelay	or.h	/^  int TestingV3AuthInitialDistDelay;$/;"	m	struct:__anon24
TestingV3AuthInitialVoteDelay	or.h	/^  int TestingV3AuthInitialVoteDelay;$/;"	m	struct:__anon24
TestingV3AuthInitialVotingInterval	or.h	/^  int TestingV3AuthInitialVotingInterval;$/;"	m	struct:__anon24
TestingV3AuthVotingStartOffset	or.h	/^  int TestingV3AuthVotingStartOffset;$/;"	m	struct:__anon24
TokenBucketRefillInterval	or.h	/^  int TokenBucketRefillInterval;$/;"	m	struct:__anon24
Tor2webMode	or.h	/^  int Tor2webMode;$/;"	m	struct:__anon24
Tor2webRendezvousPoints	or.h	/^  routerset_t *Tor2webRendezvousPoints;$/;"	m	struct:__anon24
TorVersion	or.h	/^  char *TorVersion;$/;"	m	struct:__anon30
TotalBuildTimes	or.h	/^  unsigned int TotalBuildTimes;$/;"	m	struct:__anon30
TrackHostExits	or.h	/^  smartlist_t *TrackHostExits;$/;"	m	struct:__anon24
TrackHostExitsExpire	or.h	/^  int TrackHostExitsExpire; \/**< Number of seconds until we expire an$/;"	m	struct:__anon24
TransListenAddress	or.h	/^  config_line_t *TransListenAddress;$/;"	m	struct:__anon24
TransPort_lines	or.h	/^  config_line_t *TransPort_lines;$/;"	m	struct:__anon24
TransPort_set	or.h	/^  unsigned int TransPort_set : 1;$/;"	m	struct:__anon24
TransProxyType	or.h	/^  const char *TransProxyType; \/**< What kind of transparent proxy$/;"	m	struct:__anon24
TransProxyType_parsed	or.h	/^  } TransProxyType_parsed;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon26
TransportProxies	or.h	/^  config_line_t *TransportProxies;$/;"	m	struct:__anon30
TruncateLogFile	or.h	/^  int TruncateLogFile; \/**< Boolean: Should we truncate the log file$/;"	m	struct:__anon24
U32TO8_LE	ed25519-donna-portable.h	/^static inline void U32TO8_LE(unsigned char *p, const uint32_t v) {$/;"	f
U64TO8_LE	ed25519-donna-portable.h	/^static inline void U64TO8_LE(unsigned char *p, const uint64_t v) {$/;"	f
U64_FORMAT	compat.h	241;"	d
U64_FORMAT	compat.h	244;"	d
U64_LITERAL	compat.h	225;"	d
U64_LITERAL	compat.h	232;"	d
U64_PRINTF_ARG	compat.h	220;"	d
U64_PRINTF_ARG	compat.h	230;"	d
U64_SCANF_ARG	compat.h	223;"	d
U64_SCANF_ARG	compat.h	231;"	d
U64_TO_DBL	compat.h	103;"	d
U8TO32_LE	ed25519-donna-portable.h	/^static inline uint32_t U8TO32_LE(const unsigned char *p) {$/;"	f
U8TO64_LE	ed25519-donna-portable.h	/^static inline uint64_t U8TO64_LE(const unsigned char *p) {$/;"	f
UINT16_MAX	torint.h	115;"	d
UINT32_MAX	torint.h	124;"	d
UINT32_MAX	torint.h	143;"	d
UINT64_MAX	torint.h	156;"	d
UINT64_MAX	torint.h	170;"	d
UINT64_MAX	torint.h	187;"	d
UINT_MAX	torint.h	293;"	d
UINT_MAX	torint.h	295;"	d
UINT_MAX	torint.h	297;"	d
UINT_MAX_AS_DOUBLE	crypto.c	2485;"	d	file:
ULIMIT_BUFFER	compat.c	1799;"	d	file:
UNITS_PER_SEC	compat.c	2929;"	d	file:
UNITS_PER_USEC	compat.c	2931;"	d	file:
UNIT_DAY	hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon70	file:
UNIT_MONTH	hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon70	file:
UNIT_WEEK	hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon70	file:
UNIX_ONLY	main.c	2535;"	d	file:
UNIX_ONLY	main.c	2537;"	d	file:
UNIX_SOCKET_PURPOSE_CONTROL_SOCKET	connection.c	940;"	d	file:
UNIX_SOCKET_PURPOSE_SOCKS_SOCKET	connection.c	941;"	d	file:
UNKNOWN_METHOD	torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon66
UNLOCK_LOGS	log.c	155;"	d	file:
UNMOCK	testsupport.h	67;"	d
UNNAMED_ROUTER_NICKNAME	or.h	895;"	d
UNPWBOX_BAD_SECRET	crypto_pwbox.h	7;"	d
UNPWBOX_CORRUPTED	crypto_pwbox.h	8;"	d
UNPWBOX_OKAY	crypto_pwbox.h	6;"	d
UNRESTRICTED_SERVER_CIPHER_LIST	tortls.c	/^const char UNRESTRICTED_SERVER_CIPHER_LIST[] =$/;"	v
UPDATE	rephist.c	1542;"	d	file:
UPDATE	rephist.c	1558;"	d	file:
UPDATE_CTR_BUF	aes.c	368;"	d	file:
UPDATE_CTR_BUF	aes.c	372;"	d	file:
UPDATE_IDX	container.c	849;"	d	file:
UPTIME_CUTOFF_FOR_NEW_BANDWIDTH_TEST	main.c	1918;"	d	file:
UPTIME_TO_GUARANTEE_STABLE	dirserv.c	1264;"	d	file:
USABLE_DESCRIPTOR_ALL	nodelist.c	/^  USABLE_DESCRIPTOR_ALL = 0,$/;"	e	enum:__anon69	file:
USABLE_DESCRIPTOR_EXIT_ONLY	nodelist.c	/^  USABLE_DESCRIPTOR_EXIT_ONLY = 1$/;"	e	enum:__anon69	file:
USEC_PER_SEC	compat.c	2930;"	d	file:
USE_ALIGNED_ATTRIBUTE	memarea.c	33;"	d	file:
USE_BACKTRACE	backtrace.c	42;"	d	file:
USE_BACKTRACE	sandbox.c	73;"	d	file:
USE_CURVE25519_DONNA	orconfig.h	630;"	d
USE_EVP_AES_CTR	aes.c	61;"	d	file:
USE_LIBSECCOMP	sandbox.h	29;"	d
USE_PTHREADS	compat_threads.h	29;"	d
USE_PTHREADS	compat_threads.h	31;"	d
USE_SENTINELS	memarea.c	18;"	d	file:
USE_WIN32_THREADS	compat_threads.h	27;"	d
USING_COUNTER_VARS	aes.c	156;"	d	file:
USING_TWOS_COMPLEMENT	orconfig.h	642;"	d
UTIL_PRIVATE	util.c	20;"	d	file:
U_MEM	memarea.c	34;"	d	file:
U_MEM	memarea.c	36;"	d	file:
UpdateBridgesFromAuthority	or.h	/^  int UpdateBridgesFromAuthority;$/;"	m	struct:__anon24
UseBridges	or.h	/^  int UseBridges; \/**< Boolean: should we start all circuits with a bridge? *\/$/;"	m	struct:__anon24
UseEntryGuards	or.h	/^  int UseEntryGuards; \/**< Boolean: Do we try to enter from a smallish number$/;"	m	struct:__anon24
UseEntryGuardsAsDirGuards	or.h	/^  int UseEntryGuardsAsDirGuards; \/** Boolean: Do we try to get directory info$/;"	m	struct:__anon24
UseFilteringSSLBufferevents	or.h	/^  int UseFilteringSSLBufferevents;$/;"	m	struct:__anon24
UseGuardFraction	or.h	/^  int UseGuardFraction;$/;"	m	struct:__anon24
UseMicrodescriptors	or.h	/^  int UseMicrodescriptors;$/;"	m	struct:__anon24
UseNTorHandshake	or.h	/^  int UseNTorHandshake;$/;"	m	struct:__anon24
User	or.h	/^  char *User; \/**< Name of user to run Tor as. *\/$/;"	m	struct:__anon24
UserspaceIOCPBuffers	or.h	/^  int UserspaceIOCPBuffers;$/;"	m	struct:__anon24
UsingTestNetworkDefaults_	or.h	/^  int UsingTestNetworkDefaults_;$/;"	m	struct:__anon24
V	compat_libevent.c	46;"	d	file:
V	config.c	133;"	d	file:
V	config.c	545;"	d	file:
V	statefile.c	36;"	d	file:
V	statefile.c	93;"	d	file:
V2_HANDSHAKE_CLIENT	tortls.c	88;"	d	file:
V2_HANDSHAKE_SERVER	tortls.c	87;"	d	file:
V3AuthDistDelay	or.h	/^  int V3AuthDistDelay;$/;"	m	struct:__anon24
V3AuthNIntervalsValid	or.h	/^  int V3AuthNIntervalsValid;$/;"	m	struct:__anon24
V3AuthUseLegacyKey	or.h	/^  int V3AuthUseLegacyKey;$/;"	m	struct:__anon24
V3AuthVoteDelay	or.h	/^  int V3AuthVoteDelay;$/;"	m	struct:__anon24
V3AuthVotingInterval	or.h	/^  int V3AuthVotingInterval;$/;"	m	struct:__anon24
V3AuthoritativeDir	or.h	/^  int V3AuthoritativeDir; \/**< Boolean: is this an authoritative directory$/;"	m	struct:__anon24
V3BandwidthsFile	or.h	/^  char *V3BandwidthsFile;$/;"	m	struct:__anon24
V3_AUTH_BODY_LEN	or.h	1376;"	d
V3_AUTH_FIXED_PART_LEN	or.h	1373;"	d
V3_DIRINFO	or.h	/^  V3_DIRINFO      = 1 << 2,$/;"	e	enum:__anon18
VAR	config.c	129;"	d	file:
VAR	config.c	544;"	d	file:
VAR	statefile.c	32;"	d	file:
VAR	statefile.c	92;"	d	file:
VAR_CELL_MAX_HEADER_SIZE	or.h	917;"	d
VERIFY_DIR	or.h	/^  VERIFY_DIR, VERIFY_RTR,$/;"	e	enum:__anon41
VERIFY_RTR	or.h	/^  VERIFY_DIR, VERIFY_RTR,$/;"	e	enum:__anon41
VERSION	orconfig.h	645;"	d
VERY_OLD_FILE_AGE	config.c	7077;"	d	file:
VER_PRE	or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon43
VER_RC	or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon43
VER_RELEASE	or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon43
VER_SUITE_EMBEDDEDNT	compat.h	673;"	d
VER_SUITE_SINGLEUSERTS	compat.h	677;"	d
VPORT	config.c	138;"	d	file:
VS_EMPTY	or.h	/^  VS_EMPTY=5, \/**< The version list was empty; no agreed-on versions. *\/$/;"	e	enum:version_status_t
VS_NEW	or.h	/^  VS_NEW=2, \/**< This version is newer than any recommended version. *\/$/;"	e	enum:version_status_t
VS_NEW_IN_SERIES	or.h	/^  VS_NEW_IN_SERIES=3, \/**< This version is newer than any recommended version$/;"	e	enum:version_status_t
VS_OLD	or.h	/^  VS_OLD=1, \/**< This version is older than any recommended version. *\/$/;"	e	enum:version_status_t
VS_RECOMMENDED	or.h	/^  VS_RECOMMENDED=0, \/**< This version is listed as recommended. *\/$/;"	e	enum:version_status_t
VS_UNKNOWN	or.h	/^  VS_UNKNOWN, \/**< We have no idea. *\/$/;"	e	enum:version_status_t
VS_UNRECOMMENDED	or.h	/^  VS_UNRECOMMENDED=4, \/**< This version is not recommended (general case). *\/$/;"	e	enum:version_status_t
V_LINE_OVERHEAD	dirserv.c	1928;"	d	file:
V_OLD	compat_libevent.c	48;"	d	file:
VersioningAuthoritativeDir	or.h	/^  int VersioningAuthoritativeDir; \/**< Boolean: is this an authoritative$/;"	m	struct:__anon24
VirtualAddrNetworkIPv4	or.h	/^  char *VirtualAddrNetworkIPv4; \/**< Address and mask to hand out for virtual$/;"	m	struct:__anon24
VirtualAddrNetworkIPv6	or.h	/^  char *VirtualAddrNetworkIPv6; \/**< Address and mask to hand out for virtual$/;"	m	struct:__anon24
W0	ed25519-hash.h	76;"	d
W1	ed25519-hash.h	77;"	d
WARN_INTRVL_LOOP	connection_edge.c	1335;"	d	file:
WARN_INTRVL_PRIV	connection_edge.c	1347;"	d	file:
WARN_TOO_MANY_CIRC_CREATIONS_INTERVAL	onion.c	145;"	d	file:
WARN_TOO_MANY_CONNS_INTERVAL	connection.c	925;"	d	file:
WEEKDAY_NAMES	util.c	/^static const char *WEEKDAY_NAMES[] =$/;"	v	file:
WEIGHT_FOR_DIR	or.h	/^  WEIGHT_FOR_DIR$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_EXIT	or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_GUARD	or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_MID	or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEOF	compat.c	87;"	d	file:
WFU_TO_GUARANTEE_GUARD	dirserv.c	1275;"	d	file:
WIN32_LEAN_AND_MEAN	orconfig.h	687;"	d
WINVER	orconfig.h	677;"	d
WNOHANG	orconfig.h	754;"	d
WORD	dirserv.c	3713;"	d	file:
WORDS_BIGENDIAN	orconfig.h	651;"	d
WQ_RPL_ERROR	workqueue.h	/^  WQ_RPL_ERROR = 1, \/** indicates fatal error *\/$/;"	e	enum:__anon101
WQ_RPL_REPLY	workqueue.h	/^  WQ_RPL_REPLY = 0, \/** indicates success *\/$/;"	e	enum:__anon101
WQ_RPL_SHUTDOWN	workqueue.h	/^  WQ_RPL_SHUTDOWN = 2, \/** indicates thread is shutting down *\/$/;"	e	enum:__anon101
WRA_MORE_SEVERE	dirserv.c	/^WRA_MORE_SEVERE(was_router_added_t a, was_router_added_t b)$/;"	f	file:
WRA_NEVER_DOWNLOADABLE	routerlist.h	/^static INLINE int WRA_NEVER_DOWNLOADABLE(was_router_added_t s)$/;"	f
WRA_WAS_ADDED	routerlist.h	/^WRA_WAS_ADDED(was_router_added_t s) {$/;"	f
WRA_WAS_OUTDATED	routerlist.h	/^static INLINE int WRA_WAS_OUTDATED(was_router_added_t s)$/;"	f
WRA_WAS_REJECTED	routerlist.h	/^static INLINE int WRA_WAS_REJECTED(was_router_added_t s)$/;"	f
WRITE_EVENT	main.h	/^  WRITE_EVENT=0x04 \/**< We want to know when a connection is writable *\/$/;"	e	enum:watchable_events
WRITE_STATS_INTERVAL	or.h	4815;"	d
WSAGetLastError	orconfig.h	2423;"	d
WUNTRACED	orconfig.h	755;"	d
WarnPlaintextPorts	or.h	/^  smartlist_t *WarnPlaintextPorts;$/;"	m	struct:__anon24
WarnUnsafeSocks	or.h	/^  int WarnUnsafeSocks;$/;"	m	struct:__anon24
X	TorSGX.cpp	1361;"	d	file:
X	TorSGX.cpp	1363;"	d	file:
X	ge.h	/^  fe X;$/;"	m	struct:__anon79
X	ge.h	/^  fe X;$/;"	m	struct:__anon80
X	ge.h	/^  fe X;$/;"	m	struct:__anon81
X	util_format.c	327;"	d	file:
X	util_format.c	440;"	d	file:
X509_get_notAfter_const	tortls.c	82;"	d	file:
X509_get_notBefore_const	tortls.c	80;"	d	file:
XCIPHER	tortls.c	714;"	d	file:
XCIPHER	tortls.c	724;"	d	file:
X_ADDRESS_HEADER	directory.c	104;"	d	file:
Xm	circuitstats.h	/^  build_time_t Xm;$/;"	m	struct:circuit_build_times_s
Y	ge.h	/^  fe Y;$/;"	m	struct:__anon79
Y	ge.h	/^  fe Y;$/;"	m	struct:__anon80
Y	ge.h	/^  fe Y;$/;"	m	struct:__anon81
YminusX	ge.h	/^  fe YminusX;$/;"	m	struct:__anon83
YplusX	ge.h	/^  fe YplusX;$/;"	m	struct:__anon83
Z	ge.h	/^  fe Z;$/;"	m	struct:__anon79
Z	ge.h	/^  fe Z;$/;"	m	struct:__anon80
Z	ge.h	/^  fe Z;$/;"	m	struct:__anon81
Z	ge.h	/^  fe Z;$/;"	m	struct:__anon83
ZLIB_METHOD	torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon66
_DARWIN_USE_64_BIT_INODE	orconfig.h	661;"	d
_FILE_OFFSET_BITS	torgzip.c	41;"	d	file:
_GNU_SOURCE	backtrace.c	5;"	d	file:
_GNU_SOURCE	compat.c	24;"	d	file:
_GNU_SOURCE	compat_pthreads.c	6;"	d	file:
_GNU_SOURCE	compat_threads.c	6;"	d	file:
_GNU_SOURCE	sandbox.c	42;"	d	file:
_GNU_SOURCE	sandbox.h	46;"	d
_GNU_SOURCE	util.c	14;"	d	file:
_IAS_RA_H	ias_ra.h	27;"	d
_IO	orconfig.h	1605;"	d
_IOR	orconfig.h	1607;"	d
_IOW	orconfig.h	1609;"	d
_LARGEFILE64_SOURCE	sandbox.c	19;"	d	file:
_LARGEFILE64_SOURCE	torgzip.c	35;"	d	file:
_LFS64_LARGEFILE	torgzip.c	38;"	d	file:
_LK_LOCK	orconfig.h	1205;"	d
_LK_NBLCK	orconfig.h	1206;"	d
_LK_NBRLCK	orconfig.h	1208;"	d
_LK_RLCK	orconfig.h	1207;"	d
_LK_UNLOCK	orconfig.h	1204;"	d
_NETWORK_RA_H	network_ra.h	27;"	d
_NSIG	orconfig.h	832;"	d
_NSIG_BPW	orconfig.h	833;"	d
_NSIG_WORDS	orconfig.h	834;"	d
_O_APPEND	orconfig.h	1141;"	d
_O_BINARY	orconfig.h	1152;"	d
_O_CREAT	orconfig.h	1143;"	d
_O_EXCL	orconfig.h	1145;"	d
_O_NOINHERIT	orconfig.h	1163;"	d
_O_NONBLOCK	orconfig.h	1140;"	d
_O_OBTAIN_DIR	orconfig.h	1175;"	d
_O_RANDOM	orconfig.h	1180;"	d
_O_RAW	orconfig.h	1159;"	d
_O_RDONLY	orconfig.h	1137;"	d
_O_RDWR	orconfig.h	1139;"	d
_O_SEQUENTIAL	orconfig.h	1179;"	d
_O_SHORT_LIVED	orconfig.h	1171;"	d
_O_TEMPORARY	orconfig.h	1167;"	d
_O_TEXT	orconfig.h	1151;"	d
_O_TRUNC	orconfig.h	1144;"	d
_O_U16TEXT	orconfig.h	1154;"	d
_O_U8TEXT	orconfig.h	1155;"	d
_O_WRONLY	orconfig.h	1138;"	d
_O_WTEXT	orconfig.h	1153;"	d
_READPASSPHRASE_H_	tor_readpassphrase.h	26;"	d
_SERVICE_PROVIDER_H	service_provider.h	27;"	d
_SIZEOF_ADDR_IFREQ	address.c	1410;"	d	file:
_SS_ALIGNSIZE	orconfig.h	1644;"	d
_SS_MAXSIZE	orconfig.h	1642;"	d
_SS_PAD1SIZE	orconfig.h	1648;"	d
_SS_PAD2SIZE	orconfig.h	1649;"	d
_S_IEXEC	orconfig.h	2019;"	d
_S_IFCHR	orconfig.h	2014;"	d
_S_IFDIR	orconfig.h	2013;"	d
_S_IFIFO	orconfig.h	2015;"	d
_S_IFMT	orconfig.h	2012;"	d
_S_IFREG	orconfig.h	2016;"	d
_S_IREAD	orconfig.h	2017;"	d
_S_IWRITE	orconfig.h	2018;"	d
_TOR_FP_PAIR_H	fp_pair.h	10;"	d
_USE_ISOC99_	util.c	48;"	d	file:
_WIN32_WINNT	orconfig.h	682;"	d
__ARCH_FLOCK_PAD	orconfig.h	888;"	d
__INCLUDE_LEVEL__	config.c	65;"	d	file:
__INCLUDE_LEVEL__	main.c	85;"	d	file:
__NFDBITS	orconfig.h	2286;"	d
__NFDBITS	orconfig.h	2288;"	d
__SI_MAX_SIZE	orconfig.h	732;"	d
__SI_PAD_SIZE	orconfig.h	733;"	d
__SOCKADDR_COMMON	orconfig.h	1574;"	d
__SOCKADDR_COMMON_SIZE	orconfig.h	1577;"	d
__USE_GNU	backtrace.c	4;"	d	file:
__USE_GNU	sandbox.h	43;"	d
__chk_fail	TorSGX.cpp	/^__chk_fail (void)$/;"	f
__ctype_b_loc	TorSGX.cpp	/^const unsigned short **__ctype_b_loc(void)$/;"	f
__ctype_tolower_loc	TorSGX.cpp	/^const int32_t **__ctype_tolower_loc(void)$/;"	f
__fd_mask	orconfig.h	/^typedef long int __fd_mask;$/;"	t
__fdelt_chk	TorSGX.cpp	/^__fdelt_chk (long int d)$/;"	f
__func__	compat.h	87;"	d
__func__	compat.h	94;"	d
__func__	compat.h	96;"	d
__func__	compat.h	98;"	d
__gid_t	orconfig.h	/^typedef gid_t __gid_t;$/;"	t
__kernel_long_t	orconfig.h	/^typedef long            __kernel_long_t;$/;"	t
__kernel_off_t	orconfig.h	/^typedef __kernel_long_t __kernel_off_t;$/;"	t
__kernel_pid_t	orconfig.h	/^typedef int             __kernel_pid_t;$/;"	t
__memcpy_chk	TorSGX.cpp	/^__memcpy_chk (void *__restrict__ dest, const void *__restrict__ src,$/;"	f
__memset_chk	TorSGX.cpp	/^__memset_chk (void *dest, int val, size_t len, size_t slen)$/;"	f
__pad0	orconfig.h	/^    int __pad0;			\/* Explicit padding.  *\/$/;"	m	struct:siginfo
__pid_t	orconfig.h	/^typedef pid_t __pid_t;$/;"	t
__sighandler_t	orconfig.h	/^typedef void (*__sighandler_t)(int);$/;"	t
__ss_align	orconfig.h	/^    int64_t __ss_align;            \/\/ Field to force desired structure$/;"	m	struct:sockaddr_storage
__ss_pad1	orconfig.h	/^    char __ss_pad1[_SS_PAD1SIZE];  \/\/ 6 byte pad, this is to make$/;"	m	struct:sockaddr_storage
__ss_pad2	orconfig.h	/^    char __ss_pad2[_SS_PAD2SIZE];  \/\/ 112 byte pad to achieve desired size;$/;"	m	struct:sockaddr_storage
__uid_t	orconfig.h	/^typedef uid_t __uid_t;$/;"	t
__uint32_t	orconfig.h	/^typedef unsigned int        __uint32_t;$/;"	t
__uint8_t	orconfig.h	/^typedef unsigned char       __uint8_t;$/;"	t
_base	orconfig.h	/^        char *_base;$/;"	m	struct:_iobuf
_bufsiz	orconfig.h	/^        int   _bufsiz;$/;"	m	struct:_iobuf
_charbuf	orconfig.h	/^        int   _charbuf;$/;"	m	struct:_iobuf
_cnt	orconfig.h	/^        int   _cnt;$/;"	m	struct:_iobuf
_dev_t	orconfig.h	/^typedef unsigned int _dev_t;            \/* device code *\/$/;"	t
_errno	TorSGX.cpp	/^int * _errno(void)$/;"	f
_exit	orconfig.h	2426;"	d
_file	orconfig.h	/^        int   _file;$/;"	m	struct:_iobuf
_flag	orconfig.h	/^        int   _flag;$/;"	m	struct:_iobuf
_ias_att_report_t	ias_ra.h	/^typedef struct _ias_att_report_t$/;"	s
_ias_msg_type_t	network_ra.h	/^typedef enum _ias_msg_type_t$/;"	g
_ias_platform_info_blob_t	remote_attestation_result.h	/^typedef struct _ias_platform_info_blob_t$/;"	s
_ino_t	orconfig.h	/^typedef unsigned short _ino_t;          \/* i-node number (not used on DOS) *\/$/;"	t
_iobuf	orconfig.h	/^struct _iobuf {$/;"	s
_kill	orconfig.h	/^	  } _kill;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon46
_le64toh	csiphash.c	41;"	d	file:
_le64toh	csiphash.c	45;"	d	file:
_le64toh	csiphash.c	48;"	d	file:
_le64toh	csiphash.c	51;"	d	file:
_le64toh	csiphash.c	63;"	d	file:
_le64toh	csiphash.c	66;"	d	file:
_le64toh	csiphash.c	68;"	d	file:
_locking	orconfig.h	2434;"	d
_off_t	orconfig.h	/^typedef long _off_t;                    \/* file offset value *\/$/;"	t
_pad	orconfig.h	/^	int _pad[__SI_PAD_SIZE];$/;"	m	union:siginfo::__anon45
_ptr	orconfig.h	/^        char *_ptr;$/;"	m	struct:_iobuf
_ra_msg_type_t	network_ra.h	/^typedef enum _ra_msg_type_t$/;"	g
_ra_samp_request_header_t	network_ra.h	/^typedef struct _ra_samp_request_header_t{$/;"	s
_ra_samp_response_header_t	network_ra.h	/^typedef struct _ra_samp_response_header_t{$/;"	s
_rt	orconfig.h	/^	  } _rt;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon48
_sa_handler	orconfig.h	/^          __sighandler_t _sa_handler;$/;"	m	union:sigaction::__anon53
_sa_sigaction	orconfig.h	/^          void (*_sa_sigaction)(int, struct siginfo *, void *);$/;"	m	union:sigaction::__anon53
_sgx_file	orconfig.h	/^typedef struct _sgx_file$/;"	s
_si_flags	orconfig.h	/^	    unsigned int _si_flags;$/;"	m	struct:siginfo::__anon45::__anon50
_si_imm	orconfig.h	/^	    int _si_imm;$/;"	m	struct:siginfo::__anon45::__anon50
_si_isr	orconfig.h	/^	    unsigned long int _si_isr;$/;"	m	struct:siginfo::__anon45::__anon50
_sifields	orconfig.h	/^      } _sifields;$/;"	m	struct:siginfo	typeref:union:siginfo::__anon45
_sigchld	orconfig.h	/^	  } _sigchld;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon49
_sigfault	orconfig.h	/^	  } _sigfault;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon50
_sigpoll	orconfig.h	/^	  } _sigpoll;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon51
_sp_db_item_t	service_provider.h	/^typedef struct _sp_db_item_t$/;"	s
_strdup	TorSGX.cpp	/^char *_strdup(const char* s)$/;"	f
_timer	orconfig.h	/^	  } _timer;$/;"	m	union:siginfo::__anon45	typeref:struct:siginfo::__anon45::__anon47
_tmpfname	orconfig.h	/^        char *_tmpfname;$/;"	m	struct:_iobuf
_u	orconfig.h	/^        } _u;$/;"	m	struct:sigaction	typeref:union:sigaction::__anon53
a	ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
abbreviated	confparse.h	/^  const char *abbreviated;$/;"	m	struct:config_abbrev_t
abbrevs	confparse.h	/^  config_abbrev_t *abbrevs; \/**< List of abbreviations that we expand when$/;"	m	struct:config_format_t
abort_writing_to_file	util.c	/^abort_writing_to_file(open_file_t *file_data)$/;"	f
accepted	policies.c	/^    unsigned int accepted:1; \/** Has this port already been accepted *\/$/;"	m	struct:policy_summary_item_t	file:
accepted_intro_dh_parts	rendservice.c	/^  replaycache_t *accepted_intro_dh_parts;$/;"	m	struct:rend_service_t	file:
accepted_intro_rsa_parts	or.h	/^  replaycache_t *accepted_intro_rsa_parts;$/;"	m	struct:rend_intro_point_t
accepted_introduce2_count	or.h	/^  int accepted_introduce2_count;$/;"	m	struct:rend_intro_point_t
accounting_add_bytes	hibernate.c	/^accounting_add_bytes(size_t n_read, size_t n_written, int seconds)$/;"	f
accounting_get_interval_length	hibernate.c	/^accounting_get_interval_length(void)$/;"	f
accounting_parse_options	hibernate.c	/^accounting_parse_options(const or_options_t *options, int validate_only)$/;"	f
accounting_record_bandwidth_usage	hibernate.c	/^accounting_record_bandwidth_usage(time_t now, or_state_t *state)$/;"	f
accounting_run_housekeeping	hibernate.c	/^accounting_run_housekeeping(time_t now)$/;"	f
accounting_set_wakeup_time	hibernate.c	/^accounting_set_wakeup_time(void)$/;"	f	file:
actime	orconfig.h	/^        time_t actime;          \/* access time *\/$/;"	m	struct:utimbuf
action	geoip.c	/^  unsigned int action:2;$/;"	m	struct:clientmap_entry_t	file:
activate_signal	main.c	/^activate_signal(int signal_num)$/;"	f
active_channels	channel.c	/^static smartlist_t *active_channels = NULL;$/;"	v	file:
active_circuit_pqueue	circuitmux_ewma.c	/^  smartlist_t *active_circuit_pqueue;$/;"	m	struct:ewma_policy_data_s	file:
active_circuit_pqueue_last_recalibrated	circuitmux_ewma.c	/^  unsigned int active_circuit_pqueue_last_recalibrated;$/;"	m	struct:ewma_policy_data_s	file:
active_circuits_head	circuitmux.c	/^  struct circuit_t *active_circuits_head, *active_circuits_tail;$/;"	m	struct:circuitmux_s	typeref:struct:circuitmux_s::circuit_t	file:
active_circuits_tail	circuitmux.c	/^  struct circuit_t *active_circuits_head, *active_circuits_tail;$/;"	m	struct:circuitmux_s	typeref:struct:circuitmux_s::	file:
active_linked_connection_lst	main.c	/^static smartlist_t *active_linked_connection_lst = NULL;$/;"	v	file:
active_listeners	channel.c	/^static smartlist_t *active_listeners = NULL;$/;"	v	file:
active_on_link	or.h	/^  unsigned int active_on_link:1;$/;"	m	struct:connection_t
add128	ed25519-donna-portable.h	48;"	d
add128	ed25519-donna-portable.h	69;"	d
add128	ed25519-donna-portable.h	83;"	d
add128_64	ed25519-donna-portable.h	49;"	d
add128_64	ed25519-donna-portable.h	70;"	d
add128_64	ed25519-donna-portable.h	84;"	d
add256_modm	modm-donna-32bit.h	/^add256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
add256_modm	modm-donna-64bit.h	/^add256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
add_an_entry_guard	entrynodes.c	/^add_an_entry_guard(const node_t *chosen, int reset_status, int prepend,$/;"	f
add_callback_log	log.c	/^add_callback_log(const log_severity_list_t *severity, log_callback cb)$/;"	f
add_cell_ewma	circuitmux_ewma.c	/^add_cell_ewma(ewma_policy_data_t *pol, cell_ewma_t *ewma)$/;"	f	file:
add_connection_to_closeable_list	main.c	/^add_connection_to_closeable_list(connection_t *conn)$/;"	f
add_default_trusted_dir_authorities	config.c	/^add_default_trusted_dir_authorities(dirinfo_type_t type)$/;"	f	file:
add_entropy	main.c	/^  time_t add_entropy;$/;"	m	struct:__anon107	file:
add_file_log	log.c	/^add_file_log(const log_severity_list_t *severity, const char *filename,$/;"	f
add_fingerprint_to_dir	dirserv.c	/^add_fingerprint_to_dir(const char *fp, authdir_config_t *list,$/;"	f
add_laplace_noise	util.c	/^add_laplace_noise(int64_t signal, double random, double delta_f,$/;"	f
add_noparam_filter	sandbox.c	/^add_noparam_filter(scmp_filter_ctx ctx)$/;"	f	file:
add_obs	rephist.c	/^add_obs(bw_array_t *b, time_t when, uint64_t n)$/;"	f	file:
add_onion_helper_keyarg	control.c	/^add_onion_helper_keyarg(const char *arg, int discard_pk,$/;"	f
add_param_filter	sandbox.c	/^add_param_filter(scmp_filter_ctx ctx, sandbox_cfg_t* cfg)$/;"	f	file:
add_predicted_port	rephist.c	/^add_predicted_port(time_t now, uint16_t port)$/;"	f	file:
add_stream_log	log.c	/^add_stream_log(const log_severity_list_t *severity, const char *name, int fd)$/;"	f
add_stream_log_impl	log.c	/^add_stream_log_impl(const log_severity_list_t *severity,$/;"	f	file:
add_syslog_log	log.c	/^add_syslog_log(const log_severity_list_t *severity)$/;"	f
add_temp_log	log.c	/^add_temp_log(int min_severity)$/;"	f
add_transport_to_proxy	transports.c	/^add_transport_to_proxy(const char *transport, managed_proxy_t *mp)$/;"	f	file:
add_unix_port	rendservice.c	/^add_unix_port(smartlist_t *ports, rend_service_port_config_t *p)$/;"	f	file:
add_wildcarded_test_address	dns.c	/^add_wildcarded_test_address(const char *address)$/;"	f	file:
added_cells_appward	control.h	/^  uint64_t added_cells_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
added_cells_exitward	control.h	/^  uint64_t added_cells_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
addr	address.h	/^  tor_addr_t addr;$/;"	m	struct:tor_addr_port_t
addr	address.h	/^  } addr;$/;"	m	struct:tor_addr_t	typeref:union:tor_addr_t::__anon3
addr	addressmap.h	/^  tor_addr_t addr;$/;"	m	struct:virtual_addr_conf_t
addr	config.h	/^  tor_addr_t addr; \/* The IP address of the bridge. *\/$/;"	m	struct:bridge_line_t
addr	entrynodes.c	/^  tor_addr_t addr;$/;"	m	struct:__anon122	file:
addr	geoip.c	/^  tor_addr_t addr;$/;"	m	struct:clientmap_entry_t	file:
addr	or.h	/^  tor_addr_t addr; \/**< IP address. *\/$/;"	m	struct:extend_info_t
addr	or.h	/^  tor_addr_t addr; \/**< IP of the other side of the connection; used to$/;"	m	struct:connection_t
addr	or.h	/^  tor_addr_t addr; \/**< The actual IP to listen on, if !is_unix_addr. *\/$/;"	m	struct:port_cfg_t
addr	or.h	/^  tor_addr_t addr;$/;"	m	struct:addr_policy_t
addr	or.h	/^  uint32_t addr; \/**< Address of this voter, in IPv4, in host order. *\/$/;"	m	struct:networkstatus_voter_info_t
addr	or.h	/^  uint32_t addr; \/**< IPv4 address for this router. *\/$/;"	m	struct:routerstatus_t
addr	or.h	/^  uint32_t addr; \/**< IPv4 address of OR, in host order. *\/$/;"	m	struct:__anon14
addr	or.h	/^  uint32_t addr; \/**< IPv4 address. *\/$/;"	m	struct:dir_server_t
addr	or.h	/^  uint32_t addr;$/;"	m	struct:authority_cert_t
addr	relay.h	/^  tor_addr_t addr;$/;"	m	struct:address_ttl_s
addr	transports.h	/^  tor_addr_t addr;$/;"	m	struct:transport_t
addr_current_at	or.h	/^  time_t addr_current_at; \/**< When was the document that we derived the$/;"	m	struct:dir_server_t
addr_ipv4	dns_structs.h	/^    uint32_t addr_ipv4; \/**< IPv4 addr for <b>address<\/b>, if successful.$/;"	m	union:cached_resolve_t::__anon60
addr_ipv6	dns_structs.h	/^    struct in6_addr addr_ipv6; \/**< IPv6 addr for <b>address<\/b>, if$/;"	m	union:cached_resolve_t::__anon61	typeref:struct:cached_resolve_t::__anon61::in6_addr
addr_is_in_cc_list	policies.c	/^addr_is_in_cc_list(uint32_t addr, const smartlist_t *cc_list)$/;"	f	file:
addr_mask_get_bits	address.c	/^addr_mask_get_bits(uint32_t mask)$/;"	f
addr_policy_action_bitfield_t	or.h	1891;"	d
addr_policy_action_t	or.h	/^} addr_policy_action_t;$/;"	t	typeref:enum:__anon11
addr_policy_append_reject_addr	policies.c	/^addr_policy_append_reject_addr(smartlist_t **dest, const tor_addr_t *addr)$/;"	f
addr_policy_covers	policies.c	/^addr_policy_covers(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
addr_policy_free	policies.c	/^addr_policy_free(addr_policy_t *p)$/;"	f
addr_policy_intersects	policies.c	/^addr_policy_intersects(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
addr_policy_list_free	policies.c	/^addr_policy_list_free(smartlist_t *lst)$/;"	f
addr_policy_permits_address	policies.c	/^addr_policy_permits_address(uint32_t addr, uint16_t port,$/;"	f	file:
addr_policy_permits_tor_addr	policies.c	/^addr_policy_permits_tor_addr(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
addr_policy_result_t	or.h	/^} addr_policy_result_t;$/;"	t	typeref:enum:__anon40
addr_policy_t	or.h	/^typedef struct addr_policy_t {$/;"	s
addr_policy_t	or.h	/^} addr_policy_t;$/;"	t	typeref:struct:addr_policy_t
addr_port_lookup	address.c	/^addr_port_lookup(int severity, const char *addrport, char **address,$/;"	f
address	connection_edge.h	/^  char *address;$/;"	m	struct:begin_cell_t
address	dns_structs.h	/^  char address[MAX_ADDRESSLEN]; \/**< The hostname to be resolved. *\/$/;"	m	struct:cached_resolve_t
address	or.h	/^  char *address; \/**< Address of this voter, in string format. *\/$/;"	m	struct:networkstatus_voter_info_t
address	or.h	/^  char *address; \/**< FQDN (or IP) of the guy on the other end.$/;"	m	struct:connection_t
address	or.h	/^  char *address; \/**< Hostname. *\/$/;"	m	struct:dir_server_t
address	or.h	/^  char address[MAX_SOCKS_ADDR_LEN]; \/**< What address did the client ask to$/;"	m	struct:socks_request_t
address	tor-gencert.c	/^char *address = NULL;$/;"	v
address	tortls.c	/^  char *address; \/**< An address to log when describing this connection. *\/$/;"	m	struct:tor_tls_t	file:
address_is_in_virtual_range	addressmap.c	/^address_is_in_virtual_range(const char *address)$/;"	f
address_is_invalid_destination	addressmap.c	/^address_is_invalid_destination(const char *address, int client)$/;"	f
address_is_invalid_mapaddress_target	control.c	/^address_is_invalid_mapaddress_target(const char *addr)$/;"	f	file:
address_ttl	or.h	/^  uint32_t address_ttl; \/**< TTL for address-to-addr mapping on exit$/;"	m	struct:edge_connection_t
address_ttl_free	relay.c	/^address_ttl_free(address_ttl_t *addr)$/;"	f
address_ttl_s	relay.h	/^typedef struct address_ttl_s {$/;"	s
address_ttl_t	relay.h	/^} address_ttl_t;$/;"	t	typeref:struct:address_ttl_s
addressmap	addressmap.c	/^static strmap_t *addressmap=NULL;$/;"	v	file:
addressmap_address_should_automap	addressmap.c	/^addressmap_address_should_automap(const char *address,$/;"	f
addressmap_clean	addressmap.c	/^addressmap_clean(time_t now)$/;"	f
addressmap_clear_configured	addressmap.c	/^addressmap_clear_configured(void)$/;"	f
addressmap_clear_excluded_trackexithosts	addressmap.c	/^addressmap_clear_excluded_trackexithosts(const or_options_t *options)$/;"	f
addressmap_clear_invalid_automaps	addressmap.c	/^addressmap_clear_invalid_automaps(const or_options_t *options)$/;"	f
addressmap_clear_transient	addressmap.c	/^addressmap_clear_transient(void)$/;"	f
addressmap_ent_free	addressmap.c	/^addressmap_ent_free(void *_ent)$/;"	f	file:
addressmap_ent_remove	addressmap.c	/^addressmap_ent_remove(const char *address, addressmap_entry_t *ent)$/;"	f	file:
addressmap_entry_source_bitfield_t	or.h	4614;"	d
addressmap_entry_source_t	or.h	/^} addressmap_entry_source_t;$/;"	t	typeref:enum:__anon32
addressmap_entry_t	addressmap.c	/^} addressmap_entry_t;$/;"	t	typeref:struct:__anon87	file:
addressmap_free_all	addressmap.c	/^addressmap_free_all(void)$/;"	f
addressmap_get_mappings	addressmap.c	/^addressmap_get_mappings(smartlist_t *sl, time_t min_expires,$/;"	f
addressmap_get_virtual_address	addressmap.c	/^addressmap_get_virtual_address(int type)$/;"	f	file:
addressmap_have_mapping	addressmap.c	/^addressmap_have_mapping(const char *address, int update_expiry)$/;"	f
addressmap_init	addressmap.c	/^addressmap_init(void)$/;"	f
addressmap_match_superdomains	addressmap.c	/^addressmap_match_superdomains(char *address)$/;"	f	file:
addressmap_register	addressmap.c	/^addressmap_register(const char *address, char *new_address, time_t expires,$/;"	f
addressmap_register_auto	config.c	/^addressmap_register_auto(const char *from, const char *to,$/;"	f
addressmap_register_virtual_address	addressmap.c	/^addressmap_register_virtual_address(int type, char *new_address)$/;"	f
addressmap_rewrite	addressmap.c	/^addressmap_rewrite(char *address, size_t maxlen,$/;"	f
addressmap_rewrite_reverse	addressmap.c	/^addressmap_rewrite_reverse(char *address, size_t maxlen, unsigned flags,$/;"	f
addressmap_virtaddress_ent_free	addressmap.c	/^addressmap_virtaddress_ent_free(void *_ent)$/;"	f	file:
addressmap_virtaddress_remove	addressmap.c	/^addressmap_virtaddress_remove(const char *address, addressmap_entry_t *ent)$/;"	f	file:
addrinfo	orconfig.h	/^struct addrinfo {$/;"	s
addrs_in_same_network_family	nodelist.c	/^addrs_in_same_network_family(const tor_addr_t *a1,$/;"	f	file:
adjust_exit_policy_from_exitpolicy_failure	relay.c	/^adjust_exit_policy_from_exitpolicy_failure(origin_circuit_t *circ,$/;"	f	file:
advance_obs	rephist.c	/^advance_obs(bw_array_t *b)$/;"	f	file:
advertised_server_mode	router.c	/^advertised_server_mode(void)$/;"	f
aes	aes.c	/^    AES_KEY aes;$/;"	m	union:aes_cnt_cipher::__anon114	file:
aes_cipher_free	aes.c	/^aes_cipher_free(aes_cnt_cipher_t *cipher)$/;"	f
aes_cnt_cipher	aes.c	/^struct aes_cnt_cipher {$/;"	s	file:
aes_cnt_cipher_t	aes.h	/^typedef struct aes_cnt_cipher aes_cnt_cipher_t;$/;"	t	typeref:struct:aes_cnt_cipher
aes_crypt	aes.c	/^aes_crypt(aes_cnt_cipher_t *cipher, const char *input, size_t len,$/;"	f
aes_crypt_inplace	aes.c	/^aes_crypt_inplace(aes_cnt_cipher_t *cipher, char *data, size_t len)$/;"	f
aes_fill_buf_	aes.c	/^aes_fill_buf_(aes_cnt_cipher_t *cipher)$/;"	f	file:
aes_new_cipher	aes.c	/^aes_new_cipher(const char *key, const char *iv)$/;"	f
aes_set_iv	aes.c	/^aes_set_iv(aes_cnt_cipher_t *cipher, const char *iv)$/;"	f	file:
aes_set_key	aes.c	/^aes_set_key(aes_cnt_cipher_t *cipher, const char *key, int key_bits)$/;"	f	file:
after_firsthop_idx	or.h	/^  int after_firsthop_idx;$/;"	m	struct:__anon31
age_tmp	or.h	/^  uint32_t age_tmp;$/;"	m	struct:circuit_t
ai_addr	orconfig.h	/^    struct sockaddr *ai_addr;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr
ai_addrlen	orconfig.h	/^    socklen_t        ai_addrlen;$/;"	m	struct:addrinfo
ai_canonname	orconfig.h	/^    char            *ai_canonname;$/;"	m	struct:addrinfo
ai_family	orconfig.h	/^    int              ai_family;$/;"	m	struct:addrinfo
ai_flags	orconfig.h	/^    int              ai_flags;$/;"	m	struct:addrinfo
ai_next	orconfig.h	/^    struct addrinfo *ai_next;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo
ai_protocol	orconfig.h	/^    int              ai_protocol;$/;"	m	struct:addrinfo
ai_socktype	orconfig.h	/^    int              ai_socktype;$/;"	m	struct:addrinfo
alert	workqueue.c	/^  alert_sockets_t alert;$/;"	m	struct:replyqueue_s	file:
alert_fn	compat_threads.h	/^  int (*alert_fn)(tor_socket_t write_fd);$/;"	m	struct:alert_sockets_s
alert_sockets_close	compat_threads.c	/^alert_sockets_close(alert_sockets_t *socks)$/;"	f
alert_sockets_create	compat_threads.c	/^alert_sockets_create(alert_sockets_t *socks_out, uint32_t flags)$/;"	f
alert_sockets_s	compat_threads.h	/^typedef struct alert_sockets_s {$/;"	s
alert_sockets_t	compat_threads.h	/^} alert_sockets_t;$/;"	t	typeref:struct:alert_sockets_s
alg	or.h	/^  digest_algorithm_t alg;$/;"	m	struct:document_signature_t
algorithm	crypto.c	/^  digest_algorithm_bitfield_t algorithm : 8; \/**< Which algorithm is in use? *\/$/;"	m	struct:crypto_digest_t	file:
align	network_ra.h	/^    uint8_t align[1];$/;"	m	struct:_ra_samp_response_header_t
align	network_ra.h	/^    uint8_t align[3];$/;"	m	struct:_ra_samp_request_header_t
all_addrs	or.h	/^  unsigned int all_addrs : 1;$/;"	m	struct:server_port_cfg_t
all_channels	channel.c	/^static smartlist_t *all_channels = NULL;$/;"	v	file:
all_listeners	channel.c	/^static smartlist_t *all_listeners = NULL;$/;"	v	file:
all_rsa_sha1_lst	dircollate.h	/^  smartlist_t *all_rsa_sha1_lst;$/;"	m	struct:dircollator_s
all_uploads_performed	or.h	/^  int all_uploads_performed;$/;"	m	struct:rend_service_descriptor_t
alloc_chunk	memarea.c	/^alloc_chunk(size_t sz, int freelist_ok)$/;"	f	file:
alloc_circ_data	circuitmux.h	/^    (*alloc_circ_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
alloc_cmux_data	circuitmux.h	/^  circuitmux_policy_data_t * (*alloc_cmux_data)(circuitmux_t *cmux);$/;"	m	struct:circuitmux_policy_s
alloc_getcwd	compat.c	/^alloc_getcwd(void)$/;"	f	file:
alloc_http_authenticator	connection.c	/^alloc_http_authenticator(const char *authenticator)$/;"	f
allocation	torgzip.c	/^  size_t allocation;$/;"	m	struct:tor_zlib_state_t	file:
allow_single_hop_exits	or.h	/^  unsigned int allow_single_hop_exits:1;  \/**< Whether the router says$/;"	m	struct:__anon14
allow_unknown_ports	rendservice.c	/^  int allow_unknown_ports;$/;"	m	struct:rend_service_t	file:
alpha	circuitstats.h	/^  double alpha;$/;"	m	struct:circuit_build_times_s
already_have_cert	routerlist.c	/^already_have_cert(authority_cert_t *cert)$/;"	f	file:
already_received_introduce1	or.h	/^  unsigned int already_received_introduce1 : 1;$/;"	m	struct:or_circuit_t
always_accept_verify_cb	tortls.c	/^always_accept_verify_cb(int preverify_ok,$/;"	f	file:
annotations_len	or.h	/^  size_t annotations_len;$/;"	m	struct:signed_descriptor_t
answer_is_wildcarded	dns.c	/^answer_is_wildcarded(const char *ip)$/;"	f	file:
any_bridge_descriptors_known	entrynodes.c	/^any_bridge_descriptors_known(void)$/;"	f
any_bridge_supports_microdescriptors	entrynodes.c	/^any_bridge_supports_microdescriptors(void)$/;"	f
any_other_active_or_conns	connection.c	/^any_other_active_or_conns(const or_connection_t *this_conn)$/;"	f
any_predicted_circuits	rephist.c	/^any_predicted_circuits(time_t now)$/;"	f
ap_stream_wants_exit_attention	circuitbuild.c	/^ap_stream_wants_exit_attention(connection_t *conn)$/;"	f	file:
append_address_to_payload	relay.c	/^append_address_to_payload(uint8_t *payload_out, const tor_addr_t *addr)$/;"	f
append_bytes_to_file	util.c	/^append_bytes_to_file(const char *fname, const char *str, size_t len,$/;"	f
append_cell_stats_by_command	control.c	/^append_cell_stats_by_command(smartlist_t *event_parts, const char *key,$/;"	f
append_cell_to_circuit_queue	relay.c	/^append_cell_to_circuit_queue(circuit_t *circ, channel_t *chan,$/;"	f
append_exit_policy_string	policies.c	/^append_exit_policy_string(smartlist_t **policy, const char *more)$/;"	f	file:
appname	log.c	/^static char *appname = NULL;$/;"	v	file:
approx_time	util.c	/^approx_time(void)$/;"	f
approx_time	util.h	323;"	d
arg	workqueue.c	/^  void *arg;$/;"	m	struct:workqueue_entry_s	file:
args	routerparse.c	/^  char **args;                 \/**< Array of arguments from keyword line. *\/$/;"	m	struct:directory_token_t	file:
argv	transports.h	/^  char **argv; \/* the cli arguments of this proxy *\/$/;"	m	struct:__anon1
as_of	dirserv.c	/^  time_t as_of;$/;"	m	struct:mbw_cache_entry_s	file:
assert_addr_policy_ok	routerparse.c	/^assert_addr_policy_ok(smartlist_t *lst)$/;"	f
assert_all_pending_dns_resolves_ok	dns.c	/^assert_all_pending_dns_resolves_ok(void)$/;"	f
assert_buf_ok	buffers.c	/^assert_buf_ok(buf_t *buf)$/;"	f
assert_cache_ok	dns.c	123;"	d	file:
assert_cache_ok	dns.c	125;"	d	file:
assert_cache_ok_	dns.c	/^assert_cache_ok_(void)$/;"	f	file:
assert_circuit_mux_okay	relay.c	/^assert_circuit_mux_okay(channel_t *chan)$/;"	f
assert_circuit_ok	circuitlist.c	/^assert_circuit_ok(const circuit_t *c)$/;"	f
assert_cmux_ok_paranoid	relay.c	2248;"	d	file:
assert_cmux_ok_paranoid	relay.c	2251;"	d	file:
assert_connection_edge_not_dns_pending	dns.c	/^assert_connection_edge_not_dns_pending(edge_connection_t *conn)$/;"	f
assert_connection_ok	connection.c	/^assert_connection_ok(connection_t *conn, time_t now)$/;"	f
assert_cpath_layer_ok	circuitlist.c	/^assert_cpath_layer_ok(const crypt_path_t *cp)$/;"	f
assert_cpath_ok	circuitlist.c	/^assert_cpath_ok(const crypt_path_t *cp)$/;"	f	file:
assert_identity_keys_ok	router.c	/^assert_identity_keys_ok(void)$/;"	f	file:
assert_resolve_ok	dns.c	/^assert_resolve_ok(cached_resolve_t *resolve)$/;"	f	file:
assert_unconfigured_count_ok	transports.c	/^assert_unconfigured_count_ok(void)$/;"	f	file:
assign_onionskin_to_cpuworker	cpuworker.c	/^assign_onionskin_to_cpuworker(or_circuit_t *circ,$/;"	f
associated_isolated_stream_global_id	or.h	/^  uint64_t associated_isolated_stream_global_id;$/;"	m	struct:origin_circuit_t
attr_recursive	TorSGX.cpp	/^static sgx_thread_mutexattr_t attr_recursive;$/;"	v	file:
attr_recursive	compat_pthreads.c	/^static sgx_thread_mutexattr_t attr_recursive;$/;"	v	file:
attributes	ias_ra.h	/^    sample_attributes_t     attributes;     \/\/ ( 48) Any special Capabilities$/;"	m	struct:sample_report_body_t
auth1_add_sig	link_handshake.c	/^auth1_add_sig(auth1_t *inp, uint8_t elt)$/;"	f
auth1_check	link_handshake.c	/^auth1_check(const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_clear	link_handshake.c	/^auth1_clear(auth1_t *obj)$/;"	f	file:
auth1_clear_errors	link_handshake.c	/^auth1_clear_errors(auth1_t *obj)$/;"	f
auth1_encode	link_handshake.c	/^auth1_encode(uint8_t *output, const size_t avail, const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_encoded_len	link_handshake.c	/^auth1_encoded_len(const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_free	link_handshake.c	/^auth1_free(auth1_t *obj)$/;"	f
auth1_get_cid	link_handshake.c	/^auth1_get_cid(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_clog	link_handshake.c	/^auth1_get_clog(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_end_of_fixed_part	link_handshake.c	/^auth1_get_end_of_fixed_part(const auth1_t *inp)$/;"	f
auth1_get_end_of_signed	link_handshake.c	/^auth1_get_end_of_signed(const auth1_t *inp)$/;"	f
auth1_get_rand	link_handshake.c	/^auth1_get_rand(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_scert	link_handshake.c	/^auth1_get_scert(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_sid	link_handshake.c	/^auth1_get_sid(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_sig	link_handshake.c	/^auth1_get_sig(auth1_t *inp, size_t idx)$/;"	f
auth1_get_slog	link_handshake.c	/^auth1_get_slog(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_tlssecrets	link_handshake.c	/^auth1_get_tlssecrets(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_type	link_handshake.c	/^auth1_get_type(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_u1_cid_ed	link_handshake.c	/^auth1_get_u1_cid_ed(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_u1_sid_ed	link_handshake.c	/^auth1_get_u1_sid_ed(const auth1_t *inp, size_t idx)$/;"	f
auth1_getarray_cid	link_handshake.c	/^auth1_getarray_cid(auth1_t *inp)$/;"	f
auth1_getarray_clog	link_handshake.c	/^auth1_getarray_clog(auth1_t *inp)$/;"	f
auth1_getarray_rand	link_handshake.c	/^auth1_getarray_rand(auth1_t *inp)$/;"	f
auth1_getarray_scert	link_handshake.c	/^auth1_getarray_scert(auth1_t *inp)$/;"	f
auth1_getarray_sid	link_handshake.c	/^auth1_getarray_sid(auth1_t *inp)$/;"	f
auth1_getarray_sig	link_handshake.c	/^auth1_getarray_sig(auth1_t *inp)$/;"	f
auth1_getarray_slog	link_handshake.c	/^auth1_getarray_slog(auth1_t *inp)$/;"	f
auth1_getarray_tlssecrets	link_handshake.c	/^auth1_getarray_tlssecrets(auth1_t *inp)$/;"	f
auth1_getarray_type	link_handshake.c	/^auth1_getarray_type(auth1_t *inp)$/;"	f
auth1_getarray_u1_cid_ed	link_handshake.c	/^auth1_getarray_u1_cid_ed(auth1_t *inp)$/;"	f
auth1_getarray_u1_sid_ed	link_handshake.c	/^auth1_getarray_u1_sid_ed(auth1_t *inp)$/;"	f
auth1_getlen_cid	link_handshake.c	/^auth1_getlen_cid(const auth1_t *inp)$/;"	f
auth1_getlen_clog	link_handshake.c	/^auth1_getlen_clog(const auth1_t *inp)$/;"	f
auth1_getlen_rand	link_handshake.c	/^auth1_getlen_rand(const auth1_t *inp)$/;"	f
auth1_getlen_scert	link_handshake.c	/^auth1_getlen_scert(const auth1_t *inp)$/;"	f
auth1_getlen_sid	link_handshake.c	/^auth1_getlen_sid(const auth1_t *inp)$/;"	f
auth1_getlen_sig	link_handshake.c	/^auth1_getlen_sig(const auth1_t *inp)$/;"	f
auth1_getlen_slog	link_handshake.c	/^auth1_getlen_slog(const auth1_t *inp)$/;"	f
auth1_getlen_tlssecrets	link_handshake.c	/^auth1_getlen_tlssecrets(const auth1_t *inp)$/;"	f
auth1_getlen_type	link_handshake.c	/^auth1_getlen_type(const auth1_t *inp)$/;"	f
auth1_getlen_u1_cid_ed	link_handshake.c	/^auth1_getlen_u1_cid_ed(const auth1_t *inp)$/;"	f
auth1_getlen_u1_sid_ed	link_handshake.c	/^auth1_getlen_u1_sid_ed(const auth1_t *inp)$/;"	f
auth1_new	link_handshake.c	/^auth1_new(void)$/;"	f
auth1_parse	link_handshake.c	/^auth1_parse(auth1_t **output, const uint8_t *input, const size_t len_in, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_parse_into	link_handshake.c	/^auth1_parse_into(auth1_t *obj, const uint8_t *input, const size_t len_in, const auth_ctx_t *auth_ctx_ctx)$/;"	f	file:
auth1_set_cid	link_handshake.c	/^auth1_set_cid(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_clog	link_handshake.c	/^auth1_set_clog(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_rand	link_handshake.c	/^auth1_set_rand(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_scert	link_handshake.c	/^auth1_set_scert(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_sid	link_handshake.c	/^auth1_set_sid(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_sig	link_handshake.c	/^auth1_set_sig(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_slog	link_handshake.c	/^auth1_set_slog(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_tlssecrets	link_handshake.c	/^auth1_set_tlssecrets(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_type	link_handshake.c	/^auth1_set_type(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_u1_cid_ed	link_handshake.c	/^auth1_set_u1_cid_ed(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_u1_sid_ed	link_handshake.c	/^auth1_set_u1_sid_ed(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_setlen_sig	link_handshake.c	/^auth1_setlen_sig(auth1_t *inp, size_t newlen)$/;"	f
auth1_st	link_handshake.h	/^struct auth1_st {$/;"	s
auth1_t	link_handshake.h	/^typedef struct auth1_st auth1_t;$/;"	t	typeref:struct:auth1_st
auth_cert	or.h	/^  tor_x509_cert_t *auth_cert;$/;"	m	struct:or_handshake_state_t
auth_challenge_cell_add_methods	link_handshake.c	/^auth_challenge_cell_add_methods(auth_challenge_cell_t *inp, uint16_t elt)$/;"	f
auth_challenge_cell_check	link_handshake.c	/^auth_challenge_cell_check(const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_clear	link_handshake.c	/^auth_challenge_cell_clear(auth_challenge_cell_t *obj)$/;"	f	file:
auth_challenge_cell_clear_errors	link_handshake.c	/^auth_challenge_cell_clear_errors(auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_encode	link_handshake.c	/^auth_challenge_cell_encode(uint8_t *output, const size_t avail, const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_encoded_len	link_handshake.c	/^auth_challenge_cell_encoded_len(const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_free	link_handshake.c	/^auth_challenge_cell_free(auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_get_challenge	link_handshake.c	/^auth_challenge_cell_get_challenge(const auth_challenge_cell_t *inp, size_t idx)$/;"	f
auth_challenge_cell_get_methods	link_handshake.c	/^auth_challenge_cell_get_methods(auth_challenge_cell_t *inp, size_t idx)$/;"	f
auth_challenge_cell_get_n_methods	link_handshake.c	/^auth_challenge_cell_get_n_methods(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getarray_challenge	link_handshake.c	/^auth_challenge_cell_getarray_challenge(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getarray_methods	link_handshake.c	/^auth_challenge_cell_getarray_methods(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getlen_challenge	link_handshake.c	/^auth_challenge_cell_getlen_challenge(const auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getlen_methods	link_handshake.c	/^auth_challenge_cell_getlen_methods(const auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_new	link_handshake.c	/^auth_challenge_cell_new(void)$/;"	f
auth_challenge_cell_parse	link_handshake.c	/^auth_challenge_cell_parse(auth_challenge_cell_t **output, const uint8_t *input, const size_t len_in)$/;"	f
auth_challenge_cell_parse_into	link_handshake.c	/^auth_challenge_cell_parse_into(auth_challenge_cell_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
auth_challenge_cell_set_challenge	link_handshake.c	/^auth_challenge_cell_set_challenge(auth_challenge_cell_t *inp, size_t idx, uint8_t elt)$/;"	f
auth_challenge_cell_set_methods	link_handshake.c	/^auth_challenge_cell_set_methods(auth_challenge_cell_t *inp, size_t idx, uint16_t elt)$/;"	f
auth_challenge_cell_set_n_methods	link_handshake.c	/^auth_challenge_cell_set_n_methods(auth_challenge_cell_t *inp, uint16_t val)$/;"	f
auth_challenge_cell_setlen_methods	link_handshake.c	/^auth_challenge_cell_setlen_methods(auth_challenge_cell_t *inp, size_t newlen)$/;"	f
auth_challenge_cell_st	link_handshake.h	/^struct auth_challenge_cell_st {$/;"	s
auth_challenge_cell_t	link_handshake.h	/^typedef struct auth_challenge_cell_st auth_challenge_cell_t;$/;"	t	typeref:struct:auth_challenge_cell_st
auth_ctx_clear	link_handshake.c	/^auth_ctx_clear(auth_ctx_t *obj)$/;"	f	file:
auth_ctx_free	link_handshake.c	/^auth_ctx_free(auth_ctx_t *obj)$/;"	f
auth_ctx_get_is_ed	link_handshake.c	/^auth_ctx_get_is_ed(auth_ctx_t *inp)$/;"	f
auth_ctx_new	link_handshake.c	/^auth_ctx_new(void)$/;"	f
auth_ctx_set_is_ed	link_handshake.c	/^auth_ctx_set_is_ed(auth_ctx_t *inp, uint8_t val)$/;"	f
auth_ctx_st	link_handshake.h	/^struct auth_ctx_st {$/;"	s
auth_ctx_t	link_handshake.h	/^typedef struct auth_ctx_st auth_ctx_t;$/;"	t	typeref:struct:auth_ctx_st
auth_data	rendservice.h	/^      uint8_t *auth_data;$/;"	m	struct:rend_intro_cell_s::__anon116::__anon119
auth_hid_servs	rendclient.c	/^static strmap_t *auth_hid_servs = NULL;$/;"	v	file:
auth_key	tortls.c	/^  crypto_pk_t *auth_key;$/;"	m	struct:tor_tls_context_t	file:
auth_key_cert	routerkeys.c	/^static tor_cert_t *auth_key_cert = NULL;$/;"	v	file:
auth_len	rendservice.h	/^      uint16_t auth_len;$/;"	m	struct:rend_intro_cell_s::__anon116::__anon119
auth_type	or.h	/^  rend_auth_type_t auth_type;$/;"	m	struct:rend_data_t
auth_type	or.h	/^  rend_auth_type_t auth_type;$/;"	m	struct:rend_service_authorization_t
auth_type	or.h	/^  uint8_t auth_type;$/;"	m	struct:socks_request_t
auth_type	rendservice.c	/^  rend_auth_type_t auth_type; \/**< Client authorization type or 0 if no client$/;"	m	struct:rend_service_t	file:
auth_type	rendservice.h	/^      uint8_t auth_type;$/;"	m	struct:rend_intro_cell_s::__anon116::__anon119
authdir_badexit_policy	policies.c	/^static smartlist_t *authdir_badexit_policy = NULL;$/;"	v	file:
authdir_config_new	dirserv.c	/^authdir_config_new(void)$/;"	f	file:
authdir_config_t	dirserv.c	/^typedef struct authdir_config_t {$/;"	s	file:
authdir_config_t	dirserv.c	/^} authdir_config_t;$/;"	t	typeref:struct:authdir_config_t	file:
authdir_invalid_policy	policies.c	/^static smartlist_t *authdir_invalid_policy = NULL;$/;"	v	file:
authdir_mode	router.c	/^authdir_mode(const or_options_t *options)$/;"	f
authdir_mode_any_main	router.c	/^authdir_mode_any_main(const or_options_t *options)$/;"	f
authdir_mode_any_nonhidserv	router.c	/^authdir_mode_any_nonhidserv(const or_options_t *options)$/;"	f
authdir_mode_bridge	router.c	/^authdir_mode_bridge(const or_options_t *options)$/;"	f
authdir_mode_handles_descs	router.c	/^authdir_mode_handles_descs(const or_options_t *options, int purpose)$/;"	f
authdir_mode_publishes_statuses	router.c	/^authdir_mode_publishes_statuses(const or_options_t *options)$/;"	f
authdir_mode_tests_reachability	router.c	/^authdir_mode_tests_reachability(const or_options_t *options)$/;"	f
authdir_mode_v3	router.c	/^authdir_mode_v3(const or_options_t *options)$/;"	f
authdir_policy_badexit_address	policies.c	/^authdir_policy_badexit_address(uint32_t addr, uint16_t port)$/;"	f
authdir_policy_permits_address	policies.c	/^authdir_policy_permits_address(uint32_t addr, uint16_t port)$/;"	f
authdir_policy_valid_address	policies.c	/^authdir_policy_valid_address(uint32_t addr, uint16_t port)$/;"	f
authdir_reject_policy	policies.c	/^static smartlist_t *authdir_reject_policy = NULL;$/;"	v	file:
authdir_type_to_string	directory.c	/^authdir_type_to_string(dirinfo_type_t auth)$/;"	f	file:
authdir_wants_to_reject_router	dirserv.c	/^authdir_wants_to_reject_router(routerinfo_t *ri, const char **msg,$/;"	f
authenticated	or.h	/^  unsigned int authenticated : 1;$/;"	m	struct:or_handshake_state_t
authenticated_peer_id	or.h	/^  uint8_t authenticated_peer_id[DIGEST_LEN];$/;"	m	struct:or_handshake_state_t
authentication_cookie	control.c	/^static uint8_t *authentication_cookie = NULL;$/;"	v	file:
authentication_cookie_is_set	control.c	/^static int authentication_cookie_is_set = 0;$/;"	v	file:
authority_cert_dl_failed	routerlist.c	/^authority_cert_dl_failed(const char *id_digest,$/;"	f
authority_cert_dl_looks_uncertain	routerlist.c	/^authority_cert_dl_looks_uncertain(const char *id_digest)$/;"	f
authority_cert_dup	dirvote.c	/^authority_cert_dup(authority_cert_t *cert)$/;"	f
authority_cert_free	routerlist.c	/^authority_cert_free(authority_cert_t *cert)$/;"	f
authority_cert_get_all	routerlist.c	/^authority_cert_get_all(smartlist_t *certs_out)$/;"	f
authority_cert_get_by_digests	routerlist.c	/^authority_cert_get_by_digests(const char *id_digest,$/;"	f
authority_cert_get_by_sk_digest	routerlist.c	/^authority_cert_get_by_sk_digest(const char *sk_digest)$/;"	f
authority_cert_get_newest_by_id	routerlist.c	/^authority_cert_get_newest_by_id(const char *id_digest)$/;"	f
authority_cert_is_blacklisted	routerlist.c	/^authority_cert_is_blacklisted(const authority_cert_t *cert)$/;"	f
authority_cert_parse_from_string	routerparse.c	/^authority_cert_parse_from_string(const char *s, const char **end_of_string)$/;"	f
authority_cert_t	or.h	/^typedef struct authority_cert_t {$/;"	s
authority_cert_t	or.h	/^} authority_cert_t;$/;"	t	typeref:struct:authority_cert_t
authority_certs_fetch_missing	routerlist.c	/^authority_certs_fetch_missing(networkstatus_t *status, time_t now)$/;"	f
authority_key_certificate	router.c	/^static authority_cert_t *authority_key_certificate = NULL;$/;"	v	file:
authority_signing_key	router.c	/^static crypto_pk_t *authority_signing_key = NULL;$/;"	v	file:
automap	connection_edge.h	/^  int automap;$/;"	m	struct:__anon86
b	ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
b	service_provider.h	/^    sample_ec_priv_t            b;$/;"	m	struct:_sp_db_item_t
b_crypto	or.h	/^  crypto_cipher_t *b_crypto;$/;"	m	struct:crypt_path_t
b_digest	or.h	/^  crypto_digest_t *b_digest;$/;"	m	struct:crypt_path_t
ba	container.h	/^  bitarray_t *ba; \/**< A bit array to implement the Bloom filter. *\/$/;"	m	struct:__anon104
backup_argc	ntmain.c	/^static int backup_argc;$/;"	v	file:
backup_argv	ntmain.c	/^static char **backup_argv;$/;"	v	file:
bad_sig	or.h	/^  unsigned int bad_sig : 1;$/;"	m	struct:extrainfo_t
bad_signature	or.h	/^  unsigned int bad_signature : 1; \/**< Set to true if we've tried to verify$/;"	m	struct:document_signature_t
bad_since	entrynodes.h	/^  time_t bad_since; \/**< 0 if this guard is currently usable, or the time at$/;"	m	struct:entry_guard_t
bandwidth_kb	or.h	/^  uint32_t bandwidth_kb; \/**< Bandwidth (capacity) of the router as reported in$/;"	m	struct:routerstatus_t
bandwidth_weight_rule_t	or.h	/^typedef enum bandwidth_weight_rule_t {$/;"	g
bandwidth_weight_rule_t	or.h	/^} bandwidth_weight_rule_t;$/;"	t	typeref:enum:bandwidth_weight_rule_t
bandwidth_weight_rule_to_string	reasons.c	/^bandwidth_weight_rule_to_string(bandwidth_weight_rule_t rule)$/;"	f
bandwidthburst	or.h	/^  int bandwidthburst; \/**< Max bucket size for this conn. (OPEN ORs only.) *\/$/;"	m	struct:or_connection_t
bandwidthburst	or.h	/^  uint32_t bandwidthburst; \/**< How large is this OR's token bucket? *\/$/;"	m	struct:__anon14
bandwidthcapacity	or.h	/^  uint32_t bandwidthcapacity;$/;"	m	struct:__anon14
bandwidthrate	or.h	/^  int bandwidthrate; \/**< Bytes\/s added to the bucket. (OPEN ORs only.) *\/$/;"	m	struct:or_connection_t
bandwidthrate	or.h	/^  uint32_t bandwidthrate; \/**< How many bytes does this OR add to its token$/;"	m	struct:__anon14
barrett_reduce256_modm	modm-donna-32bit.h	/^barrett_reduce256_modm(bignum256modm r, const bignum256modm q1, const bignum256modm r1) {$/;"	f
barrett_reduce256_modm	modm-donna-64bit.h	/^barrett_reduce256_modm(bignum256modm r, const bignum256modm q1, const bignum256modm r1) {$/;"	f
base	ge_scalarmult_base.c	/^static ge_precomp base[32][8] = {$/;"	v	file:
base16_decode	util_format.c	/^base16_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base16_encode	util_format.c	/^base16_encode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base32_decode	util_format.c	/^base32_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base32_encode	util_format.c	/^base32_encode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base64_decode	util_format.c	/^base64_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base64_decode_nopad	util_format.c	/^base64_decode_nopad(uint8_t *dest, size_t destlen,$/;"	f
base64_decode_table	util_format.c	/^static const uint8_t base64_decode_table[256] = {$/;"	v	file:
base64_encode	TorSGX.cpp	/^void base64_encode(const byte* in, size_t in_len,$/;"	f
base64_encode	util_format.c	/^base64_encode(char *dest, size_t destlen, const char *src, size_t srclen,$/;"	f
base64_encode_nopad	util_format.c	/^base64_encode_nopad(char *dest, size_t destlen,$/;"	f
base64_encode_size	util_format.c	/^base64_encode_size(size_t srclen, int flags)$/;"	f
base64_encode_table	util_format.c	/^static const char base64_encode_table[64] = {$/;"	v	file:
base_	channeltls.h	/^  channel_t base_;$/;"	m	struct:channel_tls_s
base_	circuitmux_ewma.c	/^  circuitmux_policy_circ_data_t base_;$/;"	m	struct:ewma_policy_circ_data_s	file:
base_	circuitmux_ewma.c	/^  circuitmux_policy_data_t base_;$/;"	m	struct:ewma_policy_data_s	file:
base_	or.h	/^  circuit_t base_;$/;"	m	struct:or_circuit_t
base_	or.h	/^  circuit_t base_;$/;"	m	struct:origin_circuit_t
base_	or.h	/^  connection_t base_;$/;"	m	struct:control_connection_t
base_	or.h	/^  connection_t base_;$/;"	m	struct:dir_connection_t
base_	or.h	/^  connection_t base_;$/;"	m	struct:edge_connection_t
base_	or.h	/^  connection_t base_;$/;"	m	struct:listener_connection_t
base_	or.h	/^  connection_t base_;$/;"	m	struct:or_connection_t
basename	ias_ra.h	/^    sample_basename_t       basename;               \/\/ 16$/;"	m	struct:sample_quote_t
batch_heap	ed25519-donna-batchverify.h	/^} batch_heap;$/;"	t	typeref:struct:batch_heap_t
batch_heap_t	ed25519-donna-batchverify.h	/^typedef struct batch_heap_t {$/;"	s
batch_point_buffer	ed25519-donna-batchverify.h	/^unsigned char batch_point_buffer[3][32];$/;"	v
begin_cell_parse	connection_edge.c	/^begin_cell_parse(const cell_t *cell, begin_cell_t *bcell,$/;"	f
begin_cell_t	connection_edge.h	/^typedef struct begin_cell_t {$/;"	s
begin_cell_t	connection_edge.h	/^} begin_cell_t;$/;"	t	typeref:struct:begin_cell_t
begincell_flags	or.h	/^  uint32_t begincell_flags; \/** Flags sent or received in the BEGIN cell$/;"	m	struct:edge_connection_t
below_threshold	rephist.c	/^static uint32_t below_threshold = 0;$/;"	v	file:
bidi_map_ent_eq	rephist.c	/^bidi_map_ent_eq(const bidi_map_entry_t *a, const bidi_map_entry_t *b)$/;"	f	file:
bidi_map_ent_hash	rephist.c	/^bidi_map_ent_hash(const bidi_map_entry_t *entry)$/;"	f	file:
bidi_map_entry_t	rephist.c	/^typedef struct bidi_map_entry_t {$/;"	s	file:
bidi_map_entry_t	rephist.c	/^} bidi_map_entry_t;$/;"	t	typeref:struct:bidi_map_entry_t	file:
bidi_map_free	rephist.c	/^bidi_map_free(void)$/;"	f	file:
bidi_next_interval	rephist.c	/^static time_t bidi_next_interval = 0;$/;"	v	file:
bignum25519	curve25519-donna-32bit.h	/^typedef uint32_t bignum25519[10];$/;"	t
bignum25519	curve25519-donna-64bit.h	/^typedef uint64_t bignum25519[5];$/;"	t
bignum25519	curve25519-donna-sse2.h	/^typedef uint32_t bignum25519[12];$/;"	t
bignum25519align16	curve25519-donna-32bit.h	/^typedef uint32_t bignum25519align16[12];$/;"	t
bignum256modm	modm-donna-32bit.h	/^typedef bignum256modm_element_t bignum256modm[9];$/;"	t
bignum256modm	modm-donna-64bit.h	/^typedef bignum256modm_element_t bignum256modm[5];$/;"	t
bignum256modm_bits_per_limb	modm-donna-32bit.h	15;"	d
bignum256modm_bits_per_limb	modm-donna-64bit.h	15;"	d
bignum256modm_element_t	modm-donna-32bit.h	/^typedef uint32_t bignum256modm_element_t;$/;"	t
bignum256modm_element_t	modm-donna-64bit.h	/^typedef uint64_t bignum256modm_element_t;$/;"	t
bignum256modm_limb_size	modm-donna-32bit.h	16;"	d
bignum256modm_limb_size	modm-donna-64bit.h	16;"	d
binary	util.c	/^  unsigned binary:1; \/**< Did we open in binary mode? *\/$/;"	m	struct:open_file_t	file:
binary	util.c	/^  unsigned binary:1; \/**< Did we open in binary mode? *\/$/;"	m	struct:real_open_file_t	file:
bind_ipv4_only	or.h	/^  unsigned int bind_ipv4_only : 1;$/;"	m	struct:server_port_cfg_t
bind_ipv6_only	or.h	/^  unsigned int bind_ipv6_only : 1;$/;"	m	struct:server_port_cfg_t
bitarray_clear	container.h	/^bitarray_clear(bitarray_t *b, int bit)$/;"	f
bitarray_expand	container.h	/^bitarray_expand(bitarray_t *ba,$/;"	f
bitarray_free	container.h	/^bitarray_free(bitarray_t *ba)$/;"	f
bitarray_init_zero	container.h	/^bitarray_init_zero(unsigned int n_bits)$/;"	f
bitarray_is_set	container.h	/^bitarray_is_set(bitarray_t *b, int bit)$/;"	f
bitarray_set	container.h	/^bitarray_set(bitarray_t *b, int bit)$/;"	f
bitarray_t	container.h	/^typedef unsigned int bitarray_t;$/;"	t
bits	addressmap.h	/^  maskbits_t bits;$/;"	m	struct:virtual_addr_conf_t
blind_public_key	crypto_ed25519.c	/^  int (*blind_public_key)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon123	file:
blind_secret_key	crypto_ed25519.c	/^  int (*blind_secret_key)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon123	file:
block_event_queue	control.c	/^static tor_threadlocal_t block_event_queue;$/;"	v	file:
body	dirvote.c	/^  char *body;$/;"	m	struct:pending_consensus_t	file:
body	link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) body;$/;"	m	struct:certs_cell_cert_st
body	network_ra.h	/^    uint8_t body[];$/;"	m	struct:_ra_samp_request_header_t
body	network_ra.h	/^    uint8_t body[];$/;"	m	struct:_ra_samp_response_header_t
body	networkstatus.c	/^  char *body;$/;"	m	struct:consensus_waiting_for_certs_t	file:
body	or.h	/^  char *body;$/;"	m	struct:microdesc_t
body	or.h	/^  char body[CELL_MAX_NETWORK_SIZE]; \/**< Cell as packed for network. *\/$/;"	m	struct:packed_cell_t
body	or.h	/^  char body[FLEXIBLE_ARRAY_MEMBER]; \/** Message body *\/$/;"	m	struct:ext_or_cmd_t
body_is_plausible	directory.c	/^body_is_plausible(const char *body, size_t len, int purpose)$/;"	f	file:
bodylen	or.h	/^  size_t bodylen;$/;"	m	struct:microdesc_t
bool_eq	util.h	205;"	d
bool_neq	util.h	207;"	d
bootstrap_percent	control.c	/^static int bootstrap_percent = BOOTSTRAP_STATUS_UNDEF;$/;"	v	file:
bootstrap_problems	control.c	/^static int bootstrap_problems = 0;$/;"	v	file:
bootstrap_status_t	or.h	/^} bootstrap_status_t;$/;"	t	typeref:enum:__anon33
bootstrap_status_to_string	control.c	/^bootstrap_status_to_string(bootstrap_status_t s, const char **tag,$/;"	f	file:
bot32bitmask	curve25519-donna-sse2.h	/^static const packedelem32 bot32bitmask = {{0xffffffff, 0x00000000, 0xffffffff, 0x00000000}};$/;"	v
bot64bitmask	curve25519-donna-sse2.h	/^static const packedelem32 bot64bitmask = {{0xffffffff, 0xffffffff, 0x00000000, 0x00000000}};$/;"	v
both_read_and_written	rephist.c	/^static uint32_t both_read_and_written = 0;$/;"	v	file:
bridge_add_from_config	entrynodes.c	/^bridge_add_from_config(bridge_line_t *bridge_line)$/;"	f
bridge_free	entrynodes.c	/^bridge_free(bridge_info_t *bridge)$/;"	f	file:
bridge_get_advertised_bandwidth_bounded	routerlist.c	/^bridge_get_advertised_bandwidth_bounded(routerinfo_t *router)$/;"	f	file:
bridge_has_digest	entrynodes.c	/^bridge_has_digest(const bridge_info_t *bridge, const char *digest)$/;"	f	file:
bridge_info_t	entrynodes.c	/^} bridge_info_t;$/;"	t	typeref:struct:__anon122	file:
bridge_line_free	config.c	/^bridge_line_free(bridge_line_t *bridge_line)$/;"	f
bridge_line_t	config.h	/^typedef struct bridge_line_t {$/;"	s
bridge_line_t	config.h	/^} bridge_line_t;$/;"	t	typeref:struct:bridge_line_t
bridge_list	entrynodes.c	/^static smartlist_t *bridge_list = NULL;$/;"	v	file:
bridge_resolve_conflicts	entrynodes.c	/^bridge_resolve_conflicts(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
bridge_stats_extrainfo	geoip.c	/^static char *bridge_stats_extrainfo = NULL;$/;"	v	file:
broken_connection_counts	connection_or.c	/^static strmap_t *broken_connection_counts;$/;"	v	file:
broken_state_count_compare	connection_or.c	/^broken_state_count_compare(const void **a_ptr, const void **b_ptr)$/;"	f	file:
broken_state_count_t	connection_or.c	/^typedef struct broken_state_count_t {$/;"	s	file:
broken_state_count_t	connection_or.c	/^} broken_state_count_t;$/;"	t	typeref:struct:broken_state_count_t	file:
bt_version	backtrace.c	/^static char *bt_version = NULL;$/;"	v	file:
bucket_cfg	or.h	/^  struct ev_token_bucket_cfg *bucket_cfg;$/;"	m	struct:or_connection_t	typeref:struct:or_connection_t::ev_token_bucket_cfg
bucket_millis_empty	connection.c	/^bucket_millis_empty(int tokens_before, uint32_t last_empty_time,$/;"	f
buf	aes.c	/^    uint8_t buf[16];$/;"	m	union:aes_cnt_cipher::__anon115	file:
buf	aes.c	/^  uint8_t buf[16];$/;"	m	struct:aes_cnt_cipher	file:
buf32	aes.c	/^    uint32_t buf32[4];$/;"	m	union:aes_cnt_cipher::__anon115	file:
buf_add_chunk_with_capacity	buffers.c	/^buf_add_chunk_with_capacity(buf_t *buf, size_t capacity, int capped)$/;"	f	file:
buf_allocation	buffers.c	/^buf_allocation(const buf_t *buf)$/;"	f
buf_clear	buffers.c	/^buf_clear(buf_t *buf)$/;"	f
buf_copy	buffers.c	/^buf_copy(const buf_t *buf)$/;"	f
buf_find_offset_of_char	buffers.c	/^buf_find_offset_of_char(buf_t *buf, char ch)$/;"	f	file:
buf_find_pos_of_char	buffers.c	/^buf_find_pos_of_char(char ch, buf_pos_t *out)$/;"	f	file:
buf_find_string_offset	buffers.c	/^buf_find_string_offset(const buf_t *buf, const char *s, size_t n)$/;"	f
buf_free	buffers.c	/^buf_free(buf_t *buf)$/;"	f
buf_get_default_chunk_size	buffers.c	/^buf_get_default_chunk_size(const buf_t *buf)$/;"	f
buf_get_first_chunk_data	buffers.c	/^buf_get_first_chunk_data(const buf_t *buf, const char **cp, size_t *sz)$/;"	f
buf_get_oldest_chunk_timestamp	buffers.c	/^buf_get_oldest_chunk_timestamp(const buf_t *buf, uint32_t now)$/;"	f
buf_get_total_allocation	buffers.c	/^buf_get_total_allocation(void)$/;"	f
buf_matches_at_pos	buffers.c	/^buf_matches_at_pos(const buf_pos_t *pos, const char *s, size_t n)$/;"	f	file:
buf_new	buffers.c	/^buf_new(void)$/;"	f
buf_new_with_capacity	buffers.c	/^buf_new_with_capacity(size_t size)$/;"	f
buf_pos_inc	buffers.c	/^buf_pos_inc(buf_pos_t *pos)$/;"	f	file:
buf_pos_init	buffers.c	/^buf_pos_init(const buf_t *buf, buf_pos_t *out)$/;"	f	file:
buf_pos_t	buffers.c	/^typedef struct buf_pos_t {$/;"	s	file:
buf_pos_t	buffers.c	/^} buf_pos_t;$/;"	t	typeref:struct:buf_pos_t	file:
buf_pullup	buffers.c	/^buf_pullup(buf_t *buf, size_t bytes)$/;"	f
buf_remove_from_front	buffers.c	/^buf_remove_from_front(buf_t *buf, size_t n)$/;"	f	file:
buf_slack	buffers.c	/^buf_slack(const buf_t *buf)$/;"	f
buf_t	buffers.h	/^struct buf_t {$/;"	s
buf_t	or.h	/^typedef struct buf_t buf_t;$/;"	t	typeref:struct:buf_t
bufev	or.h	/^  struct bufferevent *bufev; \/**< A Libevent buffered IO structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::bufferevent
buffer	ed25519-hash.h	/^	uint8_t buffer[HASH_BLOCK_SIZE];$/;"	m	struct:sha512_state_t
buffer	ed25519-randombytes.h	/^	unsigned char buffer[1024];$/;"	m	struct:isaacp_state_t
buffer_stats_compare_entries_	rephist.c	/^buffer_stats_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
bug_suffix	log.c	/^const char bug_suffix[] = " (on Tor " VERSION$/;"	v
build_msg2	TorSGX.cpp	/^void build_msg2(ra_samp_request_header_t *p_msg1_full, uint32_t msg1_full_size, ra_samp_response_header_t **p_msg2_full_return, uint32_t msg2_size)$/;"	f
build_msg4	TorSGX.cpp	/^void build_msg4(ra_samp_request_header_t *p_msg3_full, uint32_t msg3_full_size, ra_samp_response_header_t **p_att_result_msg_full_return, uint32_t att_result_msg_size)$/;"	f
build_state	or.h	/^  cpath_build_state_t *build_state;$/;"	m	struct:origin_circuit_t
build_state_get_exit_nickname	circuitbuild.c	/^build_state_get_exit_nickname(cpath_build_state_t *state)$/;"	f
build_state_get_exit_node	circuitbuild.c	/^build_state_get_exit_node(cpath_build_state_t *state)$/;"	f
build_time_t	or.h	/^typedef uint32_t build_time_t;$/;"	t
build_times_idx	circuitstats.h	/^  int build_times_idx;$/;"	m	struct:circuit_build_times_s
buildtimeout_set_event_t	or.h	/^typedef enum buildtimeout_set_event_t {$/;"	g
buildtimeout_set_event_t	or.h	/^} buildtimeout_set_event_t;$/;"	t	typeref:enum:buildtimeout_set_event_t
bw_array_new	rephist.c	/^bw_array_new(void)$/;"	f	file:
bw_array_t	rephist.c	/^typedef struct bw_array_t {$/;"	s	file:
bw_array_t	rephist.c	/^} bw_array_t;$/;"	t	typeref:struct:bw_array_t	file:
bw_arrays_init	rephist.c	/^bw_arrays_init(void)$/;"	f	file:
bw_is_unmeasured	or.h	/^  unsigned int bw_is_unmeasured:1; \/**< This is a consensus entry, with$/;"	m	struct:routerstatus_t
bw_kb	or.h	/^  long int bw_kb;$/;"	m	struct:measured_bw_line_t
bw_weights_error_t	dirvote.c	/^} bw_weights_error_t;$/;"	t	typeref:enum:__anon112	file:
by_both_ids	dircollate.c	/^double_digest_map_t *by_both_ids;$/;"	v
by_both_ids	dircollate.h	/^  struct double_digest_map by_both_ids;$/;"	m	struct:dircollator_s	typeref:struct:dircollator_s::double_digest_map
by_collated_rsa_sha1	dircollate.h	/^  digestmap_t *by_collated_rsa_sha1;$/;"	m	struct:dircollator_s
by_rsa_sha1	dircollate.h	/^  digestmap_t *by_rsa_sha1;$/;"	m	struct:dircollator_s
byte	orconfig.h	/^typedef unsigned char byte;$/;"	t
bytes	directory.c	/^  uint64_t bytes; \/**< How many bytes have we transferred? *\/$/;"	m	struct:request_t	file:
bytes	util.h	/^  const char *bytes;$/;"	m	struct:sized_chunk_t
bytes_dropped	microdesc.c	/^  size_t bytes_dropped;$/;"	m	struct:microdesc_cache_t	file:
bytes_dropped	or.h	/^  size_t bytes_dropped;$/;"	m	struct:desc_store_t
bytes_in_queue	channel.h	/^  uint64_t bytes_in_queue;$/;"	m	struct:channel_s
bytes_queued_for_xmit	channel.h	/^  uint64_t bytes_queued_for_xmit;$/;"	m	struct:channel_s
bytes_to_usage	status.c	/^bytes_to_usage(uint64_t bytes)$/;"	f
bytes_xmitted	or.h	/^  uint64_t bytes_xmitted, bytes_xmitted_by_tls;$/;"	m	struct:or_connection_t
bytes_xmitted_by_tls	or.h	/^  uint64_t bytes_xmitted, bytes_xmitted_by_tls;$/;"	m	struct:or_connection_t
c	ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
c_hist_compare_	geoip.c	/^c_hist_compare_(const void **_a, const void **_b)$/;"	f	file:
c_hist_t	geoip.c	/^typedef struct c_hist_t {$/;"	s	file:
c_hist_t	geoip.c	/^} c_hist_t;$/;"	t	typeref:struct:c_hist_t	file:
cache_content	microdesc.c	/^  tor_mmap_t *cache_content;$/;"	m	struct:microdesc_cache_t	file:
cache_failure_intro_add	rendcache.c	/^cache_failure_intro_add(const uint8_t *identity, const char *service_id,$/;"	f	file:
cache_failure_intro_dup	rendcache.c	/^cache_failure_intro_dup(const rend_cache_failure_intro_t *entry)$/;"	f	file:
cache_failure_intro_lookup	rendcache.c	/^cache_failure_intro_lookup(const uint8_t *identity, const char *service_id,$/;"	f	file:
cache_fname	microdesc.c	/^  char *cache_fname;$/;"	m	struct:microdesc_cache_t	file:
cache_info	or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:__anon14
cache_info	or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:authority_cert_t
cache_info	or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:extrainfo_t
cache_ipv4_answers	or.h	/^  unsigned int cache_ipv4_answers : 1;$/;"	m	struct:entry_port_cfg_t
cache_ipv6_answers	or.h	/^  unsigned int cache_ipv6_answers : 1;$/;"	m	struct:entry_port_cfg_t
cached_approx_time	util.c	/^static time_t cached_approx_time = 0;$/;"	v	file:
cached_bw_event_s	control.c	/^static struct cached_bw_event_s {$/;"	s	file:
cached_bw_events	control.c	/^} cached_bw_events[N_BW_EVENTS_TO_CACHE];$/;"	v	typeref:struct:cached_bw_event_s	file:
cached_consensuses	dirserv.c	/^static strmap_t *cached_consensuses = NULL;$/;"	v	file:
cached_dir	or.h	/^  struct cached_dir_t *cached_dir;$/;"	m	struct:dir_connection_t	typeref:struct:dir_connection_t::cached_dir_t
cached_dir_decref	dirserv.c	/^cached_dir_decref(cached_dir_t *d)$/;"	f
cached_dir_offset	or.h	/^  off_t cached_dir_offset;$/;"	m	struct:dir_connection_t
cached_dir_t	or.h	/^typedef struct cached_dir_t {$/;"	s
cached_dir_t	or.h	/^} cached_dir_t;$/;"	t	typeref:struct:cached_dir_t
cached_getaddrinfo_item_free	sandbox.c	/^cached_getaddrinfo_item_free(cached_getaddrinfo_item_t *item)$/;"	f	file:
cached_getaddrinfo_item_hash	sandbox.c	/^cached_getaddrinfo_item_hash(const cached_getaddrinfo_item_t *item)$/;"	f	file:
cached_getaddrinfo_item_t	sandbox.c	/^typedef struct cached_getaddrinfo_item_t {$/;"	s	file:
cached_getaddrinfo_item_t	sandbox.c	/^} cached_getaddrinfo_item_t;$/;"	t	typeref:struct:cached_getaddrinfo_item_t	file:
cached_getaddrinfo_items_eq	sandbox.c	/^cached_getaddrinfo_items_eq(const cached_getaddrinfo_item_t *a,$/;"	f	file:
cached_resolve_add_answer	dns.c	/^cached_resolve_add_answer(cached_resolve_t *resolve,$/;"	f	file:
cached_resolve_hash	dns.c	/^cached_resolve_hash(cached_resolve_t *a)$/;"	f	file:
cached_resolve_have_all_answers	dns.c	/^cached_resolve_have_all_answers(const cached_resolve_t *resolve)$/;"	f	file:
cached_resolve_pqueue	dns.c	/^static smartlist_t *cached_resolve_pqueue = NULL;$/;"	v	file:
cached_resolve_t	dns_structs.h	/^typedef struct cached_resolve_t {$/;"	s
cached_resolve_t	dns_structs.h	/^} cached_resolve_t;$/;"	t	typeref:struct:cached_resolve_t
cached_resolves_eq	dns.c	/^cached_resolves_eq(cached_resolve_t *a, cached_resolve_t *b)$/;"	f	file:
cached_time_hires	compat_libevent.c	/^static struct timeval cached_time_hires = {0, 0};$/;"	v	typeref:struct:timeval	file:
caches_extra_info	or.h	/^  unsigned int caches_extra_info:1; \/**< Whether the router says it caches and$/;"	m	struct:__anon14
callback	log.c	/^  log_callback callback; \/**< If not NULL, send messages to this function. *\/$/;"	m	struct:logfile_t	file:
callback_arg	tortls.c	/^  void *callback_arg;$/;"	m	struct:tor_tls_t	file:
called_loop_once	main.c	/^static int called_loop_once = 0;$/;"	v	file:
can_complete_circuits	main.c	/^static int can_complete_circuits = 0;$/;"	v	file:
can_reach_dir_port	router.c	/^static int can_reach_dir_port = 0;$/;"	v	file:
can_reach_or_port	router.c	/^static int can_reach_or_port = 0;$/;"	v	file:
can_retry	entrynodes.h	/^  unsigned int can_retry : 1; \/**< Should we retry connecting to this entry,$/;"	m	struct:entry_guard_t
capacity	container.h	/^  int capacity;$/;"	m	struct:smartlist_t
carry_final	curve25519-donna-32bit.h	497;"	d
carry_final	curve25519-donna-sse2.h	1002;"	d
carry_full	curve25519-donna-32bit.h	496;"	d
carry_full	curve25519-donna-sse2.h	1001;"	d
carry_pass	curve25519-donna-32bit.h	453;"	d
carry_pass	curve25519-donna-32bit.h	495;"	d
carry_pass	curve25519-donna-sse2.h	1000;"	d
carry_pass	curve25519-donna-sse2.h	958;"	d
carry_pass_final	curve25519-donna-32bit.h	468;"	d
carry_pass_final	curve25519-donna-sse2.h	973;"	d
carry_pass_full	curve25519-donna-32bit.h	464;"	d
carry_pass_full	curve25519-donna-sse2.h	969;"	d
cases	tinytest.h	/^	struct testcase_t *cases; \/** Array, ending with END_OF_TESTCASES *\/$/;"	m	struct:testgroup_t	typeref:struct:testgroup_t::testcase_t
cb	compat_libevent.c	/^  void (*cb)(struct periodic_timer_t *, void *);$/;"	m	struct:periodic_timer_t	file:
cb	procmon.c	/^  tor_procmon_callback_t cb;$/;"	m	struct:tor_process_monitor_t	file:
cb_arg	procmon.c	/^  void *cb_arg; \/**< A user-specified pointer to be passed to cb. *\/$/;"	m	struct:tor_process_monitor_t	file:
cb_buf	backtrace.c	/^static void *cb_buf[MAX_DEPTH];$/;"	v	file:
cb_buf_mutex	backtrace.c	/^static tor_mutex_t cb_buf_mutex;$/;"	v	file:
cbt_control_event_buildtimeout_set	circuitstats.c	/^cbt_control_event_buildtimeout_set(const circuit_build_times_t *cbt,$/;"	f	file:
cell	channel.h	/^      cell_t *cell;$/;"	m	struct:cell_queue_entry_s::__anon75::__anon76
cell_command_is_var_length	buffers.c	/^cell_command_is_var_length(uint8_t command, int linkproto)$/;"	f	file:
cell_command_to_string	command.c	/^cell_command_to_string(uint8_t command)$/;"	f
cell_count	circuitmux.c	/^  unsigned int cell_count;$/;"	m	struct:circuit_muxinfo_s	file:
cell_count	circuitmux_ewma.c	/^  double cell_count;$/;"	m	struct:cell_ewma_s	file:
cell_direction_t	or.h	/^} cell_direction_t;$/;"	t	typeref:enum:__anon6
cell_ewma	circuitmux_ewma.c	/^  cell_ewma_t cell_ewma;$/;"	m	struct:ewma_policy_circ_data_s	file:
cell_ewma_enabled	circuitmux_ewma.c	/^cell_ewma_enabled(void)$/;"	f
cell_ewma_get_tick	circuitmux_ewma.c	/^cell_ewma_get_tick(void)$/;"	f
cell_ewma_s	circuitmux_ewma.c	/^struct cell_ewma_s {$/;"	s	file:
cell_ewma_set_scale_factor	circuitmux_ewma.c	/^cell_ewma_set_scale_factor(const or_options_t *options,$/;"	f
cell_ewma_t	circuitmux_ewma.c	/^typedef struct cell_ewma_s cell_ewma_t;$/;"	t	typeref:struct:cell_ewma_s	file:
cell_ewma_tick_from_timeval	circuitmux_ewma.c	/^cell_ewma_tick_from_timeval(const struct timeval *now,$/;"	f	file:
cell_ewma_to_circuit	circuitmux_ewma.c	/^cell_ewma_to_circuit(cell_ewma_t *ewma)$/;"	f	file:
cell_handler	channel.h	/^  channel_cell_handler_fn_ptr cell_handler;$/;"	m	struct:channel_s
cell_pack	connection_or.c	/^cell_pack(packed_cell_t *dst, const cell_t *src, int wide_circ_ids)$/;"	f
cell_queue_append	relay.c	/^cell_queue_append(cell_queue_t *queue, packed_cell_t *cell)$/;"	f
cell_queue_append_packed_copy	relay.c	/^cell_queue_append_packed_copy(circuit_t *circ, cell_queue_t *queue,$/;"	f
cell_queue_clear	relay.c	/^cell_queue_clear(cell_queue_t *queue)$/;"	f
cell_queue_entry_dup	channel.c	/^cell_queue_entry_dup(cell_queue_entry_t *q)$/;"	f	file:
cell_queue_entry_free	channel.c	/^cell_queue_entry_free(cell_queue_entry_t *q, int handed_off)$/;"	f
cell_queue_entry_new_fixed	channel.c	/^cell_queue_entry_new_fixed(cell_t *cell)$/;"	f	file:
cell_queue_entry_new_var	channel.c	/^cell_queue_entry_new_var(var_cell_t *var_cell)$/;"	f	file:
cell_queue_entry_s	channel.h	/^struct cell_queue_entry_s {$/;"	s
cell_queue_entry_t	channel.h	/^typedef struct cell_queue_entry_s cell_queue_entry_t;$/;"	t	typeref:struct:cell_queue_entry_s
cell_queue_init	relay.c	/^cell_queue_init(cell_queue_t *queue)$/;"	f
cell_queue_pop	relay.c	/^cell_queue_pop(cell_queue_t *queue)$/;"	f
cell_queue_t	or.h	/^typedef struct cell_queue_t {$/;"	s
cell_queue_t	or.h	/^} cell_queue_t;$/;"	t	typeref:struct:cell_queue_t
cell_queues_check_size	relay.c	/^cell_queues_check_size(void)$/;"	f
cell_queues_get_total_allocation	relay.c	/^cell_queues_get_total_allocation(void)$/;"	f
cell_stats_t	control.h	/^typedef struct cell_stats_t {$/;"	s
cell_stats_t	control.h	/^} cell_stats_t;$/;"	t	typeref:struct:cell_stats_t
cell_t	or.h	/^typedef struct cell_t {$/;"	s
cell_t	or.h	/^} cell_t;$/;"	t	typeref:struct:cell_t
cell_t	or.h	126;"	d
cell_type	onion.h	/^  uint8_t cell_type;$/;"	m	struct:create_cell_t
cell_type	onion.h	/^  uint8_t cell_type;$/;"	m	struct:created_cell_t
cell_type	onion.h	/^  uint8_t cell_type;$/;"	m	struct:extend_cell_t
cell_type	onion.h	/^  uint8_t cell_type;$/;"	m	struct:extended_cell_t
cell_unpack	connection_or.c	/^cell_unpack(cell_t *dest, const char *src, int wide_circ_ids)$/;"	f	file:
cert	or.h	/^  struct authority_cert_t *cert; \/**< Vote only: the voter's certificate. *\/$/;"	m	struct:networkstatus_t	typeref:struct:networkstatus_t::authority_cert_t
cert	tortls.c	/^  X509 *cert;$/;"	m	struct:tor_x509_cert_t	file:
cert_digests	tortls.c	/^  digests_t cert_digests;$/;"	m	struct:tor_x509_cert_t	file:
cert_expiration_time	or.h	/^  time_t cert_expiration_time;$/;"	m	struct:__anon14
cert_expired	torcert.h	/^  unsigned cert_expired : 1;$/;"	m	struct:tor_cert_st
cert_key_type	ed25519_cert.h	/^  uint8_t cert_key_type;$/;"	m	struct:ed25519_cert_st
cert_len	link_handshake.h	/^  uint16_t cert_len;$/;"	m	struct:certs_cell_cert_st
cert_list_free	routerlist.c	/^cert_list_free(cert_list_t *cl)$/;"	f	file:
cert_list_free_	routerlist.c	/^cert_list_free_(void *cl)$/;"	f	file:
cert_list_t	routerlist.c	/^struct cert_list_t {$/;"	s	file:
cert_list_t	routerlist.c	/^typedef struct cert_list_t cert_list_t;$/;"	t	typeref:struct:cert_list_t	file:
cert_type	ed25519_cert.h	/^  uint8_t cert_type;$/;"	m	struct:ed25519_cert_st
cert_type	link_handshake.h	/^  uint8_t cert_type;$/;"	m	struct:certs_cell_cert_st
cert_type	torcert.h	/^  uint8_t cert_type;$/;"	m	struct:tor_cert_st
cert_valid	torcert.h	/^  unsigned cert_valid : 1;$/;"	m	struct:tor_cert_st
certified_key	ed25519_cert.h	/^  uint8_t certified_key[32];$/;"	m	struct:ed25519_cert_st
certs	link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, struct certs_cell_cert_st *) certs;$/;"	m	struct:certs_cell_st
certs	routerlist.c	/^  smartlist_t *certs;$/;"	m	struct:cert_list_t	file:
certs_cell_add_certs	link_handshake.c	/^certs_cell_add_certs(certs_cell_t *inp, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_cert_add_body	link_handshake.c	/^certs_cell_cert_add_body(certs_cell_cert_t *inp, uint8_t elt)$/;"	f
certs_cell_cert_check	link_handshake.c	/^certs_cell_cert_check(const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_clear	link_handshake.c	/^certs_cell_cert_clear(certs_cell_cert_t *obj)$/;"	f	file:
certs_cell_cert_clear_errors	link_handshake.c	/^certs_cell_cert_clear_errors(certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_encode	link_handshake.c	/^certs_cell_cert_encode(uint8_t *output, const size_t avail, const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_encoded_len	link_handshake.c	/^certs_cell_cert_encoded_len(const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_free	link_handshake.c	/^certs_cell_cert_free(certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_get_body	link_handshake.c	/^certs_cell_cert_get_body(certs_cell_cert_t *inp, size_t idx)$/;"	f
certs_cell_cert_get_cert_len	link_handshake.c	/^certs_cell_cert_get_cert_len(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_get_cert_type	link_handshake.c	/^certs_cell_cert_get_cert_type(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_getarray_body	link_handshake.c	/^certs_cell_cert_getarray_body(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_getlen_body	link_handshake.c	/^certs_cell_cert_getlen_body(const certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_new	link_handshake.c	/^certs_cell_cert_new(void)$/;"	f
certs_cell_cert_parse	link_handshake.c	/^certs_cell_cert_parse(certs_cell_cert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
certs_cell_cert_parse_into	link_handshake.c	/^certs_cell_cert_parse_into(certs_cell_cert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
certs_cell_cert_set_body	link_handshake.c	/^certs_cell_cert_set_body(certs_cell_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
certs_cell_cert_set_cert_len	link_handshake.c	/^certs_cell_cert_set_cert_len(certs_cell_cert_t *inp, uint16_t val)$/;"	f
certs_cell_cert_set_cert_type	link_handshake.c	/^certs_cell_cert_set_cert_type(certs_cell_cert_t *inp, uint8_t val)$/;"	f
certs_cell_cert_setlen_body	link_handshake.c	/^certs_cell_cert_setlen_body(certs_cell_cert_t *inp, size_t newlen)$/;"	f
certs_cell_cert_st	link_handshake.h	/^struct certs_cell_cert_st {$/;"	s
certs_cell_cert_t	link_handshake.h	/^typedef struct certs_cell_cert_st certs_cell_cert_t;$/;"	t	typeref:struct:certs_cell_cert_st
certs_cell_check	link_handshake.c	/^certs_cell_check(const certs_cell_t *obj)$/;"	f
certs_cell_clear	link_handshake.c	/^certs_cell_clear(certs_cell_t *obj)$/;"	f	file:
certs_cell_clear_errors	link_handshake.c	/^certs_cell_clear_errors(certs_cell_t *obj)$/;"	f
certs_cell_encode	link_handshake.c	/^certs_cell_encode(uint8_t *output, const size_t avail, const certs_cell_t *obj)$/;"	f
certs_cell_encoded_len	link_handshake.c	/^certs_cell_encoded_len(const certs_cell_t *obj)$/;"	f
certs_cell_free	link_handshake.c	/^certs_cell_free(certs_cell_t *obj)$/;"	f
certs_cell_get_certs	link_handshake.c	/^certs_cell_get_certs(certs_cell_t *inp, size_t idx)$/;"	f
certs_cell_get_n_certs	link_handshake.c	/^certs_cell_get_n_certs(certs_cell_t *inp)$/;"	f
certs_cell_getarray_certs	link_handshake.c	/^certs_cell_getarray_certs(certs_cell_t *inp)$/;"	f
certs_cell_getlen_certs	link_handshake.c	/^certs_cell_getlen_certs(const certs_cell_t *inp)$/;"	f
certs_cell_new	link_handshake.c	/^certs_cell_new(void)$/;"	f
certs_cell_parse	link_handshake.c	/^certs_cell_parse(certs_cell_t **output, const uint8_t *input, const size_t len_in)$/;"	f
certs_cell_parse_into	link_handshake.c	/^certs_cell_parse_into(certs_cell_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
certs_cell_set0_certs	link_handshake.c	/^certs_cell_set0_certs(certs_cell_t *inp, size_t idx, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_set_certs	link_handshake.c	/^certs_cell_set_certs(certs_cell_t *inp, size_t idx, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_set_n_certs	link_handshake.c	/^certs_cell_set_n_certs(certs_cell_t *inp, uint8_t val)$/;"	f
certs_cell_setlen_certs	link_handshake.c	/^certs_cell_setlen_certs(certs_cell_t *inp, size_t newlen)$/;"	f
certs_cell_st	link_handshake.h	/^struct certs_cell_st {$/;"	s
certs_cell_t	link_handshake.h	/^typedef struct certs_cell_st certs_cell_t;$/;"	t	typeref:struct:certs_cell_st
cfg_start_day	hibernate.c	/^static int cfg_start_day = 0,$/;"	v	file:
cfg_start_hour	hibernate.c	/^           cfg_start_hour = 0,$/;"	v	file:
cfg_start_min	hibernate.c	/^           cfg_start_min = 0;$/;"	v	file:
cfg_unit	hibernate.c	/^static time_unit_t cfg_unit = UNIT_MONTH;$/;"	v	file:
challenge	link_handshake.h	/^  uint8_t challenge[32];$/;"	m	struct:auth_challenge_cell_st
chan	circuitlist.c	/^  channel_t *chan;$/;"	m	struct:chan_circid_circuit_map_t	file:
chan	or.h	/^  channel_tls_t *chan;$/;"	m	struct:or_connection_t
chan_cell_queue_len	channel.c	/^chan_cell_queue_len(const chan_cell_queue_t *queue)$/;"	f
chan_cell_queue_t	channel.h	/^typedef struct chan_cell_queue chan_cell_queue_t;$/;"	t	typeref:struct:chan_cell_queue
chan_circid_circuit_map_t	circuitlist.c	/^typedef struct chan_circid_circuit_map_t {$/;"	s	file:
chan_circid_circuit_map_t	circuitlist.c	/^} chan_circid_circuit_map_t;$/;"	t	typeref:struct:chan_circid_circuit_map_t	file:
chan_circid_entries_eq_	circuitlist.c	/^chan_circid_entries_eq_(chan_circid_circuit_map_t *a,$/;"	f	file:
chan_circid_entry_hash_	circuitlist.c	/^chan_circid_entry_hash_(chan_circid_circuit_map_t *a)$/;"	f	file:
chan_id	circuitmux.c	/^  uint64_t chan_id;$/;"	m	struct:chanid_circid_muxinfo_t	file:
change_callback_log_severity	log.c	/^change_callback_log_severity(int loglevelMin, int loglevelMax,$/;"	f
change_key_passphrase	or.h	/^  int change_key_passphrase;$/;"	m	struct:__anon24
changed	rephist.c	/^  time_t changed;$/;"	m	struct:link_history_t	file:
changed	rephist.c	/^  time_t changed;$/;"	m	struct:or_history_t	file:
chanid_circid_entries_eq	circuitmux.c	/^chanid_circid_entries_eq(chanid_circid_muxinfo_t *a,$/;"	f	file:
chanid_circid_entry_hash	circuitmux.c	/^chanid_circid_entry_hash(chanid_circid_muxinfo_t *a)$/;"	f	file:
chanid_circid_map	circuitmux.c	/^  chanid_circid_muxinfo_map_t *chanid_circid_map;$/;"	m	struct:circuitmux_s	file:
chanid_circid_muxinfo_map_t	circuitmux.c	/^typedef struct chanid_circid_muxinfo_map chanid_circid_muxinfo_map_t;$/;"	t	typeref:struct:chanid_circid_muxinfo_map	file:
chanid_circid_muxinfo_t	circuitmux.c	/^struct chanid_circid_muxinfo_t {$/;"	s	file:
chanid_circid_muxinfo_t	circuitmux.c	/^typedef struct chanid_circid_muxinfo_t chanid_circid_muxinfo_t;$/;"	t	typeref:struct:chanid_circid_muxinfo_t	file:
channel_add_to_digest_map	channel.c	/^channel_add_to_digest_map(channel_t *chan)$/;"	f	file:
channel_assert_counter_consistency	channel.c	/^channel_assert_counter_consistency(void)$/;"	f	file:
channel_cell_handler_fn_ptr	channel.h	/^typedef void (*channel_cell_handler_fn_ptr)(channel_t *, cell_t *);$/;"	t
channel_change_state	channel.c	/^channel_change_state(channel_t *chan, channel_state_t to_state)$/;"	f
channel_clear_identity_digest	channel.c	/^channel_clear_identity_digest(channel_t *chan)$/;"	f
channel_clear_remote_end	channel.c	/^channel_clear_remote_end(channel_t *chan)$/;"	f
channel_close_for_error	channel.c	/^channel_close_for_error(channel_t *chan)$/;"	f
channel_close_from_lower_layer	channel.c	/^channel_close_from_lower_layer(channel_t *chan)$/;"	f
channel_closed	channel.c	/^channel_closed(channel_t *chan)$/;"	f
channel_connect	channel.c	/^channel_connect(const tor_addr_t *addr, uint16_t port,$/;"	f
channel_connect_for_circuit	circuitbuild.c	/^channel_connect_for_circuit(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
channel_count_recved	channel.c	/^channel_count_recved(channel_t *chan)$/;"	f
channel_count_xmitted	channel.c	/^channel_count_xmitted(channel_t *chan)$/;"	f
channel_describe_transport	channel.c	/^channel_describe_transport(channel_t *chan)$/;"	f
channel_do_open_actions	channel.c	/^channel_do_open_actions(channel_t *chan)$/;"	f
channel_dump_transport_statistics	channel.c	/^channel_dump_transport_statistics(channel_t *chan, int severity)$/;"	f
channel_dumpstats	channel.c	/^channel_dumpstats(int severity)$/;"	f
channel_find_by_global_id	channel.c	/^channel_find_by_global_id(uint64_t global_identifier)$/;"	f
channel_find_by_remote_digest	channel.c	/^channel_find_by_remote_digest(const char *identity_digest)$/;"	f
channel_flush_cells	channel.c	/^channel_flush_cells(channel_t *chan)$/;"	f
channel_flush_some_cells_from_outgoing_queue	channel.c	/^channel_flush_some_cells_from_outgoing_queue(channel_t *chan,$/;"	f	file:
channel_force_free	channel.c	/^channel_force_free(channel_t *chan)$/;"	f	file:
channel_free	channel.c	/^channel_free(channel_t *chan)$/;"	f
channel_free_all	channel.c	/^channel_free_all(void)$/;"	f
channel_free_list	channel.c	/^channel_free_list(smartlist_t *channels, int mark_for_close)$/;"	f	file:
channel_get_actual_remote_address	channel.c	/^channel_get_actual_remote_address(channel_t *chan)$/;"	f
channel_get_actual_remote_descr	channel.c	/^channel_get_actual_remote_descr(channel_t *chan)$/;"	f
channel_get_addr_if_possible	channel.c	/^channel_get_addr_if_possible(channel_t *chan, tor_addr_t *addr_out)$/;"	f
channel_get_canonical_remote_descr	channel.c	/^channel_get_canonical_remote_descr(channel_t *chan)$/;"	f
channel_get_cell_handler	channel.c	/^channel_get_cell_handler(channel_t *chan)$/;"	f
channel_get_cell_queue_entry_size	channel.c	/^channel_get_cell_queue_entry_size(channel_t *chan, cell_queue_entry_t *q)$/;"	f	file:
channel_get_for_extend	channel.c	/^channel_get_for_extend(const char *digest,$/;"	f
channel_get_global_queue_estimate	channel.c	/^channel_get_global_queue_estimate(void)$/;"	f
channel_get_var_cell_handler	channel.c	/^channel_get_var_cell_handler(channel_t *chan)$/;"	f
channel_has_queued_writes	channel.c	/^channel_has_queued_writes(channel_t *chan)$/;"	f
channel_idmap_entry_s	channel.c	/^typedef struct channel_idmap_entry_s {$/;"	s	file:
channel_idmap_entry_t	channel.c	/^} channel_idmap_entry_t;$/;"	t	typeref:struct:channel_idmap_entry_s	file:
channel_idmap_eq	channel.c	/^channel_idmap_eq(const channel_idmap_entry_t *a,$/;"	f	file:
channel_idmap_hash	channel.c	/^channel_idmap_hash(const channel_idmap_entry_t *ent)$/;"	f	file:
channel_init	channel.c	/^channel_init(channel_t *chan)$/;"	f
channel_init_listener	channel.c	/^channel_init_listener(channel_listener_t *chan_l)$/;"	f
channel_is_bad_for_new_circs	channel.c	/^channel_is_bad_for_new_circs(channel_t *chan)$/;"	f
channel_is_better	channel.c	/^channel_is_better(time_t now, channel_t *a, channel_t *b,$/;"	f
channel_is_canonical	channel.c	/^channel_is_canonical(channel_t *chan)$/;"	f
channel_is_canonical_is_reliable	channel.c	/^channel_is_canonical_is_reliable(channel_t *chan)$/;"	f
channel_is_client	channel.c	/^channel_is_client(channel_t *chan)$/;"	f
channel_is_in_state	channel.h	/^channel_is_in_state(channel_t *chan, channel_state_t state)$/;"	f
channel_is_incoming	channel.c	/^channel_is_incoming(channel_t *chan)$/;"	f
channel_is_local	channel.c	/^channel_is_local(channel_t *chan)$/;"	f
channel_is_outgoing	channel.c	/^channel_is_outgoing(channel_t *chan)$/;"	f
channel_listener_change_state	channel.c	/^channel_listener_change_state(channel_listener_t *chan_l,$/;"	f
channel_listener_close_for_error	channel.c	/^channel_listener_close_for_error(channel_listener_t *chan_l)$/;"	f
channel_listener_close_from_lower_layer	channel.c	/^channel_listener_close_from_lower_layer(channel_listener_t *chan_l)$/;"	f
channel_listener_closed	channel.c	/^channel_listener_closed(channel_listener_t *chan_l)$/;"	f
channel_listener_count_accepted	channel.c	/^channel_listener_count_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_describe_transport	channel.c	/^channel_listener_describe_transport(channel_listener_t *chan_l)$/;"	f
channel_listener_dump_statistics	channel.c	/^channel_listener_dump_statistics(channel_listener_t *chan_l, int severity)$/;"	f
channel_listener_dump_transport_statistics	channel.c	/^channel_listener_dump_transport_statistics(channel_listener_t *chan_l,$/;"	f
channel_listener_dumpstats	channel.c	/^channel_listener_dumpstats(int severity)$/;"	f
channel_listener_fn_ptr	channel.h	/^typedef void (*channel_listener_fn_ptr)(channel_listener_t *, channel_t *);$/;"	t
channel_listener_force_free	channel.c	/^channel_listener_force_free(channel_listener_t *chan_l)$/;"	f	file:
channel_listener_free	channel.c	/^channel_listener_free(channel_listener_t *chan_l)$/;"	f
channel_listener_free_list	channel.c	/^channel_listener_free_list(smartlist_t *listeners, int mark_for_close)$/;"	f	file:
channel_listener_get_listener_fn	channel.c	/^channel_listener_get_listener_fn(channel_listener_t *chan_l)$/;"	f
channel_listener_mark_for_close	channel.c	/^channel_listener_mark_for_close(channel_listener_t *chan_l)$/;"	f
channel_listener_process_incoming	channel.c	/^channel_listener_process_incoming(channel_listener_t *listener)$/;"	f
channel_listener_queue_incoming	channel.c	/^channel_listener_queue_incoming(channel_listener_t *listener,$/;"	f
channel_listener_register	channel.c	/^channel_listener_register(channel_listener_t *chan_l)$/;"	f
channel_listener_run_cleanup	channel.c	/^channel_listener_run_cleanup(void)$/;"	f
channel_listener_s	channel.h	/^struct channel_listener_s {$/;"	s
channel_listener_set_listener_fn	channel.c	/^channel_listener_set_listener_fn(channel_listener_t *chan_l,$/;"	f
channel_listener_state_can_transition	channel.c	/^channel_listener_state_can_transition(channel_listener_state_t from,$/;"	f
channel_listener_state_is_valid	channel.c	/^channel_listener_state_is_valid(channel_listener_state_t state)$/;"	f
channel_listener_state_t	or.h	/^} channel_listener_state_t;$/;"	t	typeref:enum:__anon8
channel_listener_state_to_string	channel.c	/^channel_listener_state_to_string(channel_listener_state_t state)$/;"	f
channel_listener_t	or.h	/^typedef struct channel_listener_s channel_listener_t;$/;"	t	typeref:struct:channel_listener_s
channel_listener_timestamp_accepted	channel.c	/^channel_listener_timestamp_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_timestamp_active	channel.c	/^channel_listener_timestamp_active(channel_listener_t *chan_l)$/;"	f
channel_listener_timestamp_created	channel.c	/^channel_listener_timestamp_created(channel_listener_t *chan_l)$/;"	f
channel_listener_unregister	channel.c	/^channel_listener_unregister(channel_listener_t *chan_l)$/;"	f
channel_listener_when_created	channel.c	/^channel_listener_when_created(channel_listener_t *chan_l)$/;"	f
channel_listener_when_last_accepted	channel.c	/^channel_listener_when_last_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_when_last_active	channel.c	/^channel_listener_when_last_active(channel_listener_t *chan_l)$/;"	f
channel_mark_bad_for_new_circs	channel.c	/^channel_mark_bad_for_new_circs(channel_t *chan)$/;"	f
channel_mark_circid_unusable	circuitlist.c	/^channel_mark_circid_unusable(channel_t *chan, circid_t id)$/;"	f
channel_mark_circid_usable	circuitlist.c	/^channel_mark_circid_usable(channel_t *chan, circid_t id)$/;"	f
channel_mark_client	channel.c	/^channel_mark_client(channel_t *chan)$/;"	f
channel_mark_for_close	channel.c	/^channel_mark_for_close(channel_t *chan)$/;"	f
channel_mark_incoming	channel.c	/^channel_mark_incoming(channel_t *chan)$/;"	f
channel_mark_local	channel.c	/^channel_mark_local(channel_t *chan)$/;"	f
channel_mark_outgoing	channel.c	/^channel_mark_outgoing(channel_t *chan)$/;"	f
channel_mark_remote	channel.c	/^channel_mark_remote(channel_t *chan)$/;"	f
channel_matches_extend_info	channel.c	/^channel_matches_extend_info(channel_t *chan, extend_info_t *extend_info)$/;"	f
channel_matches_target_addr_for_extend	channel.c	/^channel_matches_target_addr_for_extend(channel_t *chan,$/;"	f
channel_more_to_flush	channel.c	/^channel_more_to_flush(channel_t *chan)$/;"	f
channel_next_with_digest	channel.c	/^channel_next_with_digest(channel_t *chan)$/;"	f
channel_note_destroy_pending	circuitlist.c	/^channel_note_destroy_pending(channel_t *chan, circid_t id)$/;"	f
channel_notify_flushed	channel.c	/^channel_notify_flushed(channel_t *chan)$/;"	f
channel_num_cells_writeable	channel.c	/^channel_num_cells_writeable(channel_t *chan)$/;"	f
channel_num_circuits	channel.c	/^channel_num_circuits(channel_t *chan)$/;"	f
channel_process_cells	channel.c	/^channel_process_cells(channel_t *chan)$/;"	f
channel_queue_cell	channel.c	/^channel_queue_cell(channel_t *chan, cell_t *cell)$/;"	f
channel_queue_var_cell	channel.c	/^channel_queue_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
channel_register	channel.c	/^channel_register(channel_t *chan)$/;"	f
channel_remove_from_digest_map	channel.c	/^channel_remove_from_digest_map(channel_t *chan)$/;"	f	file:
channel_run_cleanup	channel.c	/^channel_run_cleanup(void)$/;"	f
channel_s	channel.h	/^struct channel_s {$/;"	s
channel_send_destroy	channel.c	/^channel_send_destroy(circid_t circ_id, channel_t *chan, int reason)$/;"	f
channel_set_cell_handlers	channel.c	/^channel_set_cell_handlers(channel_t *chan,$/;"	f
channel_set_cmux_policy_everywhere	channel.c	/^channel_set_cmux_policy_everywhere(circuitmux_policy_t *pol)$/;"	f
channel_set_identity_digest	channel.c	/^channel_set_identity_digest(channel_t *chan,$/;"	f
channel_set_remote_end	channel.c	/^channel_set_remote_end(channel_t *chan,$/;"	f
channel_state_can_transition	channel.c	/^channel_state_can_transition(channel_state_t from, channel_state_t to)$/;"	f
channel_state_is_valid	channel.c	/^channel_state_is_valid(channel_state_t state)$/;"	f
channel_state_t	or.h	/^} channel_state_t;$/;"	t	typeref:enum:__anon7
channel_state_to_string	channel.c	/^channel_state_to_string(channel_state_t state)$/;"	f
channel_t	or.h	/^typedef struct channel_s channel_t;$/;"	t	typeref:struct:channel_s
channel_timestamp_active	channel.c	/^channel_timestamp_active(channel_t *chan)$/;"	f
channel_timestamp_client	channel.c	/^channel_timestamp_client(channel_t *chan)$/;"	f
channel_timestamp_created	channel.c	/^channel_timestamp_created(channel_t *chan)$/;"	f
channel_timestamp_drained	channel.c	/^channel_timestamp_drained(channel_t *chan)$/;"	f
channel_timestamp_recv	channel.c	/^channel_timestamp_recv(channel_t *chan)$/;"	f
channel_timestamp_xmit	channel.c	/^channel_timestamp_xmit(channel_t *chan)$/;"	f
channel_tls_close_method	channeltls.c	/^channel_tls_close_method(channel_t *chan)$/;"	f	file:
channel_tls_common_init	channeltls.c	/^channel_tls_common_init(channel_tls_t *tlschan)$/;"	f
channel_tls_connect	channeltls.c	/^channel_tls_connect(const tor_addr_t *addr, uint16_t port,$/;"	f
channel_tls_describe_transport_method	channeltls.c	/^channel_tls_describe_transport_method(channel_t *chan)$/;"	f	file:
channel_tls_free_all	channeltls.c	/^channel_tls_free_all(void)$/;"	f
channel_tls_free_method	channeltls.c	/^channel_tls_free_method(channel_t *chan)$/;"	f	file:
channel_tls_from_base	channeltls.c	/^channel_tls_from_base(channel_t *chan)$/;"	f
channel_tls_get_listener	channeltls.c	/^channel_tls_get_listener(void)$/;"	f
channel_tls_get_overhead_estimate_method	channeltls.c	/^channel_tls_get_overhead_estimate_method(channel_t *chan)$/;"	f	file:
channel_tls_get_remote_addr_method	channeltls.c	/^channel_tls_get_remote_addr_method(channel_t *chan, tor_addr_t *addr_out)$/;"	f	file:
channel_tls_get_remote_descr_method	channeltls.c	/^channel_tls_get_remote_descr_method(channel_t *chan, int flags)$/;"	f	file:
channel_tls_get_transport_name_method	channeltls.c	/^channel_tls_get_transport_name_method(channel_t *chan, char **transport_out)$/;"	f	file:
channel_tls_handle_cell	channeltls.c	/^channel_tls_handle_cell(cell_t *cell, or_connection_t *conn)$/;"	f
channel_tls_handle_incoming	channeltls.c	/^channel_tls_handle_incoming(or_connection_t *orconn)$/;"	f
channel_tls_handle_state_change_on_orconn	channeltls.c	/^channel_tls_handle_state_change_on_orconn(channel_tls_t *chan,$/;"	f
channel_tls_handle_var_cell	channeltls.c	/^channel_tls_handle_var_cell(var_cell_t *var_cell, or_connection_t *conn)$/;"	f
channel_tls_has_queued_writes_method	channeltls.c	/^channel_tls_has_queued_writes_method(channel_t *chan)$/;"	f	file:
channel_tls_is_canonical_method	channeltls.c	/^channel_tls_is_canonical_method(channel_t *chan, int req)$/;"	f	file:
channel_tls_listener	channeltls.c	/^channel_listener_t *channel_tls_listener = NULL;$/;"	v
channel_tls_listener_close_method	channeltls.c	/^channel_tls_listener_close_method(channel_listener_t *chan_l)$/;"	f	file:
channel_tls_listener_describe_transport_method	channeltls.c	/^channel_tls_listener_describe_transport_method(channel_listener_t *chan_l)$/;"	f	file:
channel_tls_matches_extend_info_method	channeltls.c	/^channel_tls_matches_extend_info_method(channel_t *chan,$/;"	f	file:
channel_tls_matches_target_method	channeltls.c	/^channel_tls_matches_target_method(channel_t *chan,$/;"	f	file:
channel_tls_num_bytes_queued_method	channeltls.c	/^channel_tls_num_bytes_queued_method(channel_t *chan)$/;"	f	file:
channel_tls_num_cells_writeable_method	channeltls.c	/^channel_tls_num_cells_writeable_method(channel_t *chan)$/;"	f	file:
channel_tls_process_auth_challenge_cell	channeltls.c	/^channel_tls_process_auth_challenge_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_authenticate_cell	channeltls.c	/^channel_tls_process_authenticate_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_certs_cell	channeltls.c	/^channel_tls_process_certs_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_netinfo_cell	channeltls.c	/^channel_tls_process_netinfo_cell(cell_t *cell, channel_tls_t *chan)$/;"	f	file:
channel_tls_process_versions_cell	channeltls.c	/^channel_tls_process_versions_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f	file:
channel_tls_s	channeltls.h	/^struct channel_tls_s {$/;"	s
channel_tls_start_listener	channeltls.c	/^channel_tls_start_listener(void)$/;"	f
channel_tls_t	or.h	/^typedef struct channel_tls_s channel_tls_t;$/;"	t	typeref:struct:channel_tls_s
channel_tls_time_process_cell	channeltls.c	/^channel_tls_time_process_cell(cell_t *cell, channel_tls_t *chan, int *time,$/;"	f	file:
channel_tls_to_base	channeltls.c	/^channel_tls_to_base(channel_tls_t *tlschan)$/;"	f
channel_tls_update_marks	channeltls.c	/^channel_tls_update_marks(or_connection_t *conn)$/;"	f
channel_tls_write_cell_method	channeltls.c	/^channel_tls_write_cell_method(channel_t *chan, cell_t *cell)$/;"	f	file:
channel_tls_write_packed_cell_method	channeltls.c	/^channel_tls_write_packed_cell_method(channel_t *chan,$/;"	f	file:
channel_tls_write_var_cell_method	channeltls.c	/^channel_tls_write_var_cell_method(channel_t *chan, var_cell_t *var_cell)$/;"	f	file:
channel_unlink_all_circuits	relay.c	/^channel_unlink_all_circuits(channel_t *chan, smartlist_t *circuits_out)$/;"	f
channel_unregister	channel.c	/^channel_unregister(channel_t *chan)$/;"	f
channel_update_xmit_queue_size	channel.c	/^channel_update_xmit_queue_size(channel_t *chan)$/;"	f
channel_var_cell_handler_fn_ptr	channel.h	/^typedef void (*channel_var_cell_handler_fn_ptr)(channel_t *, var_cell_t *);$/;"	t
channel_when_created	channel.c	/^channel_when_created(channel_t *chan)$/;"	f
channel_when_last_active	channel.c	/^channel_when_last_active(channel_t *chan)$/;"	f
channel_when_last_client	channel.c	/^channel_when_last_client(channel_t *chan)$/;"	f
channel_when_last_drained	channel.c	/^channel_when_last_drained(channel_t *chan)$/;"	f
channel_when_last_recv	channel.c	/^channel_when_last_recv(channel_t *chan)$/;"	f
channel_when_last_xmit	channel.c	/^channel_when_last_xmit(channel_t *chan)$/;"	f
channel_write_cell	channel.c	/^channel_write_cell(channel_t *chan, cell_t *cell)$/;"	f
channel_write_cell_queue_entry	channel.c	/^channel_write_cell_queue_entry(channel_t *chan, cell_queue_entry_t *q)$/;"	f	file:
channel_write_packed_cell	channel.c	/^channel_write_packed_cell(channel_t *chan, packed_cell_t *packed_cell)$/;"	f
channel_write_var_cell	channel.c	/^channel_write_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
channels_pending	scheduler.c	/^STATIC smartlist_t *channels_pending = NULL;$/;"	v
charmap	TorSGX.cpp	/^static const u_char charmap[] = {$/;"	v	file:
check	buffers.c	34;"	d	file:
check	buffers.c	36;"	d	file:
check_cert_lifetime_internal	tortls.c	/^check_cert_lifetime_internal(int severity, const X509 *cert,$/;"	f	file:
check_create_cell	onion.c	/^check_create_cell(const create_cell_t *cell, int unknown_ok)$/;"	f	file:
check_created_cell	onion.c	/^check_created_cell(const created_cell_t *cell)$/;"	f	file:
check_descriptor	main.c	/^  time_t check_descriptor;$/;"	m	struct:__anon107	file:
check_descriptor_bandwidth_changed	router.c	/^check_descriptor_bandwidth_changed(time_t now)$/;"	f
check_descriptor_ipaddress_changed	router.c	/^check_descriptor_ipaddress_changed(time_t now)$/;"	f
check_ed_keys	main.c	/^  time_t check_ed_keys;$/;"	m	struct:__anon107	file:
check_extend_cell	onion.c	/^check_extend_cell(const extend_cell_t *cell)$/;"	f	file:
check_extended_cell	onion.c	/^check_extended_cell(const extended_cell_t *cell)$/;"	f	file:
check_for_correct_dns	main.c	/^  time_t check_for_correct_dns;$/;"	m	struct:__anon107	file:
check_for_expired_networkstatus	main.c	/^  time_t check_for_expired_networkstatus;$/;"	m	struct:__anon107	file:
check_if_restarts_needed	transports.c	/^static int check_if_restarts_needed = 0;$/;"	v	file:
check_listeners	main.c	/^  time_t check_listeners;$/;"	m	struct:__anon107	file:
check_location_for_unix_socket	connection.c	/^check_location_for_unix_socket(const or_options_t *options, const char *path,$/;"	f	file:
check_nickname_list	config.c	/^check_nickname_list(char **lst, const char *name, char **msg)$/;"	f	file:
check_no_tls_errors	tortls.h	109;"	d
check_no_tls_errors_	tortls.c	/^check_no_tls_errors_(const char *fname, int line)$/;"	f
check_or_create_data_subdir	config.c	/^check_or_create_data_subdir(const char *subdir)$/;"	f
check_port_forwarding	main.c	/^  time_t check_port_forwarding;$/;"	m	struct:__anon107	file:
check_private_dir	util.c	/^check_private_dir(const char *dirname, cpd_check_t check,$/;"	f
check_server_ports	config.c	/^check_server_ports(const smartlist_t *ports,$/;"	f	file:
check_signature_token	routerparse.c	/^check_signature_token(const char *digest,$/;"	f	file:
check_sockaddr	connection.c	/^check_sockaddr(const struct sockaddr *sa, int len, int level)$/;"	f	file:
check_sockaddr_family_match	connection.c	/^check_sockaddr_family_match(sa_family_t got, connection_t *listener)$/;"	f	file:
check_tap_onion_key_crosscert	routerkeys.c	/^check_tap_onion_key_crosscert(const uint8_t *crosscert,$/;"	f
check_v3_certificate	main.c	/^  time_t check_v3_certificate;$/;"	m	struct:__anon107	file:
check_whether_dirport_reachable	router.c	/^check_whether_dirport_reachable(void)$/;"	f
check_whether_orport_reachable	router.c	/^check_whether_orport_reachable(void)$/;"	f
chk_calls	TorSGX.cpp	/^volatile int chk_fail_allowed, chk_calls;$/;"	v
chk_fail_allowed	TorSGX.cpp	/^volatile int chk_fail_allowed, chk_calls;$/;"	v
chk_fail_buf	TorSGX.cpp	/^void *chk_fail_buf[256] __attribute__((aligned (16)));$/;"	v
choose_array_element_by_weight	routerlist.c	/^choose_array_element_by_weight(const u64_dbl_t *entries, int n_entries)$/;"	f
choose_compression_level	directory.c	/^choose_compression_level(ssize_t n_bytes)$/;"	f	file:
choose_good_entry_server	circuitbuild.c	/^choose_good_entry_server(uint8_t purpose, cpath_build_state_t *state)$/;"	f
choose_good_exit_server	circuitbuild.c	/^choose_good_exit_server(uint8_t purpose,$/;"	f	file:
choose_good_exit_server_general	circuitbuild.c	/^choose_good_exit_server_general(int need_uptime, int need_capacity)$/;"	f	file:
choose_good_middle_server	circuitbuild.c	/^choose_good_middle_server(uint8_t purpose,$/;"	f	file:
choose_random_dirguard	entrynodes.c	/^choose_random_dirguard(dirinfo_type_t type)$/;"	f
choose_random_entry	entrynodes.c	/^choose_random_entry(cpath_build_state_t *state)$/;"	f
choose_random_entry_impl	entrynodes.c	/^choose_random_entry_impl(cpath_build_state_t *state, int for_directory,$/;"	f	file:
chosen_by_version	entrynodes.h	/^  char *chosen_by_version; \/**< What tor version added this guard? NULL$/;"	m	struct:entry_guard_t
chosen_exit	or.h	/^  extend_info_t *chosen_exit;$/;"	m	struct:__anon22
chosen_exit_name	or.h	/^  char *chosen_exit_name;$/;"	m	struct:entry_connection_t
chosen_exit_optional	or.h	/^  unsigned int chosen_exit_optional:1;$/;"	m	struct:entry_connection_t
chosen_exit_retries	or.h	/^  unsigned int chosen_exit_retries:3;$/;"	m	struct:entry_connection_t
chosen_on_date	entrynodes.h	/^  time_t chosen_on_date; \/**< Approximately when was this guard added?$/;"	m	struct:entry_guard_t
chunk	buffers.c	/^  const chunk_t *chunk; \/**< Which chunk are we pointing to? *\/$/;"	m	struct:buf_pos_t	file:
chunk_copy	buffers.c	/^chunk_copy(const chunk_t *in_chunk)$/;"	f	file:
chunk_free_unchecked	buffers.c	/^chunk_free_unchecked(chunk_t *chunk)$/;"	f	file:
chunk_free_unchecked	memarea.c	/^chunk_free_unchecked(memarea_chunk_t *chunk)$/;"	f	file:
chunk_grow	buffers.c	/^chunk_grow(chunk_t *chunk, size_t sz)$/;"	f	file:
chunk_new_with_alloc_size	buffers.c	/^chunk_new_with_alloc_size(size_t alloc)$/;"	f	file:
chunk_pos	buffers.c	/^  size_t chunk_pos; \/**< Total length of all previous chunks. *\/$/;"	m	struct:buf_pos_t	file:
chunk_repack	buffers.c	/^chunk_repack(chunk_t *chunk)$/;"	f	file:
chunk_t	buffers.h	/^typedef struct chunk_t {$/;"	s
chunk_t	buffers.h	/^} chunk_t;$/;"	t	typeref:struct:chunk_t
cid	link_handshake.h	/^  uint8_t cid[32];$/;"	m	struct:auth1_st
cipher	crypto.c	/^  aes_cnt_cipher_t *cipher; \/**< The key in format usable for counter-mode AES$/;"	m	struct:crypto_cipher_t	file:
ciphertext	rendservice.h	/^  uint8_t *ciphertext;$/;"	m	struct:rend_intro_cell_s
ciphertext_len	rendservice.h	/^  ssize_t ciphertext_len;$/;"	m	struct:rend_intro_cell_s
circ	circuitmux_ewma.c	/^  circuit_t *circ;$/;"	m	struct:ewma_policy_circ_data_s	file:
circ	cpuworker.c	/^  or_circuit_t *circ;$/;"	m	struct:cpuworker_job_u	file:
circ	onion.c	/^  or_circuit_t *circ;$/;"	m	struct:onion_queue_t	file:
circ_attempts	entrynodes.h	/^  double circ_attempts; \/**< Number of circuits this guard has "attempted" *\/$/;"	m	struct:entry_guard_t
circ_buffer_stats_t	rephist.c	/^typedef struct circ_buffer_stats_t {$/;"	s	file:
circ_buffer_stats_t	rephist.c	/^} circ_buffer_stats_t;$/;"	t	typeref:struct:circ_buffer_stats_t	file:
circ_id	circuitlist.c	/^  circid_t circ_id;$/;"	m	struct:chan_circid_circuit_map_t	file:
circ_id	circuitmux.c	/^  circid_t circ_id;$/;"	m	struct:chanid_circid_muxinfo_t	file:
circ_id	or.h	/^  circid_t circ_id; \/**< Circuit which received the cell. *\/$/;"	m	struct:cell_t
circ_id	or.h	/^  circid_t circ_id;$/;"	m	struct:var_cell_t
circ_id_type	channel.h	/^  circ_id_type_bitfield_t circ_id_type:2;$/;"	m	struct:channel_s
circ_id_type_bitfield_t	or.h	196;"	d
circ_id_type_t	or.h	/^} circ_id_type_t;$/;"	t	typeref:enum:__anon5
circ_successes	entrynodes.h	/^  double circ_successes; \/**< Number of successfully built circuits using$/;"	m	struct:entry_guard_t
circ_times	circuitstats.c	/^static circuit_build_times_t circ_times;$/;"	v	file:
circid_t	or.h	/^typedef uint32_t circid_t;$/;"	t
circuit	circuitlist.c	/^  circuit_t *circuit;$/;"	m	struct:chan_circid_circuit_map_t	file:
circuit_all_predicted_ports_handled	circuitbuild.c	/^circuit_all_predicted_ports_handled(time_t now, int *need_uptime,$/;"	f
circuit_append_new_exit	circuitbuild.c	/^circuit_append_new_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f
circuit_build_failed	circuituse.c	/^circuit_build_failed(origin_circuit_t *circ)$/;"	f
circuit_build_needed_circs	circuituse.c	/^circuit_build_needed_circs(time_t now)$/;"	f
circuit_build_times	circuitstats.h	/^  build_time_t circuit_build_times[CBT_NCIRCUITS_TO_OBSERVE];$/;"	m	struct:circuit_build_times_s
circuit_build_times_add_time	circuitstats.c	/^circuit_build_times_add_time(circuit_build_times_t *cbt, build_time_t time)$/;"	f
circuit_build_times_calculate_timeout	circuitstats.c	/^circuit_build_times_calculate_timeout(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_cdf	circuitstats.c	/^circuit_build_times_cdf(circuit_build_times_t *cbt, double x)$/;"	f
circuit_build_times_close_quantile	circuitstats.c	/^circuit_build_times_close_quantile(void)$/;"	f	file:
circuit_build_times_close_rate	circuitstats.c	/^circuit_build_times_close_rate(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_count_close	circuitstats.c	/^circuit_build_times_count_close(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_count_timeout	circuitstats.c	/^circuit_build_times_count_timeout(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_create_histogram	circuitstats.c	/^circuit_build_times_create_histogram(const circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_default_num_xm_modes	circuitstats.c	/^circuit_build_times_default_num_xm_modes(void)$/;"	f	file:
circuit_build_times_disabled	circuitstats.c	/^circuit_build_times_disabled(void)$/;"	f
circuit_build_times_enough_to_compute	circuitstats.c	/^circuit_build_times_enough_to_compute(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_filter_timeouts	circuitstats.c	/^circuit_build_times_filter_timeouts(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_free_timeouts	circuitstats.c	/^circuit_build_times_free_timeouts(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_generate_sample	circuitstats.c	/^circuit_build_times_generate_sample(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_get_initial_timeout	circuitstats.c	/^circuit_build_times_get_initial_timeout(void)$/;"	f	file:
circuit_build_times_get_xm	circuitstats.c	/^circuit_build_times_get_xm(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_init	circuitstats.c	/^circuit_build_times_init(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_initial_alpha	circuitstats.c	/^circuit_build_times_initial_alpha(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_initial_timeout	circuitstats.c	/^circuit_build_times_initial_timeout(void)$/;"	f
circuit_build_times_max	circuitstats.c	/^circuit_build_times_max(const circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_max_timeouts	circuitstats.c	/^circuit_build_times_max_timeouts(void)$/;"	f	file:
circuit_build_times_min_circs_to_observe	circuitstats.c	/^circuit_build_times_min_circs_to_observe(void)$/;"	f	file:
circuit_build_times_min_timeout	circuitstats.c	/^circuit_build_times_min_timeout(void)$/;"	f	file:
circuit_build_times_needs_circuits	circuitstats.c	/^circuit_build_times_needs_circuits(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_needs_circuits_now	circuitstats.c	/^circuit_build_times_needs_circuits_now(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_check_changed	circuitstats.c	/^circuit_build_times_network_check_changed(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_check_live	circuitstats.c	/^circuit_build_times_network_check_live(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_circ_success	circuitstats.c	/^circuit_build_times_network_circ_success(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_close	circuitstats.c	/^circuit_build_times_network_close(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_network_is_live	circuitstats.c	/^circuit_build_times_network_is_live(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_timeout	circuitstats.c	/^circuit_build_times_network_timeout(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_new_consensus_params	circuitstats.c	/^circuit_build_times_new_consensus_params(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_parse_state	circuitstats.c	/^circuit_build_times_parse_state(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_quantile_cutoff	circuitstats.c	/^circuit_build_times_quantile_cutoff(void)$/;"	f
circuit_build_times_recent_circuit_count	circuitstats.c	/^circuit_build_times_recent_circuit_count(networkstatus_t *ns)$/;"	f	file:
circuit_build_times_reset	circuitstats.c	/^circuit_build_times_reset(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_s	circuitstats.h	/^struct circuit_build_times_s {$/;"	s
circuit_build_times_set_timeout	circuitstats.c	/^circuit_build_times_set_timeout(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_set_timeout_worker	circuitstats.c	/^circuit_build_times_set_timeout_worker(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_shuffle_and_store_array	circuitstats.c	/^circuit_build_times_shuffle_and_store_array(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_t	or.h	/^typedef struct circuit_build_times_s circuit_build_times_t;$/;"	t	typeref:struct:circuit_build_times_s
circuit_build_times_test_frequency	circuitstats.c	/^circuit_build_times_test_frequency(void)$/;"	f	file:
circuit_build_times_timeout_rate	circuitstats.c	/^circuit_build_times_timeout_rate(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_alpha	circuitstats.c	/^circuit_build_times_update_alpha(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_last_circ	circuitstats.c	/^circuit_build_times_update_last_circ(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_state	circuitstats.c	/^circuit_build_times_update_state(const circuit_build_times_t *cbt,$/;"	f
circuit_carries_hs_traffic_stats	or.h	/^  unsigned int circuit_carries_hs_traffic_stats : 1;$/;"	m	struct:or_circuit_t
circuit_change_purpose	circuituse.c	/^circuit_change_purpose(circuit_t *circ, uint8_t new_purpose)$/;"	f
circuit_clear_cell_queue	relay.c	/^circuit_clear_cell_queue(circuit_t *circ, channel_t *chan)$/;"	f
circuit_clear_cpath	circuitlist.c	/^circuit_clear_cpath(origin_circuit_t *circ)$/;"	f
circuit_clear_isolation	connection_edge.c	/^circuit_clear_isolation(origin_circuit_t *circ)$/;"	f
circuit_clear_rend_token	circuitlist.c	/^circuit_clear_rend_token(or_circuit_t *circ)$/;"	f	file:
circuit_close_all_marked	circuitlist.c	/^circuit_close_all_marked(void)$/;"	f
circuit_consider_sending_sendme	relay.c	/^circuit_consider_sending_sendme(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_consider_stop_edge_reading	relay.c	/^circuit_consider_stop_edge_reading(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_count_pending_on_channel	circuitlist.c	/^circuit_count_pending_on_channel(channel_t *chan)$/;"	f
circuit_cpath_supports_ntor	circuitbuild.c	/^circuit_cpath_supports_ntor(const origin_circuit_t *circ)$/;"	f	file:
circuit_deliver_create_cell	circuitbuild.c	/^circuit_deliver_create_cell(circuit_t *circ, const create_cell_t *create_cell,$/;"	f	file:
circuit_describe_status_for_controller	control.c	/^circuit_describe_status_for_controller(origin_circuit_t *circ)$/;"	f	file:
circuit_detach_stream	circuituse.c	/^circuit_detach_stream(circuit_t *circ, edge_connection_t *conn)$/;"	f
circuit_discard_optional_exit_enclaves	connection_edge.c	/^circuit_discard_optional_exit_enclaves(extend_info_t *info)$/;"	f
circuit_dump_by_conn	circuitlist.c	/^circuit_dump_by_conn(connection_t *conn, int severity)$/;"	f
circuit_dump_conn_details	circuitlist.c	/^circuit_dump_conn_details(int severity,$/;"	f	file:
circuit_end_reason_to_control_string	reasons.c	/^circuit_end_reason_to_control_string(int reason)$/;"	f
circuit_enough_testing_circs	circuituse.c	/^circuit_enough_testing_circs(void)$/;"	f
circuit_establish_circuit	circuitbuild.c	/^circuit_establish_circuit(uint8_t purpose, extend_info_t *exit, int flags)$/;"	f
circuit_established	or.h	/^  unsigned int circuit_established:1;$/;"	m	struct:rend_intro_point_t
circuit_expire_building	circuituse.c	/^circuit_expire_building(void)$/;"	f
circuit_expire_old_circs_as_needed	circuituse.c	/^circuit_expire_old_circs_as_needed(time_t now)$/;"	f
circuit_expire_old_circuits_clientside	circuituse.c	/^circuit_expire_old_circuits_clientside(void)$/;"	f	file:
circuit_expire_old_circuits_serverside	circuituse.c	/^circuit_expire_old_circuits_serverside(time_t now)$/;"	f
circuit_extend	circuitbuild.c	/^circuit_extend(cell_t *cell, circuit_t *circ)$/;"	f
circuit_extend_to_new_exit	circuitbuild.c	/^circuit_extend_to_new_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f
circuit_find_to_cannibalize	circuitlist.c	/^circuit_find_to_cannibalize(uint8_t purpose, extend_info_t *info,$/;"	f
circuit_finish_handshake	circuitbuild.c	/^circuit_finish_handshake(origin_circuit_t *circ,$/;"	f
circuit_free	circuitlist.c	/^circuit_free(circuit_t *circ)$/;"	f
circuit_free_all	circuitlist.c	/^circuit_free_all(void)$/;"	f
circuit_free_cpath_node	circuitlist.c	/^circuit_free_cpath_node(crypt_path_t *victim)$/;"	f	file:
circuit_get_all_pending_on_channel	circuitlist.c	/^circuit_get_all_pending_on_channel(smartlist_t *out, channel_t *chan)$/;"	f
circuit_get_best	circuituse.c	/^circuit_get_best(const entry_connection_t *conn,$/;"	f	file:
circuit_get_by_circid_channel	circuitlist.c	/^circuit_get_by_circid_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_get_by_circid_channel_even_if_marked	circuitlist.c	/^circuit_get_by_circid_channel_even_if_marked(circid_t circ_id,$/;"	f
circuit_get_by_circid_channel_impl	circuitlist.c	/^circuit_get_by_circid_channel_impl(circid_t circ_id, channel_t *chan,$/;"	f	file:
circuit_get_by_edge_conn	circuitlist.c	/^circuit_get_by_edge_conn(edge_connection_t *conn)$/;"	f
circuit_get_by_global_id	circuitlist.c	/^circuit_get_by_global_id(uint32_t id)$/;"	f
circuit_get_by_rend_token_and_purpose	circuitlist.c	/^circuit_get_by_rend_token_and_purpose(uint8_t purpose, int is_rend_circ,$/;"	f	file:
circuit_get_cpath_hop	circuitlist.c	/^circuit_get_cpath_hop(origin_circuit_t *circ, int hopnum)$/;"	f
circuit_get_cpath_len	circuitlist.c	/^circuit_get_cpath_len(origin_circuit_t *circ)$/;"	f
circuit_get_intro_point	circuitlist.c	/^circuit_get_intro_point(const uint8_t *digest)$/;"	f
circuit_get_next_by_pk_and_purpose	circuitlist.c	/^circuit_get_next_by_pk_and_purpose(origin_circuit_t *start,$/;"	f
circuit_get_open_circ_or_launch	circuituse.c	/^circuit_get_open_circ_or_launch(entry_connection_t *conn,$/;"	f	file:
circuit_get_ready_rend_circ_by_rend_data	circuitlist.c	/^circuit_get_ready_rend_circ_by_rend_data(const rend_data_t *rend_data)$/;"	f
circuit_get_rendezvous	circuitlist.c	/^circuit_get_rendezvous(const uint8_t *cookie)$/;"	f
circuit_get_streams_max_data_age	circuitlist.c	/^circuit_get_streams_max_data_age(const edge_connection_t *stream, uint32_t now)$/;"	f	file:
circuit_get_unhandled_ports	circuitbuild.c	/^circuit_get_unhandled_ports(time_t now)$/;"	f	file:
circuit_handle_first_hop	circuitbuild.c	/^circuit_handle_first_hop(origin_circuit_t *circ)$/;"	f
circuit_has_opened	circuituse.c	/^circuit_has_opened(origin_circuit_t *circ)$/;"	f
circuit_id_in_use_on_channel	circuitlist.c	/^circuit_id_in_use_on_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_id_when_marked_unusable_on_channel	circuitlist.c	/^circuit_id_when_marked_unusable_on_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_increment_failure_count	circuituse.c	/^circuit_increment_failure_count(void)$/;"	f	file:
circuit_init_cpath_crypto	circuitbuild.c	/^circuit_init_cpath_crypto(crypt_path_t *cpath, const char *key_data,$/;"	f
circuit_initial_package_window	circuitlist.c	/^circuit_initial_package_window(void)$/;"	f
circuit_is_acceptable	circuituse.c	/^circuit_is_acceptable(const origin_circuit_t *origin_circ,$/;"	f	file:
circuit_is_better	circuituse.c	/^circuit_is_better(const origin_circuit_t *oa, const origin_circuit_t *ob,$/;"	f	file:
circuit_launch	circuituse.c	/^circuit_launch(uint8_t purpose, int flags)$/;"	f
circuit_launch_by_extend_info	circuituse.c	/^circuit_launch_by_extend_info(uint8_t purpose,$/;"	f
circuit_list_path	circuitbuild.c	/^circuit_list_path(origin_circuit_t *circ, int verbose)$/;"	f
circuit_list_path_for_controller	circuitbuild.c	/^circuit_list_path_for_controller(origin_circuit_t *circ)$/;"	f
circuit_list_path_impl	circuitbuild.c	/^circuit_list_path_impl(origin_circuit_t *circ, int verbose, int verbose_names)$/;"	f	file:
circuit_log_ancient_one_hop_circuits	circuituse.c	/^circuit_log_ancient_one_hop_circuits(int age)$/;"	f
circuit_log_path	circuitbuild.c	/^circuit_log_path(int severity, unsigned int domain, origin_circuit_t *circ)$/;"	f
circuit_mark_all_dirty_circs_as_unusable	circuitlist.c	/^circuit_mark_all_dirty_circs_as_unusable(void)$/;"	f
circuit_mark_all_unused_circs	circuitlist.c	/^circuit_mark_all_unused_circs(void)$/;"	f
circuit_mark_for_close	circuitlist.h	66;"	d
circuit_max_queued_cell_age	circuitlist.c	/^circuit_max_queued_cell_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_max_queued_data_age	circuitlist.c	/^circuit_max_queued_data_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_max_queued_item_age	circuitlist.c	/^circuit_max_queued_item_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_muxinfo_s	circuitmux.c	/^struct circuit_muxinfo_s {$/;"	s	file:
circuit_muxinfo_t	circuitmux.c	/^typedef struct circuit_muxinfo_s circuit_muxinfo_t;$/;"	t	typeref:struct:circuit_muxinfo_s	file:
circuit_n_chan_done	circuitbuild.c	/^circuit_n_chan_done(channel_t *chan, int status, int close_origin_circuits)$/;"	f
circuit_note_clock_jumped	circuitbuild.c	/^circuit_note_clock_jumped(int seconds_elapsed)$/;"	f
circuit_package_relay_cell	relay.c	/^circuit_package_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f	file:
circuit_pick_create_handshake	circuitbuild.c	/^circuit_pick_create_handshake(uint8_t *cell_type_out,$/;"	f	file:
circuit_pick_extend_handshake	circuitbuild.c	/^circuit_pick_extend_handshake(uint8_t *cell_type_out,$/;"	f	file:
circuit_predict_and_launch_new	circuituse.c	/^circuit_predict_and_launch_new(void)$/;"	f	file:
circuit_purpose_from_string	control.c	/^circuit_purpose_from_string(const char *string)$/;"	f	file:
circuit_purpose_to_controller_hs_state_string	circuitlist.c	/^circuit_purpose_to_controller_hs_state_string(uint8_t purpose)$/;"	f
circuit_purpose_to_controller_string	circuitlist.c	/^circuit_purpose_to_controller_string(uint8_t purpose)$/;"	f
circuit_purpose_to_string	circuitlist.c	/^circuit_purpose_to_string(uint8_t purpose)$/;"	f
circuit_queue_streams_are_blocked	relay.c	/^circuit_queue_streams_are_blocked(circuit_t *circ)$/;"	f	file:
circuit_receive_relay_cell	relay.c	/^circuit_receive_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f
circuit_remove_handled_ports	circuituse.c	/^circuit_remove_handled_ports(smartlist_t *needed_ports)$/;"	f
circuit_rep_hist_note_result	circuitbuild.c	/^circuit_rep_hist_note_result(origin_circuit_t *circ)$/;"	f
circuit_reset_failure_count	circuituse.c	/^circuit_reset_failure_count(int timeout)$/;"	f
circuit_resume_edge_reading	relay.c	/^circuit_resume_edge_reading(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_resume_edge_reading_helper	relay.c	/^circuit_resume_edge_reading_helper(edge_connection_t *first_conn,$/;"	f	file:
circuit_retries	or.h	/^  unsigned int circuit_retries;$/;"	m	struct:rend_intro_point_t
circuit_send_next_onion_skin	circuitbuild.c	/^circuit_send_next_onion_skin(origin_circuit_t *circ)$/;"	f
circuit_set_circid_chan_helper	circuitlist.c	/^circuit_set_circid_chan_helper(circuit_t *circ, int direction,$/;"	f	file:
circuit_set_intro_point_digest	circuitlist.c	/^circuit_set_intro_point_digest(or_circuit_t *circ, const uint8_t *digest)$/;"	f
circuit_set_n_circid_chan	circuitlist.c	/^circuit_set_n_circid_chan(circuit_t *circ, circid_t id,$/;"	f
circuit_set_p_circid_chan	circuitlist.c	/^circuit_set_p_circid_chan(or_circuit_t *or_circ, circid_t id,$/;"	f
circuit_set_rend_token	circuitlist.c	/^circuit_set_rend_token(or_circuit_t *circ, int is_rend_circ,$/;"	f	file:
circuit_set_rendezvous_cookie	circuitlist.c	/^circuit_set_rendezvous_cookie(or_circuit_t *circ, const uint8_t *cookie)$/;"	f
circuit_set_state	circuitlist.c	/^circuit_set_state(circuit_t *circ, uint8_t state)$/;"	f
circuit_state_to_string	circuitlist.c	/^circuit_state_to_string(int state)$/;"	f
circuit_status_event_t	or.h	/^typedef enum circuit_status_event_t {$/;"	g
circuit_status_event_t	or.h	/^} circuit_status_event_t;$/;"	t	typeref:enum:circuit_status_event_t
circuit_status_minor_event_t	or.h	/^typedef enum circuit_status_minor_event_t {$/;"	g
circuit_status_minor_event_t	or.h	/^} circuit_status_minor_event_t;$/;"	t	typeref:enum:circuit_status_minor_event_t
circuit_stream_is_being_handled	circuituse.c	/^circuit_stream_is_being_handled(entry_connection_t *conn,$/;"	f
circuit_t	or.h	/^typedef struct circuit_t {$/;"	s
circuit_t	or.h	/^} circuit_t;$/;"	t	typeref:struct:circuit_t
circuit_testing_failed	circuituse.c	/^circuit_testing_failed(origin_circuit_t *circ, int at_last_hop)$/;"	f	file:
circuit_testing_opened	circuituse.c	/^circuit_testing_opened(origin_circuit_t *circ)$/;"	f	file:
circuit_timeout_want_to_count_circ	circuitbuild.c	/^circuit_timeout_want_to_count_circ(origin_circuit_t *circ)$/;"	f
circuit_truncated	circuitbuild.c	/^circuit_truncated(origin_circuit_t *circ, crypt_path_t *layer, int reason)$/;"	f
circuit_try_attaching_streams	circuituse.c	/^circuit_try_attaching_streams(origin_circuit_t *circ)$/;"	f
circuit_try_clearing_isolation_state	circuituse.c	/^circuit_try_clearing_isolation_state(origin_circuit_t *circ)$/;"	f	file:
circuit_unlink_all_from_channel	circuitlist.c	/^circuit_unlink_all_from_channel(channel_t *chan, int reason)$/;"	f
circuitbuild_running_unit_tests	circuitstats.c	/^circuitbuild_running_unit_tests(void)$/;"	f
circuitmux_alloc	circuitmux.c	/^circuitmux_alloc(void)$/;"	f
circuitmux_append_destroy_cell	circuitmux.c	/^circuitmux_append_destroy_cell(channel_t *chan,$/;"	f
circuitmux_assert_okay	circuitmux.c	/^circuitmux_assert_okay(circuitmux_t *cmux)$/;"	f
circuitmux_assert_okay_paranoid	circuitmux.c	179;"	d	file:
circuitmux_assert_okay_paranoid	circuitmux.c	182;"	d	file:
circuitmux_assert_okay_pass_one	circuitmux.c	/^circuitmux_assert_okay_pass_one(circuitmux_t *cmux)$/;"	f	file:
circuitmux_assert_okay_pass_three	circuitmux.c	/^circuitmux_assert_okay_pass_three(circuitmux_t *cmux)$/;"	f	file:
circuitmux_assert_okay_pass_two	circuitmux.c	/^circuitmux_assert_okay_pass_two(circuitmux_t *cmux)$/;"	f	file:
circuitmux_attached_circuit_direction	circuitmux.c	/^circuitmux_attached_circuit_direction(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_clear_num_cells	circuitmux.c	/^circuitmux_clear_num_cells(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_clear_policy	circuitmux.c	/^circuitmux_clear_policy(circuitmux_t *cmux)$/;"	f
circuitmux_count_queued_destroy_cells	circuitmux.c	/^circuitmux_count_queued_destroy_cells(const channel_t *chan,$/;"	f
circuitmux_detach_all_circuits	circuitmux.c	/^circuitmux_detach_all_circuits(circuitmux_t *cmux, smartlist_t *detached_out)$/;"	f
circuitmux_find_map_entry	circuitmux.c	/^circuitmux_find_map_entry(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_free	circuitmux.c	/^circuitmux_free(circuitmux_t *cmux)$/;"	f
circuitmux_get_first_active_circuit	circuitmux.c	/^circuitmux_get_first_active_circuit(circuitmux_t *cmux,$/;"	f
circuitmux_is_circuit_active	circuitmux.c	/^circuitmux_is_circuit_active(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_is_circuit_attached	circuitmux.c	/^circuitmux_is_circuit_attached(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_make_circuit_active	circuitmux.c	/^circuitmux_make_circuit_active(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_make_circuit_inactive	circuitmux.c	/^circuitmux_make_circuit_inactive(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_mark_destroyed_circids_usable	circuitmux.c	/^circuitmux_mark_destroyed_circids_usable(circuitmux_t *cmux, channel_t *chan)$/;"	f
circuitmux_move_active_circ_to_tail	circuitmux.c	/^circuitmux_move_active_circ_to_tail(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_next_active_circ_p	circuitmux.c	/^circuitmux_next_active_circ_p(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_notify_xmit_cells	circuitmux.c	/^circuitmux_notify_xmit_cells(circuitmux_t *cmux, circuit_t *circ,$/;"	f
circuitmux_notify_xmit_destroy	circuitmux.c	/^circuitmux_notify_xmit_destroy(circuitmux_t *cmux)$/;"	f
circuitmux_num_active_circuits	circuitmux.c	/^circuitmux_num_active_circuits(circuitmux_t *cmux)$/;"	f
circuitmux_num_cells_for_circuit	circuitmux.c	/^circuitmux_num_cells_for_circuit(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_num_circuits	circuitmux.c	/^circuitmux_num_circuits(circuitmux_t *cmux)$/;"	f
circuitmux_policy_circ_data_s	circuitmux.h	/^struct circuitmux_policy_circ_data_s {$/;"	s
circuitmux_policy_circ_data_t	circuitmux.h	/^typedef struct circuitmux_policy_circ_data_s circuitmux_policy_circ_data_t;$/;"	t	typeref:struct:circuitmux_policy_circ_data_s
circuitmux_policy_data_s	circuitmux.h	/^struct circuitmux_policy_data_s {$/;"	s
circuitmux_policy_data_t	circuitmux.h	/^typedef struct circuitmux_policy_data_s circuitmux_policy_data_t;$/;"	t	typeref:struct:circuitmux_policy_data_s
circuitmux_policy_s	circuitmux.h	/^struct circuitmux_policy_s {$/;"	s
circuitmux_policy_t	circuitmux.h	/^typedef struct circuitmux_policy_s circuitmux_policy_t;$/;"	t	typeref:struct:circuitmux_policy_s
circuitmux_prev_active_circ_p	circuitmux.c	/^circuitmux_prev_active_circ_p(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_s	circuitmux.c	/^struct circuitmux_s {$/;"	s	file:
circuitmux_set_num_cells	circuitmux.c	/^circuitmux_set_num_cells(circuitmux_t *cmux, circuit_t *circ,$/;"	f
circuitmux_set_policy	circuitmux.c	/^circuitmux_set_policy(circuitmux_t *cmux,$/;"	f
circuitmux_t	or.h	/^typedef struct circuitmux_s circuitmux_t;$/;"	t	typeref:struct:circuitmux_s
circuits_can_use_ntor	circuitbuild.c	/^circuits_can_use_ntor(void)$/;"	f	file:
circuits_compare_by_oldest_queued_item_	circuitlist.c	/^circuits_compare_by_oldest_queued_item_(const void **a_, const void **b_)$/;"	f	file:
circuits_for_buffer_stats	rephist.c	/^static smartlist_t *circuits_for_buffer_stats = NULL;$/;"	v	file:
circuits_handle_oom	circuitlist.c	/^circuits_handle_oom(size_t current_allocation)$/;"	f
circuits_pending_chans	circuitlist.c	/^static smartlist_t *circuits_pending_chans = NULL;$/;"	v	file:
clean_backtrace	backtrace.c	/^clean_backtrace(void **stack, int depth, const ucontext_t *ctx)$/;"	f
clean_caches	main.c	/^  time_t clean_caches;$/;"	m	struct:__anon107	file:
clean_name_for_stat	util.c	/^clean_name_for_stat(char *name)$/;"	f	file:
clean_up_backtrace_handler	backtrace.c	/^clean_up_backtrace_handler(void)$/;"	f
cleanup_fn	tinytest.h	/^	int (*cleanup_fn)(const struct testcase_t *, void *);$/;"	m	struct:testcase_setup_t
clear_bridge_list	entrynodes.c	/^clear_bridge_list(void)$/;"	f	file:
clear_broken_connection_map	connection_or.c	/^clear_broken_connection_map(int stop_recording)$/;"	f
clear_cached_dir	dirserv.c	/^clear_cached_dir(cached_dir_t *d)$/;"	f	file:
clear_circ_bw_fields	control.c	/^clear_circ_bw_fields(void)$/;"	f	file:
clear_dir_servers	routerlist.c	/^clear_dir_servers(void)$/;"	f
clear_geoip_db	geoip.c	/^clear_geoip_db(void)$/;"	f	file:
clear_passphrase	tor-gencert.c	/^clear_passphrase(void)$/;"	f	file:
clear_pending_onions	onion.c	/^clear_pending_onions(void)$/;"	f
clear_status_flags_on_sybil	dirserv.c	/^clear_status_flags_on_sybil(routerstatus_t *rs)$/;"	f	file:
clear_trackexithost_mappings	addressmap.c	/^clear_trackexithost_mappings(const char *exitname)$/;"	f
clear_transport_list	transports.c	/^clear_transport_list(void)$/;"	f	file:
clear_waitpid_callback	util_process.c	/^clear_waitpid_callback(waitpid_callback_t *ent)$/;"	f
client_addr	or.h	/^  tor_addr_t client_addr;$/;"	m	struct:origin_circuit_t
client_check_address_changed	connection.c	/^client_check_address_changed(tor_socket_t sock)$/;"	f	file:
client_cipher_list_type	tortls.c	/^  int8_t client_cipher_list_type;$/;"	m	struct:tor_tls_t	file:
client_dns_clear_failures	addressmap.c	/^client_dns_clear_failures(const char *address)$/;"	f
client_dns_incr_failures	addressmap.c	/^client_dns_incr_failures(const char *address)$/;"	f
client_dns_set_addressmap	addressmap.c	/^client_dns_set_addressmap(entry_connection_t *for_conn,$/;"	f
client_dns_set_addressmap_impl	addressmap.c	/^client_dns_set_addressmap_impl(entry_connection_t *for_conn,$/;"	f	file:
client_dns_set_reverse_addressmap	addressmap.c	/^client_dns_set_reverse_addressmap(entry_connection_t *for_conn,$/;"	f
client_history_clear	geoip.c	/^client_history_clear(void)$/;"	f	file:
client_identity_key_is_set	router.c	/^client_identity_key_is_set(void)$/;"	f
client_identitykey	router.c	/^static crypto_pk_t *client_identitykey=NULL;$/;"	v	file:
client_key	or.h	/^  crypto_pk_t *client_key;$/;"	m	struct:rend_authorized_client_t
client_keys_token_table	routerparse.c	/^static token_rule_t client_keys_token_table[] = {$/;"	v	file:
client_likes_consensus	directory.c	/^client_likes_consensus(networkstatus_t *v, const char *want_url)$/;"	f
client_name	or.h	/^  char *client_name;$/;"	m	struct:rend_authorized_client_t
client_proto_socksver	or.h	/^  uint8_t client_proto_socksver;$/;"	m	struct:origin_circuit_t
client_proto_type	or.h	/^  uint8_t client_proto_type;$/;"	m	struct:origin_circuit_t
client_tls_context	tortls.c	/^static tor_tls_context_t *client_tls_context = NULL;$/;"	v	file:
client_versions	or.h	/^  char *client_versions;$/;"	m	struct:networkstatus_t
client_would_use_router	networkstatus.c	/^client_would_use_router(const routerstatus_t *rs, time_t now,$/;"	f
clientmap_entries_eq	geoip.c	/^clientmap_entries_eq(const clientmap_entry_t *a, const clientmap_entry_t *b)$/;"	f	file:
clientmap_entry_free	geoip.c	/^clientmap_entry_free(clientmap_entry_t *ent)$/;"	f	file:
clientmap_entry_hash	geoip.c	/^clientmap_entry_hash(const clientmap_entry_t *a)$/;"	f	file:
clientmap_entry_t	geoip.c	/^typedef struct clientmap_entry_t {$/;"	s	file:
clientmap_entry_t	geoip.c	/^} clientmap_entry_t;$/;"	t	typeref:struct:clientmap_entry_t	file:
clients	rendservice.c	/^  smartlist_t *clients; \/**< List of rend_authorized_client_t's of$/;"	m	struct:rend_service_t	file:
clockid_t	orconfig.h	/^typedef int clockid_t;$/;"	t
clog	link_handshake.h	/^  uint8_t clog[32];$/;"	m	struct:auth1_st
close	channel.h	/^  void (*close)(channel_listener_t *);$/;"	m	struct:channel_listener_s
close	channel.h	/^  void (*close)(channel_t *);$/;"	m	struct:channel_s
close	orconfig.h	2424;"	d
close_closeable_connections	main.c	/^close_closeable_connections(void)$/;"	f
close_log	log.c	/^close_log(logfile_t *victim)$/;"	f	file:
close_ms	circuitstats.h	/^  double close_ms;$/;"	m	struct:circuit_build_times_s
close_temp_logs	log.c	/^close_temp_logs(void)$/;"	f
closeable_connection_lst	main.c	/^static smartlist_t *closeable_connection_lst = NULL;$/;"	v	file:
cmd	or.h	/^  uint16_t cmd; \/** Command type *\/$/;"	m	struct:ext_or_cmd_t
cmov	ge_scalarmult_base.c	/^static void cmov(ge_precomp *t,ge_precomp *u,unsigned char b)$/;"	f	file:
cmp_addr_policies	policies.c	/^cmp_addr_policies(smartlist_t *a, smartlist_t *b)$/;"	f
cmp_cmux	circuitmux.h	/^  int (*cmp_cmux)(circuitmux_t *cmux_1, circuitmux_policy_data_t *pol_data_1,$/;"	m	struct:circuitmux_policy_s
cmp_int_strings_	dirvote.c	/^cmp_int_strings_(const void **_a, const void **_b)$/;"	f	file:
cmp_single_addr_policy	policies.c	/^cmp_single_addr_policy(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
cmult	curve25519-donna.c	/^cmult(limb *resultx, limb *resultz, const u8 *n, const limb *q) {$/;"	f	file:
cmux	channel.h	/^  circuitmux_t *cmux;$/;"	m	struct:channel_s
code	compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	m	struct:__anon111	file:
collapsed_circuits	entrynodes.h	/^  double collapsed_circuits; \/**< Number of fully built circuits that were$/;"	m	struct:entry_guard_t
command	or.h	/^  uint8_t command; \/**< The end-to-end relay command. *\/$/;"	m	struct:__anon9
command	or.h	/^  uint8_t command; \/**< Type of the cell: one of CELL_PADDING, CELL_CREATE,$/;"	m	struct:cell_t
command	or.h	/^  uint8_t command; \/**< cell command number. *\/$/;"	m	struct:testing_cell_stats_entry_t
command	or.h	/^  uint8_t command;$/;"	m	struct:socks_request_t
command	or.h	/^  uint8_t command;$/;"	m	struct:var_cell_t
command	or.h	/^  unsigned int command:2;$/;"	m	struct:config_line_t
command	or.h	/^  } command;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon25
command_allowed_before_handshake	channeltls.c	/^command_allowed_before_handshake(uint8_t command)$/;"	f	file:
command_arg	or.h	/^  char *command_arg; \/**< Argument for command-line option. *\/$/;"	m	struct:__anon24
command_handle_incoming_channel	command.c	/^command_handle_incoming_channel(channel_listener_t *listener, channel_t *chan)$/;"	f	file:
command_process_cell	command.c	/^command_process_cell(channel_t *chan, cell_t *cell)$/;"	f
command_process_create_cell	command.c	/^command_process_create_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_created_cell	command.c	/^command_process_created_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_destroy_cell	command.c	/^command_process_destroy_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_relay_cell	command.c	/^command_process_relay_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_var_cell	command.c	/^command_process_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
command_setup_channel	command.c	/^command_setup_channel(channel_t *chan)$/;"	f
command_setup_listener	command.c	/^command_setup_listener(channel_listener_t *listener)$/;"	f
command_time_process_cell	command.c	/^command_time_process_cell(cell_t *cell, channel_t *chan, int *time,$/;"	f	file:
commandline_only	confparse.h	/^  int commandline_only;$/;"	m	struct:config_abbrev_t
commit_max	rephist.c	/^commit_max(bw_array_t *b)$/;"	f	file:
compare_cached_resolves_by_expiry_	dns.c	/^compare_cached_resolves_by_expiry_(const void *_a, const void *_b)$/;"	f	file:
compare_cell_ewma_counts	circuitmux_ewma.c	/^compare_cell_ewma_counts(const void *p1, const void *p2)$/;"	f	file:
compare_certs_by_pubdates	routerlist.c	/^compare_certs_by_pubdates(const void **_a, const void **_b)$/;"	f	file:
compare_digest_to_routerstatus_entry	networkstatus.c	/^compare_digest_to_routerstatus_entry(const void *_key, const void **_member)$/;"	f
compare_digest_to_vote_routerstatus_entry	networkstatus.c	/^compare_digest_to_vote_routerstatus_entry(const void *_key,$/;"	f
compare_digests256_	container.c	/^compare_digests256_(const void **_a, const void **_b)$/;"	f	file:
compare_digests_	container.c	/^compare_digests_(const void **_a, const void **_b)$/;"	f	file:
compare_dir_src_ents_by_authority_id_	dirvote.c	/^compare_dir_src_ents_by_authority_id_(const void **_a, const void **_b)$/;"	f	file:
compare_duration_idx_	routerlist.c	/^compare_duration_idx_(const void *_d1, const void *_d2)$/;"	f	file:
compare_int_	rephist.c	/^compare_int_(const void *x, const void *y)$/;"	f	file:
compare_known_tor_addr_to_addr_policy	policies.c	/^compare_known_tor_addr_to_addr_policy(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
compare_known_tor_addr_to_addr_policy_noport	policies.c	/^compare_known_tor_addr_to_addr_policy_noport(const tor_addr_t *addr,$/;"	f	file:
compare_old_routers_by_identity_	routerlist.c	/^compare_old_routers_by_identity_(const void **_a, const void **_b)$/;"	f	file:
compare_orports_	dirvote.c	/^compare_orports_(const void **_a, const void **_b)$/;"	f	file:
compare_pairs_	directory.c	/^compare_pairs_(const void **a, const void **b)$/;"	f	file:
compare_ptrs_	container.c	/^compare_ptrs_(const void **_a, const void **_b)$/;"	f	file:
compare_routerinfo_by_id_digest_	routerlist.c	/^compare_routerinfo_by_id_digest_(const void **a, const void **b)$/;"	f	file:
compare_routerinfo_by_ip_and_bw_	dirserv.c	/^compare_routerinfo_by_ip_and_bw_(const void **a, const void **b)$/;"	f	file:
compare_signed_descriptors_by_age_	routerlist.c	/^compare_signed_descriptors_by_age_(const void **_a, const void **_b)$/;"	f	file:
compare_string_ptrs_	container.c	/^compare_string_ptrs_(const void **_a, const void **_b)$/;"	f	file:
compare_strs_	directory.c	/^compare_strs_(const void **a, const void **b)$/;"	f	file:
compare_tor_addr_to_node_policy	policies.c	/^compare_tor_addr_to_node_policy(const tor_addr_t *addr, uint16_t port,$/;"	f
compare_tor_addr_to_short_policy	policies.c	/^compare_tor_addr_to_short_policy(const tor_addr_t *addr, uint16_t port,$/;"	f
compare_tor_version_str_ptr_	routerparse.c	/^compare_tor_version_str_ptr_(const void **_a, const void **_b)$/;"	f	file:
compare_unknown_tor_addr_to_addr_policy	policies.c	/^compare_unknown_tor_addr_to_addr_policy(uint16_t port,$/;"	f	file:
compare_vote_routerstatus_entries	routerparse.c	/^compare_vote_routerstatus_entries(const void **_a, const void **_b)$/;"	f
compare_vote_rs	dirvote.c	/^compare_vote_rs(const vote_routerstatus_t *a, const vote_routerstatus_t *b)$/;"	f	file:
compare_vote_rs_	dirvote.c	/^compare_vote_rs_(const void **_a, const void **_b)$/;"	f	file:
compare_votes_by_authority_id_	dirvote.c	/^compare_votes_by_authority_id_(const void **_a, const void **_b)$/;"	f	file:
completed	geoip.c	/^  unsigned int completed:1; \/**< Is this request complete? *\/$/;"	m	struct:dirreq_map_entry_t	file:
completion_time	geoip.c	/^  struct timeval completion_time; \/**< When did the request succeed? *\/$/;"	m	struct:dirreq_map_entry_t	typeref:struct:dirreq_map_entry_t::timeval	file:
compress	torgzip.c	/^  int compress; \/**< True if we are compressing; false if we are inflating *\/$/;"	m	struct:tor_zlib_state_t	file:
compress_method_t	torgzip.h	/^} compress_method_t;$/;"	t	typeref:enum:__anon66
compute_consensus_method	dirvote.c	/^compute_consensus_method(smartlist_t *votes)$/;"	f	file:
compute_consensus_package_lines	dirvote.c	/^compute_consensus_package_lines(smartlist_t *votes)$/;"	f
compute_consensus_versions_list	dirvote.c	/^compute_consensus_versions_list(smartlist_t *lst, int n_versioning)$/;"	f	file:
compute_desc_id	rendcommon.c	/^compute_desc_id(rend_data_t *rend_data)$/;"	f	file:
compute_frac_paths_available	nodelist.c	/^compute_frac_paths_available(const networkstatus_t *consensus,$/;"	f	file:
compute_num_cpus	compat.c	/^compute_num_cpus(void)$/;"	f
compute_num_cpus_impl	compat.c	/^compute_num_cpus_impl(void)$/;"	f	file:
compute_publishserverdescriptor	config.c	/^compute_publishserverdescriptor(or_options_t *options)$/;"	f	file:
compute_real_max_mem_in_queues	config.c	/^compute_real_max_mem_in_queues(const uint64_t val, int log_guess)$/;"	f	file:
compute_retry_timeout	connection_edge.c	/^compute_retry_timeout(entry_connection_t *conn)$/;"	f	file:
compute_routerstatus_consensus	dirvote.c	/^compute_routerstatus_consensus(smartlist_t *votes, int consensus_method,$/;"	f	file:
compute_weighted_bandwidths	routerlist.c	/^compute_weighted_bandwidths(const smartlist_t *sl,$/;"	f	file:
concat_args	routerparse.c	/^  int concat_args;$/;"	m	struct:token_rule_t	file:
cond	compat_threads.h	/^	sgx_thread_cond_t cond;$/;"	m	struct:tor_cond_t
condition	workqueue.c	/^  tor_cond_t condition;$/;"	m	struct:threadpool_s	file:
conf_protocol	transports.h	/^  int conf_protocol; \/* the configuration protocol version used *\/$/;"	m	struct:__anon1
conf_root	TorSGX.cpp	/^char *conf_root = NULL;$/;"	v
conf_state	transports.h	/^  enum pt_proto_state conf_state; \/* the current configuration state *\/$/;"	m	struct:__anon1	typeref:enum:__anon1::pt_proto_state
config_abbrev_t	confparse.h	/^typedef struct config_abbrev_t {$/;"	s
config_abbrev_t	confparse.h	/^} config_abbrev_t;$/;"	t	typeref:struct:config_abbrev_t
config_assign	confparse.c	/^config_assign(const config_format_t *fmt, void *options, config_line_t *list,$/;"	f
config_assign_line	confparse.c	/^config_assign_line(const config_format_t *fmt, void *options,$/;"	f	file:
config_assign_value	confparse.c	/^config_assign_value(const config_format_t *fmt, void *options,$/;"	f	file:
config_clear	confparse.c	/^config_clear(const config_format_t *fmt, void *options,$/;"	f	file:
config_count_key	confparse.c	/^config_count_key(const config_line_t *a, const char *key)$/;"	f
config_count_options	confparse.c	/^config_count_options(const config_format_t *fmt)$/;"	f	file:
config_dump	confparse.c	/^config_dump(const config_format_t *fmt, const void *default_options,$/;"	f
config_dup	confparse.c	/^config_dup(const config_format_t *fmt, const void *old)$/;"	f
config_expand_abbrev	confparse.c	/^config_expand_abbrev(const config_format_t *fmt, const char *option,$/;"	f
config_find_option	confparse.c	/^config_find_option(const config_format_t *fmt, const char *key)$/;"	f
config_find_option_mutable	confparse.c	/^config_find_option_mutable(config_format_t *fmt, const char *key)$/;"	f
config_format_t	confparse.h	/^typedef struct config_format_t {$/;"	s
config_format_t	confparse.h	/^} config_format_t;$/;"	t	typeref:struct:config_format_t
config_free	confparse.c	/^config_free(const config_format_t *fmt, void *options)$/;"	f
config_free_all	config.c	/^config_free_all(void)$/;"	f
config_free_lines	confparse.c	/^config_free_lines(config_line_t *front)$/;"	f
config_get_assigned_option	confparse.c	/^config_get_assigned_option(const config_format_t *fmt, const void *options,$/;"	f
config_get_lines	confparse.c	/^config_get_lines(const char *string, config_line_t **result, int extended)$/;"	f
config_init	confparse.c	/^config_init(const config_format_t *fmt, void *options)$/;"	f
config_is_same	confparse.c	/^config_is_same(const config_format_t *fmt,$/;"	f
config_line_append	confparse.c	/^config_line_append(config_line_t **lst,$/;"	f
config_line_find	confparse.c	/^config_line_find(const config_line_t *lines,$/;"	f
config_line_t	or.h	/^typedef struct config_line_t {$/;"	s
config_line_t	or.h	/^} config_line_t;$/;"	t	typeref:struct:config_line_t
config_lines_dup	confparse.c	/^config_lines_dup(const config_line_t *inp)$/;"	f
config_lines_eq	confparse.c	/^config_lines_eq(config_line_t *a, config_line_t *b)$/;"	f
config_load_geoip_file_	config.c	/^config_load_geoip_file_(sa_family_t family,$/;"	f	file:
config_mark_lists_fragile	confparse.c	/^config_mark_lists_fragile(const config_format_t *fmt, void *options)$/;"	f	file:
config_maybe_load_geoip_files_	config.c	/^config_maybe_load_geoip_files_(const or_options_t *options,$/;"	f	file:
config_new	confparse.c	/^config_new(const config_format_t *fmt)$/;"	f
config_parse_commandline	config.c	/^config_parse_commandline(int argc, char **argv, int ignore_errors,$/;"	f
config_parse_interval	confparse.c	/^config_parse_interval(const char *s, int *ok)$/;"	f	file:
config_parse_memunit	confparse.c	/^config_parse_memunit(const char *s, int *ok)$/;"	f	file:
config_parse_msec_interval	confparse.c	/^config_parse_msec_interval(const char *s, int *ok)$/;"	f	file:
config_parse_units	confparse.c	/^config_parse_units(const char *val, struct unit_table_t *u, int *ok)$/;"	f	file:
config_parse_unix_port	config.c	/^config_parse_unix_port(const char *addrport, char **path_out)$/;"	f
config_register_addressmaps	config.c	/^config_register_addressmaps(const or_options_t *options)$/;"	f
config_reset	confparse.c	/^config_reset(const config_format_t *fmt, void *options,$/;"	f	file:
config_reset_line	confparse.c	/^config_reset_line(const config_format_t *fmt, void *options,$/;"	f	file:
config_type_t	confparse.h	/^typedef enum config_type_t {$/;"	g
config_type_t	confparse.h	/^} config_type_t;$/;"	t	typeref:enum:config_type_t
config_value_needs_escape	confparse.c	/^config_value_needs_escape(const char *value)$/;"	f	file:
config_var_description_t	confparse.h	/^typedef struct config_var_description_t {$/;"	s
config_var_description_t	confparse.h	/^} config_var_description_t;$/;"	t	typeref:struct:config_var_description_t
config_var_t	confparse.h	/^typedef struct config_var_t {$/;"	s
config_var_t	confparse.h	/^} config_var_t;$/;"	t	typeref:struct:config_var_t
configure_accounting	hibernate.c	/^configure_accounting(time_t now)$/;"	f
configure_backtrace_handler	backtrace.c	/^configure_backtrace_handler(const char *tor_version)$/;"	f
configure_libevent_logging	compat_libevent.c	/^configure_libevent_logging(void)$/;"	f
configure_nameservers	dns.c	/^configure_nameservers(int force)$/;"	f	file:
configure_proxy	transports.c	/^configure_proxy(managed_proxy_t *mp)$/;"	f
configured_ports	config.c	/^static smartlist_t *configured_ports = NULL;$/;"	v	file:
conn	channeltls.h	/^  or_connection_t *conn;$/;"	m	struct:channel_tls_s
conn	dns_structs.h	/^  edge_connection_t *conn;$/;"	m	struct:pending_connection_t
conn_array_index	or.h	/^  int conn_array_index; \/**< Index into the global connection array. *\/$/;"	m	struct:connection_t
conn_close_if_marked	main.c	/^conn_close_if_marked(int i)$/;"	f	file:
conn_get_buffer_age	circuitlist.c	/^conn_get_buffer_age(const connection_t *conn, uint32_t now)$/;"	f	file:
conn_id	rephist.c	/^  uint64_t conn_id; \/**< Connection ID *\/$/;"	m	struct:bidi_map_entry_t	file:
conn_listener_type_supports_af_unix	connection.c	/^conn_listener_type_supports_af_unix(int type)$/;"	f
conn_read_callback	main.c	/^conn_read_callback(evutil_socket_t fd, short event, void *_conn)$/;"	f	file:
conn_state_to_string	connection.c	/^conn_state_to_string(int type, int state)$/;"	f
conn_type_to_string	connection.c	/^conn_type_to_string(int type)$/;"	f
conn_write_callback	main.c	/^conn_write_callback(evutil_socket_t fd, short events, void *_conn)$/;"	f	file:
connected_cell_format_payload	connection_edge.c	/^connected_cell_format_payload(uint8_t *payload_out,$/;"	f
connected_cell_parse	relay.c	/^connected_cell_parse(const relay_header_t *rh, const cell_t *cell,$/;"	f
connection_about_to_close_connection	connection.c	/^connection_about_to_close_connection(connection_t *conn)$/;"	f
connection_add	main.h	22;"	d
connection_add_connecting	main.h	23;"	d
connection_add_impl	main.c	/^connection_add_impl(connection_t *conn, int is_connecting)$/;"	f
connection_ap_about_to_close	connection_edge.c	/^connection_ap_about_to_close(entry_connection_t *entry_conn)$/;"	f
connection_ap_attach_pending	connection_edge.c	/^connection_ap_attach_pending(void)$/;"	f
connection_ap_can_use_exit	connection_edge.c	/^connection_ap_can_use_exit(const entry_connection_t *conn, const node_t *exit)$/;"	f
connection_ap_detach_retriable	connection_edge.c	/^connection_ap_detach_retriable(entry_connection_t *conn,$/;"	f
connection_ap_expire_beginning	connection_edge.c	/^connection_ap_expire_beginning(void)$/;"	f
connection_ap_fail_onehop	connection_edge.c	/^connection_ap_fail_onehop(const char *failed_digest,$/;"	f
connection_ap_get_begincell_flags	connection_edge.c	/^connection_ap_get_begincell_flags(entry_connection_t *ap_conn)$/;"	f	file:
connection_ap_get_original_destination	connection_edge.c	/^connection_ap_get_original_destination(entry_connection_t *conn,$/;"	f	file:
connection_ap_handshake_attach_chosen_circuit	circuituse.c	/^connection_ap_handshake_attach_chosen_circuit(entry_connection_t *conn,$/;"	f
connection_ap_handshake_attach_circuit	circuituse.c	/^connection_ap_handshake_attach_circuit(entry_connection_t *conn)$/;"	f
connection_ap_handshake_process_socks	connection_edge.c	/^connection_ap_handshake_process_socks(entry_connection_t *conn)$/;"	f	file:
connection_ap_handshake_rewrite	connection_edge.c	/^connection_ap_handshake_rewrite(entry_connection_t *conn,$/;"	f
connection_ap_handshake_rewrite_and_attach	connection_edge.c	/^connection_ap_handshake_rewrite_and_attach(entry_connection_t *conn,$/;"	f
connection_ap_handshake_send_begin	connection_edge.c	/^connection_ap_handshake_send_begin(entry_connection_t *ap_conn)$/;"	f
connection_ap_handshake_send_resolve	connection_edge.c	/^connection_ap_handshake_send_resolve(entry_connection_t *ap_conn)$/;"	f
connection_ap_handshake_socks_got_resolved_cell	relay.c	/^connection_ap_handshake_socks_got_resolved_cell(entry_connection_t *conn,$/;"	f	file:
connection_ap_handshake_socks_reply	connection_edge.c	/^connection_ap_handshake_socks_reply(entry_connection_t *conn, char *reply,$/;"	f
connection_ap_handshake_socks_resolved_addr	connection_edge.c	/^connection_ap_handshake_socks_resolved_addr(entry_connection_t *conn,$/;"	f
connection_ap_make_link	connection_edge.c	/^connection_ap_make_link(connection_t *partner,$/;"	f
connection_ap_process_end_not_open	relay.c	/^connection_ap_process_end_not_open($/;"	f	file:
connection_ap_process_natd	connection_edge.c	/^connection_ap_process_natd(entry_connection_t *conn)$/;"	f	file:
connection_ap_process_transparent	connection_edge.c	/^connection_ap_process_transparent(entry_connection_t *conn)$/;"	f
connection_ap_rewrite_and_attach_if_allowed	connection_edge.c	/^connection_ap_rewrite_and_attach_if_allowed(entry_connection_t *conn,$/;"	f
connection_ap_supports_optimistic_data	connection_edge.c	/^connection_ap_supports_optimistic_data(const entry_connection_t *conn)$/;"	f	file:
connection_array	main.c	/^static smartlist_t *connection_array = NULL;$/;"	v	file:
connection_bucket_init	connection.c	/^connection_bucket_init(void)$/;"	f
connection_bucket_read_limit	connection.c	/^connection_bucket_read_limit(connection_t *conn, time_t now)$/;"	f	file:
connection_bucket_refill	connection.c	/^connection_bucket_refill(int milliseconds_elapsed, time_t now)$/;"	f
connection_bucket_refill	connection.c	/^connection_bucket_refill(int seconds_elapsed, time_t now)$/;"	f
connection_bucket_refill_helper	connection.c	/^connection_bucket_refill_helper(int *bucket, int rate, int burst,$/;"	f	file:
connection_bucket_round_robin	connection.c	/^connection_bucket_round_robin(int base, int priority,$/;"	f	file:
connection_bucket_should_increase	connection.c	/^connection_bucket_should_increase(int bucket, or_connection_t *conn)$/;"	f	file:
connection_bucket_write_limit	connection.c	/^connection_bucket_write_limit(connection_t *conn, time_t now)$/;"	f
connection_buckets_decrement	connection.c	/^connection_buckets_decrement(connection_t *conn, time_t now,$/;"	f	file:
connection_buckets_note_empty_ts	connection.c	/^connection_buckets_note_empty_ts(uint32_t *timestamp_var,$/;"	f
connection_close_immediate	connection.c	/^connection_close_immediate(connection_t *conn)$/;"	f
connection_configure_bufferevent_callbacks	connection.c	/^connection_configure_bufferevent_callbacks(connection_t *conn)$/;"	f
connection_connect	connection.c	/^connection_connect(connection_t *conn, const char *address,$/;"	f
connection_connect_sockaddr	connection.c	/^connection_connect_sockaddr(connection_t *conn,$/;"	f	file:
connection_connect_unix	connection.c	/^connection_connect_unix(connection_t *conn, const char *socket_path,$/;"	f
connection_consider_empty_read_buckets	connection.c	/^connection_consider_empty_read_buckets(connection_t *conn)$/;"	f	file:
connection_consider_empty_write_buckets	connection.c	/^connection_consider_empty_write_buckets(connection_t *conn)$/;"	f	file:
connection_control_closed	control.c	/^connection_control_closed(control_connection_t *conn)$/;"	f
connection_control_finished_flushing	control.c	/^connection_control_finished_flushing(control_connection_t *conn)$/;"	f
connection_control_process_inbuf	control.c	/^connection_control_process_inbuf(control_connection_t *conn)$/;"	f
connection_control_reached_eof	control.c	/^connection_control_reached_eof(control_connection_t *conn)$/;"	f
connection_counts_as_relayed_traffic	connection.c	/^connection_counts_as_relayed_traffic(connection_t *conn, time_t now)$/;"	f	file:
connection_dir_about_to_close	directory.c	/^connection_dir_about_to_close(dir_connection_t *dir_conn)$/;"	f
connection_dir_bridge_routerdesc_failed	directory.c	/^connection_dir_bridge_routerdesc_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_client_reached_eof	directory.c	/^connection_dir_client_reached_eof(dir_connection_t *conn)$/;"	f	file:
connection_dir_download_cert_failed	directory.c	/^connection_dir_download_cert_failed(dir_connection_t *conn, int status)$/;"	f	file:
connection_dir_download_routerdesc_failed	directory.c	/^connection_dir_download_routerdesc_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_finished_connecting	directory.c	/^connection_dir_finished_connecting(dir_connection_t *conn)$/;"	f
connection_dir_finished_flushing	directory.c	/^connection_dir_finished_flushing(dir_connection_t *conn)$/;"	f
connection_dir_get_by_purpose_and_resource	connection.c	/^connection_dir_get_by_purpose_and_resource(int purpose,$/;"	f
connection_dir_is_encrypted	directory.c	/^connection_dir_is_encrypted(dir_connection_t *conn)$/;"	f
connection_dir_process_inbuf	directory.c	/^connection_dir_process_inbuf(dir_connection_t *conn)$/;"	f
connection_dir_reached_eof	directory.c	/^connection_dir_reached_eof(dir_connection_t *conn)$/;"	f
connection_dir_request_failed	directory.c	/^connection_dir_request_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_retry_bridges	directory.c	/^connection_dir_retry_bridges(smartlist_t *descs)$/;"	f	file:
connection_dirserv_add_dir_bytes_to_outbuf	dirserv.c	/^connection_dirserv_add_dir_bytes_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_microdescs_to_outbuf	dirserv.c	/^connection_dirserv_add_microdescs_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_networkstatus_bytes_to_outbuf	dirserv.c	/^connection_dirserv_add_networkstatus_bytes_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_servers_to_outbuf	dirserv.c	/^connection_dirserv_add_servers_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_finish_spooling	dirserv.c	/^connection_dirserv_finish_spooling(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_flushed_some	dirserv.c	/^connection_dirserv_flushed_some(dir_connection_t *conn)$/;"	f
connection_dns_remove	dns.c	/^connection_dns_remove(edge_connection_t *conn)$/;"	f
connection_dump_buffer_mem_stats	connection.c	/^connection_dump_buffer_mem_stats(int severity)$/;"	f
connection_edge_about_to_close	connection_edge.c	/^connection_edge_about_to_close(edge_connection_t *edge_conn)$/;"	f	file:
connection_edge_compatible_with_circuit	connection_edge.c	/^connection_edge_compatible_with_circuit(const entry_connection_t *conn,$/;"	f
connection_edge_consider_sending_sendme	relay.c	/^connection_edge_consider_sending_sendme(edge_connection_t *conn)$/;"	f
connection_edge_destroy	connection_edge.c	/^connection_edge_destroy(circid_t circ_id, edge_connection_t *conn)$/;"	f
connection_edge_end	connection_edge.c	/^connection_edge_end(edge_connection_t *conn, uint8_t reason)$/;"	f
connection_edge_end_errno	connection_edge.c	/^connection_edge_end_errno(edge_connection_t *conn)$/;"	f
connection_edge_finished_connecting	connection_edge.c	/^connection_edge_finished_connecting(edge_connection_t *edge_conn)$/;"	f
connection_edge_finished_flushing	connection_edge.c	/^connection_edge_finished_flushing(edge_connection_t *conn)$/;"	f
connection_edge_flushed_some	connection_edge.c	/^connection_edge_flushed_some(edge_connection_t *conn)$/;"	f
connection_edge_is_rendezvous_stream	connection_edge.c	/^connection_edge_is_rendezvous_stream(edge_connection_t *conn)$/;"	f
connection_edge_package_raw_inbuf	relay.c	/^connection_edge_package_raw_inbuf(edge_connection_t *conn, int package_partial,$/;"	f
connection_edge_process_inbuf	connection_edge.c	/^connection_edge_process_inbuf(edge_connection_t *conn, int package_partial)$/;"	f
connection_edge_process_relay_cell	relay.c	/^connection_edge_process_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f	file:
connection_edge_process_relay_cell_not_open	relay.c	/^connection_edge_process_relay_cell_not_open($/;"	f	file:
connection_edge_process_resolved_cell	relay.c	/^connection_edge_process_resolved_cell(edge_connection_t *conn,$/;"	f
connection_edge_reached_eof	connection_edge.c	/^connection_edge_reached_eof(edge_connection_t *conn)$/;"	f
connection_edge_send_command	relay.c	/^connection_edge_send_command(edge_connection_t *fromconn,$/;"	f
connection_edge_update_circuit_isolation	connection_edge.c	/^connection_edge_update_circuit_isolation(const entry_connection_t *conn,$/;"	f
connection_enable_rate_limiting	connection.c	/^connection_enable_rate_limiting(connection_t *conn)$/;"	f
connection_exit_about_to_close	connection_edge.c	/^connection_exit_about_to_close(edge_connection_t *edge_conn)$/;"	f
connection_exit_begin_conn	connection_edge.c	/^connection_exit_begin_conn(cell_t *cell, circuit_t *circ)$/;"	f
connection_exit_begin_resolve	connection_edge.c	/^connection_exit_begin_resolve(cell_t *cell, or_circuit_t *circ)$/;"	f
connection_exit_connect	connection_edge.c	/^connection_exit_connect(edge_connection_t *edge_conn)$/;"	f
connection_exit_connect_dir	connection_edge.c	/^connection_exit_connect_dir(edge_connection_t *exitconn)$/;"	f	file:
connection_expire_held_open	connection.c	/^connection_expire_held_open(void)$/;"	f
connection_ext_or_auth_handle_client_hash	ext_orport.c	/^connection_ext_or_auth_handle_client_hash(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_handle_client_nonce	ext_orport.c	/^connection_ext_or_auth_handle_client_nonce(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_neg_auth_type	ext_orport.c	/^connection_ext_or_auth_neg_auth_type(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_process_inbuf	ext_orport.c	/^connection_ext_or_auth_process_inbuf(or_connection_t *or_conn)$/;"	f	file:
connection_ext_or_auth_send_result	ext_orport.c	/^connection_ext_or_auth_send_result(connection_t *conn, int success)$/;"	f	file:
connection_ext_or_auth_send_result_fail	ext_orport.c	337;"	d	file:
connection_ext_or_auth_send_result_success	ext_orport.c	335;"	d	file:
connection_ext_or_finished_flushing	ext_orport.c	/^connection_ext_or_finished_flushing(or_connection_t *conn)$/;"	f
connection_ext_or_handle_cmd_transport	ext_orport.c	/^connection_ext_or_handle_cmd_transport(or_connection_t *conn,$/;"	f	file:
connection_ext_or_handle_cmd_useraddr	ext_orport.c	/^connection_ext_or_handle_cmd_useraddr(connection_t *conn,$/;"	f	file:
connection_ext_or_process_inbuf	ext_orport.c	/^connection_ext_or_process_inbuf(or_connection_t *or_conn)$/;"	f
connection_ext_or_start_auth	ext_orport.c	/^connection_ext_or_start_auth(or_connection_t *or_conn)$/;"	f
connection_ext_or_transition	ext_orport.c	/^connection_ext_or_transition(or_connection_t *conn)$/;"	f	file:
connection_fetch_ext_or_cmd_from_buf	ext_orport.c	/^connection_fetch_ext_or_cmd_from_buf(connection_t *conn, ext_or_cmd_t **out)$/;"	f	file:
connection_fetch_from_buf	connection.c	/^connection_fetch_from_buf(char *string, size_t len, connection_t *conn)$/;"	f
connection_fetch_from_buf_http	connection.c	/^connection_fetch_from_buf_http(connection_t *conn,$/;"	f
connection_fetch_from_buf_line	connection.c	/^connection_fetch_from_buf_line(connection_t *conn, char *data,$/;"	f
connection_fetch_from_buf_socks_client	connection.c	/^connection_fetch_from_buf_socks_client(connection_t *conn,$/;"	f	file:
connection_fetch_var_cell_from_buf	connection_or.c	/^connection_fetch_var_cell_from_buf(or_connection_t *or_conn, var_cell_t **out)$/;"	f	file:
connection_finished_connecting	connection.c	/^connection_finished_connecting(connection_t *conn)$/;"	f	file:
connection_finished_flushing	connection.c	/^connection_finished_flushing(connection_t *conn)$/;"	f	file:
connection_flush	connection.c	/^connection_flush(connection_t *conn)$/;"	f
connection_flushed_some	connection.c	/^connection_flushed_some(connection_t *conn)$/;"	f	file:
connection_free_	connection.c	/^connection_free_(connection_t *conn)$/;"	f
connection_free_all	connection.c	/^connection_free_all(void)$/;"	f
connection_get_by_global_id	connection.c	/^connection_get_by_global_id(uint64_t id)$/;"	f
connection_get_by_type	connection.c	/^connection_get_by_type(int type)$/;"	f
connection_get_by_type_addr_port_purpose	connection.c	/^connection_get_by_type_addr_port_purpose(int type,$/;"	f
connection_get_by_type_state	connection.c	/^connection_get_by_type_state(int type, int state)$/;"	f
connection_get_by_type_state_rendquery	connection.c	/^connection_get_by_type_state_rendquery(int type, int state,$/;"	f
connection_get_inbuf_len	connection.h	/^connection_get_inbuf_len(connection_t *conn)$/;"	f
connection_get_outbuf_len	connection.h	/^connection_get_outbuf_len(connection_t *conn)$/;"	f
connection_get_rate_limit_totals	connection.c	/^connection_get_rate_limit_totals(uint64_t *read_out, uint64_t *written_out)$/;"	f
connection_handle_event_cb	connection.c	/^connection_handle_event_cb(struct bufferevent *bufev, short event, void *arg)$/;"	f
connection_handle_listener_read	connection.c	/^connection_handle_listener_read(connection_t *conn, int new_type)$/;"	f	file:
connection_handle_read	connection.c	/^connection_handle_read(connection_t *conn)$/;"	f
connection_handle_read_cb	connection.c	/^connection_handle_read_cb(struct bufferevent *bufev, void *arg)$/;"	f
connection_handle_read_impl	connection.c	/^connection_handle_read_impl(connection_t *conn)$/;"	f	file:
connection_handle_write	connection.c	/^connection_handle_write(connection_t *conn, int force)$/;"	f
connection_handle_write_cb	connection.c	/^connection_handle_write_cb(struct bufferevent *bufev, void *arg)$/;"	f
connection_handle_write_impl	connection.c	/^connection_handle_write_impl(connection_t *conn, int force)$/;"	f	file:
connection_in_array	main.c	/^connection_in_array(connection_t *conn)$/;"	f
connection_init	connection.c	/^connection_init(time_t now, connection_t *conn, int type, int socket_family)$/;"	f	file:
connection_init_accepted_conn	connection.c	/^connection_init_accepted_conn(connection_t *conn,$/;"	f	file:
connection_init_or_handshake_state	connection_or.c	/^connection_init_or_handshake_state(or_connection_t *conn, int started_here)$/;"	f
connection_is_listener	connection.c	/^connection_is_listener(connection_t *conn)$/;"	f
connection_is_on_closeable_list	main.c	/^connection_is_on_closeable_list(connection_t *conn)$/;"	f
connection_is_rate_limited	connection.c	/^connection_is_rate_limited(connection_t *conn)$/;"	f	file:
connection_is_reading	main.c	/^connection_is_reading(connection_t *conn)$/;"	f
connection_is_writing	main.c	/^connection_is_writing(connection_t *conn)$/;"	f
connection_link_connections	connection.c	/^connection_link_connections(connection_t *conn_a, connection_t *conn_b)$/;"	f
connection_listener_new	connection.c	/^connection_listener_new(const struct sockaddr *listensockaddr,$/;"	f	file:
connection_mark_all_noncontrol_connections	connection.c	/^connection_mark_all_noncontrol_connections(void)$/;"	f
connection_mark_all_noncontrol_listeners	connection.c	/^connection_mark_all_noncontrol_listeners(void)$/;"	f
connection_mark_and_flush	connection.h	84;"	d
connection_mark_and_flush_	connection.h	70;"	d
connection_mark_and_flush_internal	connection.h	64;"	d
connection_mark_and_flush_internal_	connection.h	55;"	d
connection_mark_for_close	connection.h	40;"	d
connection_mark_for_close_	connection.c	/^connection_mark_for_close_(connection_t *conn, int line, const char *file)$/;"	f
connection_mark_for_close_internal	connection.h	42;"	d
connection_mark_for_close_internal_	connection.c	/^connection_mark_for_close_internal_(connection_t *conn,$/;"	f
connection_mark_unattached_ap	connection_edge.h	17;"	d
connection_new	connection.c	/^connection_new(int type, int socket_family)$/;"	f
connection_or_about_to_close	connection_or.c	/^connection_or_about_to_close(or_connection_t *or_conn)$/;"	f
connection_or_block_renegotiation	connection_or.c	/^connection_or_block_renegotiation(or_connection_t *conn)$/;"	f
connection_or_change_state	connection_or.c	/^connection_or_change_state(or_connection_t *conn, uint8_t state)$/;"	f	file:
connection_or_check_valid_tls_handshake	connection_or.c	/^connection_or_check_valid_tls_handshake(or_connection_t *conn,$/;"	f	file:
connection_or_clear_ext_or_id_map	connection_or.c	/^connection_or_clear_ext_or_id_map(void)$/;"	f
connection_or_clear_identity_map	connection_or.c	/^connection_or_clear_identity_map(void)$/;"	f
connection_or_client_learned_peer_id	connection_or.c	/^connection_or_client_learned_peer_id(or_connection_t *conn,$/;"	f
connection_or_client_used	connection_or.c	/^connection_or_client_used(or_connection_t *conn)$/;"	f
connection_or_close_normally	connection_or.c	/^connection_or_close_normally(or_connection_t *orconn, int flush)$/;"	f
connection_or_compute_authenticate_cell_body	connection_or.c	/^connection_or_compute_authenticate_cell_body(or_connection_t *conn,$/;"	f
connection_or_connect_failed	connection_or.c	/^connection_or_connect_failed(or_connection_t *conn,$/;"	f
connection_or_digest_is_known_relay	connection_or.c	/^connection_or_digest_is_known_relay(const char *id_digest)$/;"	f
connection_or_finished_connecting	connection_or.c	/^connection_or_finished_connecting(or_connection_t *or_conn)$/;"	f
connection_or_finished_flushing	connection_or.c	/^connection_or_finished_flushing(or_connection_t *conn)$/;"	f
connection_or_flushed_some	connection_or.c	/^connection_or_flushed_some(or_connection_t *conn)$/;"	f
connection_or_get_by_ext_or_id	connection_or.c	/^connection_or_get_by_ext_or_id(const char *id)$/;"	f
connection_or_get_num_circuits	connection_or.c	/^connection_or_get_num_circuits(or_connection_t *conn)$/;"	f
connection_or_get_state_description	connection_or.c	/^connection_or_get_state_description(or_connection_t *orconn,$/;"	f	file:
connection_or_group_set_badness	connection_or.c	/^connection_or_group_set_badness(or_connection_t *head, int force)$/;"	f	file:
connection_or_handle_event_cb	connection_or.c	/^connection_or_handle_event_cb(struct bufferevent *bufev, short event,$/;"	f	file:
connection_or_init_conn_from_address	connection_or.c	/^connection_or_init_conn_from_address(or_connection_t *conn,$/;"	f
connection_or_is_bad_for_new_circs	connection_or.c	/^connection_or_is_bad_for_new_circs(or_connection_t *or_conn)$/;"	f	file:
connection_or_launch_v3_or_handshake	connection_or.c	/^connection_or_launch_v3_or_handshake(or_connection_t *conn)$/;"	f	file:
connection_or_mark_bad_for_new_circs	connection_or.c	/^connection_or_mark_bad_for_new_circs(or_connection_t *or_conn)$/;"	f	file:
connection_or_nonopen_was_started_here	connection_or.c	/^connection_or_nonopen_was_started_here(or_connection_t *conn)$/;"	f
connection_or_note_state_when_broken	connection_or.c	/^connection_or_note_state_when_broken(or_connection_t *orconn)$/;"	f	file:
connection_or_notify_error	connection_or.c	/^connection_or_notify_error(or_connection_t *conn,$/;"	f
connection_or_num_cells_writeable	connection_or.c	/^connection_or_num_cells_writeable(or_connection_t *conn)$/;"	f
connection_or_process_cells_from_inbuf	connection_or.c	/^connection_or_process_cells_from_inbuf(or_connection_t *conn)$/;"	f	file:
connection_or_process_inbuf	connection_or.c	/^connection_or_process_inbuf(or_connection_t *conn)$/;"	f
connection_or_reached_eof	connection_or.c	/^connection_or_reached_eof(or_connection_t *conn)$/;"	f
connection_or_remove_from_ext_or_id_map	connection_or.c	/^connection_or_remove_from_ext_or_id_map(or_connection_t *conn)$/;"	f
connection_or_remove_from_identity_map	connection_or.c	/^connection_or_remove_from_identity_map(or_connection_t *conn)$/;"	f
connection_or_report_broken_states	connection_or.c	/^connection_or_report_broken_states(int severity, int domain)$/;"	f
connection_or_send_auth_challenge_cell	connection_or.c	/^connection_or_send_auth_challenge_cell(or_connection_t *conn)$/;"	f
connection_or_send_certs_cell	connection_or.c	/^connection_or_send_certs_cell(or_connection_t *conn)$/;"	f
connection_or_send_versions	connection_or.c	/^connection_or_send_versions(or_connection_t *conn, int v3_plus)$/;"	f
connection_or_set_bad_connections	connection_or.c	/^connection_or_set_bad_connections(const char *digest, int force)$/;"	f
connection_or_set_canonical	connection_or.c	/^connection_or_set_canonical(or_connection_t *or_conn,$/;"	f
connection_or_set_ext_or_identifier	connection_or.c	/^connection_or_set_ext_or_identifier(or_connection_t *conn)$/;"	f
connection_or_set_identity_digest	connection_or.c	/^connection_or_set_identity_digest(or_connection_t *conn, const char *digest)$/;"	f	file:
connection_or_set_state_open	connection_or.c	/^connection_or_set_state_open(or_connection_t *conn)$/;"	f
connection_or_tls_renegotiated_cb	connection_or.c	/^connection_or_tls_renegotiated_cb(tor_tls_t *tls, void *_conn)$/;"	f	file:
connection_or_update_token_buckets	connection_or.c	/^connection_or_update_token_buckets(smartlist_t *conns,$/;"	f
connection_or_update_token_buckets_helper	connection_or.c	/^connection_or_update_token_buckets_helper(or_connection_t *conn, int reset,$/;"	f	file:
connection_or_write_cell_to_buf	connection_or.c	/^connection_or_write_cell_to_buf(const cell_t *cell, or_connection_t *conn)$/;"	f
connection_outbuf_too_full	connection.c	/^connection_outbuf_too_full(connection_t *conn)$/;"	f
connection_printf_to_buf	control.c	/^connection_printf_to_buf(control_connection_t *conn, const char *format, ...)$/;"	f	file:
connection_process_inbuf	connection.c	/^connection_process_inbuf(connection_t *conn, int package_partial)$/;"	f	file:
connection_proxy_connect	connection.c	/^connection_proxy_connect(connection_t *conn, int type)$/;"	f
connection_proxy_state_to_string	connection.c	/^connection_proxy_state_to_string(int state)$/;"	f	file:
connection_reached_eof	connection.c	/^connection_reached_eof(connection_t *conn)$/;"	f	file:
connection_read_https_proxy_response	connection.c	/^connection_read_https_proxy_response(connection_t *conn)$/;"	f	file:
connection_read_proxy_handshake	connection.c	/^connection_read_proxy_handshake(connection_t *conn)$/;"	f
connection_read_to_buf	connection.c	/^connection_read_to_buf(connection_t *conn, ssize_t *max_to_read,$/;"	f	file:
connection_remove	main.c	/^connection_remove(connection_t *conn)$/;"	f
connection_send_socks5_connect	connection.c	/^connection_send_socks5_connect(connection_t *conn)$/;"	f	file:
connection_should_read_from_linked_conn	main.c	/^connection_should_read_from_linked_conn(connection_t *conn)$/;"	f	file:
connection_speaks_cells	connection.h	201;"	d
connection_start_reading_from_linked_conn	main.c	/^connection_start_reading_from_linked_conn(connection_t *conn)$/;"	f	file:
connection_state_is_connecting	connection.c	/^connection_state_is_connecting(connection_t *conn)$/;"	f
connection_state_is_open	connection.c	/^connection_state_is_open(connection_t *conn)$/;"	f
connection_stop_reading_from_linked_conn	main.c	/^connection_stop_reading_from_linked_conn(connection_t *conn)$/;"	f
connection_t	or.h	/^typedef struct connection_t {$/;"	s
connection_t	or.h	/^} connection_t;$/;"	t	typeref:struct:connection_t
connection_tls_continue_handshake	connection_or.c	/^connection_tls_continue_handshake(or_connection_t *conn)$/;"	f
connection_tls_finish_handshake	connection_or.c	/^connection_tls_finish_handshake(or_connection_t *conn)$/;"	f	file:
connection_type_uses_bufferevent	connection.c	/^connection_type_uses_bufferevent(connection_t *conn)$/;"	f
connection_type_uses_bufferevent	connection.h	224;"	d
connection_unlink	main.c	/^connection_unlink(connection_t *conn)$/;"	f	file:
connection_unregister_events	main.c	/^connection_unregister_events(connection_t *conn)$/;"	f
connection_wants_to_flush	connection.c	/^connection_wants_to_flush(connection_t *conn)$/;"	f
connection_watch_events	main.c	/^connection_watch_events(connection_t *conn, watchable_events_t events)$/;"	f
connection_write_ext_or_command	ext_orport.c	/^connection_write_ext_or_command(connection_t *conn,$/;"	f
connection_write_str_to_buf	control.c	/^connection_write_str_to_buf(const char *s, control_connection_t *conn)$/;"	f	file:
connection_write_to_buf	connection.h	/^connection_write_to_buf(const char *string, size_t len, connection_t *conn)$/;"	f
connection_write_to_buf_zlib	connection.h	/^connection_write_to_buf_zlib(const char *string, size_t len,$/;"	f
conns_compare_by_buffer_age_	circuitlist.c	/^conns_compare_by_buffer_age_(const void **a_, const void **b_)$/;"	f	file:
consensus	dirvote.c	/^  networkstatus_t *consensus;$/;"	m	struct:pending_consensus_t	file:
consensus	networkstatus.c	/^  networkstatus_t *consensus;$/;"	m	struct:consensus_waiting_for_certs_t	file:
consensus_dl_status	networkstatus.c	/^static download_status_t consensus_dl_status[N_CONSENSUS_FLAVORS] =$/;"	v	file:
consensus_flavor_t	or.h	/^} consensus_flavor_t;$/;"	t	typeref:enum:__anon16
consensus_is_waiting_for_certs	networkstatus.c	/^consensus_is_waiting_for_certs(void)$/;"	f
consensus_method	or.h	/^  int consensus_method;$/;"	m	struct:networkstatus_t
consensus_method_is_supported	dirvote.c	/^consensus_method_is_supported(int method)$/;"	f	file:
consensus_method_range_t	dirvote.c	/^static const struct consensus_method_range_t {$/;"	s	file:
consensus_path_type_t	nodelist.h	/^} consensus_path_type_t;$/;"	t	typeref:enum:__anon99
consensus_waiting_for_certs	networkstatus.c	/^       consensus_waiting_for_certs[N_CONSENSUS_FLAVORS];$/;"	v	file:
consensus_waiting_for_certs_t	networkstatus.c	/^typedef struct consensus_waiting_for_certs_t {$/;"	s	file:
consensus_waiting_for_certs_t	networkstatus.c	/^} consensus_waiting_for_certs_t;$/;"	t	typeref:struct:consensus_waiting_for_certs_t	file:
consider_adding_dir_servers	config.c	/^consider_adding_dir_servers(const or_options_t *options,$/;"	f
consider_hibernation	hibernate.c	/^consider_hibernation(time_t now)$/;"	f
consider_plaintext_ports	connection_edge.c	/^consider_plaintext_ports(entry_connection_t *conn, uint16_t port)$/;"	f	file:
consider_publishable_server	router.c	/^consider_publishable_server(int force)$/;"	f
consider_recording_trackhost	circuituse.c	/^consider_recording_trackhost(const entry_connection_t *conn,$/;"	f	file:
consider_republishing_rend_descriptors	rendservice.c	/^static int consider_republishing_rend_descriptors = 1;$/;"	v	file:
consider_testing_reachability	router.c	/^consider_testing_reachability(int test_or, int test_dir)$/;"	f
construct_ntor_key_map	router.c	/^construct_ntor_key_map(void)$/;"	f
contact	or.h	/^  char *contact; \/**< Contact information for this voter. *\/$/;"	m	struct:networkstatus_voter_info_t
contact_info	or.h	/^  char *contact_info; \/**< Declared contact info for this router. *\/$/;"	m	struct:__anon14
content	orconfig.h	/^	char *content;$/;"	m	struct:_sgx_file
content_len	orconfig.h	/^	long content_len;$/;"	m	struct:_sgx_file
context	tortls.c	/^  tor_tls_context_t *context; \/** A link to the context object for this tls. *\/$/;"	m	struct:tor_tls_t	file:
contract256_modm	modm-donna-32bit.h	/^contract256_modm(unsigned char out[32], const bignum256modm in) {$/;"	f
contract256_modm	modm-donna-64bit.h	/^contract256_modm(unsigned char out[32], const bignum256modm in) {$/;"	f
contract256_slidingwindow_modm	modm-donna-32bit.h	/^contract256_slidingwindow_modm(signed char r[256], const bignum256modm s, int windowsize) {$/;"	f
contract256_slidingwindow_modm	modm-donna-64bit.h	/^contract256_slidingwindow_modm(signed char r[256], const bignum256modm s, int windowsize) {$/;"	f
contract256_window4_modm	modm-donna-32bit.h	/^contract256_window4_modm(signed char r[64], const bignum256modm in) {$/;"	f
contract256_window4_modm	modm-donna-64bit.h	/^contract256_window4_modm(signed char r[64], const bignum256modm in) {$/;"	f
control_adjust_event_log_severity	control.c	/^control_adjust_event_log_severity(void)$/;"	f
control_connection_new	connection.c	/^control_connection_new(int socket_family)$/;"	f
control_connection_t	or.h	/^typedef struct control_connection_t {$/;"	s
control_connection_t	or.h	/^} control_connection_t;$/;"	t	typeref:struct:control_connection_t
control_event_address_mapped	control.c	/^control_event_address_mapped(const char *from, const char *to, time_t expires,$/;"	f
control_event_bandwidth_used	control.c	/^control_event_bandwidth_used(uint32_t n_read, uint32_t n_written)$/;"	f
control_event_bootstrap	control.c	/^control_event_bootstrap(bootstrap_status_t status, int progress)$/;"	f
control_event_buildtimeout_set	control.c	/^control_event_buildtimeout_set(buildtimeout_set_event_t type,$/;"	f
control_event_circ_bandwidth_used	control.c	/^control_event_circ_bandwidth_used(void)$/;"	f
control_event_circuit_cannibalized	control.c	/^control_event_circuit_cannibalized(origin_circuit_t *circ,$/;"	f
control_event_circuit_cell_stats	control.c	/^control_event_circuit_cell_stats(void)$/;"	f
control_event_circuit_purpose_changed	control.c	/^control_event_circuit_purpose_changed(origin_circuit_t *circ,$/;"	f
control_event_circuit_status	control.c	/^control_event_circuit_status(origin_circuit_t *circ, circuit_status_event_t tp,$/;"	f
control_event_circuit_status_minor	control.c	/^control_event_circuit_status_minor(origin_circuit_t *circ,$/;"	f	file:
control_event_client_error	control.c	/^control_event_client_error(const char *format, ...)$/;"	f
control_event_client_status	control.c	/^control_event_client_status(int severity, const char *format, ...)$/;"	f
control_event_clients_seen	control.c	/^control_event_clients_seen(const char *controller_str)$/;"	f
control_event_conf_changed	control.c	/^control_event_conf_changed(const smartlist_t *elements)$/;"	f
control_event_conn_bandwidth	control.c	/^control_event_conn_bandwidth(connection_t *conn)$/;"	f
control_event_conn_bandwidth_used	control.c	/^control_event_conn_bandwidth_used(void)$/;"	f
control_event_descriptors_changed	control.c	/^control_event_descriptors_changed(smartlist_t *routers)$/;"	f
control_event_general_error	control.c	/^control_event_general_error(const char *format, ...)$/;"	f
control_event_general_status	control.c	/^control_event_general_status(int severity, const char *format, ...)$/;"	f
control_event_guard	control.c	/^control_event_guard(const char *nickname, const char *digest,$/;"	f
control_event_guard_deferred	entrynodes.c	/^control_event_guard_deferred(void)$/;"	f	file:
control_event_hs_descriptor_content	control.c	/^control_event_hs_descriptor_content(const char *onion_address,$/;"	f
control_event_hs_descriptor_failed	control.c	/^control_event_hs_descriptor_failed(const rend_data_t *rend_data,$/;"	f
control_event_hs_descriptor_receive_end	control.c	/^control_event_hs_descriptor_receive_end(const char *action,$/;"	f
control_event_hs_descriptor_received	control.c	/^control_event_hs_descriptor_received(const char *onion_address,$/;"	f
control_event_hs_descriptor_requested	control.c	/^control_event_hs_descriptor_requested(const rend_data_t *rend_query,$/;"	f
control_event_hs_descriptor_upload	control.c	/^control_event_hs_descriptor_upload(const char *service_id,$/;"	f
control_event_hs_descriptor_upload_end	control.c	/^control_event_hs_descriptor_upload_end(const char *action,$/;"	f
control_event_hs_descriptor_upload_failed	control.c	/^control_event_hs_descriptor_upload_failed(const char *id_digest,$/;"	f
control_event_hs_descriptor_uploaded	control.c	/^control_event_hs_descriptor_uploaded(const char *id_digest)$/;"	f
control_event_is_interesting	control.c	/^control_event_is_interesting(int event)$/;"	f
control_event_logmsg	control.c	/^control_event_logmsg(int severity, uint32_t domain, const char *msg)$/;"	f
control_event_my_descriptor_changed	control.c	/^control_event_my_descriptor_changed(void)$/;"	f
control_event_network_liveness_update	control.c	/^control_event_network_liveness_update(int liveness)$/;"	f
control_event_networkstatus_changed	control.c	/^control_event_networkstatus_changed(smartlist_t *statuses)$/;"	f
control_event_networkstatus_changed_helper	control.c	/^control_event_networkstatus_changed_helper(smartlist_t *statuses,$/;"	f	file:
control_event_networkstatus_changed_single	control.c	/^control_event_networkstatus_changed_single(const routerstatus_t *rs)$/;"	f
control_event_newconsensus	control.c	/^control_event_newconsensus(const networkstatus_t *consensus)$/;"	f
control_event_or_authdir_new_descriptor	control.c	/^control_event_or_authdir_new_descriptor(const char *action,$/;"	f
control_event_or_conn_status	control.c	/^control_event_or_conn_status(or_connection_t *conn, or_conn_status_event_t tp,$/;"	f
control_event_server_error	control.c	/^control_event_server_error(const char *format, ...)$/;"	f
control_event_server_status	control.c	/^control_event_server_status(int severity, const char *format, ...)$/;"	f
control_event_signal	control.c	/^control_event_signal(uintptr_t signal)$/;"	f
control_event_status	control.c	/^control_event_status(int type, int severity, const char *format, va_list args)$/;"	f	file:
control_event_stream_bandwidth	control.c	/^control_event_stream_bandwidth(edge_connection_t *edge_conn)$/;"	f
control_event_stream_bandwidth_used	control.c	/^control_event_stream_bandwidth_used(void)$/;"	f
control_event_stream_status	control.c	/^control_event_stream_status(entry_connection_t *conn, stream_status_event_t tp,$/;"	f
control_event_t	control.c	/^struct control_event_t {$/;"	s	file:
control_event_table	control.c	/^static const struct control_event_t control_event_table[] = {$/;"	v	typeref:struct:control_event_t	file:
control_event_tb_empty	control.c	/^control_event_tb_empty(const char *bucket, uint32_t read_empty_time,$/;"	f
control_event_transport_launched	control.c	/^control_event_transport_launched(const char *mode, const char *transport_name,$/;"	f
control_free_all	control.c	/^control_free_all(void)$/;"	f
control_initialize_event_queue	control.c	/^control_initialize_event_queue(void)$/;"	f
control_ports_write_to_file	control.c	/^control_ports_write_to_file(void)$/;"	f
control_setconf_helper	control.c	/^control_setconf_helper(control_connection_t *conn, uint32_t len, char *body,$/;"	f	file:
control_testing_set_global_event_mask	control.c	/^control_testing_set_global_event_mask(uint64_t mask)$/;"	f
control_update_global_event_mask	control.c	/^control_update_global_event_mask(void)$/;"	f
correct_time	rephist.c	/^correct_time(time_t t, time_t now, time_t stored_at, time_t started_measuring)$/;"	f	file:
correct_tm	compat.c	/^correct_tm(int islocal, const time_t *timep, struct tm *resultbuf,$/;"	f	file:
count	connection_or.c	/^  intptr_t count;$/;"	m	struct:broken_state_count_t	file:
count	directory.c	/^  uint64_t count; \/**< How many requests have we made? *\/$/;"	m	struct:request_t	file:
count_acceptable_nodes	circuitbuild.c	/^count_acceptable_nodes(smartlist_t *nodes)$/;"	f	file:
count_circuits	status.c	/^count_circuits(void)$/;"	f
count_established_intro_points	rendservice.c	/^count_established_intro_points(const rend_service_t *service)$/;"	f	file:
count_intro_point_circuits	rendservice.c	/^count_intro_point_circuits(const rend_service_t *service)$/;"	f	file:
count_loading_descriptors_progress	nodelist.c	/^count_loading_descriptors_progress(void)$/;"	f
count_pending_general_client_circuits	circuituse.c	/^count_pending_general_client_circuits(void)$/;"	f	file:
count_real_listeners	config.c	/^count_real_listeners(const smartlist_t *ports, int listenertype)$/;"	f	file:
count_usable_descriptors	nodelist.c	/^count_usable_descriptors(int *num_present, int *num_usable,$/;"	f	file:
counter0	aes.c	/^  uint32_t counter0;$/;"	m	struct:aes_cnt_cipher	file:
counter1	aes.c	/^  uint32_t counter1;$/;"	m	struct:aes_cnt_cipher	file:
counter2	aes.c	/^  uint32_t counter2;$/;"	m	struct:aes_cnt_cipher	file:
counter3	aes.c	/^  uint32_t counter3;$/;"	m	struct:aes_cnt_cipher	file:
countries	routerset.h	/^  bitarray_t *countries;$/;"	m	struct:routerset_t
country	geoip.c	/^  char country[3]; \/**< Two-letter country code. *\/$/;"	m	struct:c_hist_t	file:
country	geoip.c	/^  intptr_t country; \/**< An index into geoip_countries *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
country	geoip.c	/^  intptr_t country; \/**< An index into geoip_countries *\/$/;"	m	struct:geoip_ipv6_entry_t	file:
country	or.h	/^  country_t country;$/;"	m	struct:node_t
country_idxplus1_by_lc_code	geoip.c	/^static strmap_t *country_idxplus1_by_lc_code = NULL;$/;"	v	file:
country_names	routerset.h	/^  smartlist_t *country_names;$/;"	m	struct:routerset_t
country_t	or.h	/^typedef int16_t country_t;$/;"	t
countrycode	geoip.c	/^  char countrycode[3];$/;"	m	struct:geoip_country_t	file:
cpath	or.h	/^  crypt_path_t *cpath;$/;"	m	struct:__anon21
cpath	or.h	/^  crypt_path_t *cpath;$/;"	m	struct:origin_circuit_t
cpath_build_state_t	or.h	/^} cpath_build_state_t;$/;"	t	typeref:struct:__anon22
cpath_is_on_circuit	circuituse.c	/^cpath_is_on_circuit(origin_circuit_t *circ, crypt_path_t *crypt_path)$/;"	f	file:
cpath_layer	or.h	/^  struct crypt_path_t *cpath_layer;$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::crypt_path_t
cpath_ref_decref	circuitlist.c	/^cpath_ref_decref(crypt_path_reference_t *cpath_ref)$/;"	f	file:
cpd_check_t	util.h	/^typedef unsigned int cpd_check_t;$/;"	t
cpu_init	cpuworker.c	/^cpu_init(void)$/;"	f
cpu_svn	ias_ra.h	/^    sample_cpu_svn_t        cpu_svn;        \/\/ (  0) Security Version of the CPU$/;"	m	struct:sample_report_body_t
cpuworker_cancel_circ_handshake	cpuworker.c	/^cpuworker_cancel_circ_handshake(or_circuit_t *circ)$/;"	f
cpuworker_job_t	cpuworker.c	/^} cpuworker_job_t;$/;"	t	typeref:struct:cpuworker_job_u	file:
cpuworker_job_u	cpuworker.c	/^typedef struct cpuworker_job_u {$/;"	s	file:
cpuworker_log_onionskin_overhead	cpuworker.c	/^cpuworker_log_onionskin_overhead(int severity, int onionskin_type,$/;"	f
cpuworker_onion_handshake_replyfn	cpuworker.c	/^cpuworker_onion_handshake_replyfn(void *work_)$/;"	f	file:
cpuworker_onion_handshake_threadfn	cpuworker.c	/^cpuworker_onion_handshake_threadfn(void *state_, void *work_)$/;"	f	file:
cpuworker_reply_t	cpuworker.c	/^typedef struct cpuworker_reply_t {$/;"	s	file:
cpuworker_reply_t	cpuworker.c	/^} cpuworker_reply_t;$/;"	t	typeref:struct:cpuworker_reply_t	file:
cpuworker_request_t	cpuworker.c	/^typedef struct cpuworker_request_t {$/;"	s	file:
cpuworker_request_t	cpuworker.c	/^} cpuworker_request_t;$/;"	t	typeref:struct:cpuworker_request_t	file:
cpuworkers_rotate_keyinfo	cpuworker.c	/^cpuworkers_rotate_keyinfo(void)$/;"	f
crash_handler	backtrace.c	/^crash_handler(int sig, siginfo_t *si, void *ctx_)$/;"	f	file:
create_cell	cpuworker.c	/^  create_cell_t create_cell;$/;"	m	struct:cpuworker_request_t	file:
create_cell	onion.h	/^  create_cell_t create_cell;$/;"	m	struct:extend_cell_t
create_cell_format	onion.c	/^create_cell_format(cell_t *cell_out, const create_cell_t *cell_in)$/;"	f
create_cell_format_impl	onion.c	/^create_cell_format_impl(cell_t *cell_out, const create_cell_t *cell_in,$/;"	f	file:
create_cell_format_relayed	onion.c	/^create_cell_format_relayed(cell_t *cell_out, const create_cell_t *cell_in)$/;"	f
create_cell_init	onion.c	/^create_cell_init(create_cell_t *cell_out, uint8_t cell_type,$/;"	f
create_cell_parse	onion.c	/^create_cell_parse(create_cell_t *cell_out, const cell_t *cell_in)$/;"	f
create_cell_t	onion.h	/^typedef struct create_cell_t {$/;"	s
create_cell_t	onion.h	/^} create_cell_t;$/;"	t	typeref:struct:create_cell_t
create_managed_proxy_environment	transports.c	/^create_managed_proxy_environment(const managed_proxy_t *mp)$/;"	f	file:
create_socket	TorSGX.cpp	/^int create_socket(char url_str[]) {$/;"	f
create_unix_sockaddr	connection.c	/^create_unix_sockaddr(const char *listenaddress, char **readable_address,$/;"	f	file:
created_cell	cpuworker.c	/^  created_cell_t created_cell;$/;"	m	struct:cpuworker_reply_t	file:
created_cell	onion.h	/^  created_cell_t created_cell;$/;"	m	struct:extended_cell_t
created_cell_format	onion.c	/^created_cell_format(cell_t *cell_out, const created_cell_t *cell_in)$/;"	f
created_cell_parse	onion.c	/^created_cell_parse(created_cell_t *cell_out, const cell_t *cell_in)$/;"	f
created_cell_t	onion.h	/^typedef struct created_cell_t {$/;"	s
created_cell_t	onion.h	/^} created_cell_t;$/;"	t	typeref:struct:created_cell_t
created_ts	rendcache.h	/^  time_t created_ts;$/;"	m	struct:rend_cache_failure_intro_t
crecip	curve25519-donna.c	/^crecip(limb *out, const limb *z) {$/;"	f	file:
crypt_path_reference_t	or.h	/^} crypt_path_reference_t;$/;"	t	typeref:struct:__anon21
crypt_path_t	or.h	/^typedef struct crypt_path_t {$/;"	s
crypt_path_t	or.h	/^} crypt_path_t;$/;"	t	typeref:struct:crypt_path_t
crypto_add_spaces_to_fp	crypto.c	/^crypto_add_spaces_to_fp(char *out, size_t outlen, const char *in)$/;"	f
crypto_cipher_crypt_inplace	crypto.c	/^crypto_cipher_crypt_inplace(crypto_cipher_t *env, char *buf, size_t len)$/;"	f
crypto_cipher_decrypt	crypto.c	/^crypto_cipher_decrypt(crypto_cipher_t *env, char *to,$/;"	f
crypto_cipher_decrypt_with_iv	crypto.c	/^crypto_cipher_decrypt_with_iv(const char *key,$/;"	f
crypto_cipher_encrypt	crypto.c	/^crypto_cipher_encrypt(crypto_cipher_t *env, char *to,$/;"	f
crypto_cipher_encrypt_with_iv	crypto.c	/^crypto_cipher_encrypt_with_iv(const char *key,$/;"	f
crypto_cipher_free	crypto.c	/^crypto_cipher_free(crypto_cipher_t *env)$/;"	f
crypto_cipher_get_key	crypto.c	/^crypto_cipher_get_key(crypto_cipher_t *env)$/;"	f
crypto_cipher_new	crypto.c	/^crypto_cipher_new(const char *key)$/;"	f
crypto_cipher_new_with_iv	crypto.c	/^crypto_cipher_new_with_iv(const char *key, const char *iv)$/;"	f
crypto_cipher_t	crypto.c	/^struct crypto_cipher_t$/;"	s	file:
crypto_cipher_t	crypto.h	/^typedef struct crypto_cipher_t crypto_cipher_t;$/;"	t	typeref:struct:crypto_cipher_t
crypto_dh_compute_secret	crypto.c	/^crypto_dh_compute_secret(int severity, crypto_dh_t *dh,$/;"	f
crypto_dh_dup	crypto.c	/^crypto_dh_dup(const crypto_dh_t *dh)$/;"	f
crypto_dh_free	crypto.c	/^crypto_dh_free(crypto_dh_t *dh)$/;"	f
crypto_dh_generate_public	crypto.c	/^crypto_dh_generate_public(crypto_dh_t *dh)$/;"	f
crypto_dh_get_bytes	crypto.c	/^crypto_dh_get_bytes(crypto_dh_t *dh)$/;"	f
crypto_dh_get_dh_	crypto.c	/^crypto_dh_get_dh_(crypto_dh_t *dh)$/;"	f
crypto_dh_get_public	crypto.c	/^crypto_dh_get_public(crypto_dh_t *dh, char *pubkey, size_t pubkey_len)$/;"	f
crypto_dh_new	crypto.c	/^crypto_dh_new(int dh_type)$/;"	f
crypto_dh_t	crypto.c	/^struct crypto_dh_t {$/;"	s	file:
crypto_dh_t	crypto.h	/^typedef struct crypto_dh_t crypto_dh_t;$/;"	t	typeref:struct:crypto_dh_t
crypto_digest	crypto.c	/^crypto_digest(char *digest, const char *m, size_t len)$/;"	f
crypto_digest256	crypto.c	/^crypto_digest256(char *digest, const char *m, size_t len,$/;"	f
crypto_digest256_new	crypto.c	/^crypto_digest256_new(digest_algorithm_t algorithm)$/;"	f
crypto_digest_add_bytes	crypto.c	/^crypto_digest_add_bytes(crypto_digest_t *digest, const char *data,$/;"	f
crypto_digest_algorithm_get_name	crypto.c	/^crypto_digest_algorithm_get_name(digest_algorithm_t alg)$/;"	f
crypto_digest_algorithm_parse_name	crypto.c	/^crypto_digest_algorithm_parse_name(const char *name)$/;"	f
crypto_digest_all	crypto.c	/^crypto_digest_all(digests_t *ds_out, const char *m, size_t len)$/;"	f
crypto_digest_assign	crypto.c	/^crypto_digest_assign(crypto_digest_t *into,$/;"	f
crypto_digest_dup	crypto.c	/^crypto_digest_dup(const crypto_digest_t *digest)$/;"	f
crypto_digest_free	crypto.c	/^crypto_digest_free(crypto_digest_t *digest)$/;"	f
crypto_digest_get_digest	crypto.c	/^crypto_digest_get_digest(crypto_digest_t *digest,$/;"	f
crypto_digest_new	crypto.c	/^crypto_digest_new(void)$/;"	f
crypto_digest_smartlist	crypto.c	/^crypto_digest_smartlist(char *digest_out, size_t len_out,$/;"	f
crypto_digest_smartlist_prefix	crypto.c	/^crypto_digest_smartlist_prefix(char *digest_out, size_t len_out,$/;"	f
crypto_digest_t	crypto.c	/^struct crypto_digest_t {$/;"	s	file:
crypto_digest_t	crypto.h	/^typedef struct crypto_digest_t crypto_digest_t;$/;"	t	typeref:struct:crypto_digest_t
crypto_early_init	crypto.c	/^crypto_early_init(void)$/;"	f
crypto_early_initialized_	crypto.c	/^static int crypto_early_initialized_ = 0;$/;"	v	file:
crypto_expand_key_material_TAP	crypto.c	/^crypto_expand_key_material_TAP(const uint8_t *key_in, size_t key_in_len,$/;"	f
crypto_expand_key_material_rfc5869_sha256	crypto.c	/^crypto_expand_key_material_rfc5869_sha256($/;"	f
crypto_force_rand_ssleay	crypto.c	/^crypto_force_rand_ssleay(void)$/;"	f	file:
crypto_get_rsa_padding	crypto.c	/^crypto_get_rsa_padding(int padding)$/;"	f	file:
crypto_get_rsa_padding_overhead	crypto.c	/^crypto_get_rsa_padding_overhead(int padding)$/;"	f	file:
crypto_global_cleanup	crypto.c	/^crypto_global_cleanup(void)$/;"	f
crypto_global_init	crypto.c	/^crypto_global_init(int useAccel, const char *accelName, const char *accelDir)$/;"	f
crypto_global_initialized_	crypto.c	/^static int crypto_global_initialized_ = 0;$/;"	v	file:
crypto_hash_sha512	crypto_hash_sha512.h	5;"	d
crypto_hash_sha512_2	crypto_hash_sha512.h	10;"	d
crypto_hash_sha512_3	crypto_hash_sha512.h	22;"	d
crypto_hmac_sha256	crypto.c	/^crypto_hmac_sha256(char *hmac_out,$/;"	f
crypto_init_siphash_key	crypto.c	/^crypto_init_siphash_key(void)$/;"	f
crypto_int32	crypto_int32.h	7;"	d
crypto_int64	crypto_int64.h	7;"	d
crypto_log_errors	crypto.c	/^crypto_log_errors(int severity, const char *doing)$/;"	f	file:
crypto_log_errors	tor-gencert.c	/^crypto_log_errors(int severity, const char *doing)$/;"	f	file:
crypto_new_pk_from_rsa_	crypto.c	/^crypto_new_pk_from_rsa_(RSA *rsa)$/;"	f
crypto_openssl_get_header_version_str	crypto.c	/^crypto_openssl_get_header_version_str(void)$/;"	f
crypto_openssl_get_version_str	crypto.c	/^crypto_openssl_get_version_str(void)$/;"	f
crypto_openssl_header_version_str	crypto.c	/^static char *crypto_openssl_header_version_str = NULL;$/;"	v	file:
crypto_openssl_version_str	crypto.c	/^static char *crypto_openssl_version_str = NULL;$/;"	v	file:
crypto_pk_asn1_decode	crypto.c	/^crypto_pk_asn1_decode(const char *str, size_t len)$/;"	f
crypto_pk_asn1_encode	crypto.c	/^crypto_pk_asn1_encode(crypto_pk_t *pk, char *dest, size_t dest_len)$/;"	f
crypto_pk_base64_decode	crypto.c	/^crypto_pk_base64_decode(const char *str, size_t len)$/;"	f
crypto_pk_base64_encode	crypto.c	/^crypto_pk_base64_encode(const crypto_pk_t *pk, char **priv_out)$/;"	f
crypto_pk_check_key	crypto.c	/^crypto_pk_check_key(crypto_pk_t *env)$/;"	f
crypto_pk_cmp_keys	crypto.c	/^crypto_pk_cmp_keys(const crypto_pk_t *a, const crypto_pk_t *b)$/;"	f
crypto_pk_copy_full	crypto.c	/^crypto_pk_copy_full(crypto_pk_t *env)$/;"	f
crypto_pk_dup_key	crypto.c	/^crypto_pk_dup_key(crypto_pk_t *env)$/;"	f
crypto_pk_eq_keys	crypto.c	/^crypto_pk_eq_keys(const crypto_pk_t *a, const crypto_pk_t *b)$/;"	f
crypto_pk_free	crypto.c	/^crypto_pk_free(crypto_pk_t *env)$/;"	f
crypto_pk_generate_key	crypto.h	132;"	d
crypto_pk_generate_key_with_bits	crypto.c	/^crypto_pk_generate_key_with_bits(crypto_pk_t *env, int bits)$/;"	f
crypto_pk_get_all_digests	crypto.c	/^crypto_pk_get_all_digests(crypto_pk_t *pk, digests_t *digests_out)$/;"	f
crypto_pk_get_digest	crypto.c	/^crypto_pk_get_digest(const crypto_pk_t *pk, char *digest_out)$/;"	f
crypto_pk_get_evp_pkey_	crypto.c	/^crypto_pk_get_evp_pkey_(crypto_pk_t *env, int private)$/;"	f
crypto_pk_get_fingerprint	crypto.c	/^crypto_pk_get_fingerprint(crypto_pk_t *pk, char *fp_out, int add_space)$/;"	f
crypto_pk_get_hashed_fingerprint	crypto.c	/^crypto_pk_get_hashed_fingerprint(crypto_pk_t *pk, char *fp_out)$/;"	f
crypto_pk_get_rsa_	crypto.c	/^crypto_pk_get_rsa_(crypto_pk_t *env)$/;"	f
crypto_pk_key_is_private	crypto.c	/^crypto_pk_key_is_private(const crypto_pk_t *key)$/;"	f
crypto_pk_keysize	crypto.c	/^crypto_pk_keysize(const crypto_pk_t *env)$/;"	f
crypto_pk_new	crypto.c	/^crypto_pk_new(void)$/;"	f
crypto_pk_num_bits	crypto.c	/^crypto_pk_num_bits(crypto_pk_t *env)$/;"	f
crypto_pk_private_decrypt	crypto.c	/^crypto_pk_private_decrypt(crypto_pk_t *env, char *to,$/;"	f
crypto_pk_private_hybrid_decrypt	crypto.c	/^crypto_pk_private_hybrid_decrypt(crypto_pk_t *env,$/;"	f
crypto_pk_private_sign	crypto.c	/^crypto_pk_private_sign(const crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_private_sign_digest	crypto.c	/^crypto_pk_private_sign_digest(crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_public_checksig	crypto.c	/^crypto_pk_public_checksig(const crypto_pk_t *env, char *to,$/;"	f
crypto_pk_public_checksig_digest	crypto.c	/^crypto_pk_public_checksig_digest(crypto_pk_t *env, const char *data,$/;"	f
crypto_pk_public_encrypt	crypto.c	/^crypto_pk_public_encrypt(crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_public_exponent_ok	crypto.c	/^crypto_pk_public_exponent_ok(crypto_pk_t *env)$/;"	f
crypto_pk_public_hybrid_encrypt	crypto.c	/^crypto_pk_public_hybrid_encrypt(crypto_pk_t *env,$/;"	f
crypto_pk_read_private_key_from_filename	crypto.c	/^crypto_pk_read_private_key_from_filename(crypto_pk_t *env,$/;"	f
crypto_pk_read_private_key_from_string	crypto.c	/^crypto_pk_read_private_key_from_string(crypto_pk_t *env,$/;"	f
crypto_pk_read_public_key_from_string	crypto.c	/^crypto_pk_read_public_key_from_string(crypto_pk_t *env, const char *src,$/;"	f
crypto_pk_t	crypto.c	/^struct crypto_pk_t$/;"	s	file:
crypto_pk_t	crypto.h	/^typedef struct crypto_pk_t crypto_pk_t;$/;"	t	typeref:struct:crypto_pk_t
crypto_pk_write_key_to_string_impl	crypto.c	/^crypto_pk_write_key_to_string_impl(crypto_pk_t *env, char **dest,$/;"	f	file:
crypto_pk_write_private_key_to_filename	crypto.c	/^crypto_pk_write_private_key_to_filename(crypto_pk_t *env,$/;"	f
crypto_pk_write_private_key_to_string	crypto.c	/^crypto_pk_write_private_key_to_string(crypto_pk_t *env, char **dest,$/;"	f
crypto_pk_write_public_key_to_string	crypto.c	/^crypto_pk_write_public_key_to_string(crypto_pk_t *env, char **dest,$/;"	f
crypto_pwbox	crypto_pwbox.c	/^crypto_pwbox(uint8_t **out, size_t *outlen_out,$/;"	f
crypto_rand_double	crypto.c	/^crypto_rand_double(void)$/;"	f
crypto_rand_int	crypto.c	/^crypto_rand_int(unsigned int max)$/;"	f
crypto_rand_int_range	crypto.c	/^crypto_rand_int_range(unsigned int min, unsigned int max)$/;"	f
crypto_rand_time_range	crypto.c	/^crypto_rand_time_range(time_t min, time_t max)$/;"	f
crypto_rand_uint64	crypto.c	/^crypto_rand_uint64(uint64_t max)$/;"	f
crypto_rand_uint64_range	crypto.c	/^crypto_rand_uint64_range(uint64_t min, uint64_t max)$/;"	f
crypto_rand_unmocked	crypto.c	/^crypto_rand_unmocked(char *to, size_t n)$/;"	f
crypto_random_hostname	crypto.c	/^crypto_random_hostname(int min_rand_len, int max_rand_len, const char *prefix,$/;"	f
crypto_read_tagged_contents_from_file	crypto_format.c	/^crypto_read_tagged_contents_from_file(const char *fname,$/;"	f
crypto_seed_rng	crypto.c	/^crypto_seed_rng(void)$/;"	f
crypto_seed_weak_rng	crypto.c	/^crypto_seed_weak_rng(tor_weak_rng_t *rng)$/;"	f
crypto_set_tls_dh_prime	crypto.c	/^crypto_set_tls_dh_prime(void)$/;"	f
crypto_sign	crypto_sign.h	2;"	d
crypto_sign	sign.c	/^int crypto_sign($/;"	f
crypto_sign_keypair	crypto_sign.h	3;"	d
crypto_sign_keypair	keypair.c	/^int crypto_sign_keypair(unsigned char *pk,unsigned char *sk)$/;"	f
crypto_sign_open	crypto_sign.h	7;"	d
crypto_sign_open	open.c	/^int crypto_sign_open($/;"	f
crypto_sign_pubkey	crypto_sign.h	6;"	d
crypto_sign_pubkey	keypair.c	/^int crypto_sign_pubkey(unsigned char *pk,const unsigned char *sk)$/;"	f
crypto_sign_seckey	crypto_sign.h	4;"	d
crypto_sign_seckey	keypair.c	/^crypto_sign_seckey(unsigned char *sk)$/;"	f
crypto_sign_seckey_expand	crypto_sign.h	5;"	d
crypto_sign_seckey_expand	keypair.c	/^int crypto_sign_seckey_expand(unsigned char *sk, const unsigned char *skseed)$/;"	f
crypto_strongest_rand	crypto.c	/^crypto_strongest_rand(uint8_t *out, size_t out_len)$/;"	f
crypto_thread_cleanup	crypto.c	/^crypto_thread_cleanup(void)$/;"	f
crypto_uint32	crypto_int32.h	8;"	d
crypto_uint32	crypto_uint32.h	3;"	d
crypto_uint64	crypto_int64.h	8;"	d
crypto_uint64	crypto_uint64.h	3;"	d
crypto_unpwbox	crypto_pwbox.c	/^crypto_unpwbox(uint8_t **out, size_t *outlen_out,$/;"	f
crypto_verify_32	crypto_verify_32.h	3;"	d
crypto_write_tagged_contents_to_file	crypto_format.c	/^crypto_write_tagged_contents_to_file(const char *fname,$/;"	f
ctr_buf	aes.c	/^  } ctr_buf;$/;"	m	struct:aes_cnt_cipher	typeref:union:aes_cnt_cipher::__anon115	file:
ctx	tortls.c	/^  SSL_CTX *ctx;$/;"	m	struct:tor_tls_context_t	file:
cur_fn	TorSGX.cpp	/^static void (* cur_fn) (void *) = NULL;$/;"	v	file:
cur_obs_idx	rephist.c	/^  int cur_obs_idx; \/**< Current position in obs. *\/$/;"	m	struct:bw_array_t	file:
cur_obs_time	rephist.c	/^  time_t cur_obs_time; \/**< Time represented in obs[cur_obs_idx] *\/$/;"	m	struct:bw_array_t	file:
current_auth_key	routerkeys.c	/^static ed25519_keypair_t *current_auth_key = NULL;$/;"	v	file:
current_consensus	networkstatus.c	47;"	d	file:
current_md_consensus	networkstatus.c	/^static networkstatus_t *current_md_consensus = NULL;$/;"	v	file:
current_ns_consensus	networkstatus.c	/^static networkstatus_t *current_ns_consensus = NULL;$/;"	v	file:
curve25519_add	curve25519-donna-32bit.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add	curve25519-donna-64bit.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add	curve25519-donna-sse2.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	curve25519-donna-32bit.h	/^curve25519_add_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	curve25519-donna-64bit.h	/^curve25519_add_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	curve25519-donna-sse2.h	99;"	d
curve25519_add_packed32	curve25519-donna-sse2.h	/^curve25519_add_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_add_reduce	curve25519-donna-32bit.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce	curve25519-donna-64bit.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce	curve25519-donna-sse2.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce_packed32	curve25519-donna-sse2.h	/^curve25519_add_reduce_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_basepoint_impl	crypto_curve25519.c	/^curve25519_basepoint_impl(uint8_t *output, const uint8_t *secret)$/;"	f
curve25519_basepoint_spot_check	crypto_curve25519.c	/^curve25519_basepoint_spot_check(void)$/;"	f	file:
curve25519_contract	curve25519-donna-32bit.h	/^curve25519_contract(unsigned char out[32], const bignum25519 in) {$/;"	f
curve25519_contract	curve25519-donna-64bit.h	/^curve25519_contract(unsigned char *out, const bignum25519 input) {$/;"	f
curve25519_contract	curve25519-donna-sse2.h	/^curve25519_contract(unsigned char out[32], const bignum25519 in) {$/;"	f
curve25519_contract_carry	curve25519-donna-64bit.h	335;"	d
curve25519_contract_carry_final	curve25519-donna-64bit.h	344;"	d
curve25519_contract_carry_full	curve25519-donna-64bit.h	341;"	d
curve25519_copy	curve25519-donna-32bit.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_copy	curve25519-donna-64bit.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_copy	curve25519-donna-sse2.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_donna	curve25519-donna.c	/^curve25519_donna(u8 *mypublic, const u8 *secret, const u8 *basepoint) {$/;"	f
curve25519_expand	curve25519-donna-32bit.h	/^curve25519_expand(bignum25519 out, const unsigned char in[32]) {$/;"	f
curve25519_expand	curve25519-donna-64bit.h	/^curve25519_expand(bignum25519 out, const unsigned char *in) {$/;"	f
curve25519_expand	curve25519-donna-sse2.h	/^curve25519_expand(bignum25519 out, const unsigned char in[32]) {$/;"	f
curve25519_handshake	crypto_curve25519.c	/^curve25519_handshake(uint8_t *output,$/;"	f
curve25519_impl	crypto_curve25519.c	/^curve25519_impl(uint8_t *output, const uint8_t *secret,$/;"	f
curve25519_init	crypto_curve25519.c	/^curve25519_init(void)$/;"	f
curve25519_key_map	onion.h	/^  di_digest256_map_t *curve25519_key_map;$/;"	m	struct:server_onion_keys_t
curve25519_keypair_generate	crypto_curve25519.c	/^curve25519_keypair_generate(curve25519_keypair_t *keypair_out,$/;"	f
curve25519_keypair_read_from_file	crypto_curve25519.c	/^curve25519_keypair_read_from_file(curve25519_keypair_t *keypair_out,$/;"	f
curve25519_keypair_t	crypto_curve25519.h	/^typedef struct curve25519_keypair_t {$/;"	s
curve25519_keypair_t	crypto_curve25519.h	/^} curve25519_keypair_t;$/;"	t	typeref:struct:curve25519_keypair_t
curve25519_keypair_write_to_file	crypto_curve25519.c	/^curve25519_keypair_write_to_file(const curve25519_keypair_t *keypair,$/;"	f
curve25519_move_conditional_bytes	curve25519-donna-32bit.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint32_t flag) {$/;"	f
curve25519_move_conditional_bytes	curve25519-donna-64bit.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint64_t flag) {$/;"	f
curve25519_move_conditional_bytes	curve25519-donna-sse2.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint32_t flag) {$/;"	f
curve25519_mul	curve25519-donna-32bit.h	/^curve25519_mul(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_mul	curve25519-donna-64bit.h	/^curve25519_mul(bignum25519 out, const bignum25519 in2, const bignum25519 in) {$/;"	f
curve25519_mul	curve25519-donna-sse2.h	/^curve25519_mul(bignum25519 out, const bignum25519 r, const bignum25519 s) {$/;"	f
curve25519_mul_noinline	curve25519-donna-32bit.h	152;"	d
curve25519_mul_noinline	curve25519-donna-64bit.h	/^curve25519_mul_noinline(bignum25519 out, const bignum25519 in2, const bignum25519 in) {$/;"	f
curve25519_mul_noinline	curve25519-donna-sse2.h	/^curve25519_mul_noinline(bignum25519 out, const bignum25519 r, const bignum25519 s) {$/;"	f
curve25519_mul_packed64	curve25519-donna-sse2.h	/^curve25519_mul_packed64(packedelem64 *out, const packedelem64 *r, const packedelem64 *s) {$/;"	f
curve25519_neg	curve25519-donna-32bit.h	/^curve25519_neg(bignum25519 out, const bignum25519 a) {$/;"	f
curve25519_neg	curve25519-donna-64bit.h	/^curve25519_neg(bignum25519 out, const bignum25519 a) {$/;"	f
curve25519_neg	curve25519-donna-sse2.h	/^curve25519_neg(bignum25519 out, const bignum25519 b) {$/;"	f
curve25519_onion_key	or.h	/^  curve25519_public_key_t curve25519_onion_key;$/;"	m	struct:extend_info_t
curve25519_onion_key	router.c	/^static curve25519_keypair_t curve25519_onion_key;$/;"	v	file:
curve25519_pow_two252m3	curve25519-donna-helpers.h	/^curve25519_pow_two252m3(bignum25519 two252m3, const bignum25519 z) {$/;"	f
curve25519_pow_two5mtwo0_two250mtwo0	curve25519-donna-helpers.h	/^curve25519_pow_two5mtwo0_two250mtwo0(bignum25519 b) {$/;"	f
curve25519_public_from_base64	crypto_format.c	/^curve25519_public_from_base64(curve25519_public_key_t *pkey,$/;"	f
curve25519_public_key_generate	crypto_curve25519.c	/^curve25519_public_key_generate(curve25519_public_key_t *key_out,$/;"	f
curve25519_public_key_is_ok	crypto_curve25519.c	/^curve25519_public_key_is_ok(const curve25519_public_key_t *key)$/;"	f
curve25519_public_key_t	crypto_curve25519.h	/^typedef struct curve25519_public_key_t {$/;"	s
curve25519_public_key_t	crypto_curve25519.h	/^} curve25519_public_key_t;$/;"	t	typeref:struct:curve25519_public_key_t
curve25519_public_to_base64	crypto_format.c	/^curve25519_public_to_base64(char *output,$/;"	f
curve25519_rand_seckey_bytes	crypto_curve25519.c	/^curve25519_rand_seckey_bytes(uint8_t *out, int extra_strong)$/;"	f
curve25519_recip	curve25519-donna-helpers.h	/^curve25519_recip(bignum25519 out, const bignum25519 z) {$/;"	f
curve25519_secret_key_generate	crypto_curve25519.c	/^curve25519_secret_key_generate(curve25519_secret_key_t *key_out,$/;"	f
curve25519_secret_key_t	crypto_curve25519.h	/^typedef struct curve25519_secret_key_t {$/;"	s
curve25519_secret_key_t	crypto_curve25519.h	/^} curve25519_secret_key_t;$/;"	t	typeref:struct:curve25519_secret_key_t
curve25519_set_impl_params	crypto_curve25519.c	/^curve25519_set_impl_params(int use_ed)$/;"	f
curve25519_square	curve25519-donna-32bit.h	/^curve25519_square(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_square	curve25519-donna-64bit.h	/^curve25519_square(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_square	curve25519-donna-sse2.h	431;"	d
curve25519_square_packed64	curve25519-donna-sse2.h	/^curve25519_square_packed64(packedelem64 *out, const packedelem64 *r) {$/;"	f
curve25519_square_times	curve25519-donna-32bit.h	/^curve25519_square_times(bignum25519 out, const bignum25519 in, int count) {$/;"	f
curve25519_square_times	curve25519-donna-64bit.h	/^curve25519_square_times(bignum25519 out, const bignum25519 in, uint64_t count) {$/;"	f
curve25519_square_times	curve25519-donna-sse2.h	/^curve25519_square_times(bignum25519 r, const bignum25519 in, int count) {$/;"	f
curve25519_sub	curve25519-donna-32bit.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub	curve25519-donna-64bit.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub	curve25519-donna-sse2.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	curve25519-donna-32bit.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	curve25519-donna-64bit.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	curve25519-donna-sse2.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic_packed32	curve25519-donna-sse2.h	/^curve25519_sub_after_basic_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_sub_packed32	curve25519-donna-sse2.h	/^curve25519_sub_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_sub_reduce	curve25519-donna-32bit.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_reduce	curve25519-donna-64bit.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_reduce	curve25519-donna-sse2.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_swap64	curve25519-donna-sse2.h	/^curve25519_swap64(packedelem64 *out) {$/;"	f
curve25519_swap_conditional	curve25519-donna-32bit.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint32_t iswap) {$/;"	f
curve25519_swap_conditional	curve25519-donna-64bit.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint64_t iswap) {$/;"	f
curve25519_swap_conditional	curve25519-donna-sse2.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint32_t iswap) {$/;"	f
curve25519_tangle32	curve25519-donna-sse2.h	/^curve25519_tangle32(packedelem32 *out, const bignum25519 x, const bignum25519 z) {$/;"	f
curve25519_tangle64	curve25519-donna-sse2.h	/^curve25519_tangle64(packedelem64 *out, const bignum25519 x, const bignum25519 z) {$/;"	f
curve25519_tangle64_from32	curve25519-donna-sse2.h	/^curve25519_tangle64_from32(packedelem64 *a, packedelem64 *b, const packedelem32 *c, const packedelem32 *d) {$/;"	f
curve25519_tangleone64	curve25519-donna-sse2.h	/^curve25519_tangleone64(packedelem64 *out, const bignum25519 x) {$/;"	f
curve25519_untangle32	curve25519-donna-sse2.h	/^curve25519_untangle32(bignum25519 x, bignum25519 z, const packedelem32 *in) {$/;"	f
curve25519_untangle64	curve25519-donna-sse2.h	/^curve25519_untangle64(bignum25519 x, bignum25519 z, const packedelem64 *in) {$/;"	f
curve25519_use_ed	crypto_curve25519.c	/^static int curve25519_use_ed = -1;$/;"	v	file:
curved25519_key	ed25519.h	/^typedef unsigned char curved25519_key[32];$/;"	t
curved25519_key	ed25519_donna_tor.h	/^typedef unsigned char curved25519_key[32];$/;"	t
curved25519_scalarmult_basepoint	ed25519_tor.c	/^ED25519_FN(curved25519_scalarmult_basepoint) (curved25519_key pk, const curved25519_key e) {$/;"	f
d	crypto.c	/^  } d; \/**< State for the digest we're using.  Only one member of the$/;"	m	struct:crypto_digest_t	typeref:union:crypto_digest_t::__anon44	file:
d	crypto.h	/^  char d[N_DIGEST_ALGORITHMS][DIGEST256_LEN];$/;"	m	struct:__anon65
d	dircollate.c	/^  uint8_t d[DIGEST_LEN + DIGEST256_LEN];$/;"	m	struct:ddmap_entry_s	file:
d	ge_frombytes.c	/^static const fe d = {$/;"	v	file:
d2	ge_p3_to_cached.c	/^static const fe d2 = {$/;"	v	file:
daemon_filedes	util.c	/^static int daemon_filedes[2];$/;"	v	file:
data	buffers.h	/^  char *data; \/**< A pointer to the first byte of data stored in <b>mem<\/b>. *\/$/;"	m	struct:chunk_t
data	compat.h	/^  const char *data; \/**< Mapping of the file's contents. *\/$/;"	m	struct:tor_mmap_t
data	compat_libevent.c	/^  void *data;$/;"	m	struct:periodic_timer_t	file:
data	orconfig.h	/^    epoll_data_t data;      \/* User data variable *\/$/;"	m	struct:epoll_event
data	pwbox.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) data;$/;"	m	struct:pwbox_encoded_st
datalen	buffers.h	/^  size_t datalen; \/**< How many bytes is this buffer holding right now? *\/$/;"	m	struct:buf_t
datalen	buffers.h	/^  size_t datalen; \/**< The number of bytes stored in this chunk *\/$/;"	m	struct:chunk_t
days_per_month	util.c	/^static const int days_per_month[] =$/;"	v	file:
dbl	routerlist.h	/^  double dbl;$/;"	m	union:u64_dbl_t
ddmap_entry_eq	dircollate.c	/^ddmap_entry_eq(const ddmap_entry_t *a, const ddmap_entry_t *b)$/;"	f	file:
ddmap_entry_free	dircollate.c	/^ddmap_entry_free(ddmap_entry_t *e)$/;"	f	file:
ddmap_entry_hash	dircollate.c	/^ddmap_entry_hash(const ddmap_entry_t *ent)$/;"	f	file:
ddmap_entry_new	dircollate.c	/^ddmap_entry_new(int n_votes)$/;"	f	file:
ddmap_entry_s	dircollate.c	/^typedef struct ddmap_entry_s {$/;"	s	file:
ddmap_entry_set_digests	dircollate.c	/^ddmap_entry_set_digests(ddmap_entry_t *ent,$/;"	f	file:
ddmap_entry_t	dircollate.c	/^} ddmap_entry_t;$/;"	t	typeref:struct:ddmap_entry_s	file:
decide_if_publishable_server	router.c	/^decide_if_publishable_server(void)$/;"	f	file:
decide_next_handshake_type	onion.c	/^decide_next_handshake_type(void)$/;"	f	file:
decide_num_guards	entrynodes.c	/^decide_num_guards(const or_options_t *options, int for_directory)$/;"	f
decide_to_advertise_dirport	router.c	/^decide_to_advertise_dirport(const or_options_t *options, uint16_t dir_port)$/;"	f	file:
declared_family	or.h	/^  smartlist_t *declared_family; \/**< Nicknames of router which this router$/;"	m	struct:__anon14
decode_address_from_payload	relay.c	/^decode_address_from_payload(tor_addr_t *addr_out, const uint8_t *payload,$/;"	f
decode_escaped_string	control.c	/^decode_escaped_string(const char *start, size_t in_len_max,$/;"	f	file:
decode_hashed_passwords	control.c	/^decode_hashed_passwords(config_line_t *passwords)$/;"	f
default_authorities	config.c	/^static const char *default_authorities[] = {$/;"	v	file:
default_chunk_size	buffers.h	/^  size_t default_chunk_size; \/**< Don't allocate any chunks smaller than$/;"	m	struct:buf_t
delete_log	log.c	/^delete_log(logfile_t *victim)$/;"	f	file:
deliver_window	or.h	/^  int deliver_window; \/**< How many cells are we willing to deliver originating$/;"	m	struct:crypt_path_t
deliver_window	or.h	/^  int deliver_window; \/**< How many more relay cells can end at me? *\/$/;"	m	struct:edge_connection_t
deliver_window	or.h	/^  int deliver_window;$/;"	m	struct:circuit_t
desc	control.c	/^  const char *desc; \/**< Description of the variable. *\/$/;"	m	struct:getinfo_item_t	file:
desc	rendcache.h	/^  char *desc; \/**< Service descriptor *\/$/;"	m	struct:rend_cache_entry_t
desc	rendservice.c	/^  rend_service_descriptor_t *desc; \/**< Current hidden service descriptor. *\/$/;"	m	struct:rend_service_t	file:
desc_by_eid_map	or.h	/^  struct digest_sd_map_t *desc_by_eid_map;$/;"	m	struct:__anon17	typeref:struct:__anon17::digest_sd_map_t
desc_clean_since	router.c	/^static time_t desc_clean_since = 0;$/;"	v	file:
desc_digest_map	or.h	/^  digestmap_t *desc_digest_map;$/;"	m	struct:networkstatus_t
desc_digest_map	or.h	/^  struct digest_sd_map_t *desc_digest_map;$/;"	m	struct:__anon17	typeref:struct:__anon17::digest_sd_map_t
desc_dirty_reason	router.c	/^static const char *desc_dirty_reason = NULL;$/;"	v	file:
desc_extrainfo	router.c	/^static extrainfo_t *desc_extrainfo = NULL;$/;"	v	file:
desc_gen_reason	router.c	/^static const char *desc_gen_reason = NULL;$/;"	v	file:
desc_get_store	routerlist.c	/^desc_get_store(routerlist_t *rl, const signed_descriptor_t *sd)$/;"	f	file:
desc_id	or.h	/^  char desc_id[DIGEST_LEN]; \/**< Descriptor ID. *\/$/;"	m	struct:rend_encoded_v2_service_descriptor_t
desc_id_fetch	or.h	/^  char desc_id_fetch[DIGEST_LEN];$/;"	m	struct:rend_data_t
desc_is_dirty	rendservice.c	/^  time_t desc_is_dirty; \/**< Time at which changes to the hidden service$/;"	m	struct:rend_service_t	file:
desc_needs_upload	router.c	/^static int desc_needs_upload = 0;$/;"	v	file:
desc_routerinfo	router.c	/^static routerinfo_t *desc_routerinfo = NULL;$/;"	v	file:
desc_store	or.h	/^  desc_store_t desc_store;$/;"	m	struct:__anon17
desc_store_t	or.h	/^typedef struct desc_store_t {$/;"	s
desc_store_t	or.h	/^} desc_store_t;$/;"	t	typeref:struct:desc_store_t
desc_str	or.h	/^  char *desc_str; \/**< Descriptor string. *\/$/;"	m	struct:rend_encoded_v2_service_descriptor_t
desc_token_table	routerparse.c	/^static token_rule_t desc_token_table[] = {$/;"	v	file:
describe_transport	channel.h	/^  const char * (*describe_transport)(channel_listener_t *);$/;"	m	struct:channel_listener_s
describe_transport	channel.h	/^  const char * (*describe_transport)(channel_t *);$/;"	m	struct:channel_s
description	confparse.h	/^  const char *description;$/;"	m	struct:config_var_description_t
description	or.h	/^  char *description;$/;"	m	struct:dir_server_t
description	or.h	/^  const char *description;$/;"	m	struct:desc_store_t
description	routerset.h	/^  char *description;$/;"	m	struct:routerset_t
descriptor_cookie	or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_authorized_client_t
descriptor_cookie	or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_data_t
descriptor_cookie	or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_service_authorization_t
descriptor_digest	or.h	/^  char descriptor_digest[DIGEST256_LEN];$/;"	m	struct:routerstatus_t
descriptor_id	or.h	/^  char descriptor_id[REND_NUMBER_OF_NON_CONSECUTIVE_REPLICAS][DIGEST_LEN];$/;"	m	struct:rend_data_t
desired_path_len	or.h	/^  int desired_path_len;$/;"	m	struct:__anon22
dest_address	or.h	/^  char *dest_address;$/;"	m	struct:origin_circuit_t
dest_port	or.h	/^  uint16_t dest_port;$/;"	m	struct:origin_circuit_t
dest_url	TorSGX.cpp	/^char dest_url[] = "https:\/\/test-as.sgx.trustedservices.intel.com";$/;"	v
destination_from_pf	connection_edge.c	/^destination_from_pf(entry_connection_t *conn, socks_request_t *req)$/;"	f	file:
destination_from_socket	connection_edge.c	/^destination_from_socket(entry_connection_t *conn, socks_request_t *req)$/;"	f	file:
destroy_cell_queue	circuitmux.c	/^  cell_queue_t destroy_cell_queue;$/;"	m	struct:circuitmux_s	file:
destroy_ctr	circuitmux.c	/^  int64_t destroy_ctr;$/;"	m	struct:circuitmux_s	file:
detached_get_digests	routerparse.c	/^detached_get_digests(ns_detached_signatures_t *sigs, const char *flavor_name)$/;"	f	file:
detached_get_signatures	routerparse.c	/^detached_get_signatures(ns_detached_signatures_t *sigs,$/;"	f	file:
detached_onion_services	control.c	/^static smartlist_t *detached_onion_services = NULL;$/;"	v	file:
detect_compression_method	torgzip.c	/^detect_compression_method(const char *in, size_t in_len)$/;"	f
dh	crypto.c	/^  DH *dh; \/**< The openssl DH object *\/$/;"	m	struct:crypto_dh_t	file:
dh	rendservice.h	/^  uint8_t dh[DH_KEY_LEN];$/;"	m	struct:rend_intro_cell_s
dh_param_g	crypto.c	/^static BIGNUM *dh_param_g = NULL;$/;"	v	file:
dh_param_p	crypto.c	/^static BIGNUM *dh_param_p = NULL;$/;"	v	file:
dh_param_p_tls	crypto.c	/^static BIGNUM *dh_param_p_tls = NULL;$/;"	v	file:
di_digest256_map_t	di_ops.c	/^struct di_digest256_map_t {$/;"	s	file:
di_digest256_map_t	di_ops.h	/^typedef struct di_digest256_map_t di_digest256_map_t;$/;"	t	typeref:struct:di_digest256_map_t
did_circs_fail_last_period	circuituse.c	/^static int did_circs_fail_last_period = 0;$/;"	v	file:
did_last_state_file_write_fail	statefile.c	/^did_last_state_file_write_fail(void)$/;"	f
diff	TorSGX.cpp	/^double diff;$/;"	v
diff	control.c	/^  double diff;$/;"	v
digest	channel.c	/^  uint8_t digest[DIGEST_LEN];$/;"	m	struct:channel_idmap_entry_s	file:
digest	config.h	/^  char digest[DIGEST_LEN]; \/* The bridge's identity key digest. *\/$/;"	m	struct:bridge_line_t
digest	dirvote.c	/^  const char *digest;$/;"	m	struct:dir_src_ent_t	file:
digest	or.h	/^  char digest[DIGEST256_LEN];$/;"	m	struct:microdesc_t
digest	or.h	/^  char digest[DIGEST_LEN]; \/**< Digest of identity key. *\/$/;"	m	struct:dir_server_t
digest256	or.h	/^  uint8_t digest256[DIGEST256_LEN];$/;"	m	struct:extrainfo_t
digest256_from_base64	crypto_format.c	/^digest256_from_base64(char *digest, const char *d64)$/;"	f
digest256_to_base64	crypto_format.c	/^digest256_to_base64(char *d64, const char *digest)$/;"	f
digest256map_assign_key	container.c	/^digest256map_assign_key(digest256map_entry_t *ent, const uint8_t *key)$/;"	f	file:
digest256map_assign_tmp_key	container.c	/^digest256map_assign_tmp_key(digest256map_entry_t *ent, const uint8_t *key)$/;"	f	file:
digest256map_entries_eq	container.c	/^digest256map_entries_eq(const digest256map_entry_t *a,$/;"	f	file:
digest256map_entry_free	container.c	/^digest256map_entry_free(digest256map_entry_t *ent)$/;"	f	file:
digest256map_entry_hash	container.c	/^digest256map_entry_hash(const digest256map_entry_t *a)$/;"	f	file:
digest_algorithm_bitfield_t	crypto.h	92;"	d
digest_algorithm_t	crypto.h	/^} digest_algorithm_t;$/;"	t	typeref:enum:__anon64
digest_from_base64	crypto_format.c	/^digest_from_base64(char *digest, const char *d64)$/;"	f
digest_received	or.h	/^  crypto_digest_t *digest_received;$/;"	m	struct:or_handshake_state_t
digest_received_data	or.h	/^  unsigned int digest_received_data : 1;$/;"	m	struct:or_handshake_state_t
digest_sent	or.h	/^  crypto_digest_t *digest_sent;$/;"	m	struct:or_handshake_state_t
digest_sent_data	or.h	/^  unsigned int digest_sent_data : 1;$/;"	m	struct:or_handshake_state_t
digest_to_base64	crypto_format.c	/^digest_to_base64(char *d64, const char *digest)$/;"	f
digestmap_assign_key	container.c	/^digestmap_assign_key(digestmap_entry_t *ent, const char *key)$/;"	f	file:
digestmap_assign_tmp_key	container.c	/^digestmap_assign_tmp_key(digestmap_entry_t *ent, const char *key)$/;"	f	file:
digestmap_entries_eq	container.c	/^digestmap_entries_eq(const digestmap_entry_t *a, const digestmap_entry_t *b)$/;"	f	file:
digestmap_entry_free	container.c	/^digestmap_entry_free(digestmap_entry_t *ent)$/;"	f	file:
digestmap_entry_hash	container.c	/^digestmap_entry_hash(const digestmap_entry_t *a)$/;"	f	file:
digests	or.h	/^  digests_t digests; \/**< Digests of this object (networkstatus only) *\/$/;"	m	struct:cached_dir_t
digests	or.h	/^  digests_t digests;$/;"	m	struct:networkstatus_t
digests	or.h	/^  strmap_t *digests; \/**< Map from flavor name to digestset_t *\/$/;"	m	struct:ns_detached_signatures_t
digests	routerset.h	/^  digestmap_t *digests;$/;"	m	struct:routerset_t
digests_seen	replaycache.h	/^  digestmap_t *digests_seen;$/;"	m	struct:replaycache_s
digests_t	crypto.h	/^} digests_t;$/;"	t	typeref:struct:__anon65
digestset_add	container.h	/^digestset_add(digestset_t *set, const char *digest)$/;"	f
digestset_contains	container.h	/^digestset_contains(const digestset_t *set, const char *digest)$/;"	f
digestset_free	container.c	/^digestset_free(digestset_t *set)$/;"	f
digestset_t	container.h	/^} digestset_t;$/;"	t	typeref:struct:__anon104
digit_to_num	util.c	/^digit_to_num(char d)$/;"	f	file:
dimap_add_entry	di_ops.c	/^dimap_add_entry(di_digest256_map_t **map,$/;"	f
dimap_free	di_ops.c	/^dimap_free(di_digest256_map_t *map, dimap_free_fn free_fn)$/;"	f
dimap_free_fn	di_ops.h	/^typedef void (*dimap_free_fn)(void *);$/;"	t
dimap_search	di_ops.c	/^dimap_search(const di_digest256_map_t *map, const uint8_t *key,$/;"	f
dir	or.h	/^  char *dir; \/**< Contents of this object, NUL-terminated. *\/$/;"	m	struct:cached_dir_t
dir_conn_purpose_to_string	directory.c	/^dir_conn_purpose_to_string(int purpose)$/;"	f	file:
dir_connection_new	connection.c	/^dir_connection_new(int socket_family)$/;"	f
dir_connection_t	or.h	/^typedef struct dir_connection_t {$/;"	s
dir_connection_t	or.h	/^} dir_connection_t;$/;"	t	typeref:struct:dir_connection_t
dir_fetch_type	directory.c	/^dir_fetch_type(int dir_purpose, int router_purpose, const char *resource)$/;"	f
dir_group_readable	rendservice.c	/^  int dir_group_readable; \/**< if 1, allow group read$/;"	m	struct:rend_service_t	file:
dir_indirection_t	directory.h	/^} dir_indirection_t;$/;"	t	typeref:enum:__anon102
dir_info_status	nodelist.c	/^static char dir_info_status[512] = "";$/;"	v	file:
dir_key_certificate_table	routerparse.c	/^static token_rule_t dir_key_certificate_table[] = {$/;"	v	file:
dir_len	or.h	/^  size_t dir_len; \/**< Length of <b>dir<\/b> (not counting its NUL). *\/$/;"	m	struct:cached_dir_t
dir_microdesc_download_failed	directory.c	/^dir_microdesc_download_failed(smartlist_t *failed,$/;"	f	file:
dir_policy	policies.c	/^static smartlist_t *dir_policy = NULL;$/;"	v	file:
dir_policy_permits_address	policies.c	/^dir_policy_permits_address(const tor_addr_t *addr)$/;"	f
dir_port	or.h	/^  uint16_t dir_port; \/**< Directory port for this router. *\/$/;"	m	struct:routerstatus_t
dir_port	or.h	/^  uint16_t dir_port; \/**< Directory port of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
dir_port	or.h	/^  uint16_t dir_port; \/**< Directory port. *\/$/;"	m	struct:dir_server_t
dir_port	or.h	/^  uint16_t dir_port; \/**< Port for HTTP directory connections. *\/$/;"	m	struct:__anon14
dir_port	or.h	/^  uint16_t dir_port;$/;"	m	struct:authority_cert_t
dir_read_array	rephist.c	/^static bw_array_t *dir_read_array = NULL;$/;"	v	file:
dir_routerdesc_download_failed	directory.c	/^dir_routerdesc_download_failed(smartlist_t *failed, int status_code,$/;"	f	file:
dir_server_add	routerlist.c	/^dir_server_add(dir_server_t *ent)$/;"	f
dir_server_free	routerlist.c	/^dir_server_free(dir_server_t *ds)$/;"	f	file:
dir_server_new	routerlist.c	/^dir_server_new(int is_authority,$/;"	f	file:
dir_server_t	or.h	/^typedef struct dir_server_t {$/;"	s
dir_server_t	or.h	/^} dir_server_t;$/;"	t	typeref:struct:dir_server_t
dir_signing_key_is_trusted	routerparse.c	/^dir_signing_key_is_trusted(crypto_pk_t *key)$/;"	f	file:
dir_split_resource_into_fingerprint_pairs	directory.c	/^dir_split_resource_into_fingerprint_pairs(const char *res,$/;"	f
dir_split_resource_into_fingerprints	directory.c	/^dir_split_resource_into_fingerprints(const char *resource,$/;"	f
dir_spool_source_bitfield_t	or.h	1694;"	d
dir_spool_source_t	or.h	/^} dir_spool_source_t;$/;"	t	typeref:enum:__anon10
dir_spool_src	or.h	/^  dir_spool_source_bitfield_t  dir_spool_src : 3;$/;"	m	struct:dir_connection_t
dir_src_ent_t	dirvote.c	/^typedef struct dir_src_ent_t {$/;"	s	file:
dir_src_ent_t	dirvote.c	/^} dir_src_ent_t;$/;"	t	typeref:struct:dir_src_ent_t	file:
dir_write_array	rephist.c	/^static bw_array_t *dir_write_array = NULL;$/;"	v	file:
dir_z	or.h	/^  char *dir_z; \/**< Compressed contents of this object. *\/$/;"	m	struct:cached_dir_t
dir_z_len	or.h	/^  size_t dir_z_len; \/**< Length of <b>dir_z<\/b>. *\/$/;"	m	struct:cached_dir_t
dircollator_add_routerstatus	dircollate.c	/^dircollator_add_routerstatus(dircollator_t *dc,$/;"	f	file:
dircollator_add_vote	dircollate.c	/^dircollator_add_vote(dircollator_t *dc, networkstatus_t *v)$/;"	f
dircollator_collate	dircollate.c	/^dircollator_collate(dircollator_t *dc, int consensus_method)$/;"	f
dircollator_collate_by_ed25519	dircollate.c	/^dircollator_collate_by_ed25519(dircollator_t *dc)$/;"	f	file:
dircollator_collate_by_rsa	dircollate.c	/^dircollator_collate_by_rsa(dircollator_t *dc)$/;"	f	file:
dircollator_free	dircollate.c	/^dircollator_free(dircollator_t *dc)$/;"	f
dircollator_get_votes_for_router	dircollate.c	/^dircollator_get_votes_for_router(dircollator_t *dc, int idx)$/;"	f
dircollator_n_routers	dircollate.c	/^dircollator_n_routers(dircollator_t *dc)$/;"	f
dircollator_new	dircollate.c	/^dircollator_new(int n_votes, int n_authorities)$/;"	f
dircollator_s	dircollate.h	/^struct dircollator_s {$/;"	s
dircollator_t	dircollate.h	/^typedef struct dircollator_s dircollator_t;$/;"	t	typeref:struct:dircollator_s
dirconn_direct	or.h	/^  unsigned int dirconn_direct:1; \/**< Is this dirconn direct, or via Tor? *\/$/;"	m	struct:dir_connection_t
direction	circuitmux.c	/^  cell_direction_t direction;$/;"	m	struct:circuit_muxinfo_s	file:
directories_have_accepted_server_descriptor	directory.c	/^directories_have_accepted_server_descriptor(void)$/;"	f
directory	rendservice.c	/^  char *directory; \/**< where in the filesystem it stores it. Will be NULL if$/;"	m	struct:rend_service_t	file:
directory_all_unreachable	main.c	/^directory_all_unreachable(time_t now)$/;"	f
directory_all_unreachable_cb	main.c	/^directory_all_unreachable_cb(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
directory_all_unreachable_cb_event	main.c	/^static struct event *directory_all_unreachable_cb_event = NULL;$/;"	v	typeref:struct:event	file:
directory_caches_dir_info	dirserv.c	/^directory_caches_dir_info(const or_options_t *options)$/;"	f
directory_caches_unknown_auth_certs	dirserv.c	/^directory_caches_unknown_auth_certs(const or_options_t *options)$/;"	f
directory_clean_last_hid_serv_requests	rendclient.c	/^directory_clean_last_hid_serv_requests(time_t now)$/;"	f	file:
directory_command_should_use_begindir	directory.c	/^directory_command_should_use_begindir(const or_options_t *options,$/;"	f	file:
directory_conn_is_self_reachability_test	directory.c	/^directory_conn_is_self_reachability_test(dir_connection_t *conn)$/;"	f	file:
directory_dump_request_log	directory.c	/^directory_dump_request_log(void)$/;"	f
directory_fetches_dir_info_early	dirserv.c	/^directory_fetches_dir_info_early(const or_options_t *options)$/;"	f
directory_fetches_dir_info_later	dirserv.c	/^directory_fetches_dir_info_later(const or_options_t *options)$/;"	f
directory_fetches_from_authorities	dirserv.c	/^directory_fetches_from_authorities(const or_options_t *options)$/;"	f
directory_get_consensus_url	directory.c	/^directory_get_consensus_url(const char *resource)$/;"	f	file:
directory_get_from_all_authorities	directory.c	/^directory_get_from_all_authorities(uint8_t dir_purpose,$/;"	f
directory_get_from_hs_dir	rendclient.c	/^directory_get_from_hs_dir(const char *desc_id, const rend_data_t *rend_query,$/;"	f	file:
directory_handle_command	directory.c	/^directory_handle_command(dir_connection_t *conn)$/;"	f	file:
directory_handle_command_get	directory.c	/^directory_handle_command_get(dir_connection_t *conn, const char *headers,$/;"	f	file:
directory_handle_command_post	directory.c	/^directory_handle_command_post(dir_connection_t *conn, const char *headers,$/;"	f	file:
directory_info_has_arrived	main.c	/^directory_info_has_arrived(time_t now, int from_cache)$/;"	f
directory_initiate_command	directory.c	/^directory_initiate_command(const tor_addr_t *_addr,$/;"	f
directory_initiate_command_rend	directory.c	/^directory_initiate_command_rend(const tor_addr_t *_addr,$/;"	f	file:
directory_initiate_command_routerstatus	directory.c	/^directory_initiate_command_routerstatus(const routerstatus_t *status,$/;"	f
directory_initiate_command_routerstatus_rend	directory.c	/^directory_initiate_command_routerstatus_rend(const routerstatus_t *status,$/;"	f
directory_keyword	routerparse.c	/^} directory_keyword;$/;"	t	typeref:enum:__anon97	file:
directory_permits_begindir_requests	dirserv.c	/^directory_permits_begindir_requests(const or_options_t *options)$/;"	f
directory_pick_generic_dirserver	directory.c	/^directory_pick_generic_dirserver(dirinfo_type_t type, int pds_flags,$/;"	f	file:
directory_post_to_dirservers	directory.c	/^directory_post_to_dirservers(uint8_t dir_purpose, uint8_t router_purpose,$/;"	f
directory_post_to_hs_dir	rendservice.c	/^directory_post_to_hs_dir(rend_service_descriptor_t *renddesc,$/;"	f
directory_remove_invalid	dirserv.c	/^directory_remove_invalid(void)$/;"	f	file:
directory_send_command	directory.c	/^directory_send_command(dir_connection_t *conn,$/;"	f	file:
directory_token_t	routerparse.c	/^typedef struct directory_token_t {$/;"	s	file:
directory_token_t	routerparse.c	/^} directory_token_t;$/;"	t	typeref:struct:directory_token_t	file:
directory_too_idle_to_fetch_descriptors	dirserv.c	/^directory_too_idle_to_fetch_descriptors(const or_options_t *options,$/;"	f
dirind_is_anon	directory.c	/^dirind_is_anon(dir_indirection_t ind)$/;"	f	file:
dirinfo_type_t	or.h	/^} dirinfo_type_t;$/;"	t	typeref:enum:__anon18
dirreq_id	channel.h	/^  uint64_t dirreq_id;$/;"	m	struct:channel_s
dirreq_id	geoip.c	/^  uint64_t dirreq_id;$/;"	m	struct:dirreq_map_entry_t	file:
dirreq_id	or.h	/^  uint64_t dirreq_id;$/;"	m	struct:circuit_t
dirreq_id	or.h	/^  uint64_t dirreq_id;$/;"	m	struct:dir_connection_t
dirreq_id	or.h	/^  uint64_t dirreq_id;$/;"	m	struct:edge_connection_t
dirreq_map_ent_eq	geoip.c	/^dirreq_map_ent_eq(const dirreq_map_entry_t *a,$/;"	f	file:
dirreq_map_ent_hash	geoip.c	/^dirreq_map_ent_hash(const dirreq_map_entry_t *entry)$/;"	f	file:
dirreq_map_entry_t	geoip.c	/^typedef struct dirreq_map_entry_t {$/;"	s	file:
dirreq_map_entry_t	geoip.c	/^} dirreq_map_entry_t;$/;"	t	typeref:struct:dirreq_map_entry_t	file:
dirreq_map_get_	geoip.c	/^dirreq_map_get_(dirreq_type_t type, uint64_t dirreq_id)$/;"	f	file:
dirreq_map_put_	geoip.c	/^dirreq_map_put_(dirreq_map_entry_t *entry, dirreq_type_t type,$/;"	f	file:
dirreq_state_t	or.h	/^} dirreq_state_t;$/;"	t	typeref:enum:__anon39
dirreq_type_t	or.h	/^} dirreq_type_t;$/;"	t	typeref:enum:__anon38
dirserv_add_descriptor	dirserv.c	/^dirserv_add_descriptor(routerinfo_t *ri, const char **msg, const char *source)$/;"	f
dirserv_add_extrainfo	dirserv.c	/^dirserv_add_extrainfo(extrainfo_t *ei, const char **msg)$/;"	f	file:
dirserv_add_multiple_descriptors	dirserv.c	/^dirserv_add_multiple_descriptors(const char *desc, uint8_t purpose,$/;"	f
dirserv_add_own_fingerprint	dirserv.c	/^dirserv_add_own_fingerprint(crypto_pk_t *pk)$/;"	f
dirserv_cache_measured_bw	dirserv.c	/^dirserv_cache_measured_bw(const measured_bw_line_t *parsed_line,$/;"	f
dirserv_clear_measured_bw_cache	dirserv.c	/^dirserv_clear_measured_bw_cache(void)$/;"	f
dirserv_compute_bridge_flag_thresholds	dirserv.c	/^dirserv_compute_bridge_flag_thresholds(routerlist_t *rl)$/;"	f
dirserv_compute_performance_thresholds	dirserv.c	/^dirserv_compute_performance_thresholds(routerlist_t *rl,$/;"	f	file:
dirserv_count_measured_bws	dirserv.c	/^dirserv_count_measured_bws(routerlist_t *rl)$/;"	f	file:
dirserv_dump_directory_to_string	dirserv.c	/^dirserv_dump_directory_to_string(char **dir_out,$/;"	f
dirserv_estimate_data_size	dirserv.c	/^dirserv_estimate_data_size(smartlist_t *fps, int is_serverdescs,$/;"	f
dirserv_estimate_microdesc_size	dirserv.c	/^dirserv_estimate_microdesc_size(const smartlist_t *fps, int compressed)$/;"	f
dirserv_expire_measured_bw_cache	dirserv.c	/^dirserv_expire_measured_bw_cache(time_t now)$/;"	f
dirserv_free_all	dirserv.c	/^dirserv_free_all(void)$/;"	f
dirserv_free_fingerprint_list	dirserv.c	/^dirserv_free_fingerprint_list(void)$/;"	f
dirserv_generate_networkstatus_vote_obj	dirserv.c	/^dirserv_generate_networkstatus_vote_obj(crypto_pk_t *private_key,$/;"	f
dirserv_get_bandwidth_for_router_kb	dirserv.c	/^dirserv_get_bandwidth_for_router_kb(const routerinfo_t *ri)$/;"	f	file:
dirserv_get_consensus	dirserv.c	/^dirserv_get_consensus(const char *flavor_name)$/;"	f
dirserv_get_credible_bandwidth_kb	dirserv.c	/^dirserv_get_credible_bandwidth_kb(const routerinfo_t *ri)$/;"	f	file:
dirserv_get_flag_thresholds_line	dirserv.c	/^dirserv_get_flag_thresholds_line(void)$/;"	f
dirserv_get_measured_bw_cache_size	dirserv.c	/^dirserv_get_measured_bw_cache_size(void)$/;"	f
dirserv_get_routerdesc_fingerprints	dirserv.c	/^dirserv_get_routerdesc_fingerprints(smartlist_t *fps_out, const char *key,$/;"	f
dirserv_get_routerdescs	dirserv.c	/^dirserv_get_routerdescs(smartlist_t *descs_out, const char *key,$/;"	f
dirserv_get_status_impl	dirserv.c	/^dirserv_get_status_impl(const char *id_digest, const char *nickname,$/;"	f	file:
dirserv_has_measured_bw	dirserv.c	/^dirserv_has_measured_bw(const char *node_id)$/;"	f
dirserv_have_any_microdesc	dirserv.c	/^dirserv_have_any_microdesc(const smartlist_t *fps)$/;"	f
dirserv_have_any_serverdesc	dirserv.c	/^dirserv_have_any_serverdesc(smartlist_t *fps, int spool_src)$/;"	f
dirserv_load_fingerprint_file	dirserv.c	/^dirserv_load_fingerprint_file(void)$/;"	f
dirserv_orconn_tls_done	dirserv.c	/^dirserv_orconn_tls_done(const tor_addr_t *addr,$/;"	f
dirserv_query_measured_bw_cache_kb	dirserv.c	/^dirserv_query_measured_bw_cache_kb(const char *node_id, long *bw_kb_out,$/;"	f
dirserv_read_guardfraction_file	dirserv.c	/^dirserv_read_guardfraction_file(const char *fname,$/;"	f
dirserv_read_guardfraction_file_from_str	dirserv.c	/^dirserv_read_guardfraction_file_from_str(const char *guardfraction_file_str,$/;"	f
dirserv_read_measured_bandwidths	dirserv.c	/^dirserv_read_measured_bandwidths(const char *from_file,$/;"	f
dirserv_remove_old_statuses	dirserv.c	/^dirserv_remove_old_statuses(smartlist_t *fps, time_t cutoff)$/;"	f
dirserv_router_get_status	dirserv.c	/^dirserv_router_get_status(const routerinfo_t *router, const char **msg,$/;"	f
dirserv_router_has_valid_address	dirserv.c	/^dirserv_router_has_valid_address(routerinfo_t *ri)$/;"	f	file:
dirserv_set_cached_consensus_networkstatus	dirserv.c	/^dirserv_set_cached_consensus_networkstatus(const char *networkstatus,$/;"	f
dirserv_set_node_flags_from_authoritative_status	dirserv.c	/^dirserv_set_node_flags_from_authoritative_status(node_t *node,$/;"	f
dirserv_set_router_is_running	dirserv.c	/^dirserv_set_router_is_running(routerinfo_t *router, time_t now)$/;"	f
dirserv_set_routerstatus_testing	dirserv.c	/^dirserv_set_routerstatus_testing(routerstatus_t *rs)$/;"	f
dirserv_should_launch_reachability_test	dirserv.c	/^dirserv_should_launch_reachability_test(const routerinfo_t *ri,$/;"	f
dirserv_single_reachability_test	dirserv.c	/^dirserv_single_reachability_test(time_t now, routerinfo_t *router)$/;"	f
dirserv_test_reachability	dirserv.c	/^dirserv_test_reachability(time_t now)$/;"	f
dirserv_thinks_router_is_hs_dir	dirserv.c	/^dirserv_thinks_router_is_hs_dir(const routerinfo_t *router,$/;"	f	file:
dirserv_thinks_router_is_unreliable	dirserv.c	/^dirserv_thinks_router_is_unreliable(time_t now,$/;"	f	file:
dirserv_would_reject_router	dirserv.c	/^dirserv_would_reject_router(const routerstatus_t *rs)$/;"	f
dirserver_choose_by_weight	routerlist.c	/^dirserver_choose_by_weight(const smartlist_t *servers, double authority_weight)$/;"	f	file:
dirvote_act	dirvote.c	/^dirvote_act(const or_options_t *options, time_t now)$/;"	f
dirvote_add_signatures	dirvote.c	/^dirvote_add_signatures(const char *detached_signatures_body,$/;"	f
dirvote_add_signatures_to_all_pending_consensuses	dirvote.c	/^dirvote_add_signatures_to_all_pending_consensuses($/;"	f	file:
dirvote_add_signatures_to_pending_consensus	dirvote.c	/^dirvote_add_signatures_to_pending_consensus($/;"	f	file:
dirvote_add_vote	dirvote.c	/^dirvote_add_vote(const char *vote_body, const char **msg_out, int *status_out)$/;"	f
dirvote_clear_pending_consensuses	dirvote.c	/^dirvote_clear_pending_consensuses(void)$/;"	f	file:
dirvote_clear_votes	dirvote.c	/^dirvote_clear_votes(int all_votes)$/;"	f	file:
dirvote_compute_consensuses	dirvote.c	/^dirvote_compute_consensuses(void)$/;"	f	file:
dirvote_compute_params	dirvote.c	/^dirvote_compute_params(smartlist_t *votes, int method, int total_authorities)$/;"	f
dirvote_create_microdescriptor	dirvote.c	/^dirvote_create_microdescriptor(const routerinfo_t *ri, int consensus_method)$/;"	f
dirvote_fetch_missing_signatures	dirvote.c	/^dirvote_fetch_missing_signatures(void)$/;"	f	file:
dirvote_fetch_missing_votes	dirvote.c	/^dirvote_fetch_missing_votes(void)$/;"	f	file:
dirvote_format_all_microdesc_vote_lines	dirvote.c	/^dirvote_format_all_microdesc_vote_lines(const routerinfo_t *ri, time_t now,$/;"	f
dirvote_format_microdesc_vote_line	dirvote.c	/^dirvote_format_microdesc_vote_line(char *out_buf, size_t out_buf_len,$/;"	f
dirvote_free_all	dirvote.c	/^dirvote_free_all(void)$/;"	f
dirvote_get_pending_consensus	dirvote.c	/^dirvote_get_pending_consensus(consensus_flavor_t flav)$/;"	f
dirvote_get_pending_detached_signatures	dirvote.c	/^dirvote_get_pending_detached_signatures(void)$/;"	f
dirvote_get_preferred_voting_intervals	dirvote.c	/^dirvote_get_preferred_voting_intervals(vote_timing_t *timing_out)$/;"	f
dirvote_get_start_of_next_interval	dirvote.c	/^dirvote_get_start_of_next_interval(time_t now, int interval, int offset)$/;"	f
dirvote_get_vote	dirvote.c	/^dirvote_get_vote(const char *fp, int flags)$/;"	f
dirvote_perform_vote	dirvote.c	/^dirvote_perform_vote(void)$/;"	f	file:
dirvote_publish_consensus	dirvote.c	/^dirvote_publish_consensus(void)$/;"	f	file:
dirvote_recalculate_timing	dirvote.c	/^dirvote_recalculate_timing(const or_options_t *options, time_t now)$/;"	f
disable_broken_connection_counts	connection_or.c	/^static int disable_broken_connection_counts = 0;$/;"	v	file:
disable_control_logging	control.c	/^disable_control_logging(void)$/;"	f
disable_iocp	compat_libevent.h	/^  int disable_iocp;$/;"	m	struct:tor_libevent_cfg
disable_log_messages	control.c	/^static int disable_log_messages = 0;$/;"	v	file:
dist_delay	or.h	/^  int dist_delay;$/;"	m	struct:vote_timing_t
dist_seconds	or.h	/^  int dist_seconds;$/;"	m	struct:networkstatus_t
div_by_2_25	curve25519-donna.c	/^div_by_2_25(const limb v)$/;"	f	file:
div_by_2_26	curve25519-donna.c	/^div_by_2_26(const limb v)$/;"	f	file:
dl_failed	networkstatus.c	/^  int dl_failed;$/;"	m	struct:consensus_waiting_for_certs_t	file:
dl_status	or.h	/^  download_status_t dl_status;$/;"	m	struct:routerstatus_t
dl_status_by_id	routerlist.c	/^  download_status_t dl_status_by_id;$/;"	m	struct:cert_list_t	file:
dl_status_map	routerlist.c	/^  struct digest_ds_map_t *dl_status_map;$/;"	m	struct:cert_list_t	typeref:struct:cert_list_t::digest_ds_map_t	file:
dmalloc_strdup	util.c	142;"	d	file:
dn_indicates_v3_cert	tortls.c	/^dn_indicates_v3_cert(X509_NAME *name)$/;"	f	file:
dns_cache_entry_count	dns.c	/^dns_cache_entry_count(void)$/;"	f	file:
dns_clip_ttl	dns.c	/^dns_clip_ttl(uint32_t ttl)$/;"	f
dns_found_answer	dns.c	/^dns_found_answer(const char *address, uint8_t query_type,$/;"	f	file:
dns_free_all	dns.c	/^dns_free_all(void)$/;"	f
dns_get_expiry_ttl	dns.c	/^dns_get_expiry_ttl(uint32_t ttl)$/;"	f
dns_init	dns.c	/^dns_init(void)$/;"	f
dns_is_broken_for_ipv6	dns.c	/^static int dns_is_broken_for_ipv6 = 0;$/;"	v	file:
dns_is_completely_invalid	dns.c	/^static int dns_is_completely_invalid = 0;$/;"	v	file:
dns_launch_correctness_checks	dns.c	/^dns_launch_correctness_checks(void)$/;"	f
dns_launch_wildcard_checks	dns.c	/^dns_launch_wildcard_checks(void)$/;"	f	file:
dns_randfn_	dns.c	/^dns_randfn_(char *b, size_t n)$/;"	f	file:
dns_reset	dns.c	/^dns_reset(void)$/;"	f
dns_reset_correctness_checks	dns.c	/^dns_reset_correctness_checks(void)$/;"	f
dns_resolve	dns.c	/^dns_resolve(edge_connection_t *exitconn)$/;"	f
dns_seems_to_be_broken	dns.c	/^dns_seems_to_be_broken(void)$/;"	f
dns_seems_to_be_broken_for_ipv6	dns.c	/^dns_seems_to_be_broken_for_ipv6(void)$/;"	f
dns_server_port	or.h	/^  struct evdns_server_port *dns_server_port;$/;"	m	struct:listener_connection_t	typeref:struct:listener_connection_t::evdns_server_port
dns_server_request	or.h	/^  struct evdns_server_request *dns_server_request;$/;"	m	struct:entry_connection_t	typeref:struct:entry_connection_t::evdns_server_request
dns_servers_relaunch_checks	main.c	/^dns_servers_relaunch_checks(void)$/;"	f
dns_wildcard_list	dns.c	/^static smartlist_t *dns_wildcard_list = NULL;$/;"	v	file:
dns_wildcard_notice_given	dns.c	/^static int dns_wildcard_notice_given = 0;$/;"	v	file:
dns_wildcard_one_notice_given	dns.c	/^static int dns_wildcard_one_notice_given = 0;$/;"	v	file:
dns_wildcard_response_count	dns.c	/^static strmap_t *dns_wildcard_response_count = NULL;$/;"	v	file:
dns_wildcarded_test_address_list	dns.c	/^static smartlist_t *dns_wildcarded_test_address_list = NULL;$/;"	v	file:
dns_wildcarded_test_address_notice_given	dns.c	/^static int dns_wildcarded_test_address_notice_given = 0;$/;"	v	file:
dnsserv_close_listener	dnsserv.c	/^dnsserv_close_listener(connection_t *conn)$/;"	f
dnsserv_configure_listener	dnsserv.c	/^dnsserv_configure_listener(connection_t *conn)$/;"	f
dnsserv_launch_request	dnsserv.c	/^dnsserv_launch_request(const char *name, int reverse,$/;"	f
dnsserv_reject_request	dnsserv.c	/^dnsserv_reject_request(entry_connection_t *conn)$/;"	f
dnsserv_resolved	dnsserv.c	/^dnsserv_resolved(entry_connection_t *conn,$/;"	f
do_dump_config	main.c	/^do_dump_config(void)$/;"	f	file:
do_getpass	routerkeys.c	/^do_getpass(const char *prompt, char *buf, size_t buflen,$/;"	f	file:
do_hash_password	main.c	/^do_hash_password(void)$/;"	f	file:
do_hup	main.c	/^do_hup(void)$/;"	f	file:
do_list_fingerprint	main.c	/^do_list_fingerprint(void)$/;"	f	file:
do_main_loop	main.c	/^do_main_loop(void)$/;"	f
do_not_cache	or.h	/^  unsigned int do_not_cache : 1;$/;"	m	struct:signed_descriptor_t
document_signature_dup	networkstatus.c	/^document_signature_dup(const document_signature_t *sig)$/;"	f
document_signature_free	networkstatus.c	/^document_signature_free(document_signature_t *sig)$/;"	f
document_signature_t	or.h	/^typedef struct document_signature_t {$/;"	s
document_signature_t	or.h	/^} document_signature_t;$/;"	t	typeref:struct:document_signature_t
domain	log.c	/^  log_domain_mask_t domain; \/**< The domain of the message *\/$/;"	m	struct:pending_log_message_t	file:
domain_list	log.c	/^static const char *domain_list[] = {$/;"	v	file:
domain_to_string	log.c	/^domain_to_string(log_domain_mask_t domain, char *buf, size_t buflen)$/;"	f	file:
double_digest_map_t	dircollate.h	/^typedef HT_HEAD(double_digest_map, ddmap_entry_s) double_digest_map_t;$/;"	t
down_since	rephist.c	/^  time_t down_since;$/;"	m	struct:or_history_t	file:
download_networkstatus	main.c	/^  time_t download_networkstatus;$/;"	m	struct:__anon107	file:
download_schedule_bitfield_t	or.h	1958;"	d
download_schedule_t	or.h	/^} download_schedule_t;$/;"	t	typeref:enum:__anon13
download_status_failed	directory.h	95;"	d
download_status_get_n_failures	directory.c	/^download_status_get_n_failures(const download_status_t *dls)$/;"	f
download_status_increment_failure	directory.c	/^download_status_increment_failure(download_status_t *dls, int status_code,$/;"	f
download_status_is_ready	directory.h	/^download_status_is_ready(download_status_t *dls, time_t now,$/;"	f
download_status_is_ready_by_sk_in_cl	routerlist.c	/^download_status_is_ready_by_sk_in_cl(cert_list_t *cl,$/;"	f	file:
download_status_mark_impossible	directory.h	/^download_status_mark_impossible(download_status_t *dl)$/;"	f
download_status_reset	directory.c	/^download_status_reset(download_status_t *dls)$/;"	f
download_status_reset_by_sk_in_cl	routerlist.c	/^download_status_reset_by_sk_in_cl(cert_list_t *cl, const char *digest)$/;"	f	file:
download_status_t	or.h	/^typedef struct download_status_t {$/;"	s
download_status_t	or.h	/^} download_status_t;$/;"	t	typeref:struct:download_status_t
downrate_stability	main.c	/^  time_t downrate_stability;$/;"	m	struct:__anon107	file:
downtime	rephist.c	/^  unsigned long downtime;$/;"	m	struct:or_history_t	file:
drain_fn	compat_threads.h	/^  int (*drain_fn)(tor_socket_t read_fd);$/;"	m	struct:alert_sockets_s
dst_wildcard	addressmap.c	/^  unsigned dst_wildcard:1;$/;"	m	struct:__anon87	file:
dstflag	orconfig.h	/^	short	dstflag;$/;"	m	struct:timeb
dummy_	address.h	/^    uint32_t dummy_; \/* This field is here so we have something to initialize$/;"	m	union:tor_addr_t::__anon3
dump_cell_pool_usage	relay.c	/^dump_cell_pool_usage(int severity)$/;"	f
dump_desc	routerparse.c	/^dump_desc(const char *desc, const char *type)$/;"	f	file:
dump_distinct_digest_count	routerparse.c	/^dump_distinct_digest_count(int severity)$/;"	f
dump_dns_mem_usage	dns.c	/^dump_dns_mem_usage(int severity)$/;"	f
dump_microdescriptor	microdesc.c	/^dump_microdescriptor(int fd, microdesc_t *md, size_t *annotation_len_out)$/;"	f	file:
dump_pk_ops	rephist.c	/^dump_pk_ops(int severity)$/;"	f
dump_routerlist_mem_usage	routerlist.c	/^dump_routerlist_mem_usage(int severity)$/;"	f
dumpmemusage	main.c	/^dumpmemusage(int severity)$/;"	f	file:
dumpstats	channel.h	/^  void (*dumpstats)(channel_listener_t *, int);$/;"	m	struct:channel_listener_s
dumpstats	channel.h	/^  void (*dumpstats)(channel_t *, int);$/;"	m	struct:channel_s
dumpstats	main.c	/^dumpstats(int severity)$/;"	f	file:
dup_onion_keys	router.c	/^dup_onion_keys(crypto_pk_t **key, crypto_pk_t **last)$/;"	f
duration	routerlist.c	/^  int duration;$/;"	m	struct:duration_idx_t	file:
duration_idx_t	routerlist.c	/^struct duration_idx_t {$/;"	s	file:
e	procmon.c	/^  struct event *e;$/;"	m	struct:tor_process_monitor_t	typeref:struct:tor_process_monitor_t::event	file:
eat_whitespace	util.c	/^eat_whitespace(const char *s)$/;"	f
eat_whitespace_eos	util.c	/^eat_whitespace_eos(const char *s, const char *eos)$/;"	f
eat_whitespace_eos_no_nl	util.c	/^eat_whitespace_eos_no_nl(const char *s, const char *eos)$/;"	f
eat_whitespace_no_nl	util.c	/^eat_whitespace_no_nl(const char *s)$/;"	f
ed25519_cert_add_ext	ed25519_cert.c	/^ed25519_cert_add_ext(ed25519_cert_t *inp, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_check	ed25519_cert.c	/^ed25519_cert_check(const ed25519_cert_t *obj)$/;"	f
ed25519_cert_clear	ed25519_cert.c	/^ed25519_cert_clear(ed25519_cert_t *obj)$/;"	f	file:
ed25519_cert_clear_errors	ed25519_cert.c	/^ed25519_cert_clear_errors(ed25519_cert_t *obj)$/;"	f
ed25519_cert_encode	ed25519_cert.c	/^ed25519_cert_encode(uint8_t *output, const size_t avail, const ed25519_cert_t *obj)$/;"	f
ed25519_cert_encoded_len	ed25519_cert.c	/^ed25519_cert_encoded_len(const ed25519_cert_t *obj)$/;"	f
ed25519_cert_extension_add_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_add_un_unparsed(ed25519_cert_extension_t *inp, uint8_t elt)$/;"	f
ed25519_cert_extension_check	ed25519_cert.c	/^ed25519_cert_extension_check(const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_clear	ed25519_cert.c	/^ed25519_cert_extension_clear(ed25519_cert_extension_t *obj)$/;"	f	file:
ed25519_cert_extension_clear_errors	ed25519_cert.c	/^ed25519_cert_extension_clear_errors(ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_encode	ed25519_cert.c	/^ed25519_cert_extension_encode(uint8_t *output, const size_t avail, const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_encoded_len	ed25519_cert.c	/^ed25519_cert_extension_encoded_len(const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_free	ed25519_cert.c	/^ed25519_cert_extension_free(ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_get_ext_flags	ed25519_cert.c	/^ed25519_cert_extension_get_ext_flags(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_ext_length	ed25519_cert.c	/^ed25519_cert_extension_get_ext_length(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_ext_type	ed25519_cert.c	/^ed25519_cert_extension_get_ext_type(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_un_signing_key	ed25519_cert.c	/^ed25519_cert_extension_get_un_signing_key(const ed25519_cert_extension_t *inp, size_t idx)$/;"	f
ed25519_cert_extension_get_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_get_un_unparsed(ed25519_cert_extension_t *inp, size_t idx)$/;"	f
ed25519_cert_extension_getarray_un_signing_key	ed25519_cert.c	/^ed25519_cert_extension_getarray_un_signing_key(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getarray_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_getarray_un_unparsed(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getlen_un_signing_key	ed25519_cert.c	/^ed25519_cert_extension_getlen_un_signing_key(const ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getlen_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_getlen_un_unparsed(const ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_new	ed25519_cert.c	/^ed25519_cert_extension_new(void)$/;"	f
ed25519_cert_extension_parse	ed25519_cert.c	/^ed25519_cert_extension_parse(ed25519_cert_extension_t **output, const uint8_t *input, const size_t len_in)$/;"	f
ed25519_cert_extension_parse_into	ed25519_cert.c	/^ed25519_cert_extension_parse_into(ed25519_cert_extension_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
ed25519_cert_extension_set_ext_flags	ed25519_cert.c	/^ed25519_cert_extension_set_ext_flags(ed25519_cert_extension_t *inp, uint8_t val)$/;"	f
ed25519_cert_extension_set_ext_length	ed25519_cert.c	/^ed25519_cert_extension_set_ext_length(ed25519_cert_extension_t *inp, uint16_t val)$/;"	f
ed25519_cert_extension_set_ext_type	ed25519_cert.c	/^ed25519_cert_extension_set_ext_type(ed25519_cert_extension_t *inp, uint8_t val)$/;"	f
ed25519_cert_extension_set_un_signing_key	ed25519_cert.c	/^ed25519_cert_extension_set_un_signing_key(ed25519_cert_extension_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_extension_set_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_set_un_unparsed(ed25519_cert_extension_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_extension_setlen_un_unparsed	ed25519_cert.c	/^ed25519_cert_extension_setlen_un_unparsed(ed25519_cert_extension_t *inp, size_t newlen)$/;"	f
ed25519_cert_extension_st	ed25519_cert.h	/^struct ed25519_cert_extension_st {$/;"	s
ed25519_cert_extension_t	ed25519_cert.h	/^typedef struct ed25519_cert_extension_st ed25519_cert_extension_t;$/;"	t	typeref:struct:ed25519_cert_extension_st
ed25519_cert_free	ed25519_cert.c	/^ed25519_cert_free(ed25519_cert_t *obj)$/;"	f
ed25519_cert_get_cert_key_type	ed25519_cert.c	/^ed25519_cert_get_cert_key_type(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_cert_type	ed25519_cert.c	/^ed25519_cert_get_cert_type(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_certified_key	ed25519_cert.c	/^ed25519_cert_get_certified_key(const ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_exp_field	ed25519_cert.c	/^ed25519_cert_get_exp_field(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_ext	ed25519_cert.c	/^ed25519_cert_get_ext(ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_n_extensions	ed25519_cert.c	/^ed25519_cert_get_n_extensions(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_signature	ed25519_cert.c	/^ed25519_cert_get_signature(const ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_version	ed25519_cert.c	/^ed25519_cert_get_version(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_certified_key	ed25519_cert.c	/^ed25519_cert_getarray_certified_key(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_ext	ed25519_cert.c	/^ed25519_cert_getarray_ext(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_signature	ed25519_cert.c	/^ed25519_cert_getarray_signature(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_certified_key	ed25519_cert.c	/^ed25519_cert_getlen_certified_key(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_ext	ed25519_cert.c	/^ed25519_cert_getlen_ext(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_signature	ed25519_cert.c	/^ed25519_cert_getlen_signature(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_new	ed25519_cert.c	/^ed25519_cert_new(void)$/;"	f
ed25519_cert_parse	ed25519_cert.c	/^ed25519_cert_parse(ed25519_cert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
ed25519_cert_parse_into	ed25519_cert.c	/^ed25519_cert_parse_into(ed25519_cert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
ed25519_cert_set0_ext	ed25519_cert.c	/^ed25519_cert_set0_ext(ed25519_cert_t *inp, size_t idx, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_set_cert_key_type	ed25519_cert.c	/^ed25519_cert_set_cert_key_type(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_cert_type	ed25519_cert.c	/^ed25519_cert_set_cert_type(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_certified_key	ed25519_cert.c	/^ed25519_cert_set_certified_key(ed25519_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_set_exp_field	ed25519_cert.c	/^ed25519_cert_set_exp_field(ed25519_cert_t *inp, uint32_t val)$/;"	f
ed25519_cert_set_ext	ed25519_cert.c	/^ed25519_cert_set_ext(ed25519_cert_t *inp, size_t idx, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_set_n_extensions	ed25519_cert.c	/^ed25519_cert_set_n_extensions(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_signature	ed25519_cert.c	/^ed25519_cert_set_signature(ed25519_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_set_version	ed25519_cert.c	/^ed25519_cert_set_version(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_setlen_ext	ed25519_cert.c	/^ed25519_cert_setlen_ext(ed25519_cert_t *inp, size_t newlen)$/;"	f
ed25519_cert_st	ed25519_cert.h	/^struct ed25519_cert_st {$/;"	s
ed25519_cert_t	ed25519_cert.h	/^typedef struct ed25519_cert_st ed25519_cert_t;$/;"	t	typeref:struct:ed25519_cert_st
ed25519_checkable_t	crypto_ed25519.h	/^} ed25519_checkable_t;$/;"	t	typeref:struct:__anon96
ed25519_checksig	crypto_ed25519.c	/^ed25519_checksig(const ed25519_signature_t *signature,$/;"	f
ed25519_checksig_batch	crypto_ed25519.c	/^ed25519_checksig_batch(int *okay_out,$/;"	f
ed25519_donna_blind_public_key	ed25519_tor.c	/^ed25519_donna_blind_public_key(unsigned char *out, const unsigned char *inp,$/;"	f
ed25519_donna_blind_secret_key	ed25519_tor.c	/^ed25519_donna_blind_secret_key(unsigned char *out, const unsigned char *inp,$/;"	f
ed25519_donna_keygen	ed25519_tor.c	/^ed25519_donna_keygen(unsigned char *pk, unsigned char *sk)$/;"	f
ed25519_donna_open	ed25519_tor.c	/^ed25519_donna_open(const unsigned char *signature, const unsigned char *m,$/;"	f
ed25519_donna_pubkey	ed25519_tor.c	/^ed25519_donna_pubkey(unsigned char *pk, const unsigned char *sk)$/;"	f
ed25519_donna_pubkey_from_curve25519_pubkey	ed25519_tor.c	/^ed25519_donna_pubkey_from_curve25519_pubkey(unsigned char *out,$/;"	f
ed25519_donna_seckey	ed25519_tor.c	/^ed25519_donna_seckey(unsigned char *sk)$/;"	f
ed25519_donna_seckey_expand	ed25519_tor.c	/^ed25519_donna_seckey_expand(unsigned char *sk, const unsigned char *skseed)$/;"	f
ed25519_donna_sign	ed25519_tor.c	/^ed25519_donna_sign(unsigned char *sig, const unsigned char *m, size_t mlen,$/;"	f
ed25519_extsk	ed25519_tor.c	/^ed25519_extsk(hash_512bits extsk, const ed25519_secret_key sk) {$/;"	f	file:
ed25519_hash	ed25519-hash.h	/^ed25519_hash(uint8_t *hash, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hash_context	ed25519-hash.h	/^typedef SHA512_CTX ed25519_hash_context;$/;"	t
ed25519_hash_context	ed25519-hash.h	/^typedef sha512_state ed25519_hash_context;$/;"	t
ed25519_hash_final	ed25519-hash.h	/^ed25519_hash_final(ed25519_hash_context *ctx, uint8_t *hash) {$/;"	f
ed25519_hash_final	ed25519-hash.h	/^ed25519_hash_final(sha512_state *S, uint8_t *hash) {$/;"	f
ed25519_hash_init	ed25519-hash.h	/^ed25519_hash_init(ed25519_hash_context *ctx) {$/;"	f
ed25519_hash_init	ed25519-hash.h	/^ed25519_hash_init(sha512_state *S) {$/;"	f
ed25519_hash_update	ed25519-hash.h	/^ed25519_hash_update(ed25519_hash_context *ctx, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hash_update	ed25519-hash.h	/^ed25519_hash_update(sha512_state *S, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hram	ed25519_tor.c	/^ed25519_hram(hash_512bits hram, const ed25519_signature RS, const ed25519_public_key pk, const unsigned char *m, size_t mlen) {$/;"	f	file:
ed25519_id	or.h	/^  uint8_t ed25519_id[ED25519_PUBKEY_LEN];$/;"	m	struct:vote_routerstatus_t
ed25519_identity_pkey	or.h	/^  ed25519_public_key_t *ed25519_identity_pkey;$/;"	m	struct:microdesc_t
ed25519_impl	crypto_ed25519.c	/^static const ed25519_impl_t *ed25519_impl = NULL;$/;"	v	file:
ed25519_impl_spot_check	crypto_ed25519.c	/^ed25519_impl_spot_check(void)$/;"	f	file:
ed25519_impl_t	crypto_ed25519.c	/^} ed25519_impl_t;$/;"	t	typeref:struct:__anon123	file:
ed25519_init	crypto_ed25519.c	/^ed25519_init(void)$/;"	f
ed25519_key	keypin.h	/^  uint8_t ed25519_key[DIGEST256_LEN];$/;"	m	struct:keypin_ent_st
ed25519_keypair_blind	crypto_ed25519.c	/^ed25519_keypair_blind(ed25519_keypair_t *out,$/;"	f
ed25519_keypair_free	crypto_ed25519.c	/^ed25519_keypair_free(ed25519_keypair_t *kp)$/;"	f
ed25519_keypair_from_curve25519_keypair	crypto_ed25519.c	/^ed25519_keypair_from_curve25519_keypair(ed25519_keypair_t *out,$/;"	f
ed25519_keypair_generate	crypto_ed25519.c	/^ed25519_keypair_generate(ed25519_keypair_t *keypair_out, int extra_strong)$/;"	f
ed25519_keypair_t	crypto_ed25519.h	/^} ed25519_keypair_t;$/;"	t	typeref:struct:__anon95
ed25519_pubkey_eq	crypto_ed25519.c	/^ed25519_pubkey_eq(const ed25519_public_key_t *key1,$/;"	f
ed25519_pubkey_read_from_file	crypto_ed25519.c	/^ed25519_pubkey_read_from_file(ed25519_public_key_t *pubkey_out,$/;"	f
ed25519_pubkey_write_to_file	crypto_ed25519.c	/^ed25519_pubkey_write_to_file(const ed25519_public_key_t *pubkey,$/;"	f
ed25519_public_blind	crypto_ed25519.c	/^ed25519_public_blind(ed25519_public_key_t *out,$/;"	f
ed25519_public_from_base64	crypto_format.c	/^ed25519_public_from_base64(ed25519_public_key_t *pkey,$/;"	f
ed25519_public_key	ed25519.h	/^typedef unsigned char ed25519_public_key[32];$/;"	t
ed25519_public_key	ed25519_tor.c	/^typedef unsigned char ed25519_public_key[32];$/;"	t	file:
ed25519_public_key_from_curve25519_public_key	crypto_ed25519.c	/^ed25519_public_key_from_curve25519_public_key(ed25519_public_key_t *pubkey,$/;"	f
ed25519_public_key_generate	crypto_ed25519.c	/^ed25519_public_key_generate(ed25519_public_key_t *pubkey_out,$/;"	f
ed25519_public_key_t	crypto_ed25519.h	/^} ed25519_public_key_t;$/;"	t	typeref:struct:__anon93
ed25519_public_to_base64	crypto_format.c	/^ed25519_public_to_base64(char *output,$/;"	f
ed25519_randombytes_unsafe	ed25519-randombytes-custom.h	/^ED25519_FN(ed25519_randombytes_unsafe) (void *p, size_t len)$/;"	f
ed25519_randombytes_unsafe	ed25519-randombytes.h	/^ED25519_FN(ed25519_randombytes_unsafe) (void *p, size_t len) {$/;"	f
ed25519_ref10_blind_public_key	blinding.c	/^int ed25519_ref10_blind_public_key(unsigned char *out,$/;"	f
ed25519_ref10_blind_secret_key	blinding.c	/^int ed25519_ref10_blind_secret_key(unsigned char *out,$/;"	f
ed25519_ref10_pubkey_from_curve25519_pubkey	keyconv.c	/^int ed25519_ref10_pubkey_from_curve25519_pubkey(unsigned char *out,$/;"	f
ed25519_reflects_consensus	or.h	/^  unsigned int ed25519_reflects_consensus:1; \/** DOCDOC *\/$/;"	m	struct:vote_routerstatus_t
ed25519_seckey_read_from_file	crypto_ed25519.c	/^ed25519_seckey_read_from_file(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_seckey_write_to_file	crypto_ed25519.c	/^ed25519_seckey_write_to_file(const ed25519_secret_key_t *seckey,$/;"	f
ed25519_secret_key	ed25519.h	/^typedef unsigned char ed25519_secret_key[32];$/;"	t
ed25519_secret_key	ed25519_tor.c	/^typedef unsigned char ed25519_secret_key[32];$/;"	t	file:
ed25519_secret_key_from_seed	crypto_ed25519.c	/^ed25519_secret_key_from_seed(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_secret_key_generate	crypto_ed25519.c	/^ed25519_secret_key_generate(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_secret_key_t	crypto_ed25519.h	/^} ed25519_secret_key_t;$/;"	t	typeref:struct:__anon94
ed25519_set_impl_params	crypto_ed25519.c	/^ed25519_set_impl_params(int use_donna)$/;"	f
ed25519_sign	crypto_ed25519.c	/^ed25519_sign(ed25519_signature_t *signature_out,$/;"	f
ed25519_sign_open	ed25519_tor.c	/^ED25519_FN(ed25519_sign_open) (const unsigned char *m, size_t mlen, const ed25519_public_key pk, const ed25519_signature RS) {$/;"	f	file:
ed25519_sign_open_batch	ed25519-donna-batchverify.h	/^ED25519_FN(ed25519_sign_open_batch) (const unsigned char **m, size_t *mlen, const unsigned char **pk, const unsigned char **RS, size_t num, int *valid) {$/;"	f
ed25519_signature	ed25519.h	/^typedef unsigned char ed25519_signature[64];$/;"	t
ed25519_signature	ed25519_tor.c	/^typedef unsigned char ed25519_signature[64];$/;"	t	file:
ed25519_signature_from_base64	crypto_format.c	/^ed25519_signature_from_base64(ed25519_signature_t *sig,$/;"	f
ed25519_signature_t	crypto_ed25519.h	/^} ed25519_signature_t;$/;"	t	typeref:struct:__anon92
ed25519_signature_to_base64	crypto_format.c	/^ed25519_signature_to_base64(char *output,$/;"	f
ed25519_verify	ed25519-donna.h	/^ed25519_verify(const unsigned char *x, const unsigned char *y, size_t len) {$/;"	f
ed_key	link_handshake.h	/^  uint8_t ed_key[32];$/;"	m	struct:rsa_ed_crosscert_st
ed_key_init_from_file	routerkeys.c	/^ed_key_init_from_file(const char *fname, uint32_t flags,$/;"	f
ed_key_new	routerkeys.c	/^ed_key_new(const ed25519_keypair_t *signing_key,$/;"	f
edcert_deadcode_dummy__	ed25519_cert.c	/^int edcert_deadcode_dummy__ = 0;$/;"	v
edge_	or.h	/^  edge_connection_t edge_;$/;"	m	struct:entry_connection_t
edge_blocked_on_circ	or.h	/^  unsigned int edge_blocked_on_circ:1;$/;"	m	struct:edge_connection_t
edge_connection_new	connection.c	/^edge_connection_new(int type, int socket_family)$/;"	f
edge_connection_t	or.h	/^typedef struct edge_connection_t {$/;"	s
edge_connection_t	or.h	/^} edge_connection_t;$/;"	t	typeref:struct:edge_connection_t
edge_has_sent_end	or.h	/^  unsigned int edge_has_sent_end:1; \/**< For debugging; only used on edge$/;"	m	struct:edge_connection_t
edge_of_accounting_period_containing	hibernate.c	/^edge_of_accounting_period_containing(time_t now, int get_end)$/;"	f	file:
edge_reason_is_retriable	relay.c	/^edge_reason_is_retriable(int reason)$/;"	f	file:
edmap_node	keypin.h	/^  HT_ENTRY(keypin_ent_st) edmap_node;$/;"	m	struct:keypin_ent_st
ei_dl_status	or.h	/^  download_status_t ei_dl_status;$/;"	m	struct:signed_descriptor_t
enable_control_logging	control.c	/^enable_control_logging(void)$/;"	f
enclave_func_caller	TorSGX.cpp	/^void enclave_func_caller(void *args, int args_len)$/;"	f
enclave_init_ra	TorSGX.cpp	/^sgx_status_t enclave_init_ra($/;"	f
enclave_ra_close	TorSGX.cpp	/^sgx_status_t SGXAPI enclave_ra_close($/;"	f
encoded	torcert.h	/^  uint8_t *encoded;$/;"	m	struct:tor_cert_st
encoded	tortls.c	/^  uint8_t *encoded;$/;"	m	struct:tor_x509_cert_t	file:
encoded_len	torcert.h	/^  size_t encoded_len;$/;"	m	struct:tor_cert_st
encoded_len	tortls.c	/^  size_t encoded_len;$/;"	m	struct:tor_x509_cert_t	file:
end_of_fixed_part	link_handshake.h	/^  const uint8_t *end_of_fixed_part;$/;"	m	struct:auth1_st
end_of_signed	link_handshake.h	/^  const uint8_t *end_of_signed;$/;"	m	struct:auth1_st
end_of_signed	link_handshake.h	/^  const uint8_t *end_of_signed;$/;"	m	struct:rsa_ed_crosscert_st
end_reason	connection_edge.h	/^  int end_reason;$/;"	m	struct:__anon86
end_reason	or.h	/^  uint16_t end_reason;$/;"	m	struct:edge_connection_t
end_time	TorSGX.cpp	/^long start_time, end_time;$/;"	v
end_time	control.c	/^  long start_time, end_time;$/;"	v
enough_mtbf_info	dirserv.c	/^static int enough_mtbf_info = 0;$/;"	v	file:
enroll	service_provider.h	/^    sample_enroll enroll;$/;"	m	struct:sample_extended_epid_group
ensure_bandwidth_cap	config.c	/^ensure_bandwidth_cap(uint64_t *value, const char *desc, char **msg)$/;"	f	file:
ensure_request_map_initialized	directory.c	/^ensure_request_map_initialized(void)$/;"	f	file:
enter_v3_handshake_with_cell	channeltls.c	/^enter_v3_handshake_with_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f	file:
entries	or.h	/^  short_policy_entry_t entries[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:short_policy_t
entries_known_but_down	entrynodes.c	/^entries_known_but_down(const or_options_t *options)$/;"	f
entries_retry_all	entrynodes.c	/^entries_retry_all(const or_options_t *options)$/;"	f
entries_retry_helper	entrynodes.c	/^entries_retry_helper(const or_options_t *options, int act)$/;"	f	file:
entry_cfg	or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:entry_connection_t
entry_cfg	or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:listener_connection_t
entry_cfg	or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:port_cfg_t
entry_connection_new	connection.c	/^entry_connection_new(int type, int socket_family)$/;"	f
entry_connection_t	or.h	/^typedef struct entry_connection_t {$/;"	s
entry_connection_t	or.h	/^} entry_connection_t;$/;"	t	typeref:struct:entry_connection_t
entry_guard_free	entrynodes.c	/^entry_guard_free(entry_guard_t *e)$/;"	f	file:
entry_guard_get_by_id_digest	entrynodes.c	/^entry_guard_get_by_id_digest(const char *digest)$/;"	f
entry_guard_inc_circ_attempt_count	circpathbias.c	/^entry_guard_inc_circ_attempt_count(entry_guard_t *guard)$/;"	f	file:
entry_guard_register_connect_status	entrynodes.c	/^entry_guard_register_connect_status(const char *digest, int succeeded,$/;"	f
entry_guard_set_status	entrynodes.c	/^entry_guard_set_status(entry_guard_t *e, const node_t *node,$/;"	f	file:
entry_guard_t	entrynodes.h	/^typedef struct entry_guard_t {$/;"	s
entry_guard_t	entrynodes.h	/^} entry_guard_t;$/;"	t	typeref:struct:entry_guard_t
entry_guards	entrynodes.c	/^static smartlist_t *entry_guards = NULL;$/;"	v	file:
entry_guards_changed	entrynodes.c	/^entry_guards_changed(void)$/;"	f
entry_guards_compute_status	entrynodes.c	/^entry_guards_compute_status(const or_options_t *options, time_t now)$/;"	f
entry_guards_dirty	entrynodes.c	/^static int entry_guards_dirty = 0;$/;"	v	file:
entry_guards_free_all	entrynodes.c	/^entry_guards_free_all(void)$/;"	f
entry_guards_parse_state	entrynodes.c	/^entry_guards_parse_state(or_state_t *state, int set, char **msg)$/;"	f
entry_guards_set_from_config	entrynodes.c	/^entry_guards_set_from_config(const or_options_t *options)$/;"	f
entry_guards_update_state	entrynodes.c	/^entry_guards_update_state(or_state_t *state)$/;"	f
entry_is_live	entrynodes.c	/^entry_is_live(const entry_guard_t *e, entry_is_live_flags_t flags,$/;"	f
entry_is_live_flags_t	entrynodes.h	/^} entry_is_live_flags_t;$/;"	t	typeref:enum:__anon100
entry_is_time_to_retry	entrynodes.c	/^entry_is_time_to_retry(const entry_guard_t *e, time_t now)$/;"	f
entry_list_is_constrained	entrynodes.c	/^entry_list_is_constrained(const or_options_t *options)$/;"	f
entry_nodes_should_be_added	entrynodes.c	/^entry_nodes_should_be_added(void)$/;"	f
entry_port_cfg_t	or.h	/^typedef struct entry_port_cfg_t {$/;"	s
entry_port_cfg_t	or.h	/^} entry_port_cfg_t;$/;"	t	typeref:struct:entry_port_cfg_t
environ	orconfig.h	2446;"	d
environment_variable_names_equal	util.c	/^environment_variable_names_equal(const char *s1, const char *s2)$/;"	f
ephemeral_onion_services	or.h	/^  smartlist_t *ephemeral_onion_services;$/;"	m	struct:control_connection_t
epid_group_id	ias_ra.h	/^    sample_epid_group_id_t  epid_group_id;          \/\/ 4$/;"	m	struct:sample_quote_t
epoll_data	orconfig.h	/^typedef union epoll_data {$/;"	u
epoll_data_t	orconfig.h	/^} epoll_data_t;$/;"	t	typeref:union:epoll_data
epoll_event	orconfig.h	/^struct epoll_event {$/;"	s
equal	ge_scalarmult_base.c	/^static unsigned char equal(signed char b,signed char c)$/;"	f	file:
err	sandbox.c	/^  int err;$/;"	m	struct:cached_getaddrinfo_item_t	file:
err_hostname	dns_structs.h	/^    int err_hostname; \/** One of DNS_ERR_*, if PTR lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon62
err_ipv4	dns_structs.h	/^    int err_ipv4; \/**< One of DNS_ERR_*, if IPv4 lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon60
err_ipv6	dns_structs.h	/^    int err_ipv6; \/**< One of DNS_ERR_*, if IPv6 lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon61
errno_to_orconn_end_reason	reasons.c	/^errno_to_orconn_end_reason(int e)$/;"	f
errno_to_stream_end_reason	reasons.c	/^errno_to_stream_end_reason(int e)$/;"	f
error	routerparse.c	/^  char *error;                 \/**< For ERR_ tokens only. *\/$/;"	m	struct:directory_token_t	file:
esc_for_log	util.c	/^esc_for_log(const char *s)$/;"	f
esc_for_log_len	util.c	/^esc_for_log_len(const char *chars, size_t n)$/;"	f
esc_router_info	routerlist.c	/^esc_router_info(const routerinfo_t *router)$/;"	f
escaped	util.c	/^escaped(const char *s)$/;"	f
escaped_safe_str	config.c	/^escaped_safe_str(const char *address)$/;"	f
escaped_safe_str_client	config.c	/^escaped_safe_str_client(const char *address)$/;"	f
estimated_total_queue_size	channel.c	/^STATIC uint64_t estimated_total_queue_size = 0;$/;"	v
estimated_usec_for_onionskins	cpuworker.c	/^estimated_usec_for_onionskins(uint32_t n_requests, uint16_t onionskin_type)$/;"	f
ev	compat_libevent.c	/^  struct event *ev;$/;"	m	struct:periodic_timer_t	typeref:struct:periodic_timer_t::event	file:
evaluate_ctr_for_aes	aes.c	/^evaluate_ctr_for_aes(void)$/;"	f
evaluate_ecgroup_for_tls	tortls.c	/^evaluate_ecgroup_for_tls(const char *ecgroup)$/;"	f
evaluate_evp_for_aes	aes.c	/^evaluate_evp_for_aes(int force_val)$/;"	f
evbuffer_inbuf_callback	connection.c	/^evbuffer_inbuf_callback(struct evbuffer *buf,$/;"	f	file:
evbuffer_outbuf_callback	connection.c	/^evbuffer_outbuf_callback(struct evbuffer *buf,$/;"	f	file:
evdns_base_clear_nameservers_and_suspend	dns.c	45;"	d	file:
evdns_base_config_windows_nameservers	dns.c	56;"	d	file:
evdns_base_count_nameservers	dns.c	52;"	d	file:
evdns_base_new	dns.c	44;"	d	file:
evdns_base_resolv_conf_parse	dns.c	50;"	d	file:
evdns_base_resolve_ipv4	dns.c	64;"	d	file:
evdns_base_resolve_ipv6	dns.c	67;"	d	file:
evdns_base_resolve_reverse	dns.c	70;"	d	file:
evdns_base_resolve_reverse_ipv6	dns.c	73;"	d	file:
evdns_base_resume	dns.c	54;"	d	file:
evdns_base_search_clear	dns.c	47;"	d	file:
evdns_base_set_default_outgoing_bind_address	dns.c	48;"	d	file:
evdns_base_set_option_	dns.c	58;"	d	file:
evdns_base_set_option_	dns.c	78;"	d	file:
evdns_base_set_option_	dns.c	82;"	d	file:
evdns_callback	dns.c	/^evdns_callback(int result, char type, int count, int ttl, void *addresses,$/;"	f	file:
evdns_err_is_transient	dns.c	/^evdns_err_is_transient(int err)$/;"	f	file:
evdns_get_orig_address	dnsserv.c	/^evdns_get_orig_address(const struct evdns_server_request *req,$/;"	f	file:
evdns_log_cb	dns.c	/^evdns_log_cb(int warn, const char *msg)$/;"	f	file:
evdns_server_callback	dnsserv.c	/^evdns_server_callback(struct evdns_server_request *req, void *data_)$/;"	f	file:
evdns_wildcard_check_callback	dns.c	/^evdns_wildcard_check_callback(int result, char type, int count, int ttl,$/;"	f	file:
event	control.c	/^  uint16_t event;$/;"	m	struct:queued_event_s	file:
event_code	control.c	/^  uint16_t event_code;$/;"	m	struct:control_event_t	file:
event_mask	or.h	/^  uint64_t event_mask; \/**< Bitfield: which events does this controller$/;"	m	struct:control_connection_t
event_mask_t	control.c	/^typedef uint64_t event_mask_t;$/;"	t	file:
event_name	control.c	/^  const char *event_name;$/;"	m	struct:control_event_t	file:
event_to_log_severity	control.c	/^event_to_log_severity(int event)$/;"	f	file:
eventfd_alert	compat_threads.c	/^eventfd_alert(int fd)$/;"	f	file:
eventfd_drain	compat_threads.c	/^eventfd_drain(int fd)$/;"	f	file:
events	orconfig.h	/^    uint32_t     events;    \/* Epoll events *\/$/;"	m	struct:epoll_event
evp	aes.c	/^    EVP_CIPHER_CTX evp;$/;"	m	union:aes_cnt_cipher::__anon114	file:
evp	aes.c	/^  EVP_CIPHER_CTX evp;$/;"	m	struct:aes_cnt_cipher	file:
evp_block128_fn	aes.c	/^evp_block128_fn(const uint8_t in[16],$/;"	f	file:
evutil_socket_t	compat_libevent.h	22;"	d
ewma_alloc_circ_data	circuitmux_ewma.c	/^ewma_alloc_circ_data(circuitmux_t *cmux,$/;"	f	file:
ewma_alloc_cmux_data	circuitmux_ewma.c	/^ewma_alloc_cmux_data(circuitmux_t *cmux)$/;"	f	file:
ewma_cmp_cmux	circuitmux_ewma.c	/^ewma_cmp_cmux(circuitmux_t *cmux_1, circuitmux_policy_data_t *pol_data_1,$/;"	f	file:
ewma_enabled	circuitmux_ewma.c	/^static int ewma_enabled = 0;$/;"	v	file:
ewma_free_circ_data	circuitmux_ewma.c	/^ewma_free_circ_data(circuitmux_t *cmux,$/;"	f	file:
ewma_free_cmux_data	circuitmux_ewma.c	/^ewma_free_cmux_data(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_circ_active	circuitmux_ewma.c	/^ewma_notify_circ_active(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_circ_inactive	circuitmux_ewma.c	/^ewma_notify_circ_inactive(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_xmit_cells	circuitmux_ewma.c	/^ewma_notify_xmit_cells(circuitmux_t *cmux,$/;"	f	file:
ewma_pick_active_circuit	circuitmux_ewma.c	/^ewma_pick_active_circuit(circuitmux_t *cmux,$/;"	f	file:
ewma_policy	circuitmux_ewma.c	/^circuitmux_policy_t ewma_policy = {$/;"	v
ewma_policy_circ_data_s	circuitmux_ewma.c	/^struct ewma_policy_circ_data_s {$/;"	s	file:
ewma_policy_circ_data_t	circuitmux_ewma.c	/^typedef struct ewma_policy_circ_data_s ewma_policy_circ_data_t;$/;"	t	typeref:struct:ewma_policy_circ_data_s	file:
ewma_policy_data_s	circuitmux_ewma.c	/^struct ewma_policy_data_s {$/;"	s	file:
ewma_policy_data_t	circuitmux_ewma.c	/^typedef struct ewma_policy_data_s ewma_policy_data_t;$/;"	t	typeref:struct:ewma_policy_data_s	file:
ewma_scale_factor	circuitmux_ewma.c	/^static double ewma_scale_factor = 0.1;$/;"	v	file:
exit	orconfig.h	2425;"	d
exit_bytes_read	rephist.c	/^static uint64_t *exit_bytes_read = NULL;$/;"	v	file:
exit_bytes_written	rephist.c	/^static uint64_t *exit_bytes_written = NULL;$/;"	v	file:
exit_function	main.c	/^exit_function(void)$/;"	f	file:
exit_policy	or.h	/^  short_policy_t *exit_policy;$/;"	m	struct:microdesc_t
exit_policy	or.h	/^  smartlist_t *exit_policy; \/**< What streams will this OR permit$/;"	m	struct:__anon14
exit_policy_is_general_exit	policies.c	/^exit_policy_is_general_exit(smartlist_t *policy)$/;"	f
exit_policy_is_general_exit_helper	policies.c	/^exit_policy_is_general_exit_helper(smartlist_t *policy, int port)$/;"	f	file:
exit_policy_parser_cfg_t	policies.h	/^typedef int exit_policy_parser_cfg_t;$/;"	t
exit_policy_remove_redundancies	policies.c	/^exit_policy_remove_redundancies(smartlist_t *dest)$/;"	f	file:
exit_source	connection_edge.h	/^  addressmap_entry_source_t exit_source;$/;"	m	struct:__anon86
exit_streams	rephist.c	/^static uint32_t *exit_streams = NULL;$/;"	v	file:
exitsummary	or.h	/^  char *exitsummary; \/**< exit policy summary -$/;"	m	struct:routerstatus_t
exitward	or.h	/^  unsigned int exitward:1; \/**< 0 for app-ward, 1 for exit-ward. *\/$/;"	m	struct:testing_cell_stats_entry_t
exp_field	ed25519_cert.h	/^  uint32_t exp_field;$/;"	m	struct:ed25519_cert_st
expand256_modm	modm-donna-32bit.h	/^expand256_modm(bignum256modm out, const unsigned char *in, size_t len) {$/;"	f
expand256_modm	modm-donna-64bit.h	/^expand256_modm(bignum256modm out, const unsigned char *in, size_t len) {$/;"	f
expand_filename	util.c	/^expand_filename(const char *filename)$/;"	f
expand_raw256_modm	modm-donna-32bit.h	/^expand_raw256_modm(bignum256modm out, const unsigned char in[32]) {$/;"	f
expand_raw256_modm	modm-donna-64bit.h	/^expand_raw256_modm(bignum256modm out, const unsigned char in[32]) {$/;"	f
expected_bandwidth_usage	hibernate.c	/^static uint64_t expected_bandwidth_usage = 0;$/;"	v	file:
expiration	link_handshake.h	/^  uint32_t expiration;$/;"	m	struct:rsa_ed_crosscert_st
expire	dns_structs.h	/^  time_t expire; \/**< Remove items from cache after this time. *\/$/;"	m	struct:cached_resolve_t
expires	addressmap.c	/^  time_t expires;$/;"	m	struct:__anon87	file:
expires	or.h	/^  time_t expires;$/;"	m	struct:authority_cert_t
expiring_nodes	rendservice.c	/^  smartlist_t *expiring_nodes;$/;"	m	struct:rend_service_t	file:
expiry_time	or.h	/^  time_t expiry_time;$/;"	m	struct:__anon22
ext	ed25519_cert.h	/^  TRUNNEL_DYNARRAY_HEAD(, struct ed25519_cert_extension_st *) ext;$/;"	m	struct:ed25519_cert_st
ext_flags	ed25519_cert.h	/^  uint8_t ext_flags;$/;"	m	struct:ed25519_cert_extension_st
ext_length	ed25519_cert.h	/^  uint16_t ext_length;$/;"	m	struct:ed25519_cert_extension_st
ext_or_auth_cookie	ext_orport.c	/^STATIC uint8_t *ext_or_auth_cookie = NULL;$/;"	v
ext_or_auth_cookie_is_set	ext_orport.c	/^STATIC int ext_or_auth_cookie_is_set = 0;$/;"	v
ext_or_auth_correct_client_hash	or.h	/^  char *ext_or_auth_correct_client_hash;$/;"	m	struct:or_connection_t
ext_or_cmd_free	ext_orport.c	/^ext_or_cmd_free(ext_or_cmd_t *cmd)$/;"	f
ext_or_cmd_new	ext_orport.c	/^ext_or_cmd_new(uint16_t len)$/;"	f
ext_or_cmd_t	or.h	/^typedef struct ext_or_cmd_t {$/;"	s
ext_or_cmd_t	or.h	/^} ext_or_cmd_t;$/;"	t	typeref:struct:ext_or_cmd_t
ext_or_conn_id	or.h	/^  char *ext_or_conn_id;$/;"	m	struct:or_connection_t
ext_or_transport	or.h	/^  char *ext_or_transport;$/;"	m	struct:or_connection_t
ext_orport_free_all	ext_orport.c	/^ext_orport_free_all(void)$/;"	f
ext_type	ed25519_cert.h	/^  uint8_t ext_type;$/;"	m	struct:ed25519_cert_extension_st
extend_cell_format	onion.c	/^extend_cell_format(uint8_t *command_out, uint16_t *len_out,$/;"	f
extend_cell_parse	onion.c	/^extend_cell_parse(extend_cell_t *cell_out, const uint8_t command,$/;"	f
extend_cell_t	onion.h	/^typedef struct extend_cell_t {$/;"	s
extend_cell_t	onion.h	/^} extend_cell_t;$/;"	t	typeref:struct:extend_cell_t
extend_info	or.h	/^  extend_info_t *extend_info; \/**< Extend info of this introduction point. *\/$/;"	m	struct:rend_intro_point_t
extend_info	or.h	/^  extend_info_t *extend_info;$/;"	m	struct:crypt_path_t
extend_info	rendservice.h	/^      extend_info_t *extend_info;$/;"	m	struct:rend_intro_cell_s::__anon116::__anon118
extend_info	rendservice.h	/^      extend_info_t *extend_info;$/;"	m	struct:rend_intro_cell_s::__anon116::__anon119
extend_info_describe	router.c	/^extend_info_describe(const extend_info_t *ei)$/;"	f
extend_info_dup	circuitbuild.c	/^extend_info_dup(extend_info_t *info)$/;"	f
extend_info_free	circuitbuild.c	/^extend_info_free(extend_info_t *info)$/;"	f
extend_info_from_node	circuitbuild.c	/^extend_info_from_node(const node_t *node, int for_direct_connect)$/;"	f
extend_info_from_router	router.c	/^extend_info_from_router(const routerinfo_t *r)$/;"	f	file:
extend_info_get_description	router.c	/^extend_info_get_description(char *buf, const extend_info_t *ei)$/;"	f
extend_info_new	circuitbuild.c	/^extend_info_new(const char *nickname, const char *digest,$/;"	f
extend_info_t	or.h	/^typedef struct extend_info_t {$/;"	s
extend_info_t	or.h	/^} extend_info_t;$/;"	t	typeref:struct:extend_info_t
extended_cell_format	onion.c	/^extended_cell_format(uint8_t *command_out, uint16_t *len_out,$/;"	f
extended_cell_parse	onion.c	/^extended_cell_parse(extended_cell_t *cell_out,$/;"	f
extended_cell_t	onion.h	/^typedef struct extended_cell_t {$/;"	s
extended_cell_t	onion.h	/^} extended_cell_t;$/;"	t	typeref:struct:extended_cell_t
extended_epid_group_id	ias_ra.h	/^    uint32_t                extended_epid_group_id; \/\/ 12$/;"	m	struct:sample_quote_t
extended_epid_group_id	service_provider.h	/^    uint32_t                    extended_epid_group_id;$/;"	m	struct:sample_ra_msg0_t
extended_epid_group_id	service_provider.h	/^    uint32_t extended_epid_group_id;$/;"	m	struct:sample_extended_epid_group
extra	confparse.h	/^  config_var_t *extra;$/;"	m	struct:config_format_t
extra_info_args	transports.h	/^  char *extra_info_args;$/;"	m	struct:transport_t
extra_info_digest	or.h	/^  char extra_info_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
extra_info_digest256	or.h	/^  char extra_info_digest256[DIGEST256_LEN];$/;"	m	struct:__anon14
extra_info_map	or.h	/^  struct digest_ei_map_t *extra_info_map;$/;"	m	struct:__anon17	typeref:struct:__anon17::digest_ei_map_t
extract_escaped_string	control.c	/^extract_escaped_string(const char *start, size_t in_len_max,$/;"	f	file:
extrainfo_dump_to_string	router.c	/^extrainfo_dump_to_string(char **s_out, extrainfo_t *extrainfo,$/;"	f
extrainfo_free	routerlist.c	/^extrainfo_free(extrainfo_t *extrainfo)$/;"	f
extrainfo_free_	routerlist.c	/^extrainfo_free_(void *e)$/;"	f	file:
extrainfo_get_by_descriptor_digest	routerlist.c	/^extrainfo_get_by_descriptor_digest(const char *digest)$/;"	f
extrainfo_is_bogus	or.h	/^  unsigned int extrainfo_is_bogus : 1;$/;"	m	struct:signed_descriptor_t
extrainfo_parse_entry_from_string	routerparse.c	/^extrainfo_parse_entry_from_string(const char *s, const char *end,$/;"	f
extrainfo_store	or.h	/^  desc_store_t extrainfo_store;$/;"	m	struct:__anon17
extrainfo_t	or.h	/^typedef struct extrainfo_t {$/;"	s
extrainfo_t	or.h	/^} extrainfo_t;$/;"	t	typeref:struct:extrainfo_t
extrainfo_token_table	routerparse.c	/^static token_rule_t extrainfo_token_table[] = {$/;"	v	file:
f_crypto	or.h	/^  crypto_cipher_t *f_crypto;$/;"	m	struct:crypt_path_t
f_digest	or.h	/^  crypto_digest_t *f_digest; \/* for integrity checking *\/$/;"	m	struct:crypt_path_t
failure_count	or.h	/^  int failure_count;$/;"	m	struct:__anon22
failure_type	rendcache.h	/^  rend_intro_point_failure_t failure_type;$/;"	m	struct:rend_cache_failure_intro_t
fake_status	or.h	/^  routerstatus_t fake_status; \/**< Used when we need to pass this trusted$/;"	m	struct:dir_server_t
fallback_dir_server_new	routerlist.c	/^fallback_dir_server_new(const tor_addr_t *addr,$/;"	f
fallback_dir_servers	routerlist.c	/^static smartlist_t *fallback_dir_servers = NULL;$/;"	v	file:
family	address.h	/^  sa_family_t family;$/;"	m	struct:tor_addr_t
family	or.h	/^  smartlist_t *family;$/;"	m	struct:microdesc_t
family	sandbox.c	/^  int family;$/;"	m	struct:cached_getaddrinfo_item_t	file:
fascist_firewall_allows_address_dir	policies.c	/^fascist_firewall_allows_address_dir(const tor_addr_t *addr, uint16_t port)$/;"	f
fascist_firewall_allows_address_or	policies.c	/^fascist_firewall_allows_address_or(const tor_addr_t *addr, uint16_t port)$/;"	f
fascist_firewall_allows_node	policies.c	/^fascist_firewall_allows_node(const node_t *node)$/;"	f
fascist_firewall_allows_or	policies.c	/^fascist_firewall_allows_or(const routerinfo_t *ri)$/;"	f
fast	or.h	/^    struct fast_handshake_state_t *fast;$/;"	m	union:__anon19::__anon20	typeref:struct:__anon19::__anon20::fast_handshake_state_t
fast_bandwidth_kb	dirserv.c	/^static uint32_t fast_bandwidth_kb = 0;$/;"	v	file:
fast_client_handshake	onion_fast.c	/^fast_client_handshake(const fast_handshake_state_t *handshake_state,$/;"	f
fast_handshake_state_free	onion_fast.c	/^fast_handshake_state_free(fast_handshake_state_t *victim)$/;"	f
fast_handshake_state_t	onion_fast.h	/^typedef struct fast_handshake_state_t {$/;"	s
fast_handshake_state_t	onion_fast.h	/^} fast_handshake_state_t;$/;"	t	typeref:struct:fast_handshake_state_t
fast_memcmp	di_ops.h	26;"	d
fast_memcmpstart	util.c	/^fast_memcmpstart(const void *mem, size_t memlen,$/;"	f
fast_memeq	di_ops.h	27;"	d
fast_memneq	di_ops.h	28;"	d
fast_onionskin_create	onion_fast.c	/^fast_onionskin_create(fast_handshake_state_t **handshake_state_out,$/;"	f
fast_server_handshake	onion_fast.c	/^fast_server_handshake(const uint8_t *key_in, \/* DIGEST_LEN bytes *\/$/;"	f
fcontract	curve25519-donna.c	/^fcontract(u8 *output, limb *input_limbs) {$/;"	f	file:
fd	compat.c	/^  int fd;$/;"	m	struct:tor_lockfile_t	file:
fd	log.c	/^  int fd; \/**< fd to receive log messages, or -1 for none. *\/$/;"	m	struct:logfile_t	file:
fd	orconfig.h	/^    int      fd;$/;"	m	union:epoll_data
fd	util.c	/^  int fd; \/**< fd for the open file. *\/$/;"	m	struct:open_file_t	file:
fd	util.c	/^  int fd; \/**< fd for the open file. *\/$/;"	m	struct:real_open_file_t	file:
fdifference	curve25519-donna.c	/^static void fdifference(limb *output, const limb *in) {$/;"	f	file:
fdopen_file	util.c	/^fdopen_file(open_file_t *file_data)$/;"	f
fe	fe.h	/^typedef crypto_int32 fe[10];$/;"	t
fe_0	fe.h	21;"	d
fe_0	fe_0.c	/^void fe_0(fe h)$/;"	f
fe_1	fe.h	22;"	d
fe_1	fe_1.c	/^void fe_1(fe h)$/;"	f
fe_add	fe.h	25;"	d
fe_add	fe_add.c	/^void fe_add(fe h,const fe f,const fe g)$/;"	f
fe_cmov	fe.h	24;"	d
fe_cmov	fe_cmov.c	/^void fe_cmov(fe f,const fe g,unsigned int b)$/;"	f
fe_copy	fe.h	18;"	d
fe_copy	fe_copy.c	/^void fe_copy(fe h,const fe f)$/;"	f
fe_cswap	fe.h	23;"	d
fe_frombytes	fe.h	16;"	d
fe_frombytes	fe_frombytes.c	/^void fe_frombytes(fe h,const unsigned char *s)$/;"	f
fe_invert	fe.h	32;"	d
fe_invert	fe_invert.c	/^void fe_invert(fe out,const fe z)$/;"	f
fe_isnegative	fe.h	20;"	d
fe_isnegative	fe_isnegative.c	/^int fe_isnegative(const fe f)$/;"	f
fe_isnonzero	fe.h	19;"	d
fe_isnonzero	fe_isnonzero.c	/^int fe_isnonzero(const fe f)$/;"	f
fe_mul	fe.h	28;"	d
fe_mul	fe_mul.c	/^void fe_mul(fe h,const fe f,const fe g)$/;"	f
fe_mul121666	fe.h	31;"	d
fe_neg	fe.h	27;"	d
fe_neg	fe_neg.c	/^void fe_neg(fe h,const fe f)$/;"	f
fe_pow22523	fe.h	33;"	d
fe_pow22523	fe_pow22523.c	/^void fe_pow22523(fe out,const fe z)$/;"	f
fe_sq	fe.h	29;"	d
fe_sq	fe_sq.c	/^void fe_sq(fe h,const fe f)$/;"	f
fe_sq2	fe.h	30;"	d
fe_sq2	fe_sq2.c	/^void fe_sq2(fe h,const fe f)$/;"	f
fe_sub	fe.h	26;"	d
fe_sub	fe_sub.c	/^void fe_sub(fe h,const fe f,const fe g)$/;"	f
fe_tobytes	fe.h	17;"	d
fe_tobytes	fe_tobytes.c	/^void fe_tobytes(unsigned char *s,const fe h)$/;"	f
fetch_bridge_descriptors	entrynodes.c	/^fetch_bridge_descriptors(const or_options_t *options, time_t now)$/;"	f
fetch_ext_or_command_from_buf	buffers.c	/^fetch_ext_or_command_from_buf(buf_t *buf, ext_or_cmd_t **out)$/;"	f
fetch_ext_or_command_from_evbuffer	buffers.c	/^fetch_ext_or_command_from_evbuffer(struct evbuffer *buf, ext_or_cmd_t **out)$/;"	f
fetch_from_buf	buffers.c	/^fetch_from_buf(char *string, size_t string_len, buf_t *buf)$/;"	f
fetch_from_buf_http	buffers.c	/^fetch_from_buf_http(buf_t *buf,$/;"	f
fetch_from_buf_line	buffers.c	/^fetch_from_buf_line(buf_t *buf, char *data_out, size_t *data_len)$/;"	f
fetch_from_buf_socks	buffers.c	/^fetch_from_buf_socks(buf_t *buf, socks_request_t *req,$/;"	f
fetch_from_buf_socks_client	buffers.c	/^fetch_from_buf_socks_client(buf_t *buf, int state, char **reason)$/;"	f
fetch_from_evbuffer_http	buffers.c	/^fetch_from_evbuffer_http(struct evbuffer *buf,$/;"	f
fetch_from_evbuffer_socks	buffers.c	/^fetch_from_evbuffer_socks(struct evbuffer *buf, socks_request_t *req,$/;"	f
fetch_from_evbuffer_socks_client	buffers.c	/^fetch_from_evbuffer_socks_client(struct evbuffer *buf, int state,$/;"	f
fetch_missing_signatures	dirvote.c	/^  time_t fetch_missing_signatures;$/;"	m	struct:__anon113	file:
fetch_missing_votes	dirvote.c	/^  time_t fetch_missing_votes;$/;"	m	struct:__anon113	file:
fetch_status	entrynodes.c	/^  download_status_t fetch_status;$/;"	m	struct:__anon122	file:
fetch_v2_desc_by_addr	rendclient.c	/^fetch_v2_desc_by_addr(rend_data_t *query, smartlist_t *hsdirs)$/;"	f	file:
fetch_v2_desc_by_descid	rendclient.c	/^fetch_v2_desc_by_descid(const char *desc_id, const rend_data_t *rend_query,$/;"	f	file:
fetch_var_cell_from_buf	buffers.c	/^fetch_var_cell_from_buf(buf_t *buf, var_cell_t **out, int linkproto)$/;"	f
fetch_var_cell_from_evbuffer	buffers.c	/^fetch_var_cell_from_evbuffer(struct evbuffer *buf, var_cell_t **out,$/;"	f
fexpand	curve25519-donna.c	/^fexpand(limb *output, const u8 *input) {$/;"	f	file:
file_status	util.c	/^file_status(const char *fname)$/;"	f
file_status_t	util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	t	typeref:enum:__anon106
filename	compat.c	/^  char *filename;$/;"	m	struct:tor_lockfile_t	file:
filename	log.c	/^  char *filename; \/**< Filename to open. *\/$/;"	m	struct:logfile_t	file:
filename	util.c	/^  char *filename; \/**< Name of the original file. *\/$/;"	m	struct:open_file_t	file:
filename	util.c	/^  char *filename; \/**< Name of the original file. *\/$/;"	m	struct:real_open_file_t	file:
filter_dynamic	sandbox.c	/^static sandbox_cfg_t *filter_dynamic = NULL;$/;"	v	file:
filter_dynamic	sandbox.h	/^  sandbox_cfg_t *filter_dynamic;$/;"	m	struct:__anon85
filter_func	sandbox.c	/^static sandbox_filter_func_t filter_func[] = {$/;"	v	file:
filter_func	sandbox.h	/^  sandbox_filter_func_t *filter_func;$/;"	m	struct:__anon85
filter_nopar_gen	sandbox.c	/^static int filter_nopar_gen[] = {$/;"	v	file:
find_all_by_keyword	routerparse.c	/^find_all_by_keyword(smartlist_t *s, directory_keyword k)$/;"	f	file:
find_all_exitpolicy	routerparse.c	/^find_all_exitpolicy(smartlist_t *s)$/;"	f	file:
find_bridge_by_digest	entrynodes.c	/^find_bridge_by_digest(const char *digest)$/;"	f	file:
find_by_keyword	routerparse.c	547;"	d	file:
find_by_keyword_	routerparse.c	/^find_by_keyword_(smartlist_t *s, directory_keyword keyword,$/;"	f	file:
find_cipher_by_id	tortls.c	/^find_cipher_by_id(const SSL *ssl, const SSL_METHOD *m, uint16_t cipher)$/;"	f	file:
find_dl_schedule_and_len	directory.c	/^find_dl_schedule_and_len(download_status_t *dls, int server)$/;"	f	file:
find_element_starting_with	control.c	/^find_element_starting_with(smartlist_t *sl, int start_at, const char *prefix)$/;"	f	file:
find_expiring_intro_point	rendservice.c	/^find_expiring_intro_point(rend_service_t *service, origin_circuit_t *circ)$/;"	f	file:
find_intro_circuit	rendservice.c	/^find_intro_circuit(rend_intro_point_t *intro, const char *pk_digest)$/;"	f	file:
find_intro_point	rendservice.c	/^find_intro_point(origin_circuit_t *circ)$/;"	f	file:
find_largest_max	rephist.c	/^find_largest_max(bw_array_t *b)$/;"	f	file:
find_next_with	rephist.c	/^find_next_with(smartlist_t *sl, int i, const char *prefix)$/;"	f	file:
find_opt_by_keyword	routerparse.c	/^find_opt_by_keyword(smartlist_t *s, directory_keyword keyword)$/;"	f	file:
find_rp_for_intro	rendservice.c	/^find_rp_for_intro(const rend_intro_cell_t *intro,$/;"	f	file:
find_single_ipv6_orport	routerparse.c	/^find_single_ipv6_orport(const smartlist_t *list,$/;"	f	file:
find_start_of_next_microdesc	routerparse.c	/^find_start_of_next_microdesc(const char *s, const char *eos)$/;"	f	file:
find_start_of_next_router_or_extrainfo	routerparse.c	/^find_start_of_next_router_or_extrainfo(const char **s_ptr,$/;"	f	file:
find_start_of_next_routerstatus	routerparse.c	/^find_start_of_next_routerstatus(const char *s)$/;"	f	file:
find_str_at_start_of_line	util.c	/^find_str_at_start_of_line(const char *haystack, const char *needle)$/;"	f
find_torrc_filename	config.c	/^find_torrc_filename(config_line_t *cmd_arg,$/;"	f	file:
find_transport_name_by_bridge_addrport	entrynodes.c	/^find_transport_name_by_bridge_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
find_whitespace	util.c	/^find_whitespace(const char *s)$/;"	f
find_whitespace_eos	util.c	/^find_whitespace_eos(const char *s, const char *eos)$/;"	f
fingerprint_list	dirserv.c	/^static authdir_config_t *fingerprint_list = NULL;$/;"	v	file:
fingerprint_stack	or.h	/^  smartlist_t *fingerprint_stack;$/;"	m	struct:dir_connection_t
finish_daemon	util.c	/^finish_daemon(const char *cp)$/;"	f
finish_daemon	util.c	/^finish_daemon(const char *desired_cwd)$/;"	f
finish_daemon_called	util.c	/^static int finish_daemon_called = 0;$/;"	v	file:
finish_writing_to_file	util.c	/^finish_writing_to_file(open_file_t *file_data)$/;"	f
finish_writing_to_file_impl	util.c	/^finish_writing_to_file_impl(open_file_t *file_data, int abort_write)$/;"	f	file:
finished_channels	channel.c	/^static smartlist_t *finished_channels = NULL;$/;"	v	file:
finished_listeners	channel.c	/^static smartlist_t *finished_listeners = NULL;$/;"	v	file:
firewall_is_fascist_or	policies.c	/^firewall_is_fascist_or(void)$/;"	f
first	memarea.c	/^  memarea_chunk_t *first; \/**< Top of the chunk stack: never NULL. *\/$/;"	m	struct:memarea_t	file:
first	or.h	/^  char first[DIGEST_LEN];$/;"	m	struct:__anon34
fixed	channel.h	/^    } fixed;$/;"	m	union:cell_queue_entry_s::__anon75	typeref:struct:cell_queue_entry_s::__anon75::__anon76
fixedbytes0	pwbox.h	/^  uint32_t fixedbytes0;$/;"	m	struct:pwbox_encoded_st
fixedbytes1	pwbox.h	/^  uint32_t fixedbytes1;$/;"	m	struct:pwbox_encoded_st
flags	connection_edge.h	/^  uint32_t flags;$/;"	m	struct:begin_cell_t
flags	ias_ra.h	/^    uint64_t                flags;$/;"	m	struct:sample_attributes_t
flags	or.h	/^  uint64_t flags; \/**< Bit-field for all recognized flags; index into$/;"	m	struct:vote_routerstatus_t
flags	tinytest.h	/^	unsigned long flags; \/**< Bitfield of TT_* flags. *\/$/;"	m	struct:testcase_t
flavor	or.h	/^  consensus_flavor_t flavor; \/**< If a consensus, what kind? *\/$/;"	m	struct:networkstatus_t
flock	orconfig.h	/^struct flock {$/;"	s
flush_buf	buffers.c	/^flush_buf(tor_socket_t s, buf_t *buf, size_t sz, size_t *buf_flushlen)$/;"	f
flush_buf_tls	buffers.c	/^flush_buf_tls(tor_tls_t *tls, buf_t *buf, size_t flushlen,$/;"	f
flush_chunk	buffers.c	/^flush_chunk(tor_socket_t s, buf_t *buf, chunk_t *chunk, size_t sz,$/;"	f	file:
flush_chunk_tls	buffers.c	/^flush_chunk_tls(tor_tls_t *tls, buf_t *buf, chunk_t *chunk,$/;"	f	file:
flush_log_messages_from_startup	log.c	/^flush_log_messages_from_startup(void)$/;"	f
flush_pending_log_callbacks	log.c	/^flush_pending_log_callbacks(void)$/;"	f
flush_queued_event_pending	control.c	/^static int flush_queued_event_pending = 0;$/;"	v	file:
flush_queued_events_cb	control.c	/^flush_queued_events_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
flush_queued_events_event	control.c	/^static struct event *flush_queued_events_event = NULL;$/;"	v	typeref:struct:event	file:
fmonty	curve25519-donna.c	/^static void fmonty(limb *x2, limb *z2,  \/* output 2Q *\/$/;"	f	file:
fmt_addr	address.h	187;"	d
fmt_addr32	address.c	/^fmt_addr32(uint32_t addr)$/;"	f
fmt_addr_impl	address.c	/^fmt_addr_impl(const tor_addr_t *addr, int decorate)$/;"	f
fmt_addrport	address.c	/^fmt_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
fmt_and_decorate_addr	address.h	190;"	d
fmul	curve25519-donna.c	/^fmul(limb *output, const limb *in, const limb *in2) {$/;"	f	file:
fn	control.c	/^  getinfo_helper_t fn; \/**< The function that knows the answer: NULL if$/;"	m	struct:getinfo_item_t	file:
fn	tinytest.h	/^	testcase_fn fn; \/**< The function to run to implement this case. *\/$/;"	m	struct:testcase_t
fn	workqueue.c	/^  workqueue_reply_t (*fn)(void *state, void *arg);$/;"	m	struct:workqueue_entry_s	file:
fname_base	or.h	/^  const char *fname_base;$/;"	m	struct:desc_store_t
format_bridge_stats_controller	geoip.c	/^format_bridge_stats_controller(time_t now)$/;"	f	file:
format_cell_stats	control.c	/^format_cell_stats(char **event_string, circuit_t *circ,$/;"	f
format_client_stats_heartbeat	geoip.c	/^format_client_stats_heartbeat(time_t now)$/;"	f
format_dec_number_sigsafe	util.c	/^format_dec_number_sigsafe(unsigned long x, char *buf, int buf_len)$/;"	f
format_helper_exit_status	util.c	/^format_helper_exit_status(unsigned char child_state, int saved_errno,$/;"	f
format_hex_number_sigsafe	util.c	/^format_hex_number_sigsafe(unsigned long x, char *buf, int buf_len)$/;"	f
format_iso_time	util.c	/^format_iso_time(char *buf, time_t t)$/;"	f
format_iso_time_nospace	util.c	/^format_iso_time_nospace(char *buf, time_t t)$/;"	f
format_iso_time_nospace_usec	util.c	/^format_iso_time_nospace_usec(char *buf, const struct timeval *tv)$/;"	f
format_local_iso_time	util.c	/^format_local_iso_time(char *buf, time_t t)$/;"	f
format_msg	log.c	/^format_msg(char *buf, size_t buf_len,$/;"	f	file:
format_networkstatus_vote	dirvote.c	/^format_networkstatus_vote(crypto_pk_t *private_signing_key,$/;"	f
format_node_description	router.c	/^format_node_description(char *buf,$/;"	f
format_number_sigsafe	util.c	/^format_number_sigsafe(unsigned long x, char *buf, int buf_len,$/;"	f	file:
format_rfc1123_time	util.c	/^format_rfc1123_time(char *buf, time_t t)$/;"	f
format_time_interval	util.c	/^format_time_interval(char *out, size_t out_len, long interval)$/;"	f
format_versions_list	dirserv.c	/^format_versions_list(config_line_t *ln)$/;"	f	file:
format_win32_error	compat.c	/^format_win32_error(DWORD err)$/;"	f
format_win_cmdline_argument	util.c	/^format_win_cmdline_argument(const char *arg)$/;"	f	file:
fourP0	curve25519-donna-32bit.h	/^static const uint32_t fourP0      = 0x0fffffb4;$/;"	v
fourP0	curve25519-donna-64bit.h	/^static const uint64_t fourP0     = 0x1fffffffffffb4;$/;"	v
fourP1234	curve25519-donna-64bit.h	/^static const uint64_t fourP1234  = 0x1ffffffffffffc;$/;"	v
fourP13579	curve25519-donna-32bit.h	/^static const uint32_t fourP13579  = 0x07fffffc;$/;"	v
fourP2468	curve25519-donna-32bit.h	/^static const uint32_t fourP2468   = 0x0ffffffc;$/;"	v
fp_by_name	dirserv.c	/^  strmap_t *fp_by_name; \/**< Map from lc nickname to fingerprint. *\/$/;"	m	struct:authdir_config_t	file:
fp_pair_map_assert_ok	fp_pair.c	/^fp_pair_map_assert_ok(const fp_pair_map_t *map)$/;"	f
fp_pair_map_entries_eq	fp_pair.c	/^fp_pair_map_entries_eq(const fp_pair_map_entry_t *a,$/;"	f	file:
fp_pair_map_entry_hash	fp_pair.c	/^fp_pair_map_entry_hash(const fp_pair_map_entry_t *a)$/;"	f	file:
fp_pair_map_entry_s	fp_pair.c	/^struct fp_pair_map_entry_s {$/;"	s	file:
fp_pair_map_entry_t	fp_pair.h	/^typedef struct fp_pair_map_entry_s fp_pair_map_entry_t;$/;"	t	typeref:struct:fp_pair_map_entry_s
fp_pair_map_free	fp_pair.c	/^fp_pair_map_free(fp_pair_map_t *map, void (*free_val)(void*))$/;"	f
fp_pair_map_get	fp_pair.c	/^fp_pair_map_get(const fp_pair_map_t *map, const fp_pair_t *key)$/;"	f
fp_pair_map_get_by_digests	fp_pair.c	/^fp_pair_map_get_by_digests(const fp_pair_map_t *map,$/;"	f
fp_pair_map_isempty	fp_pair.c	/^fp_pair_map_isempty(const fp_pair_map_t *map)$/;"	f
fp_pair_map_iter_done	fp_pair.c	/^fp_pair_map_iter_done(fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_get	fp_pair.c	/^fp_pair_map_iter_get(fp_pair_map_iter_t *iter,$/;"	f
fp_pair_map_iter_init	fp_pair.c	/^fp_pair_map_iter_init(fp_pair_map_t *map)$/;"	f
fp_pair_map_iter_next	fp_pair.c	/^fp_pair_map_iter_next(fp_pair_map_t *map, fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_next_rmv	fp_pair.c	/^fp_pair_map_iter_next_rmv(fp_pair_map_t *map, fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_t	fp_pair.h	/^typedef fp_pair_map_entry_t *fp_pair_map_iter_t;$/;"	t
fp_pair_map_remove	fp_pair.c	/^fp_pair_map_remove(fp_pair_map_t *map, const fp_pair_t *key)$/;"	f
fp_pair_map_s	fp_pair.c	/^struct fp_pair_map_s {$/;"	s	file:
fp_pair_map_set	fp_pair.c	/^fp_pair_map_set(fp_pair_map_t *map, const fp_pair_t *key, void *val)$/;"	f
fp_pair_map_set_by_digests	fp_pair.c	/^fp_pair_map_set_by_digests(fp_pair_map_t *map,$/;"	f
fp_pair_map_size	fp_pair.c	/^fp_pair_map_size(const fp_pair_map_t *map)$/;"	f
fp_pair_map_t	fp_pair.h	/^typedef struct fp_pair_map_s fp_pair_map_t;$/;"	t	typeref:struct:fp_pair_map_s
fp_pair_t	or.h	/^} fp_pair_t;$/;"	t	typeref:struct:__anon34
fproduct	curve25519-donna.c	/^static void fproduct(limb *output, const limb *in2, const limb *in) {$/;"	f	file:
frac_nodes_with_descriptors	routerlist.c	/^frac_nodes_with_descriptors(const smartlist_t *sl,$/;"	f
fragile	or.h	/^  unsigned int fragile:1;$/;"	m	struct:config_line_t
freduce_coefficients	curve25519-donna.c	/^static void freduce_coefficients(limb *output) {$/;"	f	file:
freduce_degree	curve25519-donna.c	/^static void freduce_degree(limb *output) {$/;"	f	file:
free	channel.h	/^  void (*free)(channel_listener_t *);$/;"	m	struct:channel_listener_s
free	channel.h	/^  void (*free)(channel_t *);$/;"	m	struct:channel_s
free_cached_dir_	dirserv.c	/^free_cached_dir_(void *_d)$/;"	f	file:
free_cached_resolve_	dns.c	/^free_cached_resolve_(cached_resolve_t *r)$/;"	f	file:
free_circ_data	circuitmux.h	/^  void (*free_circ_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
free_cmux_data	circuitmux.h	/^  void (*free_cmux_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
free_execve_args	transports.c	/^free_execve_args(char **arg)$/;"	f
free_interface_address6_list	address.c	/^free_interface_address6_list(smartlist_t *addrs)$/;"	f
free_interface_address_list	address.h	/^free_interface_address_list(smartlist_t *addrs)$/;"	f
free_link_history_	rephist.c	/^free_link_history_(void *val)$/;"	f	file:
free_or_history	rephist.c	/^free_or_history(void *_hist)$/;"	f	file:
free_thread_state_fn	workqueue.c	/^  void (*free_thread_state_fn)(void*);$/;"	m	struct:threadpool_s	file:
free_update_arg_fn	workqueue.c	/^  void (*free_update_arg_fn)(void *);$/;"	m	struct:threadpool_s	file:
freelist	memarea.c	/^static memarea_chunk_t *freelist = NULL;$/;"	v	file:
freelist_len	memarea.c	/^static int freelist_len=0;$/;"	v	file:
fresh_until	or.h	/^  time_t fresh_until; \/**< Time before which this is the most recent vote or$/;"	m	struct:networkstatus_t
fresh_until	or.h	/^  time_t fresh_until;$/;"	m	struct:ns_detached_signatures_t
fscalar_product	curve25519-donna.c	/^static void fscalar_product(limb *output, const limb *in, const limb scalar) {$/;"	f	file:
fsquare	curve25519-donna.c	/^fsquare(limb *output, const limb *in) {$/;"	f	file:
fsquare_inner	curve25519-donna.c	/^static void fsquare_inner(limb *output, const limb *in) {$/;"	f	file:
fsum	curve25519-donna.c	/^static void fsum(limb *output, const limb *in) {$/;"	f	file:
full	confparse.h	/^  const char *full;$/;"	m	struct:config_abbrev_t
fullmsg	log.c	/^  char *fullmsg; \/**< The message, with all decorations *\/$/;"	m	struct:pending_log_message_t	file:
func_map	TorSGX.cpp	/^static map<int, void(*)(int)> func_map;$/;"	v	file:
g_a	service_provider.h	/^    sample_ec_pub_t             g_a;        \/\/ the Endian-ness of Ga is$/;"	m	struct:sample_ra_msg1_t
g_a	service_provider.h	/^    sample_ec_pub_t             g_a;        \/\/ the Endian-ness of Ga is$/;"	m	struct:sample_ra_msg3_t
g_a	service_provider.h	/^    sample_ec_pub_t             g_a;$/;"	m	struct:_sp_db_item_t
g_b	service_provider.h	/^    sample_ec_pub_t             g_b;        \/\/ the Endian-ness of Gb is$/;"	m	struct:sample_ra_msg2_t
g_b	service_provider.h	/^    sample_ec_pub_t             g_b;$/;"	m	struct:_sp_db_item_t
g_ctx	TorSGX.cpp	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_sp_db	service_provider.h	/^static sp_db_item_t g_sp_db;$/;"	v
g_sp_pub_key	TorSGX.cpp	/^static const sgx_ec256_public_t g_sp_pub_key = {$/;"	v	file:
ge25519	ed25519-donna.h	/^} ge25519;$/;"	t	typeref:struct:ge25519_t
ge25519_add	ed25519-donna-impl-base.h	/^ge25519_add(ge25519 *r, const ge25519 *p,  const ge25519 *q) {$/;"	f
ge25519_add	ed25519-donna-impl-sse2.h	/^ge25519_add(ge25519 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_add_p1p1	ed25519-donna-impl-base.h	/^ge25519_add_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_add_p1p1	ed25519-donna-impl-sse2.h	/^ge25519_add_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_basepoint	ed25519-donna-64bit-tables.h	/^static const ge25519 ge25519_basepoint = {$/;"	v
ge25519_double	ed25519-donna-impl-base.h	/^ge25519_double(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double	ed25519-donna-impl-sse2.h	/^ge25519_double(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_p1p1	ed25519-donna-impl-base.h	/^ge25519_double_p1p1(ge25519_p1p1 *r, const ge25519 *p) {$/;"	f
ge25519_double_p1p1	ed25519-donna-impl-sse2.h	/^ge25519_double_p1p1(ge25519_p1p1 *r, const ge25519 *p) {$/;"	f
ge25519_double_partial	ed25519-donna-impl-base.h	/^ge25519_double_partial(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_partial	ed25519-donna-impl-sse2.h	/^ge25519_double_partial(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_scalarmult_vartime	ed25519-donna-impl-base.h	/^ge25519_double_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const bignum256modm s1, const bignum256modm s2) {$/;"	f
ge25519_double_scalarmult_vartime	ed25519-donna-impl-sse2.h	/^ge25519_double_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const bignum256modm s1, const bignum256modm s2) {$/;"	f
ge25519_ec2d	ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_ec2d = {$/;"	v
ge25519_ecd	ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_ecd = {$/;"	v
ge25519_full_to_pniels	ed25519-donna-impl-base.h	/^ge25519_full_to_pniels(ge25519_pniels *p, const ge25519 *r) {$/;"	f
ge25519_full_to_pniels	ed25519-donna-impl-sse2.h	/^ge25519_full_to_pniels(ge25519_pniels *p, const ge25519 *r) {$/;"	f
ge25519_is_neutral_vartime	ed25519-donna-batchverify.h	/^ge25519_is_neutral_vartime(const ge25519 *p) {$/;"	f
ge25519_multi_scalarmult_vartime	ed25519-donna-batchverify.h	/^ge25519_multi_scalarmult_vartime(ge25519 *r, batch_heap *heap, size_t count) {$/;"	f
ge25519_multi_scalarmult_vartime_final	ed25519-donna-batchverify.h	/^ge25519_multi_scalarmult_vartime_final(ge25519 *r, ge25519 *point, bignum256modm scalar) {$/;"	f
ge25519_niels	ed25519-donna.h	/^} ge25519_niels;$/;"	t	typeref:struct:ge25519_niels_t
ge25519_niels_sliding_multiples	ed25519-donna-64bit-tables.h	/^static const ge25519_niels ge25519_niels_sliding_multiples[32] = {$/;"	v
ge25519_niels_t	ed25519-donna.h	/^typedef struct ge25519_niels_t {$/;"	s
ge25519_nielsadd2	ed25519-donna-impl-base.h	/^ge25519_nielsadd2(ge25519 *r, const ge25519_niels *q) {$/;"	f
ge25519_nielsadd2	ed25519-donna-impl-sse2.h	/^ge25519_nielsadd2(ge25519 *r, const ge25519_niels *q) {$/;"	f
ge25519_nielsadd2_p1p1	ed25519-donna-impl-base.h	/^ge25519_nielsadd2_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_niels *q, unsigned char signbit) {$/;"	f
ge25519_nielsadd2_p1p1	ed25519-donna-impl-sse2.h	/^ge25519_nielsadd2_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_niels *q, unsigned char signbit) {$/;"	f
ge25519_p1p1	ed25519-donna.h	/^} ge25519_p1p1;$/;"	t	typeref:struct:ge25519_p1p1_t
ge25519_p1p1_t	ed25519-donna.h	/^typedef struct ge25519_p1p1_t {$/;"	s
ge25519_p1p1_to_full	ed25519-donna-impl-base.h	/^ge25519_p1p1_to_full(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_full	ed25519-donna-impl-sse2.h	/^ge25519_p1p1_to_full(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_partial	ed25519-donna-impl-base.h	/^ge25519_p1p1_to_partial(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_partial	ed25519-donna-impl-sse2.h	/^ge25519_p1p1_to_partial(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_pack	ed25519-donna-impl-base.h	/^ge25519_pack(unsigned char r[32], const ge25519 *p) {$/;"	f
ge25519_pack	ed25519-donna-impl-sse2.h	/^ge25519_pack(unsigned char r[32], const ge25519 *p) {$/;"	f
ge25519_pniels	ed25519-donna.h	/^} ge25519_pniels;$/;"	t	typeref:struct:ge25519_pniels_t
ge25519_pniels_t	ed25519-donna.h	/^typedef struct ge25519_pniels_t {$/;"	s
ge25519_pnielsadd	ed25519-donna-impl-base.h	/^ge25519_pnielsadd(ge25519_pniels *r, const ge25519 *p, const ge25519_pniels *q) {$/;"	f
ge25519_pnielsadd	ed25519-donna-impl-sse2.h	/^ge25519_pnielsadd(ge25519_pniels *r, const ge25519 *p, const ge25519_pniels *q) {$/;"	f
ge25519_pnielsadd_p1p1	ed25519-donna-impl-base.h	/^ge25519_pnielsadd_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_pniels *q, unsigned char signbit) {$/;"	f
ge25519_pnielsadd_p1p1	ed25519-donna-impl-sse2.h	/^ge25519_pnielsadd_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_pniels *q, unsigned char signbit) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-32bit-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-64bit-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-64bit-x86-32bit.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-64bit-x86.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-impl-base.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	ed25519-donna-impl-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_niels	ed25519-donna-impl-base.h	/^ge25519_scalarmult_base_niels(ge25519 *r, const uint8_t basepoint_table[256][96], const bignum256modm s) {$/;"	f
ge25519_scalarmult_base_niels	ed25519-donna-impl-sse2.h	/^ge25519_scalarmult_base_niels(ge25519 *r, const uint8_t table[256][96], const bignum256modm s) {$/;"	f
ge25519_sqrtneg1	ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_sqrtneg1 = {$/;"	v
ge25519_t	ed25519-donna.h	/^typedef struct ge25519_t {$/;"	s
ge25519_unpack_negative_vartime	ed25519-donna-impl-base.h	/^ge25519_unpack_negative_vartime(ge25519 *r, const unsigned char p[32]) {$/;"	f
ge25519_unpack_negative_vartime	ed25519-donna-impl-sse2.h	/^ge25519_unpack_negative_vartime(ge25519 *r, const unsigned char p[32]) {$/;"	f
ge25519_windowb_equal	ed25519-donna-impl-base.h	/^ge25519_windowb_equal(uint32_t b, uint32_t c) {$/;"	f
ge25519_windowb_equal	ed25519-donna-impl-sse2.h	/^ge25519_windowb_equal(uint32_t b, uint32_t c) {$/;"	f
ge_add	ge.h	69;"	d
ge_add	ge_add.c	/^void ge_add(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)$/;"	f
ge_cached	ge.h	/^} ge_cached;$/;"	t	typeref:struct:__anon83
ge_double_scalarmult_vartime	ge.h	72;"	d
ge_double_scalarmult_vartime	ge_double_scalarmult.c	/^void ge_double_scalarmult_vartime(ge_p2 *r,const unsigned char *a,const ge_p3 *A,const unsigned char *b)$/;"	f
ge_frombytes_negate_vartime	ge.h	53;"	d
ge_frombytes_negate_vartime	ge_frombytes.c	/^int ge_frombytes_negate_vartime(ge_p3 *h,const unsigned char *s)$/;"	f
ge_madd	ge.h	67;"	d
ge_madd	ge_madd.c	/^void ge_madd(ge_p1p1 *r,const ge_p3 *p,const ge_precomp *q)$/;"	f
ge_msub	ge.h	68;"	d
ge_msub	ge_msub.c	/^void ge_msub(ge_p1p1 *r,const ge_p3 *p,const ge_precomp *q)$/;"	f
ge_p1p1	ge.h	/^} ge_p1p1;$/;"	t	typeref:struct:__anon81
ge_p1p1_to_p2	ge.h	62;"	d
ge_p1p1_to_p2	ge_p1p1_to_p2.c	/^extern void ge_p1p1_to_p2(ge_p2 *r,const ge_p1p1 *p)$/;"	f
ge_p1p1_to_p3	ge.h	63;"	d
ge_p1p1_to_p3	ge_p1p1_to_p3.c	/^extern void ge_p1p1_to_p3(ge_p3 *r,const ge_p1p1 *p)$/;"	f
ge_p2	ge.h	/^} ge_p2;$/;"	t	typeref:struct:__anon79
ge_p2_0	ge.h	57;"	d
ge_p2_0	ge_p2_0.c	/^void ge_p2_0(ge_p2 *h)$/;"	f
ge_p2_dbl	ge.h	64;"	d
ge_p2_dbl	ge_p2_dbl.c	/^void ge_p2_dbl(ge_p1p1 *r,const ge_p2 *p)$/;"	f
ge_p3	ge.h	/^} ge_p3;$/;"	t	typeref:struct:__anon80
ge_p3_0	ge.h	58;"	d
ge_p3_0	ge_p3_0.c	/^void ge_p3_0(ge_p3 *h)$/;"	f
ge_p3_dbl	ge.h	65;"	d
ge_p3_dbl	ge_p3_dbl.c	/^void ge_p3_dbl(ge_p1p1 *r,const ge_p3 *p)$/;"	f
ge_p3_to_cached	ge.h	61;"	d
ge_p3_to_cached	ge_p3_to_cached.c	/^extern void ge_p3_to_cached(ge_cached *r,const ge_p3 *p)$/;"	f
ge_p3_to_p2	ge.h	60;"	d
ge_p3_to_p2	ge_p3_to_p2.c	/^extern void ge_p3_to_p2(ge_p2 *r,const ge_p3 *p)$/;"	f
ge_p3_tobytes	ge.h	55;"	d
ge_p3_tobytes	ge_p3_tobytes.c	/^void ge_p3_tobytes(unsigned char *s,const ge_p3 *h)$/;"	f
ge_precomp	ge.h	/^} ge_precomp;$/;"	t	typeref:struct:__anon82
ge_precomp_0	ge.h	59;"	d
ge_precomp_0	ge_precomp_0.c	/^void ge_precomp_0(ge_precomp *h)$/;"	f
ge_scalarmult_base	ge.h	71;"	d
ge_scalarmult_base	ge_scalarmult_base.c	/^void ge_scalarmult_base(ge_p3 *h,const unsigned char *a)$/;"	f
ge_sub	ge.h	70;"	d
ge_sub	ge_sub.c	/^void ge_sub(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)$/;"	f
ge_tobytes	ge.h	54;"	d
ge_tobytes	ge_tobytes.c	/^void ge_tobytes(unsigned char *s,const ge_p2 *h)$/;"	f
generate_certificate	tor-gencert.c	/^generate_certificate(void)$/;"	f	file:
generate_ed_link_cert	routerkeys.c	/^generate_ed_link_cert(const or_options_t *options, time_t now)$/;"	f
generate_identity_key	tor-gencert.c	/^generate_identity_key(void)$/;"	f	file:
generate_key	tor-gencert.c	/^generate_key(int bits)$/;"	f	file:
generate_signing_key	tor-gencert.c	/^generate_signing_key(void)$/;"	f	file:
generation	cpuworker.c	/^  int generation;$/;"	m	struct:worker_state_s	file:
generation	workqueue.c	/^  unsigned generation;$/;"	m	struct:threadpool_s	file:
generation	workqueue.c	/^  unsigned generation;$/;"	m	struct:workerthread_s	file:
generic_buffer_add	buffers.h	81;"	d
generic_buffer_add	buffers.h	90;"	d
generic_buffer_clear	buffers.h	83;"	d
generic_buffer_clear	buffers.h	92;"	d
generic_buffer_fetch_ext_or_cmd	buffers.h	85;"	d
generic_buffer_fetch_ext_or_cmd	buffers.h	94;"	d
generic_buffer_free	buffers.h	84;"	d
generic_buffer_free	buffers.h	93;"	d
generic_buffer_get	buffers.h	82;"	d
generic_buffer_get	buffers.h	91;"	d
generic_buffer_len	buffers.h	80;"	d
generic_buffer_len	buffers.h	89;"	d
generic_buffer_new	buffers.h	79;"	d
generic_buffer_new	buffers.h	88;"	d
generic_buffer_set_to_copy	buffers.c	/^generic_buffer_set_to_copy(generic_buffer_t **output,$/;"	f
generic_buffer_t	or.h	1145;"	d
generic_buffer_t	or.h	1147;"	d
geoip6_digest	geoip.c	/^static char geoip6_digest[DIGEST_LEN];$/;"	v	file:
geoip_add_entry	geoip.c	/^geoip_add_entry(const tor_addr_t *low, const tor_addr_t *high,$/;"	f	file:
geoip_bridge_stats_init	geoip.c	/^geoip_bridge_stats_init(time_t now)$/;"	f
geoip_bridge_stats_term	geoip.c	/^geoip_bridge_stats_term(void)$/;"	f
geoip_bridge_stats_write	geoip.c	/^geoip_bridge_stats_write(time_t now)$/;"	f
geoip_change_dirreq_state	geoip.c	/^geoip_change_dirreq_state(uint64_t dirreq_id, dirreq_type_t type,$/;"	f
geoip_client_action_t	or.h	/^} geoip_client_action_t;$/;"	t	typeref:enum:__anon36
geoip_countries	geoip.c	/^static smartlist_t *geoip_countries = NULL;$/;"	v	file:
geoip_country_t	geoip.c	/^typedef struct geoip_country_t {$/;"	s	file:
geoip_country_t	geoip.c	/^} geoip_country_t;$/;"	t	typeref:struct:geoip_country_t	file:
geoip_db_digest	geoip.c	/^geoip_db_digest(sa_family_t family)$/;"	f
geoip_digest	geoip.c	/^static char geoip_digest[DIGEST_LEN];$/;"	v	file:
geoip_dirreq_stats_init	geoip.c	/^geoip_dirreq_stats_init(time_t now)$/;"	f
geoip_dirreq_stats_term	geoip.c	/^geoip_dirreq_stats_term(void)$/;"	f
geoip_dirreq_stats_write	geoip.c	/^geoip_dirreq_stats_write(time_t now)$/;"	f
geoip_entry_stats_init	geoip.c	/^geoip_entry_stats_init(time_t now)$/;"	f
geoip_entry_stats_term	geoip.c	/^geoip_entry_stats_term(void)$/;"	f
geoip_entry_stats_write	geoip.c	/^geoip_entry_stats_write(time_t now)$/;"	f
geoip_format_bridge_stats	geoip.c	/^geoip_format_bridge_stats(time_t now)$/;"	f
geoip_format_dirreq_stats	geoip.c	/^geoip_format_dirreq_stats(time_t now)$/;"	f
geoip_format_entry_stats	geoip.c	/^geoip_format_entry_stats(time_t now)$/;"	f
geoip_free_all	geoip.c	/^geoip_free_all(void)$/;"	f
geoip_get_bridge_stats_controller	geoip.c	/^geoip_get_bridge_stats_controller(time_t now)$/;"	f
geoip_get_bridge_stats_extrainfo	geoip.c	/^geoip_get_bridge_stats_extrainfo(time_t now)$/;"	f
geoip_get_client_history	geoip.c	/^geoip_get_client_history(geoip_client_action_t action,$/;"	f
geoip_get_country_by_ipv4	geoip.c	/^geoip_get_country_by_ipv4(uint32_t ipaddr)$/;"	f
geoip_get_country_by_ipv6	geoip.c	/^geoip_get_country_by_ipv6(const struct in6_addr *addr)$/;"	f
geoip_get_country_name	geoip.c	/^geoip_get_country_name(country_t num)$/;"	f
geoip_get_dirreq_history	geoip.c	/^geoip_get_dirreq_history(dirreq_type_t type)$/;"	f	file:
geoip_get_request_history	geoip.c	/^geoip_get_request_history(void)$/;"	f
geoip_get_transport_history	geoip.c	/^geoip_get_transport_history(void)$/;"	f
geoip_ipv4_compare_entries_	geoip.c	/^geoip_ipv4_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
geoip_ipv4_compare_key_to_entry_	geoip.c	/^geoip_ipv4_compare_key_to_entry_(const void *_key, const void **_member)$/;"	f	file:
geoip_ipv4_entries	geoip.c	/^static smartlist_t *geoip_ipv4_entries = NULL, *geoip_ipv6_entries = NULL;$/;"	v	file:
geoip_ipv4_entry_t	geoip.c	/^typedef struct geoip_ipv4_entry_t {$/;"	s	file:
geoip_ipv4_entry_t	geoip.c	/^} geoip_ipv4_entry_t;$/;"	t	typeref:struct:geoip_ipv4_entry_t	file:
geoip_ipv6_compare_entries_	geoip.c	/^geoip_ipv6_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
geoip_ipv6_compare_key_to_entry_	geoip.c	/^geoip_ipv6_compare_key_to_entry_(const void *_key, const void **_member)$/;"	f	file:
geoip_ipv6_entries	geoip.c	/^static smartlist_t *geoip_ipv4_entries = NULL, *geoip_ipv6_entries = NULL;$/;"	v	file:
geoip_ipv6_entry_t	geoip.c	/^typedef struct geoip_ipv6_entry_t {$/;"	s	file:
geoip_ipv6_entry_t	geoip.c	/^} geoip_ipv6_entry_t;$/;"	t	typeref:struct:geoip_ipv6_entry_t	file:
geoip_load_file	geoip.c	/^geoip_load_file(sa_family_t family, const char *filename)$/;"	f
geoip_note_client_seen	geoip.c	/^geoip_note_client_seen(geoip_client_action_t action,$/;"	f
geoip_note_ns_response	geoip.c	/^geoip_note_ns_response(geoip_ns_response_t response)$/;"	f
geoip_ns_response_t	or.h	/^} geoip_ns_response_t;$/;"	t	typeref:enum:__anon37
geoip_parse_entry	geoip.c	/^geoip_parse_entry(const char *line, sa_family_t family)$/;"	f
geoip_remove_old_clients	geoip.c	/^geoip_remove_old_clients(time_t cutoff)$/;"	f
geoip_reset_dirreq_stats	geoip.c	/^geoip_reset_dirreq_stats(time_t now)$/;"	f
geoip_reset_entry_stats	geoip.c	/^geoip_reset_entry_stats(time_t now)$/;"	f
geoip_start_dirreq	geoip.c	/^geoip_start_dirreq(uint64_t dirreq_id, size_t response_size,$/;"	f
get_accounting_bytes	hibernate.c	/^get_accounting_bytes(void)$/;"	f	file:
get_bindaddr_for_server_proxy	transports.c	/^get_bindaddr_for_server_proxy(const managed_proxy_t *mp)$/;"	f	file:
get_bindaddr_from_transport_listen_line	config.c	/^get_bindaddr_from_transport_listen_line(const char *line,const char *transport)$/;"	f	file:
get_block_event_queue	control.c	/^get_block_event_queue(void)$/;"	f	file:
get_bw_samples	control.c	/^get_bw_samples(void)$/;"	f
get_cached_network_liveness	control.c	/^get_cached_network_liveness(void)$/;"	f	file:
get_cell_network_size	or.h	/^static INLINE int get_cell_network_size(int wide_circ_ids)$/;"	f
get_cert_list	routerlist.c	/^get_cert_list(const char *id_digest)$/;"	f	file:
get_circ	control.c	/^get_circ(const char *id)$/;"	f	file:
get_circ_id_size	or.h	/^static INLINE int get_circ_id_size(int wide_circ_ids)$/;"	f
get_circuit_build_close_time_ms	circuitstats.c	/^get_circuit_build_close_time_ms(void)$/;"	f
get_circuit_build_timeout_ms	circuitstats.c	/^get_circuit_build_timeout_ms(void)$/;"	f
get_circuit_build_times	circuitstats.c	/^get_circuit_build_times(void)$/;"	f
get_circuit_build_times_mutable	circuitstats.c	/^get_circuit_build_times_mutable(void)$/;"	f
get_configured_bridge_by_addr_port_digest	entrynodes.c	/^get_configured_bridge_by_addr_port_digest(const tor_addr_t *addr,$/;"	f	file:
get_configured_bridge_by_orports_digest	entrynodes.c	/^get_configured_bridge_by_orports_digest(const char *digest,$/;"	f	file:
get_configured_bridge_by_routerinfo	entrynodes.c	/^get_configured_bridge_by_routerinfo(const routerinfo_t *ri)$/;"	f	file:
get_configured_ports	config.c	/^get_configured_ports(void)$/;"	f
get_connection_array	main.c	/^get_connection_array(void)$/;"	f
get_controller_cookie_file_name	control.c	/^get_controller_cookie_file_name(void)$/;"	f
get_current_auth_key_cert	routerkeys.c	/^get_current_auth_key_cert(void)$/;"	f
get_current_auth_keypair	routerkeys.c	/^get_current_auth_keypair(void)$/;"	f
get_current_curve25519_keypair	router.c	/^get_current_curve25519_keypair(void)$/;"	f	file:
get_current_link_cert_cert	routerkeys.c	/^get_current_link_cert_cert(void)$/;"	f
get_current_process_environment_variables	util.c	/^get_current_process_environment_variables(void)$/;"	f
get_datadir_fname	config.h	59;"	d
get_datadir_fname2	config.h	62;"	d
get_datadir_fname2_suffix	config.h	55;"	d
get_datadir_fname_suffix	config.h	70;"	d
get_default_conf_file	config.c	/^get_default_conf_file(int defaults_file)$/;"	f	file:
get_desc_id_from_query	control.c	/^get_desc_id_from_query(const rend_data_t *rend_data, const char *hsdir_fp)$/;"	f	file:
get_detached_signatures_from_pending_consensuses	dirvote.c	/^get_detached_signatures_from_pending_consensuses(pending_consensus_t *pending,$/;"	f	file:
get_digest	tor-gencert.c	/^get_digest(EVP_PKEY *pkey, char *out)$/;"	f	file:
get_dir_info_status_string	nodelist.c	/^get_dir_info_status_string(void)$/;"	f
get_dirportfrontpage	config.c	/^get_dirportfrontpage(void)$/;"	f
get_ed_impl	crypto_ed25519.c	/^get_ed_impl(void)$/;"	f	file:
get_effective_bwburst	config.c	/^get_effective_bwburst(const or_options_t *options)$/;"	f
get_effective_bwrate	config.c	/^get_effective_bwrate(const or_options_t *options)$/;"	f
get_entry_guards	entrynodes.c	/^get_entry_guards(void)$/;"	f
get_environment	compat.c	/^get_environment(void)$/;"	f
get_escaped_string_length	control.c	/^get_escaped_string_length(const char *start, size_t in_len_max,$/;"	f	file:
get_ext_or_auth_cookie_file_name	ext_orport.c	/^get_ext_or_auth_cookie_file_name(void)$/;"	f
get_fingerprint	tor-gencert.c	/^get_fingerprint(EVP_PKEY *pkey, char *out)$/;"	f	file:
get_first_advertised_port_by_type_af	config.c	/^get_first_advertised_port_by_type_af(int listener_type, int address_family)$/;"	f
get_first_listener_addrport_string	config.c	/^get_first_listener_addrport_string(int listener_type)$/;"	f
get_frac_paths_needed_for_circs	nodelist.c	/^get_frac_paths_needed_for_circs(const or_options_t *options,$/;"	f	file:
get_frequent_members	dirvote.c	/^get_frequent_members(smartlist_t *out, smartlist_t *in, int min)$/;"	f	file:
get_interface_address_list	address.h	/^get_interface_address_list(int severity, int include_internal)$/;"	f
get_interface_addresses_ifaddrs	address.c	/^get_interface_addresses_ifaddrs(int severity)$/;"	f
get_interface_addresses_ioctl	address.c	/^get_interface_addresses_ioctl(int severity)$/;"	f
get_interface_addresses_win32	address.c	/^get_interface_addresses_win32(int severity)$/;"	f
get_last_hid_serv_requests	rendclient.c	/^get_last_hid_serv_requests(void)$/;"	f	file:
get_last_resolved_addr	config.c	/^get_last_resolved_addr(void)$/;"	f
get_link_history	rephist.c	/^get_link_history(const char *from_id, const char *to_id)$/;"	f	file:
get_list_of_ports_to_forward	config.c	/^get_list_of_ports_to_forward(void)$/;"	f
get_managed_proxy_by_argv_and_type	transports.c	/^get_managed_proxy_by_argv_and_type(char **proxy_argv, int is_server)$/;"	f	file:
get_master_identity_key	routerkeys.c	/^get_master_identity_key(void)$/;"	f
get_master_rsa_crosscert	routerkeys.c	/^get_master_rsa_crosscert(const uint8_t **cert_out,$/;"	f
get_master_signing_key_cert	routerkeys.c	/^get_master_signing_key_cert(void)$/;"	f
get_master_signing_keypair	routerkeys.c	/^get_master_signing_keypair(void)$/;"	f
get_max_sockets	compat.c	/^get_max_sockets(void)$/;"	f
get_memlevel	torgzip.c	/^get_memlevel(zlib_compression_level_t level)$/;"	f	file:
get_microdesc_cache	microdesc.c	/^get_microdesc_cache(void)$/;"	f
get_microdesc_cache_noload	microdesc.c	/^get_microdesc_cache_noload(void)$/;"	f	file:
get_min_log_level	log.c	/^get_min_log_level(void)$/;"	f
get_most_frequent_member	dirvote.c	346;"	d	file:
get_my_v3_authority_cert	router.c	/^get_my_v3_authority_cert(void)$/;"	f
get_my_v3_authority_signing_key	router.c	/^get_my_v3_authority_signing_key(void)$/;"	f
get_my_v3_legacy_cert	router.c	/^get_my_v3_legacy_cert(void)$/;"	f
get_my_v3_legacy_signing_key	router.c	/^get_my_v3_legacy_signing_key(void)$/;"	f
get_n_authorities	routerlist.c	/^get_n_authorities(dirinfo_type_t type)$/;"	f
get_n_open_sockets	compat.c	/^get_n_open_sockets(void)$/;"	f
get_net_param_from_list	networkstatus.c	/^get_net_param_from_list(smartlist_t *net_params, const char *param_name,$/;"	f	file:
get_next_token	routerparse.c	/^get_next_token(memarea_t *area,$/;"	f	file:
get_num_cpus	config.c	/^get_num_cpus(const or_options_t *options)$/;"	f
get_onion_key	router.c	/^get_onion_key(void)$/;"	f
get_onion_key_set_at	router.c	/^get_onion_key_set_at(void)$/;"	f
get_options_for_server_transport	config.c	/^get_options_for_server_transport(const char *transport)$/;"	f
get_options_from_transport_options_line	config.c	/^get_options_from_transport_options_line(const char *line,const char *transport)$/;"	f
get_options_mutable	config.c	/^get_options_mutable(void)$/;"	f
get_or_history	rephist.c	/^get_or_history(const char* id)$/;"	f	file:
get_overhead_estimate	channel.h	/^  double (*get_overhead_estimate)(channel_t *);$/;"	m	struct:channel_s
get_overhead_for_onionskins	cpuworker.c	/^get_overhead_for_onionskins(uint32_t *usec_out, double *frac_out,$/;"	f	file:
get_parent_directory	compat.c	/^get_parent_directory(char *fname)$/;"	f
get_pf_socket	connection_edge.c	/^get_pf_socket(void)$/;"	f
get_platform_str	router.c	/^get_platform_str(char *platform, size_t len)$/;"	f
get_possible_sybil_list	dirserv.c	/^get_possible_sybil_list(const smartlist_t *routers)$/;"	f	file:
get_primary_dir_port	config.h	84;"	d
get_primary_or_port	config.h	82;"	d
get_proxy_addrport	connection.c	/^get_proxy_addrport(tor_addr_t *addr, uint16_t *port, int *proxy_type,$/;"	f
get_proxy_type	connection.c	/^get_proxy_type(void)$/;"	f	file:
get_pt_proxy_uri	transports.c	/^get_pt_proxy_uri(void)$/;"	f
get_random_virtual_addr	addressmap.c	/^get_random_virtual_addr(const virtual_addr_conf_t *conf, tor_addr_t *addr_out)$/;"	f
get_remote_addr	channel.h	/^  int (*get_remote_addr)(channel_t *, tor_addr_t *);$/;"	m	struct:channel_s
get_remote_descr	channel.h	/^  const char * (*get_remote_descr)(channel_t *, int);$/;"	m	struct:channel_s
get_scale_factor	circuitmux_ewma.c	/^get_scale_factor(unsigned from_tick, unsigned to_tick)$/;"	f	file:
get_seconds_valid	rendcommon.c	/^get_seconds_valid(time_t now, const char *service_id)$/;"	f	file:
get_secret_id_part_bytes	rendcommon.c	/^get_secret_id_part_bytes(char *secret_id_part, uint32_t time_period,$/;"	f	file:
get_server_identity_key	router.c	/^get_server_identity_key(void)$/;"	f
get_short_version	config.c	/^get_short_version(void)$/;"	f
get_signed_descriptor_by_fp	dirserv.c	/^get_signed_descriptor_by_fp(const char *fp, int extrainfo,$/;"	f	file:
get_signewnym_epoch	main.c	/^get_signewnym_epoch(void)$/;"	f
get_sigrl	TorSGX.cpp	/^int get_sigrl(ra_samp_request_header_t * p_msg1_full)$/;"	f
get_sigrl	service_provider.h	/^    sample_get_sigrl get_sigrl;$/;"	m	struct:sample_extended_epid_group
get_socks_args_by_bridge_addrport	entrynodes.c	/^get_socks_args_by_bridge_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
get_ssl_context	TorSGX.cpp	/^void get_ssl_context(void *sgx_cert_cont, int sgx_cert_size, void *sgx_pkey_cont, int sgx_pkey_size)$/;"	f
get_stability	rephist.c	/^get_stability(or_history_t *hist, time_t when)$/;"	f	file:
get_stored_bindaddr_for_server_transport	statefile.c	/^get_stored_bindaddr_for_server_transport(const char *transport)$/;"	f
get_stream	control.c	/^get_stream(const char *id)$/;"	f	file:
get_string_from_pipe	util.c	/^get_string_from_pipe(FILE *stream, char *buf_out, size_t count)$/;"	f
get_syscall_name	sandbox.c	/^get_syscall_name(int syscall_num)$/;"	f	file:
get_ticks	test-ticks.h	/^get_ticks(void) {$/;"	f
get_time_period	rendcommon.c	/^get_time_period(time_t now, uint8_t deviation, const char *service_id)$/;"	f	file:
get_tlsclient_identity_key	router.c	/^get_tlsclient_identity_key(void)$/;"	f
get_token_arguments	routerparse.c	/^get_token_arguments(memarea_t *area, directory_token_t *tok,$/;"	f	file:
get_torrc_fname	config.c	/^get_torrc_fname(int defaults_fname)$/;"	f
get_total_system_memory	compat.c	/^get_total_system_memory(size_t *mem_out)$/;"	f
get_total_system_memory_impl	compat.c	/^get_total_system_memory_impl(void)$/;"	f	file:
get_total_weighted_time	rephist.c	/^get_total_weighted_time(or_history_t *hist, time_t when)$/;"	f	file:
get_transport_bindaddr	statefile.c	/^get_transport_bindaddr(const char *line, const char *transport)$/;"	f	file:
get_transport_bindaddr_from_config	config.c	/^get_transport_bindaddr_from_config(const char *transport)$/;"	f
get_transport_by_bridge_addrport	entrynodes.c	/^get_transport_by_bridge_addrport(const tor_addr_t *addr, uint16_t port,$/;"	f
get_transport_in_state_by_name	statefile.c	/^get_transport_in_state_by_name(const char *transport)$/;"	f
get_transport_name	channel.h	/^  int (*get_transport_name)(channel_t *chan, char **transport_out);$/;"	m	struct:channel_s
get_transport_options_for_server_proxy	transports.c	/^get_transport_options_for_server_proxy(const managed_proxy_t *mp)$/;"	f
get_transport_proxy_ports	transports.c	/^get_transport_proxy_ports(void)$/;"	f
get_uint16	compat.c	/^get_uint16(const void *cp)$/;"	f
get_uint32	compat.c	/^get_uint32(const void *cp)$/;"	f
get_uint64	compat.c	/^get_uint64(const void *cp)$/;"	f
get_uint8	compat.h	614;"	d
get_uname	compat.c	/^get_uname(void)$/;"	f
get_unique_circ_id_by_chan	circuitbuild.c	/^get_unique_circ_id_by_chan(channel_t *chan)$/;"	f
get_unique_stream_id_by_circ	connection_edge.c	/^get_unique_stream_id_by_circ(origin_circuit_t *circ)$/;"	f
get_user_homedir	compat.c	/^get_user_homedir(const char *username)$/;"	f
get_var_cell_header_size	or.h	/^static INLINE int get_var_cell_header_size(int wide_circ_ids)$/;"	f
get_version	config.c	/^get_version(void)$/;"	f
get_voter	dirvote.c	/^get_voter(const networkstatus_t *vote)$/;"	f	file:
get_weighted_fractional_uptime	rephist.c	/^get_weighted_fractional_uptime(or_history_t *hist, time_t when)$/;"	f	file:
get_windows_conf_root	config.c	/^get_windows_conf_root(void)$/;"	f	file:
getargs_helper	control.c	/^getargs_helper(const char *command, control_connection_t *conn,$/;"	f	file:
gethostname	orconfig.h	2437;"	d
getinfo_helper_accounting	hibernate.c	/^getinfo_helper_accounting(control_connection_t *conn,$/;"	f
getinfo_helper_config	config.c	/^getinfo_helper_config(control_connection_t *conn,$/;"	f
getinfo_helper_dir	control.c	/^getinfo_helper_dir(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_entry_guards	entrynodes.c	/^getinfo_helper_entry_guards(control_connection_t *conn,$/;"	f
getinfo_helper_events	control.c	/^getinfo_helper_events(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_geoip	geoip.c	/^getinfo_helper_geoip(control_connection_t *control_conn,$/;"	f
getinfo_helper_listeners	control.c	/^getinfo_helper_listeners(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_liveness	control.c	/^getinfo_helper_liveness(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_misc	control.c	/^getinfo_helper_misc(control_connection_t *conn, const char *question,$/;"	f	file:
getinfo_helper_networkstatus	networkstatus.c	/^getinfo_helper_networkstatus(control_connection_t *conn,$/;"	f
getinfo_helper_onions	control.c	/^getinfo_helper_onions(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_policies	policies.c	/^getinfo_helper_policies(control_connection_t *conn,$/;"	f
getinfo_helper_t	control.c	/^typedef int (*getinfo_helper_t)(control_connection_t *,$/;"	t	file:
getinfo_item_t	control.c	/^typedef struct getinfo_item_t {$/;"	s	file:
getinfo_item_t	control.c	/^} getinfo_item_t;$/;"	t	typeref:struct:getinfo_item_t	file:
getinfo_items	control.c	/^static const getinfo_item_t getinfo_items[] = {$/;"	v	file:
getpid	orconfig.h	2431;"	d
getsockname	orconfig.h	2438;"	d
gettimeofday	orconfig.h	2442;"	d
gettweak	blinding.c	/^gettweak(unsigned char *out, const unsigned char *param)$/;"	f	file:
gettweak	ed25519_tor.c	/^gettweak(unsigned char *out, const unsigned char *param)$/;"	f	file:
getuid	orconfig.h	2430;"	d
gid	service_provider.h	/^    sample_epid_group_id_t      gid;        \/\/ the Endian-ness of GID is$/;"	m	struct:sample_ra_msg1_t
gid_t	orconfig.h	/^typedef unsigned int gid_t;$/;"	t
git_tag	or.h	/^  char git_tag[DIGEST_LEN];$/;"	m	struct:tor_version_t
git_tag_len	or.h	/^  int git_tag_len;$/;"	m	struct:tor_version_t
global_circuitlist	circuitlist.c	/^static smartlist_t *global_circuitlist = NULL;$/;"	v	file:
global_circuitlist_idx	or.h	/^  int global_circuitlist_idx;$/;"	m	struct:circuit_t
global_cmdline_only_options	config.c	/^static config_line_t *global_cmdline_only_options = NULL;$/;"	v	file:
global_cmdline_options	config.c	/^static config_line_t *global_cmdline_options = NULL;$/;"	v	file:
global_default_options	config.c	/^static or_options_t *global_default_options = NULL;$/;"	v	file:
global_destroy_ctr	circuitmux.c	/^static int64_t global_destroy_ctr = 0;$/;"	v	file:
global_dirfrontpagecontents	config.c	/^static char *global_dirfrontpagecontents = NULL;$/;"	v	file:
global_event_mask	control.c	/^static event_mask_t global_event_mask = 0;$/;"	v	file:
global_identifier	channel.h	/^  uint64_t global_identifier;$/;"	m	struct:channel_listener_s
global_identifier	channel.h	/^  uint64_t global_identifier;$/;"	m	struct:channel_s
global_identifier	or.h	/^  uint32_t global_identifier;$/;"	m	struct:origin_circuit_t
global_identifier	or.h	/^  uint64_t global_identifier;$/;"	m	struct:connection_t
global_options	config.c	/^static or_options_t *global_options = NULL;$/;"	v	file:
global_rate_limit	connection.c	/^static struct bufferevent_rate_limit_group *global_rate_limit = NULL;$/;"	v	typeref:struct:bufferevent_rate_limit_group	file:
global_read_bucket	main.c	/^int global_read_bucket; \/**< Max number of bytes I can read this second. *\/$/;"	v
global_read_emptied	connection.c	/^                global_read_emptied = 0,$/;"	v	file:
global_relayed_read_bucket	main.c	/^int global_relayed_read_bucket;$/;"	v
global_relayed_read_emptied	connection.c	/^static uint32_t global_relayed_read_emptied = 0,$/;"	v	file:
global_relayed_write_bucket	main.c	/^int global_relayed_write_bucket;$/;"	v
global_relayed_write_emptied	connection.c	/^                global_relayed_write_emptied = 0,$/;"	v	file:
global_state	statefile.c	/^static or_state_t *global_state = NULL;$/;"	v	file:
global_write_bucket	main.c	/^int global_write_bucket; \/**< Max number of bytes I can write this second. *\/$/;"	v
global_write_bucket_low	connection.c	/^global_write_bucket_low(connection_t *conn, size_t attempt, int priority)$/;"	f
global_write_emptied	connection.c	/^                global_write_emptied = 0;$/;"	v	file:
gmtime	orconfig.h	2440;"	d
good_signature	or.h	/^  unsigned int good_signature : 1; \/**< Set to true if we've verified the sig$/;"	m	struct:document_signature_t
got_auth	or.h	/^  unsigned int got_auth : 1; \/**< Have we received any authentication data? *\/$/;"	m	struct:socks_request_t
got_libevent_error	main.c	/^got_libevent_error(void)$/;"	f	file:
got_renegotiate	tortls.c	/^  unsigned int got_renegotiate:1;$/;"	m	struct:tor_tls_t	file:
gr_gid	orconfig.h	/^	gid_t	gr_gid;			\/* [XBD] group id *\/$/;"	m	struct:group
gr_mem	orconfig.h	/^	char	**gr_mem;		\/* [XBD] group members *\/$/;"	m	struct:group
gr_name	orconfig.h	/^	char	*gr_name;		\/* [XBD] group name *\/$/;"	m	struct:group
gr_passwd	orconfig.h	/^	char	*gr_passwd;		\/* [???] group password *\/$/;"	m	struct:group
group	orconfig.h	/^struct group {$/;"	s
gt_i64_timei	routerlist.c	/^gt_i64_timei(uint64_t a, uint64_t b)$/;"	f	file:
gt_i64_timei	routerlist.c	1902;"	d	file:
guard_bandwidth_excluding_exits_kb	dirserv.c	/^static uint32_t guard_bandwidth_excluding_exits_kb = 0;$/;"	v	file:
guard_bandwidth_including_exits_kb	dirserv.c	/^static uint32_t guard_bandwidth_including_exits_kb = 0;$/;"	v	file:
guard_bw	entrynodes.h	/^  int guard_bw;$/;"	m	struct:guardfraction_bandwidth_t
guard_get_guardfraction_bandwidth	entrynodes.c	/^guard_get_guardfraction_bandwidth(guardfraction_bandwidth_t *guardfraction_bw,$/;"	f
guard_tk	dirserv.c	/^static long guard_tk = 0;$/;"	v	file:
guard_wfu	dirserv.c	/^static double guard_wfu = 0.0;$/;"	v	file:
guardfraction_bandwidth_t	entrynodes.h	/^typedef struct guardfraction_bandwidth_t {$/;"	s
guardfraction_bandwidth_t	entrynodes.h	/^} guardfraction_bandwidth_t;$/;"	t	typeref:struct:guardfraction_bandwidth_t
guardfraction_file_parse_guard_line	dirserv.c	/^guardfraction_file_parse_guard_line(const char *guard_line,$/;"	f	file:
guardfraction_file_parse_inputs_line	dirserv.c	/^guardfraction_file_parse_inputs_line(const char *inputs_line,$/;"	f	file:
guardfraction_line_apply	dirserv.c	/^guardfraction_line_apply(const char *guard_id,$/;"	f	file:
guardfraction_percentage	or.h	/^  uint32_t guardfraction_percentage;$/;"	m	struct:routerstatus_t
guards_get_lifetime	entrynodes.c	/^guards_get_lifetime(void)$/;"	f	file:
gx	service_provider.h	/^    uint8_t gx[SAMPLE_ECP_KEY_SIZE];$/;"	m	struct:sample_ec_pub_t
gy	service_provider.h	/^    uint8_t gy[SAMPLE_ECP_KEY_SIZE];$/;"	m	struct:sample_ec_pub_t
gzip_is_supported	torgzip.c	/^static int gzip_is_supported = -1;$/;"	v	file:
hStatus	ntmain.c	/^static SERVICE_STATUS_HANDLE hStatus;$/;"	v	file:
h_addr	orconfig.h	1702;"	d
h_addr_list	orconfig.h	/^  char **h_addr_list;           \/* List of addresses from name server.  *\/$/;"	m	struct:hostent
h_addrtype	orconfig.h	/^  short h_addrtype;               \/* Host address type.  *\/$/;"	m	struct:hostent
h_aliases	orconfig.h	/^  char **h_aliases;             \/* Alias list.  *\/$/;"	m	struct:hostent
h_length	orconfig.h	/^  short h_length;                 \/* Length of address.  *\/$/;"	m	struct:hostent
h_name	orconfig.h	/^  char *h_name;                 \/* Official name of host.  *\/$/;"	m	struct:hostent
h_tweak	onion_ntor.c	/^h_tweak(uint8_t *out,$/;"	f	file:
handle_client_auth_nonce	ext_orport.c	/^handle_client_auth_nonce(const char *client_nonce, size_t client_nonce_len,$/;"	f
handle_control_add_onion	control.c	/^handle_control_add_onion(control_connection_t *conn,$/;"	f	file:
handle_control_attachstream	control.c	/^handle_control_attachstream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_authchallenge	control.c	/^handle_control_authchallenge(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_authenticate	control.c	/^handle_control_authenticate(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_closecircuit	control.c	/^handle_control_closecircuit(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_closestream	control.c	/^handle_control_closestream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_del_onion	control.c	/^handle_control_del_onion(control_connection_t *conn,$/;"	f	file:
handle_control_dropguards	control.c	/^handle_control_dropguards(control_connection_t *conn,$/;"	f	file:
handle_control_extendcircuit	control.c	/^handle_control_extendcircuit(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_getconf	control.c	/^handle_control_getconf(control_connection_t *conn, uint32_t body_len,$/;"	f	file:
handle_control_getinfo	control.c	/^handle_control_getinfo(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_hsfetch	control.c	/^handle_control_hsfetch(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_hspost	control.c	/^handle_control_hspost(control_connection_t *conn,$/;"	f	file:
handle_control_loadconf	control.c	/^handle_control_loadconf(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_mapaddress	control.c	/^handle_control_mapaddress(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_postdescriptor	control.c	/^handle_control_postdescriptor(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_protocolinfo	control.c	/^handle_control_protocolinfo(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_redirectstream	control.c	/^handle_control_redirectstream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_resetconf	control.c	/^handle_control_resetconf(control_connection_t *conn, uint32_t len, char *body)$/;"	f	file:
handle_control_resolve	control.c	/^handle_control_resolve(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_saveconf	control.c	/^handle_control_saveconf(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_setcircuitpurpose	control.c	/^handle_control_setcircuitpurpose(control_connection_t *conn,$/;"	f	file:
handle_control_setconf	control.c	/^handle_control_setconf(control_connection_t *conn, uint32_t len, char *body)$/;"	f	file:
handle_control_setevents	control.c	/^handle_control_setevents(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_signal	control.c	/^handle_control_signal(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_takeownership	control.c	/^handle_control_takeownership(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_usefeature	control.c	/^handle_control_usefeature(control_connection_t *conn,$/;"	f	file:
handle_finished_proxy	transports.c	/^handle_finished_proxy(managed_proxy_t *mp)$/;"	f	file:
handle_fw_helper_line	util.c	/^handle_fw_helper_line(const char *executable, const char *line)$/;"	f	file:
handle_fw_helper_output	util.c	/^handle_fw_helper_output(const char *executable,$/;"	f	file:
handle_getinfo_helper	control.c	/^handle_getinfo_helper(control_connection_t *control_conn,$/;"	f	file:
handle_methods_done	transports.c	/^handle_methods_done(const managed_proxy_t *mp)$/;"	f	file:
handle_proxy_line	transports.c	/^handle_proxy_line(const char *line, managed_proxy_t *mp)$/;"	f
handle_signals	main.c	/^handle_signals(int is_parent)$/;"	f
handshake_len	onion.h	/^  uint16_t handshake_len;$/;"	m	struct:create_cell_t
handshake_len	onion.h	/^  uint16_t handshake_len;$/;"	m	struct:created_cell_t
handshake_state	or.h	/^  onion_handshake_state_t handshake_state;$/;"	m	struct:crypt_path_t
handshake_state	or.h	/^  or_handshake_state_t *handshake_state; \/**< If we are setting this connection$/;"	m	struct:or_connection_t
handshake_type	cpuworker.c	/^  uint16_t handshake_type;$/;"	m	struct:cpuworker_reply_t	file:
handshake_type	onion.c	/^  uint16_t handshake_type;$/;"	m	struct:onion_queue_t	file:
handshake_type	onion.h	/^  uint16_t handshake_type;$/;"	m	struct:create_cell_t
has_accepted_serverdesc	or.h	/^  unsigned int has_accepted_serverdesc:1;$/;"	m	struct:dir_server_t
has_bandwidth	or.h	/^  unsigned int has_bandwidth:1; \/**< The vote\/consensus had bw info *\/$/;"	m	struct:routerstatus_t
has_been_open	channel.h	/^  unsigned int has_been_open:1;$/;"	m	struct:channel_s
has_dns_init_failed	dns.c	/^has_dns_init_failed(void)$/;"	f
has_ed25519_listing	or.h	/^  unsigned int has_ed25519_listing:1; \/** DOCDOC *\/$/;"	m	struct:vote_routerstatus_t
has_exitsummary	or.h	/^  unsigned int has_exitsummary:1; \/**< The vote\/consensus had exit summaries *\/$/;"	m	struct:routerstatus_t
has_finished	or.h	/^  unsigned int has_finished : 1; \/**< Has the SOCKS handshake finished? Used to$/;"	m	struct:socks_request_t
has_guardfraction	or.h	/^  unsigned int has_guardfraction:1;$/;"	m	struct:routerstatus_t
has_measured_bw	or.h	/^  unsigned int has_measured_bw:1; \/**< The vote had a measured bw *\/$/;"	m	struct:vote_routerstatus_t
has_measured_bws	or.h	/^  unsigned int has_measured_bws : 1;\/**< True iff this networkstatus contains$/;"	m	struct:networkstatus_t
has_opened	or.h	/^  unsigned int has_opened : 1;$/;"	m	struct:origin_circuit_t
has_queued_writes	channel.h	/^  int (*has_queued_writes)(channel_t *);$/;"	m	struct:channel_s
hash_512bits	ed25519-donna.h	/^typedef unsigned char hash_512bits[64];$/;"	t
have_been_under_memory_pressure	relay.c	/^have_been_under_memory_pressure(void)$/;"	f
have_built_consensus	dirvote.c	/^  int have_built_consensus;$/;"	m	struct:__anon113	file:
have_completed_a_circuit	main.c	/^have_completed_a_circuit(void)$/;"	f
have_computed_timeout	circuitstats.h	/^  int have_computed_timeout;$/;"	m	struct:circuit_build_times_s
have_consensus_path	nodelist.c	/^static consensus_path_type_t have_consensus_path = CONSENSUS_PATH_UNKNOWN;$/;"	v	file:
have_enough_path_info	circuituse.c	/^have_enough_path_info(int need_exit)$/;"	f	file:
have_fetched_missing_signatures	dirvote.c	/^  int have_fetched_missing_signatures;$/;"	m	struct:__anon113	file:
have_fetched_missing_votes	dirvote.c	/^  int have_fetched_missing_votes;$/;"	m	struct:__anon113	file:
have_lockfile	main.c	/^have_lockfile(void)$/;"	f
have_min_dir_info	nodelist.c	/^static int have_min_dir_info = 0;$/;"	v	file:
have_noted_bootstrap_problem	or.h	/^  unsigned int have_noted_bootstrap_problem:1;$/;"	m	struct:or_connection_t
have_parsed_cmdline	config.c	/^static int have_parsed_cmdline = 0;$/;"	v	file:
have_performed_bandwidth_test	circuituse.c	/^static int have_performed_bandwidth_test = 0;$/;"	v	file:
have_published_consensus	dirvote.c	/^  int have_published_consensus;$/;"	m	struct:__anon113	file:
have_room_for_onionskin	onion.c	/^have_room_for_onionskin(uint16_t type)$/;"	f	file:
have_sent_protocolinfo	or.h	/^  unsigned int have_sent_protocolinfo:1;$/;"	m	struct:control_connection_t
have_voted	dirvote.c	/^  int have_voted;$/;"	m	struct:__anon113	file:
have_warned_about_new_version	networkstatus.c	/^static int have_warned_about_new_version = 0;$/;"	v	file:
have_warned_about_old_version	networkstatus.c	/^static int have_warned_about_old_version = 0;$/;"	v	file:
head	buffers.h	/^  chunk_t *head; \/**< First chunk in the list, or NULL for none. *\/$/;"	m	struct:buf_t
head	or.h	/^  TOR_SIMPLEQ_HEAD(cell_simpleq, packed_cell_t) head;$/;"	m	struct:cell_queue_t
header_len	pwbox.h	/^  uint8_t header_len;$/;"	m	struct:pwbox_encoded_st
heap	ed25519-donna-batchverify.h	/^	heap_index_t heap[heap_batch_size];$/;"	m	struct:batch_heap_t
heap_batch_size	ed25519-donna-batchverify.h	6;"	d
heap_build	ed25519-donna-batchverify.h	/^heap_build(batch_heap *heap, size_t count) {$/;"	f
heap_extend	ed25519-donna-batchverify.h	/^heap_extend(batch_heap *heap, size_t new_count) {$/;"	f
heap_get_top2	ed25519-donna-batchverify.h	/^heap_get_top2(batch_heap *heap, heap_index_t *max1, heap_index_t *max2, size_t limbsize) {$/;"	f
heap_index	circuitmux_ewma.c	/^  int heap_index;$/;"	m	struct:cell_ewma_s	file:
heap_index_t	ed25519-donna-batchverify.h	/^typedef size_t heap_index_t;$/;"	t
heap_insert_next	ed25519-donna-batchverify.h	/^heap_insert_next(batch_heap *heap) {$/;"	f
heap_swap	ed25519-donna-batchverify.h	/^heap_swap(heap_index_t *heap, size_t a, size_t b) {$/;"	f
heap_updated_root	ed25519-donna-batchverify.h	/^heap_updated_root(batch_heap *heap, size_t limbsize) {$/;"	f
held_by_nodes	or.h	/^  unsigned int held_by_nodes;$/;"	m	struct:microdesc_t
held_in_map	or.h	/^  unsigned int held_in_map : 1;$/;"	m	struct:microdesc_t
hex_decode_digit	util_format.c	/^hex_decode_digit(char c)$/;"	f
hex_decode_digit_	util_format.c	/^hex_decode_digit_(char c)$/;"	f	file:
hex_digest_nickname_decode	routerlist.c	/^hex_digest_nickname_decode(const char *hexdigest,$/;"	f
hex_digest_nickname_matches	routerlist.c	/^hex_digest_nickname_matches(const char *hexdigest, const char *identity_digest,$/;"	f
hex_str	util.c	/^hex_str(const char *from, size_t fromlen)$/;"	f
hexdigest_to_digest	routerlist.c	/^hexdigest_to_digest(const char *hexdigest, char *digest)$/;"	f
hi	ed25519-donna-portable.h	/^				uint64_t lo, hi;$/;"	m	struct:uint128_t
hi	ed25519-donna-portable.h	/^			uint64_t lo, hi;$/;"	m	struct:uint128_t
hi128	ed25519-donna-portable.h	51;"	d
hi128	ed25519-donna-portable.h	72;"	d
hi128	ed25519-donna-portable.h	86;"	d
hibernate_begin	hibernate.c	/^hibernate_begin(hibernate_state_t new_state, time_t now)$/;"	f	file:
hibernate_begin_shutdown	hibernate.c	/^hibernate_begin_shutdown(void)$/;"	f
hibernate_end	hibernate.c	/^hibernate_end(hibernate_state_t new_state)$/;"	f	file:
hibernate_end_time	hibernate.c	/^static time_t hibernate_end_time = 0;$/;"	v	file:
hibernate_end_time_elapsed	hibernate.c	/^hibernate_end_time_elapsed(time_t now)$/;"	f	file:
hibernate_go_dormant	hibernate.c	/^hibernate_go_dormant(time_t now)$/;"	f	file:
hibernate_hard_limit_reached	hibernate.c	/^hibernate_hard_limit_reached(void)$/;"	f	file:
hibernate_set_state_for_testing_	hibernate.c	/^hibernate_set_state_for_testing_(hibernate_state_t newstate)$/;"	f
hibernate_soft_limit_reached	hibernate.c	/^hibernate_soft_limit_reached(void)$/;"	f	file:
hibernate_state	hibernate.c	/^static hibernate_state_t hibernate_state = HIBERNATE_STATE_INITIAL;$/;"	v	file:
hibernate_state_t	hibernate.h	/^} hibernate_state_t;$/;"	t	typeref:enum:__anon121
hid_serv_acting_as_directory	routerlist.c	/^hid_serv_acting_as_directory(void)$/;"	f
hid_serv_get_responsible_directories	routerlist.c	/^hid_serv_get_responsible_directories(smartlist_t *responsible_dirs,$/;"	f
hid_serv_responsible_for_desc_id	routerlist.c	/^hid_serv_responsible_for_desc_id(const char *query)$/;"	f
high	dirvote.c	/^  int high;$/;"	m	struct:consensus_method_range_t	file:
high	dirvote.c	/^  int high;$/;"	m	struct:microdesc_vote_line_t	file:
history_map	rephist.c	/^static digestmap_t *history_map = NULL;$/;"	v	file:
hmac	pwbox.h	/^  uint8_t hmac[32];$/;"	m	struct:pwbox_encoded_st
hold_open_until_flushed	or.h	/^  unsigned int hold_open_until_flushed:1; \/**< Despite this connection's being$/;"	m	struct:connection_t
horizon	replaycache.h	/^  time_t horizon;$/;"	m	struct:replaycache_s
hostent	orconfig.h	/^struct hostent$/;"	s
hostname	dns_structs.h	/^    char *hostname; \/** A hostname, if PTR lookup happened successfully*\/$/;"	m	union:cached_resolve_t::__anon62
hostname	relay.h	/^  char *hostname;$/;"	m	struct:address_ttl_s
hostname_address	addressmap.c	/^  char *hostname_address;$/;"	m	struct:__anon88	file:
hostname_in_track_host_exits	circuituse.c	/^hostname_in_track_host_exits(const or_options_t *options, const char *address)$/;"	f
hostname_type_t	connection_edge.h	/^typedef enum hostname_type_t {$/;"	g
hostname_type_t	connection_edge.h	/^} hostname_type_t;$/;"	t	typeref:enum:hostname_type_t
hproc	procmon.c	/^  HANDLE hproc;$/;"	m	struct:tor_process_monitor_t	file:
hs_circ_has_timed_out	or.h	/^  unsigned int hs_circ_has_timed_out : 1;$/;"	m	struct:origin_circuit_t
hs_service_side_rend_circ_has_been_relaunched	or.h	/^  unsigned int hs_service_side_rend_circ_has_been_relaunched : 1;$/;"	m	struct:origin_circuit_t
hs_stats	rephist.c	/^static hs_stats_t *hs_stats = NULL;$/;"	v	file:
hs_stats_free	rephist.c	/^hs_stats_free(hs_stats_t *hs_stats)$/;"	f	file:
hs_stats_new	rephist.c	/^hs_stats_new(void)$/;"	f	file:
hs_stats_t	rephist.c	/^typedef struct hs_stats_t {$/;"	s	file:
hs_stats_t	rephist.c	/^} hs_stats_t;$/;"	t	typeref:struct:hs_stats_t	file:
hsdirs_fp	or.h	/^  smartlist_t *hsdirs_fp;$/;"	m	struct:rend_data_t
ht_ent	or.h	/^  HT_ENTRY(node_t) ht_ent;$/;"	m	struct:node_t
ht_improve_hash	ht.h	/^ht_improve_hash(unsigned h)$/;"	f
htonl	orconfig.h	2417;"	d
htons	orconfig.h	2416;"	d
http_get_header	directory.c	/^http_get_header(const char *headers, const char *which)$/;"	f	file:
http_set_address_origin	directory.c	/^http_set_address_origin(const char *headers, connection_t *conn)$/;"	f	file:
ias_att_report_t	ias_ra.h	/^} ias_att_report_t;$/;"	t	typeref:struct:_ias_att_report_t
ias_msg_type_t	network_ra.h	/^}ias_msg_type_t;$/;"	t	typeref:enum:_ias_msg_type_t
ias_platform_info_blob_t	remote_attestation_result.h	/^} ias_platform_info_blob_t;$/;"	t	typeref:struct:_ias_platform_info_blob_t
ias_pse_status_t	ias_ra.h	/^} ias_pse_status_t;$/;"	t	typeref:enum:__anon90
ias_quote_status_t	ias_ra.h	/^} ias_quote_status_t;$/;"	t	typeref:enum:__anon89
ias_revoc_reason_t	ias_ra.h	/^} ias_revoc_reason_t;$/;"	t	typeref:enum:__anon91
id	ias_ra.h	/^    uint32_t                id;$/;"	m	struct:_ias_att_report_t
id	ias_ra.h	/^    uint8_t                 id[16];$/;"	m	struct:sample_spid_t
id_cert	or.h	/^  tor_x509_cert_t *id_cert;$/;"	m	struct:or_handshake_state_t
identity	entrynodes.c	/^  char identity[DIGEST_LEN];$/;"	m	struct:__anon122	file:
identity	entrynodes.h	/^  char identity[DIGEST_LEN];$/;"	m	struct:entry_guard_t
identity	or.h	/^  char identity[DIGEST_LEN];$/;"	m	struct:node_t
identity_digest	channel.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:channel_s
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Digest of the router's identity$/;"	m	struct:routerstatus_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Hash of the public RSA key for$/;"	m	struct:dir_connection_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Hash of this router's identity key. *\/$/;"	m	struct:extend_info_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:document_signature_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:networkstatus_voter_info_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:or_connection_t
identity_digest	or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
identity_key	or.h	/^  crypto_pk_t *identity_key;$/;"	m	struct:authority_cert_t
identity_key	tor-gencert.c	/^EVP_PKEY *identity_key = NULL;$/;"	v
identity_map	or.h	/^  struct digest_ri_map_t *identity_map;$/;"	m	struct:__anon17	typeref:struct:__anon17::digest_ri_map_t
identity_pkey	or.h	/^  crypto_pk_t *identity_pkey;  \/**< Public RSA key for signing. *\/$/;"	m	struct:__anon14
idle_timeout	or.h	/^  uint16_t idle_timeout; \/**< How long can this connection sit with no$/;"	m	struct:or_connection_t
idx	routerlist.c	/^  int idx;$/;"	m	struct:duration_idx_t	file:
ifaddrs_to_smartlist	address.c	/^ifaddrs_to_smartlist(const struct ifaddrs *ifa)$/;"	f
ifreq_to_smartlist	address.c	/^ifreq_to_smartlist(char *buf, size_t buflen)$/;"	f
impl_donna	crypto_ed25519.c	/^static const ed25519_impl_t impl_donna = {$/;"	v	file:
impl_ref10	crypto_ed25519.c	/^static const ed25519_impl_t impl_ref10 = {$/;"	v	file:
implem	sandbox.h	/^  SB_IMPL implem;$/;"	m	struct:sandbox_cfg_elem
in6_addr	address.h	/^    struct in6_addr in6_addr;$/;"	m	union:tor_addr_t::__anon3	typeref:struct:tor_addr_t::__anon3::in6_addr
in6_addr	orconfig.h	/^struct in6_addr$/;"	s
in6_u	orconfig.h	/^  } in6_u;$/;"	m	struct:in6_addr	typeref:union:in6_addr::__anon55
in_addr	address.h	/^    struct in_addr in_addr;$/;"	m	union:tor_addr_t::__anon3	typeref:struct:tor_addr_t::__anon3::in_addr
in_addr	orconfig.h	/^struct in_addr {$/;"	s
in_addr_t	orconfig.h	/^typedef __uint32_t in_addr_t;$/;"	t
in_connection_handle_write	or.h	/^  unsigned int in_connection_handle_write:1;$/;"	m	struct:connection_t
in_flushed_some	or.h	/^  unsigned int in_flushed_some:1;$/;"	m	struct:connection_t
in_main_thread	compat_threads.c	/^in_main_thread(void)$/;"	f
in_pool	workqueue.c	/^  struct threadpool_s *in_pool;$/;"	m	struct:workerthread_s	typeref:struct:workerthread_s::threadpool_s	file:
in_port_t	orconfig.h	/^typedef __uint16_t in_port_t;$/;"	t
inbuf	or.h	/^  buf_t *inbuf; \/**< Buffer holding data read over this connection. *\/$/;"	m	struct:connection_t
inbuf_reached_eof	or.h	/^  unsigned int inbuf_reached_eof:1; \/**< Boolean: did read() return 0 on this$/;"	m	struct:connection_t
incoming_cmd	or.h	/^  char *incoming_cmd;$/;"	m	struct:control_connection_t
incoming_cmd_cur_len	or.h	/^  uint32_t incoming_cmd_cur_len;$/;"	m	struct:control_connection_t
incoming_cmd_len	or.h	/^  uint32_t incoming_cmd_len;$/;"	m	struct:control_connection_t
incoming_list	channel.h	/^  smartlist_t *incoming_list;$/;"	m	struct:channel_listener_s
incoming_queue	channel.h	/^  chan_cell_queue_t incoming_queue;$/;"	m	struct:channel_s
index	compat_threads.h	/^  DWORD index;$/;"	m	struct:tor_threadlocal_s
index	workqueue.c	/^  int index;$/;"	m	struct:workerthread_s	file:
info_blob	ias_ra.h	/^    ias_platform_info_blob_t    info_blob;$/;"	m	struct:_ias_att_report_t
inform_pending_connections	dns.c	/^inform_pending_connections(cached_resolve_t *resolve)$/;"	f	file:
inform_testing_reachability	circuitbuild.c	/^inform_testing_reachability(void)$/;"	f
init_addrinfo	main.c	/^init_addrinfo(void)$/;"	f	file:
init_cache_map	dns.c	/^init_cache_map(void)$/;"	f	file:
init_circuit_base	circuitlist.c	/^init_circuit_base(circuit_t *circ)$/;"	f	file:
init_connection_lists	main.c	/^init_connection_lists(void)$/;"	f
init_control_cookie_authentication	control.c	/^init_control_cookie_authentication(int enabled)$/;"	f
init_cookie_authentication	config.c	/^init_cookie_authentication(const char *fname, const char *header,$/;"	f
init_curve25519_keypair_from_file	router.c	/^init_curve25519_keypair_from_file(curve25519_keypair_t *keys_out,$/;"	f	file:
init_dh_param	crypto.c	/^init_dh_param(void)$/;"	f	file:
init_ext_or_cookie_authentication	ext_orport.c	/^init_ext_or_cookie_authentication(int is_enabled)$/;"	f
init_geoip_countries	geoip.c	/^init_geoip_countries(void)$/;"	f	file:
init_key_from_file	router.c	/^init_key_from_file(const char *fname, int generate, int severity,$/;"	f
init_keys	router.c	/^init_keys(void)$/;"	f
init_keys_client	router.c	/^init_keys_client(void)$/;"	f
init_keys_common	router.c	/^init_keys_common(void)$/;"	f	file:
init_libevent	config.c	/^init_libevent(const or_options_t *options)$/;"	f	file:
init_logging	log.c	/^init_logging(int disable_startup_queue)$/;"	f
init_nodelist	nodelist.c	/^init_nodelist(void)$/;"	f	file:
init_v3_authority_keys	router.c	/^init_v3_authority_keys(void)$/;"	f	file:
initialise_libseccomp_sandbox	sandbox.c	/^initialise_libseccomp_sandbox(sandbox_cfg_t* cfg)$/;"	f	file:
initvalue	confparse.h	/^  const char *initvalue; \/**< String (or null) describing initial value. *\/$/;"	m	struct:config_var_t
inline	ed25519-donna-portable.h	15;"	d
inline	ed25519-donna-portable.h	16;"	d
inline	eventdns_tor.h	16;"	d
inline	orconfig.h	710;"	d
inline	trunnel-impl.h	26;"	d
inline	trunnel.h	32;"	d
input_so_far	torgzip.c	/^  size_t input_so_far;$/;"	m	struct:tor_zlib_state_t	file:
inserted_time	buffers.h	/^  uint32_t inserted_time; \/**< Timestamp in truncated ms since epoch$/;"	m	struct:chunk_t
inserted_time	or.h	/^  uint32_t inserted_time; \/**< Time (in milliseconds since epoch, with high$/;"	m	struct:packed_cell_t
inspect_evbuffer	buffers.c	/^inspect_evbuffer(struct evbuffer *buf, char **data_out, size_t n,$/;"	f	file:
install_bt_handler	backtrace.c	/^install_bt_handler(void)$/;"	f	file:
install_sigsys_debugging	sandbox.c	/^install_sigsys_debugging(void)$/;"	f	file:
install_syscall_filter	sandbox.c	/^install_syscall_filter(sandbox_cfg_t* cfg)$/;"	f	file:
int16_t	ed25519-donna-portable-identify.h	/^	typedef signed short int16_t;$/;"	t
int16_t	torint.h	/^typedef signed int int16_t;$/;"	t
int16_t	torint.h	/^typedef signed short int16_t;$/;"	t
int32_t	ed25519-donna-portable-identify.h	/^	typedef signed int int32_t;$/;"	t
int32_t	torint.h	/^typedef signed int int32_t;$/;"	t
int32_t	torint.h	/^typedef signed long int32_t;$/;"	t
int64_t	ed25519-donna-portable-identify.h	/^	typedef signed __int64 int64_t;$/;"	t
int64_t	torint.h	/^typedef signed __int64 int64_t;$/;"	t
int64_t	torint.h	/^typedef signed long int64_t;$/;"	t
int64_t	torint.h	/^typedef signed long long int64_t;$/;"	t
int8_t	ed25519-donna-portable-identify.h	/^	typedef signed char int8_t;$/;"	t
int8_t	torint.h	/^typedef signed char int8_t;$/;"	t
int_array_contains	log.c	/^int_array_contains(const int *array, int n, int item)$/;"	f	file:
integrity	or.h	/^  char integrity[4]; \/**< Used to tell whether cell is corrupted. *\/$/;"	m	struct:__anon9
interval_end_time	hibernate.c	/^static time_t interval_end_time = 0;$/;"	v	file:
interval_start_time	hibernate.c	/^static time_t interval_start_time = 0;$/;"	v	file:
interval_starts	dirvote.c	/^  time_t interval_starts;$/;"	m	struct:__anon113	file:
interval_wakeup_time	hibernate.c	/^static time_t interval_wakeup_time = 0;$/;"	v	file:
intptr_t	torint.h	/^typedef int32_t intptr_t;$/;"	t
intptr_t	torint.h	/^typedef int64_t intptr_t;$/;"	t
intro_digest_map	circuitlist.c	/^static digestmap_t *intro_digest_map = NULL;$/;"	v	file:
intro_failures	rendcache.h	/^  digestmap_t *intro_failures;$/;"	m	struct:rend_cache_failure_t
intro_key	or.h	/^  crypto_pk_t *intro_key; \/**< Introduction key that replaces the service$/;"	m	struct:rend_intro_point_t
intro_key	or.h	/^  crypto_pk_t *intro_key;$/;"	m	struct:origin_circuit_t
intro_nodes	or.h	/^  smartlist_t *intro_nodes;$/;"	m	struct:rend_service_descriptor_t
intro_nodes	rendservice.c	/^  smartlist_t *intro_nodes; \/**< List of rend_intro_point_t's we have,$/;"	m	struct:rend_service_t	file:
intro_period_started	rendservice.c	/^  time_t intro_period_started; \/**< Start of the current period to build$/;"	m	struct:rend_service_t	file:
intro_point_accepted_intro_count	rendservice.c	/^intro_point_accepted_intro_count(rend_intro_point_t *intro)$/;"	f	file:
intro_point_should_expire_now	rendservice.c	/^intro_point_should_expire_now(rend_intro_point_t *intro,$/;"	f	file:
intro_version_handlers	rendservice.c	/^  (*intro_version_handlers[])($/;"	v	file:
invalid_router_usage_t	or.h	/^typedef enum invalid_router_usage_t {$/;"	g
invalid_router_usage_t	or.h	/^} invalid_router_usage_t;$/;"	t	typeref:enum:invalid_router_usage_t
ip_adapter_addresses_to_smartlist	address.c	/^ip_adapter_addresses_to_smartlist(const IP_ADAPTER_ADDRESSES *addresses)$/;"	f
ip_address_changed	main.c	/^ip_address_changed(int at_interface)$/;"	f
ip_high	geoip.c	/^  struct in6_addr ip_high; \/**< The highest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv6_entry_t	typeref:struct:geoip_ipv6_entry_t::in6_addr	file:
ip_high	geoip.c	/^  uint32_t ip_high; \/**< The highest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
ip_low	geoip.c	/^  struct in6_addr ip_low; \/**< The lowest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv6_entry_t	typeref:struct:geoip_ipv6_entry_t::in6_addr	file:
ip_low	geoip.c	/^  uint32_t ip_low; \/**< The lowest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
ipo_token_table	routerparse.c	/^static token_rule_t ipo_token_table[] = {$/;"	v	file:
ipv4_address	addressmap.c	/^  char *ipv4_address;$/;"	m	struct:__anon88	file:
ipv4_traffic	or.h	/^  unsigned int ipv4_traffic : 1;$/;"	m	struct:entry_port_cfg_t
ipv6_addr	or.h	/^  tor_addr_t ipv6_addr; \/**< IPv6 address for this router. *\/$/;"	m	struct:routerstatus_t
ipv6_addr	or.h	/^  tor_addr_t ipv6_addr;$/;"	m	struct:__anon14
ipv6_addr	or.h	/^  tor_addr_t ipv6_addr;$/;"	m	struct:microdesc_t
ipv6_address	addressmap.c	/^  char *ipv6_address;$/;"	m	struct:__anon88	file:
ipv6_exit_policy	or.h	/^  short_policy_t *ipv6_exit_policy;$/;"	m	struct:microdesc_t
ipv6_exit_policy	or.h	/^  struct short_policy_t *ipv6_exit_policy;$/;"	m	struct:__anon14	typeref:struct:__anon14::short_policy_t
ipv6_orport	or.h	/^  uint16_t ipv6_orport; \/**<IPV6 OR port for this router. *\/$/;"	m	struct:routerstatus_t
ipv6_orport	or.h	/^  uint16_t ipv6_orport;$/;"	m	struct:__anon14
ipv6_orport	or.h	/^  uint16_t ipv6_orport;$/;"	m	struct:microdesc_t
ipv6_preferred	or.h	/^  unsigned int ipv6_preferred:1;$/;"	m	struct:node_t
ipv6_traffic	or.h	/^  unsigned int ipv6_traffic : 1;$/;"	m	struct:entry_port_cfg_t
isServer	tortls.c	/^  unsigned int isServer:1; \/**< True iff this is a server-side connection *\/$/;"	m	struct:tor_tls_t	file:
is_accept	or.h	/^  unsigned int is_accept : 1;$/;"	m	struct:short_policy_t
is_ancient	or.h	/^  unsigned int is_ancient : 1;$/;"	m	struct:origin_circuit_t
is_annotation	routerparse.c	/^  int is_annotation;$/;"	m	struct:token_rule_t	file:
is_authority	or.h	/^  unsigned int is_authority:1; \/**< True iff this is a directory authority$/;"	m	struct:dir_server_t
is_authority	or.h	/^  unsigned int is_authority:1; \/**< True iff this router is an authority. *\/$/;"	m	struct:routerstatus_t
is_bad_exit	or.h	/^  unsigned int is_bad_exit:1; \/**< Do we think this exit is censored, borked,$/;"	m	struct:node_t
is_bad_exit	or.h	/^  unsigned int is_bad_exit:1; \/**< True iff this node is a bad choice for$/;"	m	struct:routerstatus_t
is_bad_for_new_circs	channel.h	/^  unsigned int is_bad_for_new_circs:1;$/;"	m	struct:channel_s
is_begindir	connection_edge.h	/^  unsigned is_begindir : 1;$/;"	m	struct:begin_cell_t
is_canonical	channel.h	/^  int (*is_canonical)(channel_t *, int);$/;"	m	struct:channel_s
is_canonical	or.h	/^  unsigned int is_canonical:1; \/**< True iff this policy is the canonical$/;"	m	struct:addr_policy_t
is_canonical	or.h	/^  unsigned int is_canonical:1;$/;"	m	struct:or_connection_t
is_client	channel.h	/^  unsigned int is_client:1;$/;"	m	struct:channel_s
is_collated	dircollate.h	/^  int is_collated;$/;"	m	struct:dircollator_s
is_compression_bomb	torgzip.c	/^is_compression_bomb(size_t size_in, size_t size_out)$/;"	f	file:
is_connection_with_client	or.h	/^  unsigned int is_connection_with_client:1;$/;"	m	struct:or_connection_t
is_destroy_cell	channel.c	/^is_destroy_cell(channel_t *chan,$/;"	f	file:
is_dir_cache	entrynodes.h	/^  unsigned int is_dir_cache : 1; \/**< Is this node a directory cache? *\/$/;"	m	struct:entry_guard_t
is_dns_request	or.h	/^  unsigned int is_dns_request:1;$/;"	m	struct:edge_connection_t
is_ed	link_handshake.h	/^  uint8_t is_ed;$/;"	m	struct:auth_ctx_st
is_exit	or.h	/^  unsigned int is_exit:1; \/**< Do we think this is an OK exit? *\/$/;"	m	struct:node_t
is_exit	or.h	/^  unsigned int is_exit:1; \/**< True iff this router is a good exit. *\/$/;"	m	struct:routerstatus_t
is_extrainfo	or.h	/^  unsigned int is_extrainfo : 1;$/;"	m	struct:signed_descriptor_t
is_fast	or.h	/^  unsigned int is_fast:1; \/** Do we think this is a fast OR? *\/$/;"	m	struct:node_t
is_fast	or.h	/^  unsigned int is_fast:1; \/**< True iff this router has good bandwidth. *\/$/;"	m	struct:routerstatus_t
is_first_hop	or.h	/^  unsigned int is_first_hop : 1;$/;"	m	struct:or_circuit_t
is_flagged_running	or.h	/^  unsigned int is_flagged_running:1;$/;"	m	struct:routerstatus_t
is_for_p_chan	circuitmux_ewma.c	/^  unsigned int is_for_p_chan : 1;$/;"	m	struct:cell_ewma_s	file:
is_group_writable	or.h	/^  unsigned is_group_writable : 1;$/;"	m	struct:port_cfg_t
is_gzip_supported	torgzip.c	/^is_gzip_supported(void)$/;"	f
is_hibernating	or.h	/^  unsigned int is_hibernating:1; \/**< Whether the router claims to be$/;"	m	struct:__anon14
is_hs_dir	or.h	/^  unsigned int is_hs_dir:1; \/**< True iff this router is a hidden service$/;"	m	struct:node_t
is_hs_dir	or.h	/^  unsigned int is_hs_dir:1; \/**< True iff this router is a v2-or-later hidden$/;"	m	struct:routerstatus_t
is_incoming	channel.h	/^  unsigned int is_incoming:1;$/;"	m	struct:channel_s
is_internal	or.h	/^  unsigned int is_internal : 1;$/;"	m	struct:__anon22
is_keyval_pair	control.c	/^is_keyval_pair(const char *s)$/;"	f	file:
is_legacy	dirvote.c	/^  int is_legacy;$/;"	m	struct:dir_src_ent_t	file:
is_legal_hexdigest	router.c	/^is_legal_hexdigest(const char *s)$/;"	f
is_legal_nickname	router.c	/^is_legal_nickname(const char *s)$/;"	f
is_legal_nickname_or_hexdigest	router.c	/^is_legal_nickname_or_hexdigest(const char *s)$/;"	f
is_loaded	microdesc.c	/^  int is_loaded;$/;"	m	struct:microdesc_cache_t	file:
is_local	channel.h	/^  unsigned int is_local:1;$/;"	m	struct:channel_s
is_named	or.h	/^  unsigned int is_named:1; \/**< True iff "nickname" belongs to this router. *\/$/;"	m	struct:routerstatus_t
is_or_protocol_version_known	connection_or.c	/^is_or_protocol_version_known(uint16_t v)$/;"	f
is_outgoing	or.h	/^  unsigned int is_outgoing:1;$/;"	m	struct:or_connection_t
is_owning_control_connection	or.h	/^  unsigned int is_owning_control_connection:1;$/;"	m	struct:control_connection_t
is_possible_guard	or.h	/^  unsigned int is_possible_guard:1; \/**< Do we think this is an OK guard? *\/$/;"	m	struct:node_t
is_possible_guard	or.h	/^  unsigned int is_possible_guard:1; \/**< True iff this router would be a good$/;"	m	struct:routerstatus_t
is_prefix	control.c	/^  int is_prefix; \/** Must varname match exactly, or must it be a prefix? *\/$/;"	m	struct:getinfo_item_t	file:
is_private	or.h	/^  unsigned int is_private:1; \/**< True iff this is the pseudo-address,$/;"	m	struct:addr_policy_t
is_private	orconfig.h	/^	int is_private;$/;"	m	struct:_sgx_file
is_remote_attest_start	TorSGX.cpp	/^bool is_remote_attest_start;$/;"	v
is_rend_circ	or.h	/^  unsigned is_rend_circ;$/;"	m	struct:or_circuit_rendinfo_s
is_reverse_dns_lookup	or.h	/^  unsigned int is_reverse_dns_lookup:1;$/;"	m	struct:edge_connection_t
is_running	or.h	/^  unsigned int is_running:1; \/**< As far as we know, is this OR currently$/;"	m	struct:node_t
is_running	or.h	/^  unsigned int is_running:1; \/**< True iff we think this server is running. *\/$/;"	m	struct:dir_server_t
is_sensitive_dir_purpose	directory.c	/^is_sensitive_dir_purpose(uint8_t dir_purpose)$/;"	f	file:
is_server	transports.h	/^  int is_server; \/* is it a server proxy? *\/$/;"	m	struct:__anon1
is_socks_socket	or.h	/^  unsigned int is_socks_socket:1;$/;"	m	struct:entry_connection_t
is_stable	or.h	/^  unsigned int is_stable:1; \/** Do we think this is a stable OR? *\/$/;"	m	struct:node_t
is_stable	or.h	/^  unsigned int is_stable:1; \/**< True iff this router stays up a long time. *\/$/;"	m	struct:routerstatus_t
is_syslog	log.c	/^  int is_syslog; \/**< Boolean: send messages to syslog. *\/$/;"	m	struct:logfile_t	file:
is_temporary	log.c	/^  int is_temporary; \/**< Boolean: close after initializing logging subsystem.*\/$/;"	m	struct:logfile_t	file:
is_test_address	dns.c	/^is_test_address(const char *address)$/;"	f	file:
is_transparent_ap	or.h	/^  unsigned int is_transparent_ap:1;$/;"	m	struct:entry_connection_t
is_unix_addr	or.h	/^  unsigned is_unix_addr : 1; \/**< True iff this is an AF_UNIX address. *\/$/;"	m	struct:port_cfg_t
is_unix_addr	rendservice.c	/^  unsigned int is_unix_addr:1;$/;"	m	struct:rend_service_port_config_s	file:
is_unnamed	or.h	/^  unsigned int is_unnamed:1; \/**< True iff "nickname" belongs to another$/;"	m	struct:routerstatus_t
is_valid	or.h	/^  unsigned int is_valid:1; \/**< Has a trusted dirserver validated this OR?$/;"	m	struct:node_t
is_valid	or.h	/^  unsigned int is_valid:1; \/**< True iff this router isn't invalid. *\/$/;"	m	struct:routerstatus_t
is_valid_initial_command	control.c	/^is_valid_initial_command(control_connection_t *conn, const char *cmd)$/;"	f	file:
is_valid_unix_socket_purpose	connection.c	/^is_valid_unix_socket_purpose(int purpose)$/;"	f	file:
is_world_writable	or.h	/^  unsigned is_world_writable : 1;$/;"	m	struct:port_cfg_t
isaacp_mix	ed25519-randombytes.h	/^isaacp_mix(isaacp_state *st) {$/;"	f
isaacp_random	ed25519-randombytes.h	/^isaacp_random(isaacp_state *st, void *p, size_t len) {$/;"	f
isaacp_state	ed25519-randombytes.h	/^} isaacp_state;$/;"	t	typeref:struct:isaacp_state_t
isaacp_state_t	ed25519-randombytes.h	/^typedef struct isaacp_state_t {$/;"	s
isaacp_step	ed25519-randombytes.h	15;"	d
isatmost128bits256_modm_batch	modm-donna-32bit.h	/^isatmost128bits256_modm_batch(const bignum256modm a) {$/;"	f
isatmost128bits256_modm_batch	modm-donna-64bit.h	/^isatmost128bits256_modm_batch(const bignum256modm a) {$/;"	f
isolation_any_streams_attached	or.h	/^  unsigned int isolation_any_streams_attached : 1;$/;"	m	struct:origin_circuit_t
isolation_flags	or.h	/^  uint8_t isolation_flags; \/**< Zero or more isolation flags *\/$/;"	m	struct:entry_port_cfg_t
isolation_flags_mixed	or.h	/^  uint8_t isolation_flags_mixed;$/;"	m	struct:origin_circuit_t
isolation_values_set	or.h	/^  unsigned int isolation_values_set : 1;$/;"	m	struct:origin_circuit_t
isone256_modm_batch	modm-donna-32bit.h	/^isone256_modm_batch(const bignum256modm a) {$/;"	f
isone256_modm_batch	modm-donna-64bit.h	/^isone256_modm_batch(const bignum256modm a) {$/;"	f
isv_prod_id	ias_ra.h	/^    sample_prod_id_t        isv_prod_id;    \/\/ (256) Product ID of the Enclave$/;"	m	struct:sample_report_body_t
isv_svn	ias_ra.h	/^    sample_isv_svn_t        isv_svn;        \/\/ (258) Security Version of the$/;"	m	struct:sample_report_body_t
iszero256_modm_batch	modm-donna-32bit.h	/^iszero256_modm_batch(const bignum256modm a) {$/;"	f
iszero256_modm_batch	modm-donna-64bit.h	/^iszero256_modm_batch(const bignum256modm a) {$/;"	f
iv	crypto.c	/^  char iv[CIPHER_IV_LEN]; \/**< The initial IV. *\/$/;"	m	struct:crypto_cipher_t	file:
iv	pwbox.h	/^  uint8_t iv[16];$/;"	m	struct:pwbox_encoded_st
journal_fname	microdesc.c	/^  char *journal_fname;$/;"	m	struct:microdesc_cache_t	file:
journal_len	microdesc.c	/^  size_t journal_len;$/;"	m	struct:microdesc_cache_t	file:
journal_len	or.h	/^  size_t journal_len;$/;"	m	struct:desc_store_t
junk_keypair	onion.h	/^  curve25519_keypair_t *junk_keypair;$/;"	m	struct:server_onion_keys_t
k0	siphash.h	/^  uint64_t k0;$/;"	m	struct:sipkey
k1	siphash.h	/^  uint64_t k1;$/;"	m	struct:sipkey
k_sigaction	orconfig.h	/^struct k_sigaction {$/;"	s
kb_to_bytes	routerlist.c	/^kb_to_bytes(uint32_t bw)$/;"	f	file:
kdf_id	service_provider.h	/^    uint16_t                    kdf_id;     \/* key derivation function id in little endian. $/;"	m	struct:sample_ra_msg2_t
key	aes.c	/^  } key;$/;"	m	struct:aes_cnt_cipher	typeref:union:aes_cnt_cipher::__anon114	file:
key	crypto.c	/^  RSA *key; \/**< The key itself *\/$/;"	m	struct:crypto_pk_t	file:
key	crypto.c	/^  char key[CIPHER_KEY_LEN]; \/**< The raw key. *\/$/;"	m	struct:crypto_cipher_t	file:
key	di_ops.c	/^  uint8_t key[32];$/;"	m	struct:di_digest256_map_t	file:
key	fp_pair.c	/^  fp_pair_t key;$/;"	m	struct:fp_pair_map_entry_s	file:
key	or.h	/^  char *key;$/;"	m	struct:config_line_t
key	routerparse.c	/^  crypto_pk_t *key;        \/**< For public keys only.  Heap-allocated. *\/$/;"	m	struct:directory_token_t	file:
key_lock	router.c	/^static tor_mutex_t *key_lock=NULL;$/;"	v	file:
key_to_string	tor-gencert.c	/^key_to_string(EVP_PKEY *key)$/;"	f	file:
keygen	crypto_ed25519.c	/^  int (*keygen)(unsigned char *, unsigned char *);$/;"	m	struct:__anon123	file:
keygen_force_passphrase	or.h	/^  } keygen_force_passphrase;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon29
keygen_passphrase_fd	or.h	/^  int keygen_passphrase_fd;$/;"	m	struct:__anon24
keypin_add_or_replace_entry_in_map	keypin.c	/^keypin_add_or_replace_entry_in_map(keypin_ent_t *ent)$/;"	f	file:
keypin_check	keypin.c	/^keypin_check(const uint8_t *rsa_id_digest,$/;"	f
keypin_check_and_add	keypin.c	/^keypin_check_and_add(const uint8_t *rsa_id_digest,$/;"	f
keypin_check_and_add_impl	keypin.c	/^keypin_check_and_add_impl(const uint8_t *rsa_id_digest,$/;"	f	file:
keypin_check_lone_rsa	keypin.c	/^keypin_check_lone_rsa(const uint8_t *rsa_id_digest)$/;"	f
keypin_clear	keypin.c	/^keypin_clear(void)$/;"	f
keypin_close_journal	keypin.c	/^keypin_close_journal(void)$/;"	f
keypin_ent_hash_ed	keypin.c	/^keypin_ent_hash_ed(const keypin_ent_t *a)$/;"	f	file:
keypin_ent_hash_rsa	keypin.c	/^keypin_ent_hash_rsa(const keypin_ent_t *a)$/;"	f	file:
keypin_ent_st	keypin.h	/^typedef struct keypin_ent_st {$/;"	s
keypin_ent_t	keypin.h	/^} keypin_ent_t;$/;"	t	typeref:struct:keypin_ent_st
keypin_ents_eq_ed	keypin.c	/^keypin_ents_eq_ed(const keypin_ent_t *a, const keypin_ent_t *b)$/;"	f	file:
keypin_ents_eq_rsa	keypin.c	/^keypin_ents_eq_rsa(const keypin_ent_t *a, const keypin_ent_t *b)$/;"	f	file:
keypin_journal_append_entry	keypin.c	/^keypin_journal_append_entry(const uint8_t *rsa_id_digest,$/;"	f	file:
keypin_journal_fd	keypin.c	/^static int keypin_journal_fd = -1;$/;"	v	file:
keypin_load_journal	keypin.c	/^keypin_load_journal(const char *fname)$/;"	f
keypin_load_journal_impl	keypin.c	/^keypin_load_journal_impl(const char *data, size_t size)$/;"	f
keypin_open_journal	keypin.c	/^keypin_open_journal(const char *fname)$/;"	f
keypin_parse_journal_line	keypin.c	/^keypin_parse_journal_line(const char *cp)$/;"	f
keys	cpuworker.c	/^  uint8_t keys[CPATH_KEY_MATERIAL_LEN];$/;"	m	struct:cpuworker_reply_t	file:
known_flags	or.h	/^  smartlist_t *known_flags;$/;"	m	struct:networkstatus_t
l_len	orconfig.h	/^        __kernel_off_t  l_len;$/;"	m	struct:flock
l_pid	orconfig.h	/^        __kernel_pid_t  l_pid;$/;"	m	struct:flock
l_start	orconfig.h	/^        __kernel_off_t  l_start;$/;"	m	struct:flock
l_type	orconfig.h	/^        short   l_type;$/;"	m	struct:flock
l_whence	orconfig.h	/^        short   l_whence;$/;"	m	struct:flock
last_adjusted_tick	circuitmux_ewma.c	/^  unsigned int last_adjusted_tick;$/;"	m	struct:cell_ewma_s	file:
last_allowed	util.h	/^  time_t last_allowed;$/;"	m	struct:ratelim_t
last_attempted	entrynodes.h	/^  time_t last_attempted; \/**< 0 if we can connect to this guard, or the time$/;"	m	struct:entry_guard_t
last_cell_was_destroy	circuitmux.c	/^  unsigned int last_cell_was_destroy : 1;$/;"	m	struct:circuitmux_s	file:
last_circ_at	circuitstats.h	/^  time_t last_circ_at;$/;"	m	struct:circuit_build_times_s
last_curve25519_onion_key	router.c	/^static curve25519_keypair_t last_curve25519_onion_key;$/;"	v	file:
last_desc_dumped	routerparse.c	/^static time_t last_desc_dumped = 0;$/;"	v	file:
last_descriptor_download_attempted	routerlist.c	/^static time_t last_descriptor_download_attempted = 0;$/;"	v	file:
last_dir_503_at	or.h	/^  time_t last_dir_503_at; \/**< When did this router last tell us that it$/;"	m	struct:routerstatus_t
last_expired_clientside_circuits	circuituse.c	/^static time_t last_expired_clientside_circuits = 0;$/;"	v	file:
last_guessed_ip	router.c	/^static tor_addr_t last_guessed_ip = TOR_ADDR_NULL;$/;"	v	file:
last_hid_serv_requests_	rendclient.c	/^static strmap_t *last_hid_serv_requests_ = NULL;$/;"	v	file:
last_interface_ipv4	connection.c	/^static tor_addr_t *last_interface_ipv4 = NULL;$/;"	v	file:
last_interface_ipv6	connection.c	/^static tor_addr_t *last_interface_ipv6 = NULL;$/;"	v	file:
last_listed	or.h	/^  time_t last_listed;$/;"	m	struct:microdesc_t
last_listed_as_valid_until	or.h	/^  time_t last_listed_as_valid_until;$/;"	m	struct:signed_descriptor_t
last_onion_key	onion.h	/^  crypto_pk_t *last_onion_key;$/;"	m	struct:server_onion_keys_t
last_reachable	or.h	/^  time_t last_reachable;        \/* IPv4. *\/$/;"	m	struct:node_t
last_reachable6	or.h	/^  time_t last_reachable6;       \/* IPv6. *\/$/;"	m	struct:node_t
last_reached_addr	rephist.c	/^  tor_addr_t last_reached_addr;$/;"	m	struct:or_history_t	file:
last_reached_port	rephist.c	/^  uint16_t last_reached_port;$/;"	m	struct:or_history_t	file:
last_read_count	tortls.c	/^  unsigned long last_read_count;$/;"	m	struct:tor_tls_t	file:
last_resolved_addr	config.c	/^static uint32_t last_resolved_addr = 0;$/;"	v	file:
last_rotated_x509_certificate	main.c	/^  time_t last_rotated_x509_certificate;$/;"	m	struct:__anon107	file:
last_seen_in_minutes	geoip.c	/^  unsigned int last_seen_in_minutes:30;$/;"	m	struct:clientmap_entry_t	file:
last_sent_bootstrap_message	control.c	/^static char last_sent_bootstrap_message[BOOTSTRAP_MSG_LEN];$/;"	v	file:
last_served	rendcache.h	/^  time_t last_served; \/**< When did we last write this one to somebody?$/;"	m	struct:rend_cache_entry_t
last_state_file_write_failed	statefile.c	/^static int last_state_file_write_failed = 0;$/;"	v	file:
last_time_under_memory_pressure	relay.c	/^static time_t last_time_under_memory_pressure = 0;$/;"	v	file:
last_warned_circ_ids_exhausted	channel.h	/^  ratelim_t last_warned_circ_ids_exhausted;$/;"	m	struct:channel_s
last_write_count	tortls.c	/^  unsigned long last_write_count;$/;"	m	struct:tor_tls_t	file:
lastonionkey	router.c	/^static crypto_pk_t *lastonionkey=NULL;$/;"	v	file:
launch_descriptor_downloads	routerlist.c	/^launch_descriptor_downloads(int purpose,$/;"	f
launch_direct_bridge_descriptor_fetch	entrynodes.c	/^launch_direct_bridge_descriptor_fetch(bridge_info_t *bridge)$/;"	f	file:
launch_dummy_descriptor_download_as_needed	routerlist.c	/^launch_dummy_descriptor_download_as_needed(time_t now,$/;"	f	file:
launch_managed_proxy	transports.c	/^launch_managed_proxy(managed_proxy_t *mp)$/;"	f	file:
launch_one_resolve	dns.c	/^launch_one_resolve(const char *address, uint8_t query_type,$/;"	f	file:
launch_reachability_tests	main.c	/^  time_t launch_reachability_tests;$/;"	m	struct:__anon107	file:
launch_resolve	dns.c	/^launch_resolve(cached_resolve_t *resolve)$/;"	f	file:
launch_test_addresses	dns.c	/^launch_test_addresses(evutil_socket_t fd, short event, void *args)$/;"	f	file:
launch_wildcard_check	dns.c	/^launch_wildcard_check(int min_len, int max_len, int is_ipv6,$/;"	f	file:
le_version_t	compat_libevent.c	/^typedef uint32_t le_version_t;$/;"	t	file:
le_versions_compatibility	compat_libevent.c	/^le_versions_compatibility(le_version_t v)$/;"	f	file:
learned_bridge_descriptor	entrynodes.c	/^learned_bridge_descriptor(routerinfo_t *ri, int from_cache)$/;"	f
learned_router_identity	entrynodes.c	/^learned_router_identity(const tor_addr_t *addr, uint16_t port,$/;"	f
left	ed25519-randombytes.h	/^	size_t left;$/;"	m	struct:isaacp_state_t
leftover	ed25519-hash.h	/^	uint32_t leftover;$/;"	m	struct:sha512_state_t
legacy_id_digest	or.h	/^  char legacy_id_digest[DIGEST_LEN];$/;"	m	struct:networkstatus_voter_info_t
legacy_key_certificate	router.c	/^static authority_cert_t *legacy_key_certificate = NULL;$/;"	v	file:
legacy_signing_key	router.c	/^static crypto_pk_t *legacy_signing_key = NULL;$/;"	v	file:
len	crypto_ed25519.h	/^  size_t len;$/;"	m	struct:__anon96
len	or.h	/^  uint16_t len; \/** Body length *\/$/;"	m	struct:ext_or_cmd_t
len	rendcache.h	/^  size_t len; \/**< Length of <b>desc<\/b> *\/$/;"	m	struct:rend_cache_entry_t
len	util.h	/^  size_t len;$/;"	m	struct:sized_chunk_t
length	or.h	/^  uint16_t length; \/**< How long is the payload body? *\/$/;"	m	struct:__anon9
length_of_accounting_period_containing	hibernate.c	/^length_of_accounting_period_containing(time_t now)$/;"	f	file:
libevent_logging_callback	compat_libevent.c	/^libevent_logging_callback(int severity, const char *msg)$/;"	f	file:
limb	curve25519-donna.c	/^typedef int64_t limb;$/;"	t	file:
limb128bits	ed25519-donna-batchverify.h	/^static const size_t limb128bits = (128 + bignum256modm_bits_per_limb - 1) \/ bignum256modm_bits_per_limb;$/;"	v
link_apconn_to_circ	circuituse.c	/^link_apconn_to_circ(entry_connection_t *apconn, origin_circuit_t *circ,$/;"	f	file:
link_cert_cert	routerkeys.c	/^static tor_cert_t *link_cert_cert = NULL;$/;"	v	file:
link_history_map	rephist.c	/^  digestmap_t *link_history_map;$/;"	m	struct:or_history_t	file:
link_history_t	rephist.c	/^typedef struct link_history_t {$/;"	s	file:
link_history_t	rephist.c	/^} link_history_t;$/;"	t	typeref:struct:link_history_t	file:
link_key	tortls.c	/^  crypto_pk_t *link_key;$/;"	m	struct:tor_tls_context_t	file:
link_proto	or.h	/^  uint16_t link_proto; \/**< What protocol version are we using? 0 for$/;"	m	struct:or_connection_t
link_proto_count	rephist.c	/^static uint64_t link_proto_count[MAX_LINK_PROTO_TO_LOG+1][2];$/;"	v	file:
linked	or.h	/^  unsigned int linked:1; \/**< True if there is, or has been, a linked_conn. *\/$/;"	m	struct:connection_t
linked_conn	or.h	/^  struct connection_t *linked_conn;$/;"	m	struct:connection_t	typeref:struct:connection_t::connection_t
linked_conn_is_closed	or.h	/^  unsigned int linked_conn_is_closed:1;$/;"	m	struct:connection_t
linkhandshake_deadcode_dummy__	link_handshake.c	/^int linkhandshake_deadcode_dummy__ = 0;$/;"	v
list	container.h	/^  void **list;$/;"	m	struct:smartlist_t
list	routerset.h	/^  smartlist_t *list;$/;"	m	struct:routerset_t
list_getinfo_options	control.c	/^list_getinfo_options(void)$/;"	f	file:
list_pending_descriptor_downloads	routerlist.c	/^list_pending_descriptor_downloads(digestmap_t *result, int extrainfo)$/;"	f	file:
list_pending_downloads	routerlist.c	/^list_pending_downloads(digestmap_t *result, digest256map_t *result256,$/;"	f	file:
list_pending_fpsk_downloads	routerlist.c	/^list_pending_fpsk_downloads(fp_pair_map_t *result)$/;"	f	file:
list_pending_microdesc_downloads	routerlist.c	/^list_pending_microdesc_downloads(digest256map_t *result)$/;"	f
list_server_status_v1	dirserv.c	/^list_server_status_v1(smartlist_t *routers, char **router_status_out,$/;"	f
list_single_server_status	dirserv.c	/^list_single_server_status(const routerinfo_t *desc, int is_live)$/;"	f	file:
list_torrc_options	config.c	/^list_torrc_options(void)$/;"	f	file:
list_v3_auth_ids	dirvote.c	/^list_v3_auth_ids(void)$/;"	f	file:
listed_in_last_desc	or.h	/^  unsigned int listed_in_last_desc : 1;$/;"	m	struct:rend_intro_point_t
listen_limit	connection.c	/^static int listen_limit = INT_MAX;$/;"	v	file:
listener	channel.h	/^  channel_listener_fn_ptr listener;$/;"	m	struct:channel_listener_s
listener_connection_new	connection.c	/^listener_connection_new(int type, int socket_family)$/;"	f
listener_connection_t	or.h	/^typedef struct listener_connection_t {$/;"	s
listener_connection_t	or.h	/^} listener_connection_t;$/;"	t	typeref:struct:listener_connection_t
listener_type	or.h	/^  uint8_t listener_type;$/;"	m	struct:socks_request_t
liveness	circuitstats.h	/^  network_liveness_t liveness;$/;"	m	struct:circuit_build_times_s
lo	ed25519-donna-portable.h	/^				uint64_t lo, hi;$/;"	m	struct:uint128_t
lo	ed25519-donna-portable.h	/^			uint64_t lo, hi;$/;"	m	struct:uint128_t
lo128	ed25519-donna-portable.h	50;"	d
lo128	ed25519-donna-portable.h	71;"	d
lo128	ed25519-donna-portable.h	85;"	d
load_3	fe_frombytes.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_3	sc_muladd.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_3	sc_reduce.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_4	fe_frombytes.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_4	sc_muladd.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_4	sc_reduce.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_authority_keyset	router.c	/^load_authority_keyset(int legacy, crypto_pk_t **key_out,$/;"	f	file:
load_bridge_stats	geoip.c	/^load_bridge_stats(time_t now)$/;"	f	file:
load_downloaded_routers	directory.c	/^load_downloaded_routers(const char *body, smartlist_t *which,$/;"	f	file:
load_ed_keys	routerkeys.c	/^load_ed_keys(const or_options_t *options, time_t now)$/;"	f
load_policy_from_option	policies.c	/^load_policy_from_option(config_line_t *config, const char *option_name,$/;"	f	file:
load_stats_file	router.c	/^load_stats_file(const char *filename, const char *end_line, time_t now,$/;"	f	file:
load_torrc_from_disk	config.c	/^load_torrc_from_disk(config_line_t *cmd_arg, int defaults_file)$/;"	f	file:
load_torrc_from_stdin	config.c	/^load_torrc_from_stdin(void)$/;"	f	file:
load_windows_system_library	util.c	/^load_windows_system_library(const TCHAR *library_name)$/;"	f
loaded	ntmain.c	/^  int loaded;$/;"	m	struct:service_fns	file:
localtime	orconfig.h	2439;"	d
lock	crypto.c	/^  tor_mutex_t *lock;$/;"	m	struct:CRYPTO_dynlock_value	file:
lock	workqueue.c	/^  tor_mutex_t lock;$/;"	m	struct:replyqueue_s	file:
lock	workqueue.c	/^  tor_mutex_t lock;$/;"	m	struct:threadpool_s	file:
lockfile	main.c	/^static tor_lockfile_t *lockfile = NULL;$/;"	v	file:
log	circuitstats.c	19;"	d	file:
log	routerparse.c	32;"	d	file:
log_accounting	status.c	/^log_accounting(const time_t now, const or_options_t *options)$/;"	f	file:
log_addr_has_changed	router.c	/^log_addr_has_changed(int severity,$/;"	f	file:
log_backtrace	backtrace.c	/^log_backtrace(int severity, int domain, const char *msg)$/;"	f
log_callback	torlog.h	/^typedef void (*log_callback)(int severity, uint32_t domain, const char *msg);$/;"	t
log_cert_lifetime	tortls.c	/^log_cert_lifetime(int severity, const X509 *cert, const char *problem)$/;"	f	file:
log_credential_status	compat.c	/^log_credential_status(void)$/;"	f	file:
log_debug	torlog.h	192;"	d
log_debug	torlog.h	210;"	d
log_domain	procmon.c	/^  log_domain_mask_t log_domain;$/;"	m	struct:tor_process_monitor_t	file:
log_domain_mask_t	torlog.h	/^typedef uint32_t log_domain_mask_t;$/;"	t
log_domains_are_logged	log.c	/^static int log_domains_are_logged = 0;$/;"	v	file:
log_engine	crypto.c	/^log_engine(const char *fn, ENGINE *e)$/;"	f	file:
log_entry_guards	entrynodes.c	/^log_entry_guards(int severity)$/;"	f	file:
log_err	torlog.h	203;"	d
log_err	torlog.h	221;"	d
log_failed_proxy_connection	connection.c	/^log_failed_proxy_connection(connection_t *conn)$/;"	f
log_fn	torlog.h	185;"	d
log_fn	torlog.h	225;"	d
log_fn_	log.c	/^log_fn_(int severity, log_domain_mask_t domain, const char *fn,$/;"	f
log_fn_ratelim	torlog.h	190;"	d
log_fn_ratelim	torlog.h	230;"	d
log_fn_ratelim_	log.c	/^log_fn_ratelim_(ratelim_t *ratelim, int severity, log_domain_mask_t domain,$/;"	f
log_free	log.c	/^log_free(logfile_t *victim)$/;"	f	file:
log_from_handle	util.c	/^log_from_handle(HANDLE *pipe, int severity)$/;"	f	file:
log_from_pipe	util.c	/^log_from_pipe(FILE *stream, int severity, const char *executable,$/;"	f	file:
log_global_min_severity_	log.c	/^int log_global_min_severity_ = LOG_NOTICE;$/;"	v
log_heartbeat	status.c	/^log_heartbeat(time_t now)$/;"	f
log_info	torlog.h	197;"	d
log_info	torlog.h	215;"	d
log_level_to_string	log.c	/^log_level_to_string(int level)$/;"	f
log_mutex	log.c	/^static tor_mutex_t log_mutex;$/;"	v	file:
log_mutex_initialized	log.c	/^static int log_mutex_initialized = 0;$/;"	v	file:
log_new_relay_greeting	router.c	/^log_new_relay_greeting(void)$/;"	f	file:
log_notice	torlog.h	199;"	d
log_notice	torlog.h	217;"	d
log_portfw_spawn_error_message	util.c	/^log_portfw_spawn_error_message(const char *buf,$/;"	f	file:
log_prefix_	log.c	/^log_prefix_(char *buf, size_t buf_len, int severity)$/;"	f	file:
log_set_application_name	log.c	/^log_set_application_name(const char *name)$/;"	f
log_severity_list_t	torlog.h	/^typedef struct log_severity_list_t {$/;"	s
log_severity_list_t	torlog.h	/^} log_severity_list_t;$/;"	t	typeref:struct:log_severity_list_t
log_severity_to_event	control.c	/^log_severity_to_event(int severity)$/;"	f	file:
log_time_granularity	log.c	/^static int log_time_granularity = 1;$/;"	v	file:
log_tor_version	log.c	/^log_tor_version(logfile_t *lf, int reset)$/;"	f	file:
log_unsafe_socks_warning	buffers.c	/^log_unsafe_socks_warning(int socks_protocol, const char *address,$/;"	f	file:
log_warn	torlog.h	201;"	d
log_warn	torlog.h	219;"	d
logfile_deliver	log.c	/^logfile_deliver(logfile_t *lf, const char *buf, size_t msg_len,$/;"	f	file:
logfile_t	log.c	/^typedef struct logfile_t {$/;"	s	file:
logfile_t	log.c	/^} logfile_t;$/;"	t	typeref:struct:logfile_t	file:
logfile_wants_message	log.c	/^logfile_wants_message(const logfile_t *lf, int severity,$/;"	f	file:
logfiles	log.c	/^static logfile_t *logfiles = NULL;$/;"	v	file:
logs_free_all	log.c	/^logs_free_all(void)$/;"	f
logs_set_domain_logging	log.c	/^logs_set_domain_logging(int enabled)$/;"	f
lookup_cached_dir_by_fp	dirserv.c	/^lookup_cached_dir_by_fp(const char *fp)$/;"	f	file:
lookup_last_hid_serv_request	rendclient.c	/^lookup_last_hid_serv_request(routerstatus_t *hs_dir,$/;"	f	file:
lost_owning_controller	control.c	/^lost_owning_controller(const char *owner_type, const char *loss_manner)$/;"	f	file:
low	dirvote.c	/^  int low;$/;"	m	struct:consensus_method_range_t	file:
low	dirvote.c	/^  int low;$/;"	m	struct:microdesc_vote_line_t	file:
lseek	orconfig.h	2433;"	d
lt256_modm_batch	modm-donna-32bit.h	/^lt256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lt256_modm_batch	modm-donna-64bit.h	/^lt256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lt_modm	modm-donna-32bit.h	/^lt_modm(bignum256modm_element_t a, bignum256modm_element_t b) {$/;"	f
lt_modm	modm-donna-64bit.h	/^lt_modm(bignum256modm_element_t a, bignum256modm_element_t b) {$/;"	f
lte256_modm_batch	modm-donna-32bit.h	/^lte256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lte256_modm_batch	modm-donna-64bit.h	/^lte256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
m_expand	onion_ntor.c	/^  const char *m_expand;$/;"	m	struct:tweakset_t	file:
mac	remote_attestation_result.h	/^    sample_mac_t                mac;    \/\/ mac_smk(attestation_status)$/;"	m	struct:sample_ra_att_result_msg_t
mac	service_provider.h	/^    sample_mac_t                mac;        \/\/ mac_smk(g_a||ps_sec_prop||quote)$/;"	m	struct:sample_ra_msg3_t
mac	service_provider.h	/^    sample_mac_t                mac;        \/\/ mac_smk(g_b||spid||quote_type||$/;"	m	struct:sample_ra_msg2_t
made_contact	entrynodes.h	/^  unsigned int made_contact : 1; \/**< 0 if we have never connected to this$/;"	m	struct:entry_guard_t
made_placeholder_at	circuitlist.c	/^  time_t made_placeholder_at;$/;"	m	struct:chan_circid_circuit_map_t	file:
magic	buffers.h	/^  uint32_t magic; \/**< Magic cookie for debugging: Must be set to$/;"	m	struct:buf_t
magic	channel.h	/^  uint32_t magic;$/;"	m	struct:channel_s
magic	circuitmux.h	/^  uint32_t magic;$/;"	m	struct:circuitmux_policy_circ_data_s
magic	circuitmux.h	/^  uint32_t magic;$/;"	m	struct:circuitmux_policy_data_s
magic	confparse.h	/^  uint32_t magic; \/**< Required 'magic value' to make sure we have a struct$/;"	m	struct:config_format_t
magic	cpuworker.c	/^  uint32_t magic;$/;"	m	struct:cpuworker_reply_t	file:
magic	cpuworker.c	/^  uint32_t magic;$/;"	m	struct:cpuworker_request_t	file:
magic	dns_structs.h	/^  uint32_t magic;  \/**< Must be CACHED_RESOLVE_MAGIC *\/$/;"	m	struct:cached_resolve_t
magic	or.h	/^  uint32_t magic; \/**< For memory and type debugging: must equal$/;"	m	struct:circuit_t
magic	or.h	/^  uint32_t magic; \/**< For memory debugging: must equal one of$/;"	m	struct:connection_t
magic	or.h	/^  uint32_t magic;$/;"	m	struct:crypt_path_t
magic	tortls.c	/^  uint32_t magic;$/;"	m	struct:tor_tls_t	file:
magic_	or.h	/^  uint32_t magic_;$/;"	m	struct:__anon24
magic_	or.h	/^  uint32_t magic_;$/;"	m	struct:__anon30
magic_offset	confparse.h	/^  off_t magic_offset; \/**< Offset of the magic value within the struct. *\/$/;"	m	struct:config_format_t
main	tor_main.c	/^main(int argc, char *argv[])$/;"	f
main_thread_id	compat_threads.c	/^static unsigned long main_thread_id = -1;$/;"	v	file:
major	or.h	/^  int major;$/;"	m	struct:tor_version_t
make_consensus_method_list	dirvote.c	/^make_consensus_method_list(int low, int high, const char *separator)$/;"	f	file:
make_ntor_onion_key_crosscert	routerkeys.c	/^make_ntor_onion_key_crosscert(const curve25519_keypair_t *onion_key,$/;"	f
make_path_absolute	compat.c	/^make_path_absolute(char *fname)$/;"	f
make_pending_resolve_cached	dns.c	/^make_pending_resolve_cached(cached_resolve_t *resolve)$/;"	f	file:
make_socket_reuseable	connection.c	/^make_socket_reuseable(tor_socket_t sock)$/;"	f	file:
make_specifier	crypto_s2k.c	/^make_specifier(uint8_t *spec_out, uint8_t type, unsigned flags)$/;"	f	file:
make_tap_onion_key_crosscert	routerkeys.c	/^make_tap_onion_key_crosscert(const crypto_pk_t *onion_key,$/;"	f
managed_proxy_create	transports.c	/^managed_proxy_create(const smartlist_t *transport_list,$/;"	f
managed_proxy_destroy	transports.c	/^managed_proxy_destroy(managed_proxy_t *mp,$/;"	f
managed_proxy_has_argv	transports.c	/^managed_proxy_has_argv(const managed_proxy_t *mp, char **proxy_argv)$/;"	f	file:
managed_proxy_list	transports.c	/^static smartlist_t *managed_proxy_list = NULL;$/;"	v	file:
managed_proxy_t	transports.h	/^} managed_proxy_t;$/;"	t	typeref:struct:__anon1
map_expires	connection_edge.h	/^  time_t map_expires;$/;"	m	struct:__anon86
mapping_size	compat.h	/^  size_t mapping_size; \/**< Size of the actual mapping. (This is this file$/;"	m	struct:tor_mmap_t
mark	circuitmux.c	/^  unsigned int mark:1;$/;"	m	struct:circuit_muxinfo_s	file:
mark_all_dirservers_up	routerlist.c	/^mark_all_dirservers_up(smartlist_t *server_list)$/;"	f	file:
mark_bridge_list	entrynodes.c	/^mark_bridge_list(void)$/;"	f
mark_circuit_unusable_for_new_conns	circuituse.c	/^mark_circuit_unusable_for_new_conns(origin_circuit_t *circ)$/;"	f
mark_logs_temp	log.c	/^mark_logs_temp(void)$/;"	f
mark_my_descriptor_dirty	router.c	/^mark_my_descriptor_dirty(const char *reason)$/;"	f
mark_my_descriptor_dirty_if_too_old	router.c	/^mark_my_descriptor_dirty_if_too_old(time_t now)$/;"	f
mark_or_down	rephist.c	/^mark_or_down(or_history_t *hist, time_t when, int failed)$/;"	f	file:
mark_or_up	rephist.c	/^mark_or_up(or_history_t *hist, time_t when)$/;"	f	file:
mark_socket_open	compat.c	/^mark_socket_open(tor_socket_t s)$/;"	f	file:
mark_socket_open	compat.c	1372;"	d	file:
mark_transport_list	transports.c	/^mark_transport_list(void)$/;"	f
marked_circuit_free_cells	circuitlist.c	/^marked_circuit_free_cells(circuit_t *circ)$/;"	f	file:
marked_circuit_free_stream_bytes	circuitlist.c	/^marked_circuit_free_stream_bytes(circuit_t *c)$/;"	f	file:
marked_circuit_streams_free_bytes	circuitlist.c	/^marked_circuit_streams_free_bytes(edge_connection_t *stream)$/;"	f	file:
marked_for_close	or.h	/^  uint16_t marked_for_close; \/**< Should we close this circuit at the end of$/;"	m	struct:circuit_t
marked_for_close	or.h	/^  uint16_t marked_for_close; \/**< Should we close this conn on the next$/;"	m	struct:connection_t
marked_for_close_file	or.h	/^  const char *marked_for_close_file; \/**< For debugging: in which file was this$/;"	m	struct:circuit_t
marked_for_close_file	or.h	/^  const char *marked_for_close_file; \/**< For debugging: in which file were$/;"	m	struct:connection_t
marked_for_removal	entrynodes.c	/^  unsigned marked_for_removal : 1;$/;"	m	struct:__anon122	file:
marked_for_removal	transports.h	/^  unsigned int marked_for_removal : 1;$/;"	m	struct:__anon1
marked_for_removal	transports.h	/^  unsigned marked_for_removal : 1;$/;"	m	struct:transport_t
mask	container.h	/^  int mask; \/**< One less than the number of bits in <b>ba<\/b>; always one less$/;"	m	struct:__anon104
maskbits	or.h	/^  maskbits_t maskbits; \/**< Accept\/reject all addresses <b>a<\/b> such that the$/;"	m	struct:addr_policy_t
maskbits_t	address.h	/^typedef uint8_t maskbits_t;$/;"	t
masks	torlog.h	/^  log_domain_mask_t masks[LOG_DEBUG-LOG_ERR+1];$/;"	m	struct:log_severity_list_t
master_identity_key	routerkeys.c	/^static ed25519_keypair_t *master_identity_key = NULL;$/;"	v	file:
master_key_fname	or.h	/^  char *master_key_fname;$/;"	m	struct:__anon24
master_signing_key	routerkeys.c	/^static ed25519_keypair_t *master_signing_key = NULL;$/;"	v	file:
matches_extend_info	channel.h	/^  int (*matches_extend_info)(channel_t *, extend_info_t *);$/;"	m	struct:channel_s
matches_target	channel.h	/^  int (*matches_target)(channel_t *, const tor_addr_t *);$/;"	m	struct:channel_s
max_args	routerparse.c	/^  int max_args;$/;"	m	struct:token_rule_t	file:
max_batch_size	ed25519-donna-batchverify.h	5;"	d
max_cnt	routerparse.c	/^  int max_cnt;$/;"	m	struct:token_rule_t	file:
max_dl_per_request	routerlist.c	/^max_dl_per_request(const or_options_t *options, int purpose)$/;"	f	file:
max_f_id	TorSGX.cpp	/^static int max_f_id = 1;$/;"	v	file:
max_fd	TorSGX.cpp	/^int max_fd = 3;$/;"	v
max_introductions	or.h	/^  int max_introductions;$/;"	m	struct:rend_intro_point_t
max_middle_cells	or.h	/^  uint32_t max_middle_cells;$/;"	m	struct:or_circuit_t
max_pending_tasks	cpuworker.c	/^static int max_pending_tasks = 128;$/;"	v	file:
max_port	or.h	/^  uint16_t min_port, max_port;$/;"	m	struct:short_policy_entry_t
max_socket	compat.c	/^static int max_socket = -1;$/;"	v	file:
max_sockets	compat.c	/^static int max_sockets = 1024;$/;"	v	file:
max_streams_close_circuit	rendservice.c	/^  int max_streams_close_circuit;$/;"	m	struct:rend_service_t	file:
max_streams_per_circuit	rendservice.c	/^  int max_streams_per_circuit;$/;"	m	struct:rend_service_t	file:
max_total	rephist.c	/^  uint64_t max_total; \/**< Largest value that total_obs has taken on in the$/;"	m	struct:bw_array_t	file:
maxima	rephist.c	/^  uint64_t maxima[NUM_TOTALS];$/;"	m	struct:bw_array_t	file:
maxticks	test-ticks.h	49;"	d
may_use_optimistic_data	or.h	/^  unsigned int may_use_optimistic_data : 1;$/;"	m	struct:entry_connection_t
mbw_cache	dirserv.c	/^static digestmap_t *mbw_cache = NULL;$/;"	v	file:
mbw_cache_entry_s	dirserv.c	/^typedef struct mbw_cache_entry_s {$/;"	s	file:
mbw_cache_entry_t	dirserv.c	/^} mbw_cache_entry_t;$/;"	t	typeref:struct:mbw_cache_entry_s	file:
mbw_kb	dirserv.c	/^  long mbw_kb;$/;"	m	struct:mbw_cache_entry_s	file:
md	dirvote.c	/^  microdesc_t *md;$/;"	m	struct:microdesc_vote_line_t	file:
md	or.h	/^  microdesc_t *md;$/;"	m	struct:node_t
mean_num_cells_in_queue	rephist.c	/^  double mean_num_cells_in_queue;$/;"	m	struct:circ_buffer_stats_t	file:
mean_time_cells_in_queue	rephist.c	/^  double mean_time_cells_in_queue;$/;"	m	struct:circ_buffer_stats_t	file:
measured_bw_kb	or.h	/^  uint32_t measured_bw_kb; \/**< Measured bandwidth (capacity) of the router *\/$/;"	m	struct:vote_routerstatus_t
measured_bw_line_apply	dirserv.c	/^measured_bw_line_apply(measured_bw_line_t *parsed_line,$/;"	f
measured_bw_line_parse	dirserv.c	/^measured_bw_line_parse(measured_bw_line_t *out, const char *orig_line)$/;"	f
measured_bw_line_t	or.h	/^typedef struct measured_bw_line_t {$/;"	s
measured_bw_line_t	or.h	/^} measured_bw_line_t;$/;"	t	typeref:struct:measured_bw_line_t
median_double	container.h	/^median_double(double *array, int n_elements)$/;"	f
median_int	container.h	/^median_int(int *array, int n_elements)$/;"	f
median_int32	container.h	/^median_int32(int32_t *array, int n_elements)$/;"	f
median_time	container.h	/^median_time(time_t *array, int n_elements)$/;"	f
median_uint32	container.h	/^median_uint32(uint32_t *array, int n_elements)$/;"	f
mem	buffers.h	/^  char mem[FLEXIBLE_ARRAY_MEMBER]; \/**< The actual memory used for storage in$/;"	m	struct:chunk_t
mem	memarea.c	/^    char mem[1]; \/**< Memory space in this chunk.  *\/$/;"	m	union:memarea_chunk_t::__anon109	file:
mem	memarea.c	/^  char mem[FLEXIBLE_ARRAY_MEMBER] __attribute__((aligned(MEMAREA_ALIGN)));$/;"	m	struct:memarea_chunk_t	file:
mem_size	memarea.c	/^  size_t mem_size; \/**< How much RAM is available in mem, total? *\/$/;"	m	struct:memarea_chunk_t	file:
memarea_alloc	memarea.c	/^memarea_alloc(memarea_t *area, size_t sz)$/;"	f
memarea_alloc_zero	memarea.c	/^memarea_alloc_zero(memarea_t *area, size_t sz)$/;"	f
memarea_assert_ok	memarea.c	/^memarea_assert_ok(memarea_t *area)$/;"	f
memarea_chunk_t	memarea.c	/^typedef struct memarea_chunk_t {$/;"	s	file:
memarea_chunk_t	memarea.c	/^} memarea_chunk_t;$/;"	t	typeref:struct:memarea_chunk_t	file:
memarea_clear	memarea.c	/^memarea_clear(memarea_t *area)$/;"	f
memarea_clear_freelist	memarea.c	/^memarea_clear_freelist(void)$/;"	f
memarea_drop_all	memarea.c	/^memarea_drop_all(memarea_t *area)$/;"	f
memarea_get_stats	memarea.c	/^memarea_get_stats(memarea_t *area, size_t *allocated_out, size_t *used_out)$/;"	f
memarea_memdup	memarea.c	/^memarea_memdup(memarea_t *area, const void *s, size_t n)$/;"	f
memarea_new	memarea.c	/^memarea_new(void)$/;"	f
memarea_owns_ptr	memarea.c	/^memarea_owns_ptr(const memarea_t *area, const void *p)$/;"	f
memarea_strdup	memarea.c	/^memarea_strdup(memarea_t *area, const char *s)$/;"	f
memarea_strndup	memarea.c	/^memarea_strndup(memarea_t *area, const char *s, size_t n)$/;"	f
memarea_t	memarea.c	/^struct memarea_t {$/;"	s	file:
memarea_t	memarea.h	/^typedef struct memarea_t memarea_t;$/;"	t	typeref:struct:memarea_t
memcpy_disallowed	TorSGX.cpp	/^volatile int memcpy_disallowed, mempcpy_disallowed, memmove_disallowed;$/;"	v
memeq_opt	connection_edge.c	/^memeq_opt(const char *a, size_t alen, const char *b, size_t blen)$/;"	f	file:
memlen	buffers.h	/^  size_t memlen; \/**< The number of usable bytes of storage in <b>mem<\/b>. *\/$/;"	m	struct:chunk_t
memmove_disallowed	TorSGX.cpp	/^volatile int memcpy_disallowed, mempcpy_disallowed, memmove_disallowed;$/;"	v
memory_units	confparse.c	/^static struct unit_table_t memory_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
mempcpy_disallowed	TorSGX.cpp	/^volatile int memcpy_disallowed, mempcpy_disallowed, memmove_disallowed;$/;"	v
memset_disallowed	TorSGX.cpp	/^volatile int memset_disallowed, strcpy_disallowed, stpcpy_disallowed;$/;"	v
memwipe	crypto.c	/^memwipe(void *mem, uint8_t byte, size_t sz)$/;"	f
method_bits	torgzip.c	/^method_bits(compress_method_t method, zlib_compression_level_t level)$/;"	f	file:
methods	link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint16_t) methods;$/;"	m	struct:auth_challenge_cell_st
micro	or.h	/^  int micro;$/;"	m	struct:tor_version_t
microdesc	or.h	/^  vote_microdesc_hash_t *microdesc;$/;"	m	struct:vote_routerstatus_t
microdesc_average_size	microdesc.c	/^microdesc_average_size(microdesc_cache_t *cache)$/;"	f
microdesc_cache_clean	microdesc.c	/^microdesc_cache_clean(microdesc_cache_t *cache, time_t cutoff, int force)$/;"	f
microdesc_cache_clear	microdesc.c	/^microdesc_cache_clear(microdesc_cache_t *cache)$/;"	f
microdesc_cache_lookup_by_digest256	microdesc.c	/^microdesc_cache_lookup_by_digest256(microdesc_cache_t *cache, const char *d)$/;"	f
microdesc_cache_rebuild	microdesc.c	/^microdesc_cache_rebuild(microdesc_cache_t *cache, int force)$/;"	f
microdesc_cache_reload	microdesc.c	/^microdesc_cache_reload(microdesc_cache_t *cache)$/;"	f
microdesc_cache_t	microdesc.c	/^struct microdesc_cache_t {$/;"	s	file:
microdesc_cache_t	or.h	/^typedef struct microdesc_cache_t microdesc_cache_t;$/;"	t	typeref:struct:microdesc_cache_t
microdesc_check_counts	microdesc.c	/^microdesc_check_counts(void)$/;"	f
microdesc_consensus_methods	dirvote.c	/^} microdesc_consensus_methods[] = {$/;"	v	typeref:struct:consensus_method_range_t	file:
microdesc_eq_	microdesc.c	/^microdesc_eq_(microdesc_t *a, microdesc_t *b)$/;"	f	file:
microdesc_free	microdesc.h	43;"	d
microdesc_free_	microdesc.c	/^microdesc_free_(microdesc_t *md, const char *fname, int lineno)$/;"	f
microdesc_free_all	microdesc.c	/^microdesc_free_all(void)$/;"	f
microdesc_hash_	microdesc.c	/^microdesc_hash_(microdesc_t *md)$/;"	f	file:
microdesc_hash_line	or.h	/^  char *microdesc_hash_line;$/;"	m	struct:vote_microdesc_hash_t
microdesc_list_missing_digest256	microdesc.c	/^microdesc_list_missing_digest256(networkstatus_t *ns, microdesc_cache_t *cache,$/;"	f
microdesc_t	or.h	/^typedef struct microdesc_t {$/;"	s
microdesc_t	or.h	/^} microdesc_t;$/;"	t	typeref:struct:microdesc_t
microdesc_token_table	routerparse.c	/^static token_rule_t microdesc_token_table[] = {$/;"	v	file:
microdesc_vote_line_t	dirvote.c	/^typedef struct microdesc_vote_line_t {$/;"	s	file:
microdesc_vote_line_t	dirvote.c	/^} microdesc_vote_line_t;$/;"	t	typeref:struct:microdesc_vote_line_t	file:
microdesc_wipe_body	microdesc.c	/^microdesc_wipe_body(microdesc_t *md)$/;"	f	file:
microdescs_add_list_to_cache	microdesc.c	/^microdescs_add_list_to_cache(microdesc_cache_t *cache,$/;"	f
microdescs_add_to_cache	microdesc.c	/^microdescs_add_to_cache(microdesc_cache_t *cache,$/;"	f
microdescs_parse_from_string	routerparse.c	/^microdescs_parse_from_string(const char *s, const char *eos,$/;"	f
millitm	orconfig.h	/^	short 	millitm;$/;"	m	struct:timeb
min_args	routerparse.c	/^  int min_args;$/;"	m	struct:token_rule_t	file:
min_cnt	routerparse.c	/^  int min_cnt;$/;"	m	struct:token_rule_t	file:
min_port	or.h	/^  uint16_t min_port, max_port;$/;"	m	struct:short_policy_entry_t
minheap_idx	dns_structs.h	/^  int minheap_idx;$/;"	m	struct:cached_resolve_t
minor	or.h	/^  int minor;$/;"	m	struct:tor_version_t
mk_key	service_provider.h	/^    sample_ec_key_128bit_t      mk_key;\/\/ Shared secret key for generating MAC's$/;"	m	struct:_sp_db_item_t
mktime	orconfig.h	2441;"	d
mmap	or.h	/^  tor_mmap_t *mmap; \/**< A mmap for the main file in the store. *\/$/;"	m	struct:desc_store_t
mmap_handle	compat.h	/^  HANDLE mmap_handle;$/;"	m	struct:tor_mmap_t
modm_m	modm-donna-32bit.h	/^static const bignum256modm modm_m = {$/;"	v
modm_m	modm-donna-64bit.h	/^static const bignum256modm modm_m = {$/;"	v
modm_mu	modm-donna-32bit.h	/^static const bignum256modm modm_mu = {$/;"	v
modm_mu	modm-donna-64bit.h	/^static const bignum256modm modm_mu = {$/;"	v
modtime	orconfig.h	/^        time_t modtime;         \/* modification time *\/$/;"	m	struct:utimbuf
monitor_owning_controller_process	control.c	/^monitor_owning_controller_process(const char *process_spec)$/;"	f
months_lifetime	tor-gencert.c	/^int months_lifetime = DEFAULT_LIFETIME;$/;"	v
mostly_read	rephist.c	/^static uint32_t mostly_read = 0;$/;"	v	file:
mostly_written	rephist.c	/^static uint32_t mostly_written = 0;$/;"	v	file:
move_buf_to_buf	buffers.c	/^move_buf_to_buf(buf_t *buf_out, buf_t *buf_in, size_t *buf_flushlen)$/;"	f
mr_enclave	ias_ra.h	/^    sample_measurement_t    mr_enclave;     \/\/ ( 64) The value of the enclave's$/;"	m	struct:sample_report_body_t
mr_reserved1	ias_ra.h	/^    sample_measurement_t    mr_reserved1;   \/\/ (192)$/;"	m	struct:sample_report_body_t
mr_reserved2	ias_ra.h	/^    sample_measurement_t    mr_reserved2;   \/\/ (224)$/;"	m	struct:sample_report_body_t
mr_signer	ias_ra.h	/^    sample_measurement_t    mr_signer;      \/\/ (128) The value of the enclave's$/;"	m	struct:sample_report_body_t
msec_per_tick	compat_libevent.h	/^  int msec_per_tick;$/;"	m	struct:tor_libevent_cfg
msec_since_midnight	connection.c	/^msec_since_midnight(const struct timeval *tvnow)$/;"	f	file:
msg	compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	m	struct:__anon111	file:
msg	control.c	/^  char *msg;$/;"	m	struct:queued_event_s	file:
msg	crypto_ed25519.h	/^  const uint8_t *msg;$/;"	m	struct:__anon96
msg	log.c	/^  char *msg; \/**< The content of the message *\/$/;"	m	struct:pending_log_message_t	file:
mtime	orconfig.h	/^	unsigned long mtime;$/;"	m	struct:_sgx_file
mul256_modm	modm-donna-32bit.h	/^mul256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
mul256_modm	modm-donna-64bit.h	/^mul256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
mul32x32_64	ed25519-donna-portable.h	12;"	d
mul32x32_64	ed25519-donna-portable.h	13;"	d
mul32x32_64	ed25519-donna-portable.h	3;"	d
mul64x64_128	ed25519-donna-portable.h	43;"	d
mul64x64_128	ed25519-donna-portable.h	64;"	d
mul64x64_128	ed25519-donna-portable.h	78;"	d
multiplier	confparse.c	/^  uint64_t multiplier; \/**< How many of the base unit appear in this unit *\/$/;"	m	struct:unit_table_t	file:
munge_extrainfo_into_routerinfo	control.c	/^munge_extrainfo_into_routerinfo(const char *ri_body,$/;"	f	file:
mutex	compat_threads.h	/^	sgx_thread_mutex_t mutex;$/;"	m	struct:tor_mutex_t
muxinfo	circuitmux.c	/^  circuit_muxinfo_t muxinfo;$/;"	m	struct:chanid_circid_muxinfo_t	file:
my_auth_cert	tortls.c	/^  tor_x509_cert_t *my_auth_cert;$/;"	m	struct:tor_tls_context_t	file:
my_id_cert	tortls.c	/^  tor_x509_cert_t *my_id_cert;$/;"	m	struct:tor_tls_context_t	file:
my_identity	onion.h	/^  uint8_t my_identity[DIGEST_LEN];$/;"	m	struct:server_onion_keys_t
my_link_cert	tortls.c	/^  tor_x509_cert_t *my_link_cert;$/;"	m	struct:tor_tls_context_t	file:
n	or.h	/^  int n; \/**< The number of cells in the queue. *\/$/;"	m	struct:cell_queue_t
n_accepted	channel.h	/^  uint64_t n_accepted;$/;"	m	struct:channel_listener_s
n_active_circuits	circuitmux.c	/^  unsigned int n_circuits, n_active_circuits;$/;"	m	struct:circuitmux_s	file:
n_args	routerparse.c	/^  int n_args:30;               \/**< Number of elements in args *\/$/;"	m	struct:directory_token_t	file:
n_authorities	dircollate.h	/^  int n_authorities;$/;"	m	struct:dircollator_s
n_bits_set_u8	util.c	/^n_bits_set_u8(uint8_t v)$/;"	f
n_bogus_times	rephist.c	/^static int n_bogus_times = 0;$/;"	v	file:
n_bytes_at_soft_limit	hibernate.c	/^static uint64_t n_bytes_at_soft_limit = 0;$/;"	v	file:
n_bytes_read_in_interval	hibernate.c	/^static uint64_t n_bytes_read_in_interval = 0;$/;"	v	file:
n_bytes_recved	channel.h	/^  uint64_t n_cells_recved, n_bytes_recved;$/;"	m	struct:channel_s
n_bytes_written_in_interval	hibernate.c	/^static uint64_t n_bytes_written_in_interval = 0;$/;"	v	file:
n_bytes_xmitted	channel.h	/^  uint64_t n_cells_xmitted, n_bytes_xmitted;$/;"	m	struct:channel_s
n_calls_since_last_time	util.h	/^  int n_calls_since_last_time;$/;"	m	struct:ratelim_t
n_cells	circuitmux.c	/^  unsigned int n_cells;$/;"	m	struct:circuitmux_s	file:
n_cells_in_circ_queues	circuitlist.c	/^n_cells_in_circ_queues(const circuit_t *c)$/;"	f
n_cells_recved	channel.h	/^  uint64_t n_cells_recved, n_bytes_recved;$/;"	m	struct:channel_s
n_cells_xmitted	channel.h	/^  uint64_t n_cells_xmitted, n_bytes_xmitted;$/;"	m	struct:channel_s
n_certs	link_handshake.h	/^  uint8_t n_certs;$/;"	m	struct:certs_cell_st
n_chan	or.h	/^  channel_t *n_chan;$/;"	m	struct:circuit_t
n_chan_cells	or.h	/^  cell_queue_t n_chan_cells;$/;"	m	struct:circuit_t
n_chan_create_cell	or.h	/^  struct create_cell_t *n_chan_create_cell;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::create_cell_t
n_channel_bytes_in_queues	channel.c	/^static uint64_t n_channel_bytes_in_queues = 0;$/;"	v	file:
n_channel_bytes_passed_to_lower_layer	channel.c	/^static uint64_t n_channel_bytes_passed_to_lower_layer = 0;$/;"	v	file:
n_channel_bytes_queued	channel.c	/^static uint64_t n_channel_bytes_queued = 0;$/;"	v	file:
n_channel_cells_in_queues	channel.c	/^static uint64_t n_channel_cells_in_queues = 0;$/;"	v	file:
n_channel_cells_passed_to_lower_layer	channel.c	/^static uint64_t n_channel_cells_passed_to_lower_layer = 0;$/;"	v	file:
n_channel_cells_queued	channel.c	/^static uint64_t n_channel_cells_queued = 0;$/;"	v	file:
n_channels_allocated	channel.c	/^static uint64_t n_channels_allocated = 0;$/;"	v	file:
n_circ_id	or.h	/^  circid_t n_circ_id;$/;"	m	struct:circuit_t
n_circuit_failures	circuituse.c	/^static int n_circuit_failures = 0;$/;"	v	file:
n_circuits	circuitmux.c	/^  unsigned int n_circuits, n_active_circuits;$/;"	m	struct:circuitmux_s	file:
n_conn_fail	rephist.c	/^  unsigned long n_conn_fail;$/;"	m	struct:or_history_t	file:
n_conn_ok	rephist.c	/^  unsigned long n_conn_ok;$/;"	m	struct:or_history_t	file:
n_countries	routerset.h	/^  int n_countries;$/;"	m	struct:routerset_t
n_crypto	or.h	/^  crypto_cipher_t *n_crypto;$/;"	m	struct:or_circuit_t
n_delete_pending	or.h	/^  unsigned int n_delete_pending : 1;$/;"	m	struct:circuit_t
n_digest	or.h	/^  crypto_digest_t *n_digest;$/;"	m	struct:or_circuit_t
n_download_failures	or.h	/^  uint8_t n_download_failures; \/**< Number of failures trying to download the$/;"	m	struct:download_status_t
n_entries	or.h	/^  unsigned int n_entries : 31;$/;"	m	struct:short_policy_t
n_extend_fail	rephist.c	/^  unsigned long n_extend_fail;$/;"	m	struct:link_history_t	file:
n_extend_ok	rephist.c	/^  unsigned long n_extend_ok;$/;"	m	struct:link_history_t	file:
n_extensions	ed25519_cert.h	/^  uint8_t n_extensions;$/;"	m	struct:ed25519_cert_st
n_hop	or.h	/^  extend_info_t *n_hop;$/;"	m	struct:circuit_t
n_intervals_valid	or.h	/^  int n_intervals_valid;$/;"	m	struct:vote_timing_t
n_intro_circuits_launched	rendservice.c	/^  int n_intro_circuits_launched; \/**< Count of intro circuits we have$/;"	m	struct:rend_service_t	file:
n_intro_points_wanted	rendservice.c	/^  unsigned int n_intro_points_wanted; \/**< Number of intro points this$/;"	m	struct:rend_service_t	file:
n_ipv6_requests_made	dns.c	/^static uint64_t n_ipv6_requests_made = 0;$/;"	v	file:
n_ipv6_timeouts	dns.c	/^static uint64_t n_ipv6_timeouts = 0;$/;"	v	file:
n_leapdays	util.c	/^n_leapdays(int y1, int y2)$/;"	f	file:
n_libevent_errors	main.c	/^static int n_libevent_errors = 0;$/;"	v	file:
n_measurements	control.c	/^static int n_measurements = 0;$/;"	v	file:
n_methods	link_handshake.h	/^  uint16_t n_methods;$/;"	m	struct:auth_challenge_cell_st
n_mux	or.h	/^  circuitmux_t *n_mux;$/;"	m	struct:circuit_t
n_onionskins_decrypted	rephist.c	/^  unsigned long n_onionskins_decrypted;$/;"	m	struct:__anon103	file:
n_onionskins_encrypted	rephist.c	/^  unsigned long n_onionskins_encrypted;$/;"	m	struct:__anon103	file:
n_openssl_mutexes_	crypto.c	/^static int n_openssl_mutexes_ = 0;$/;"	v	file:
n_or_protocol_versions	connection_or.c	/^static const int n_or_protocol_versions =$/;"	v	file:
n_read	control.c	/^  uint32_t n_read;$/;"	m	struct:cached_bw_event_s	file:
n_read	or.h	/^  uint32_t n_read;$/;"	m	struct:edge_connection_t
n_read_circ_bw	or.h	/^  uint32_t n_read_circ_bw;$/;"	m	struct:origin_circuit_t
n_read_conn_bw	or.h	/^  uint32_t n_read_conn_bw;$/;"	m	struct:connection_t
n_rend_client_ops	rephist.c	/^  unsigned long n_rend_client_ops;$/;"	m	struct:__anon103	file:
n_rend_mid_ops	rephist.c	/^  unsigned long n_rend_mid_ops;$/;"	m	struct:__anon103	file:
n_rend_server_ops	rephist.c	/^  unsigned long n_rend_server_ops;$/;"	m	struct:__anon103	file:
n_seconds_active_in_interval	hibernate.c	/^static uint32_t n_seconds_active_in_interval = 0;$/;"	v	file:
n_seconds_to_hit_soft_limit	hibernate.c	/^static int n_seconds_to_hit_soft_limit = 0;$/;"	v	file:
n_seen	microdesc.c	/^  unsigned n_seen;$/;"	m	struct:microdesc_cache_t	file:
n_signed_dir_objs	rephist.c	/^  unsigned long n_signed_dir_objs;$/;"	m	struct:__anon103	file:
n_signed_routerdescs	rephist.c	/^  unsigned long n_signed_routerdescs;$/;"	m	struct:__anon103	file:
n_sigsafe_log_fds	log.c	/^static int n_sigsafe_log_fds = 1;$/;"	v	file:
n_sockets_open	compat.c	/^static int n_sockets_open = 0;$/;"	v	file:
n_streams	or.h	/^  edge_connection_t *n_streams;$/;"	m	struct:or_circuit_t
n_threads	workqueue.c	/^  int n_threads;$/;"	m	struct:threadpool_s	file:
n_tls_client_handshakes	rephist.c	/^  unsigned long n_tls_client_handshakes;$/;"	m	struct:__anon103	file:
n_tls_server_handshakes	rephist.c	/^  unsigned long n_tls_server_handshakes;$/;"	m	struct:__anon103	file:
n_usec	cpuworker.c	/^  uint32_t n_usec;$/;"	m	struct:cpuworker_reply_t	file:
n_v3_ns_requests	geoip.c	/^  uint32_t n_v3_ns_requests;$/;"	m	struct:geoip_country_t	file:
n_verified_dir_objs	rephist.c	/^  unsigned long n_verified_dir_objs;$/;"	m	struct:__anon103	file:
n_verified_routerdescs	rephist.c	/^  unsigned long n_verified_routerdescs;$/;"	m	struct:__anon103	file:
n_votes	dircollate.h	/^  int n_votes;$/;"	m	struct:dircollator_s
n_wildcard_requests	dns.c	/^static int n_wildcard_requests = 0;$/;"	v	file:
n_written	control.c	/^  uint32_t n_written;$/;"	m	struct:cached_bw_event_s	file:
n_written	or.h	/^  uint32_t n_written;$/;"	m	struct:edge_connection_t
n_written_circ_bw	or.h	/^  uint32_t n_written_circ_bw;$/;"	m	struct:origin_circuit_t
n_written_conn_bw	or.h	/^  uint32_t n_written_conn_bw;$/;"	m	struct:connection_t
name	config.c	/^  const char *name;$/;"	m	struct:__anon125	file:
name	confparse.h	/^  const char *name; \/**< The full keyword (case insensitive). *\/$/;"	m	struct:config_var_t
name	confparse.h	/^  const char *name;$/;"	m	struct:config_var_description_t
name	ias_ra.h	/^    uint8_t                 name[32];$/;"	m	struct:sample_basename_t
name	sandbox.c	/^  char *name;$/;"	m	struct:cached_getaddrinfo_item_t	file:
name	tinytest.h	/^	const char *name; \/**< An identifier for this case. *\/$/;"	m	struct:testcase_t
name	tinytest.h	/^	const char *name;$/;"	m	struct:testlist_alias_t
name	transports.h	/^  char *name;$/;"	m	struct:transport_t
name_lookup_warned	or.h	/^  unsigned int name_lookup_warned:1; \/**< Have we warned the user for referring$/;"	m	struct:node_t
named_server_map	networkstatus.c	/^static strmap_t *named_server_map = NULL;$/;"	v	file:
names	routerset.h	/^  strmap_t *names;$/;"	m	struct:routerset_t
nameserver_config_failed	dns.c	/^static int nameserver_config_failed = 0;$/;"	v	file:
nameservers_configured	dns.c	/^static int nameservers_configured = 0;$/;"	v	file:
need_capacity	or.h	/^  unsigned int need_capacity : 1;$/;"	m	struct:__anon22
need_to_update_have_min_dir_info	nodelist.c	/^static int need_to_update_have_min_dir_info = 1;$/;"	v	file:
need_uptime	or.h	/^  unsigned int need_uptime : 1;$/;"	m	struct:__anon22
needs_close	log.c	/^  int needs_close; \/**< Boolean: true if the stream gets closed on shutdown. *\/$/;"	m	struct:logfile_t	file:
needs_retest_if_added	or.h	/^  unsigned int needs_retest_if_added:1;$/;"	m	struct:__anon14
negative	ge_scalarmult_base.c	/^static unsigned char negative(signed char b)$/;"	f	file:
negotiated_callback	tortls.c	/^  void (*negotiated_callback)(tor_tls_t *tls, void *arg);$/;"	m	struct:tor_tls_t	file:
net_is_disabled	router.c	/^net_is_disabled(void)$/;"	f
net_params	or.h	/^  smartlist_t *net_params;$/;"	m	struct:networkstatus_t
network_init	compat.c	/^network_init(void)$/;"	f
network_is_live	control.c	/^static int network_is_live = 0;$/;"	v	file:
network_last_live	or.h	/^  time_t network_last_live;$/;"	m	struct:__anon31
network_liveness_t	or.h	/^} network_liveness_t;$/;"	t	typeref:struct:__anon31
networkstatus_add_detached_signatures	dirvote.c	/^networkstatus_add_detached_signatures(networkstatus_t *target,$/;"	f
networkstatus_check_consensus_signature	networkstatus.c	/^networkstatus_check_consensus_signature(networkstatus_t *consensus,$/;"	f
networkstatus_check_document_signature	networkstatus.c	/^networkstatus_check_document_signature(const networkstatus_t *consensus,$/;"	f
networkstatus_check_weights	dirvote.c	/^networkstatus_check_weights(int64_t Wgg, int64_t Wgd, int64_t Wmg,$/;"	f	file:
networkstatus_compute_bw_weights_v10	dirvote.c	/^networkstatus_compute_bw_weights_v10(smartlist_t *chunks, int64_t G,$/;"	f	file:
networkstatus_compute_consensus	dirvote.c	/^networkstatus_compute_consensus(smartlist_t *votes,$/;"	f
networkstatus_consensus_download_failed	networkstatus.c	/^networkstatus_consensus_download_failed(int status_code, const char *flavname)$/;"	f
networkstatus_consensus_token_table	routerparse.c	/^static token_rule_t networkstatus_consensus_token_table[] = {$/;"	v	file:
networkstatus_copy_old_consensus_info	networkstatus.c	/^networkstatus_copy_old_consensus_info(networkstatus_t *new_c,$/;"	f	file:
networkstatus_detached_signature_token_table	routerparse.c	/^static token_rule_t networkstatus_detached_signature_token_table[] = {$/;"	v	file:
networkstatus_dl_check_interval	main.c	1596;"	d	file:
networkstatus_dump_bridge_status_to_file	networkstatus.c	/^networkstatus_dump_bridge_status_to_file(time_t now)$/;"	f
networkstatus_format_signatures	dirvote.c	/^networkstatus_format_signatures(networkstatus_t *consensus,$/;"	f	file:
networkstatus_free_all	networkstatus.c	/^networkstatus_free_all(void)$/;"	f
networkstatus_get_bw_weight	networkstatus.c	/^networkstatus_get_bw_weight(networkstatus_t *ns, const char *weight_name,$/;"	f
networkstatus_get_detached_signatures	dirvote.c	/^networkstatus_get_detached_signatures(smartlist_t *consensuses)$/;"	f
networkstatus_get_flavor_name	networkstatus.c	/^networkstatus_get_flavor_name(consensus_flavor_t flav)$/;"	f
networkstatus_get_latest_consensus	networkstatus.c	/^networkstatus_get_latest_consensus(void)$/;"	f
networkstatus_get_live_consensus	networkstatus.c	/^networkstatus_get_live_consensus(time_t now)$/;"	f
networkstatus_get_param	networkstatus.c	/^networkstatus_get_param(const networkstatus_t *ns, const char *param_name,$/;"	f
networkstatus_get_reasonably_live_consensus	networkstatus.c	/^networkstatus_get_reasonably_live_consensus(time_t now, int flavor)$/;"	f
networkstatus_get_router_digest_by_nickname	networkstatus.c	/^networkstatus_get_router_digest_by_nickname(const char *nickname)$/;"	f
networkstatus_get_voter_by_id	networkstatus.c	/^networkstatus_get_voter_by_id(networkstatus_t *vote,$/;"	f
networkstatus_get_weight_scale_param	networkstatus.c	/^networkstatus_get_weight_scale_param(networkstatus_t *ns)$/;"	f
networkstatus_getinfo_by_purpose	networkstatus.c	/^networkstatus_getinfo_by_purpose(const char *purpose_string, time_t now)$/;"	f
networkstatus_getinfo_helper_single	networkstatus.c	/^networkstatus_getinfo_helper_single(const routerstatus_t *rs)$/;"	f
networkstatus_nickname_is_unnamed	networkstatus.c	/^networkstatus_nickname_is_unnamed(const char *nickname)$/;"	f
networkstatus_note_certs_arrived	networkstatus.c	/^networkstatus_note_certs_arrived(void)$/;"	f
networkstatus_parse_detached_signatures	routerparse.c	/^networkstatus_parse_detached_signatures(const char *s, const char *eos)$/;"	f
networkstatus_parse_flavor_name	networkstatus.c	/^networkstatus_parse_flavor_name(const char *flavname)$/;"	f
networkstatus_parse_vote_from_string	routerparse.c	/^networkstatus_parse_vote_from_string(const char *s, const char **eos_out,$/;"	f
networkstatus_reset_download_failures	networkstatus.c	/^networkstatus_reset_download_failures(void)$/;"	f
networkstatus_reset_warnings	networkstatus.c	/^networkstatus_reset_warnings(void)$/;"	f
networkstatus_set_current_consensus	networkstatus.c	/^networkstatus_set_current_consensus(const char *consensus,$/;"	f
networkstatus_t	or.h	/^typedef struct networkstatus_t {$/;"	s
networkstatus_t	or.h	/^} networkstatus_t;$/;"	t	typeref:struct:networkstatus_t
networkstatus_token_table	routerparse.c	/^static token_rule_t networkstatus_token_table[] = {$/;"	v	file:
networkstatus_type_t	or.h	/^} networkstatus_type_t;$/;"	t	typeref:enum:__anon15
networkstatus_verify_bw_weights	routerparse.c	/^networkstatus_verify_bw_weights(networkstatus_t *ns, int consensus_method)$/;"	f
networkstatus_vote_find_entry	networkstatus.c	/^networkstatus_vote_find_entry(networkstatus_t *ns, const char *digest)$/;"	f
networkstatus_vote_find_entry_idx	networkstatus.c	/^networkstatus_vote_find_entry_idx(networkstatus_t *ns,$/;"	f
networkstatus_vote_find_mutable_entry	networkstatus.c	/^networkstatus_vote_find_mutable_entry(networkstatus_t *ns, const char *digest)$/;"	f
networkstatus_vote_footer_token_table	routerparse.c	/^static token_rule_t networkstatus_vote_footer_token_table[] = {$/;"	v	file:
networkstatus_vote_free	networkstatus.c	/^networkstatus_vote_free(networkstatus_t *ns)$/;"	f
networkstatus_voter_info_t	or.h	/^typedef struct networkstatus_voter_info_t {$/;"	s
networkstatus_voter_info_t	or.h	/^} networkstatus_voter_info_t;$/;"	t	typeref:struct:networkstatus_voter_info_t
new_address	addressmap.c	/^  char *new_address;$/;"	m	struct:__anon87	file:
new_cached_dir	dirserv.c	/^new_cached_dir(char *s, time_t published)$/;"	f
new_element	sandbox.c	/^new_element(int syscall, char *value)$/;"	f	file:
new_element2	sandbox.c	/^new_element2(int syscall, char *value, char *value2)$/;"	f	file:
new_route_len	circuitbuild.c	/^new_route_len(uint8_t purpose, extend_info_t *exit, smartlist_t *nodes)$/;"	f	file:
new_thread_state_arg	workqueue.c	/^  void *new_thread_state_arg;$/;"	m	struct:threadpool_s	file:
new_thread_state_fn	workqueue.c	/^  void *(*new_thread_state_fn)(void*);$/;"	m	struct:threadpool_s	file:
newnym_epoch	main.c	/^static unsigned newnym_epoch = 0;$/;"	v	file:
next	buffers.h	/^  struct chunk_t *next; \/**< The next chunk on the buffer. *\/$/;"	m	struct:chunk_t	typeref:struct:chunk_t::chunk_t
next	channel.h	/^  TOR_SIMPLEQ_ENTRY(cell_queue_entry_s) next;$/;"	m	struct:cell_queue_entry_s
next	di_ops.c	/^  struct di_digest256_map_t *next;$/;"	m	struct:di_digest256_map_t	typeref:struct:di_digest256_map_t::di_digest256_map_t	file:
next	dirvote.c	/^  struct microdesc_vote_line_t *next;$/;"	m	struct:microdesc_vote_line_t	typeref:struct:microdesc_vote_line_t::microdesc_vote_line_t	file:
next	dns_structs.h	/^  struct pending_connection_t *next;$/;"	m	struct:pending_connection_t	typeref:struct:pending_connection_t::pending_connection_t
next	log.c	/^  struct logfile_t *next; \/**< Next logfile_t in the linked list. *\/$/;"	m	struct:logfile_t	typeref:struct:logfile_t::logfile_t	file:
next	or.h	/^  TOR_SIMPLEQ_ENTRY(packed_cell_t) next;$/;"	m	struct:packed_cell_t
next	or.h	/^  struct config_line_t *next;$/;"	m	struct:config_line_t	typeref:struct:config_line_t::config_line_t
next	or.h	/^  struct crypt_path_t *next; \/**< Link to next crypt_path_t in the circuit.$/;"	m	struct:crypt_path_t	typeref:struct:crypt_path_t::crypt_path_t
next	or.h	/^  struct vote_microdesc_hash_t *next;$/;"	m	struct:vote_microdesc_hash_t	typeref:struct:vote_microdesc_hash_t::vote_microdesc_hash_t
next	sandbox.h	/^  struct sandbox_cfg_elem *next;$/;"	m	struct:sandbox_cfg_elem	typeref:struct:sandbox_cfg_elem::sandbox_cfg_elem
next_active_on_n_chan	or.h	/^  struct circuit_t *next_active_on_n_chan;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::circuit_t
next_active_on_p_chan	or.h	/^  struct circuit_t *next_active_on_p_chan;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::circuit_t
next_attempt_at	or.h	/^  time_t next_attempt_at; \/**< When should we try downloading this descriptor$/;"	m	struct:download_status_t
next_chunk	memarea.c	/^  struct memarea_chunk_t *next_chunk;$/;"	m	struct:memarea_chunk_t	typeref:struct:memarea_chunk_t::memarea_chunk_t	file:
next_heartbeat	main.c	/^  time_t next_heartbeat;$/;"	m	struct:__anon107	file:
next_max_idx	rephist.c	/^  int next_max_idx;$/;"	m	struct:bw_array_t	file:
next_measurement_idx	control.c	/^static int next_measurement_idx = 0;$/;"	v	file:
next_mem	memarea.c	/^  char *next_mem; \/**< Next position in mem to allocate data at.  If it's$/;"	m	struct:memarea_chunk_t	file:
next_period	rephist.c	/^  time_t next_period;$/;"	m	struct:bw_array_t	file:
next_stream	or.h	/^  struct edge_connection_t *next_stream; \/**< Points to the next stream at this$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::edge_connection_t
next_stream_id	or.h	/^  streamid_t next_stream_id;$/;"	m	struct:origin_circuit_t
next_upload_time	rendservice.c	/^  time_t next_upload_time; \/**< Scheduled next hidden service descriptor$/;"	m	struct:rend_service_t	file:
next_vote_num	dircollate.h	/^  int next_vote_num;$/;"	m	struct:dircollator_s
next_with_same_id	channel.h	/^  TOR_LIST_ENTRY(channel_s) next_with_same_id;$/;"	m	struct:channel_s
next_with_same_id	or.h	/^  struct or_connection_t *next_with_same_id; \/**< Next connection with same$/;"	m	struct:or_connection_t	typeref:struct:or_connection_t::or_connection_t
next_write	or.h	/^  time_t next_write;$/;"	m	struct:__anon30
nickname	channel.h	/^  char *nickname;$/;"	m	struct:channel_s
nickname	entrynodes.h	/^  char nickname[MAX_NICKNAME_LEN+1];$/;"	m	struct:entry_guard_t
nickname	or.h	/^  char *nickname; \/**< Human-readable OR name. *\/$/;"	m	struct:__anon14
nickname	or.h	/^  char *nickname; \/**< Nickname of OR on other side (if any). *\/$/;"	m	struct:or_connection_t
nickname	or.h	/^  char *nickname; \/**< Nickname of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
nickname	or.h	/^  char *nickname;$/;"	m	struct:dir_server_t
nickname	or.h	/^  char nickname[MAX_HEX_NICKNAME_LEN+1]; \/**< This router's nickname for$/;"	m	struct:extend_info_t
nickname	or.h	/^  char nickname[MAX_NICKNAME_LEN+1]; \/**< The nickname this router says it$/;"	m	struct:routerstatus_t
nickname	or.h	/^  char nickname[MAX_NICKNAME_LEN+1];$/;"	m	struct:extrainfo_t
no_advertise	or.h	/^  unsigned int no_advertise : 1;$/;"	m	struct:server_port_cfg_t
no_listen	or.h	/^  unsigned int no_listen : 1;$/;"	m	struct:server_port_cfg_t
no_save	or.h	/^  unsigned int no_save : 1;$/;"	m	struct:microdesc_t
node	dns_structs.h	/^  HT_ENTRY(cached_resolve_t) node;$/;"	m	struct:cached_resolve_t
node	or.h	/^  HT_ENTRY(microdesc_t) node;$/;"	m	struct:microdesc_t
node_addrs_changed	nodelist.c	/^node_addrs_changed(node_t *node)$/;"	f	file:
node_allows_single_hop_exits	nodelist.c	/^node_allows_single_hop_exits(const node_t *node)$/;"	f
node_assert_ok	nodelist.h	15;"	d
node_describe	router.c	/^node_describe(const node_t *node)$/;"	f
node_exit_policy_is_exact	nodelist.c	/^node_exit_policy_is_exact(const node_t *node, sa_family_t family)$/;"	f
node_exit_policy_rejects_all	nodelist.c	/^node_exit_policy_rejects_all(const node_t *node)$/;"	f
node_free	nodelist.c	/^node_free(node_t *node)$/;"	f	file:
node_get_addr	nodelist.c	/^node_get_addr(const node_t *node, tor_addr_t *addr_out)$/;"	f
node_get_addr_ipv4h	nodelist.h	68;"	d
node_get_address_string	nodelist.c	/^node_get_address_string(const node_t *node, char *buf, size_t len)$/;"	f
node_get_all_orports	nodelist.c	/^node_get_all_orports(const node_t *node)$/;"	f
node_get_by_hex_id	nodelist.c	/^node_get_by_hex_id(const char *hex_id)$/;"	f
node_get_declared_family	nodelist.c	/^node_get_declared_family(const node_t *node)$/;"	f
node_get_declared_uptime	nodelist.c	/^node_get_declared_uptime(const node_t *node)$/;"	f
node_get_description	router.c	/^node_get_description(char *buf, const node_t *node)$/;"	f
node_get_mutable_by_id	nodelist.c	/^node_get_mutable_by_id(const char *identity_digest)$/;"	f
node_get_nickname	nodelist.c	/^node_get_nickname(const node_t *node)$/;"	f
node_get_or_create	nodelist.c	/^node_get_or_create(const char *identity_digest)$/;"	f	file:
node_get_platform	nodelist.c	/^node_get_platform(const node_t *node)$/;"	f
node_get_pref_ipv6_orport	nodelist.c	/^node_get_pref_ipv6_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_pref_orport	nodelist.c	/^node_get_pref_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_prim_addr_ipv4h	nodelist.c	/^node_get_prim_addr_ipv4h(const node_t *node)$/;"	f
node_get_prim_orport	nodelist.c	/^node_get_prim_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_published_on	nodelist.c	/^node_get_published_on(const node_t *node)$/;"	f
node_get_purpose	nodelist.c	/^node_get_purpose(const node_t *node)$/;"	f
node_get_verbose_nickname	nodelist.c	/^node_get_verbose_nickname(const node_t *node,$/;"	f
node_get_verbose_nickname_by_id	nodelist.c	/^node_get_verbose_nickname_by_id(const char *id_digest,$/;"	f
node_handles_some_port	circuitbuild.c	/^node_handles_some_port(const node_t *node, smartlist_t *needed_ports)$/;"	f	file:
node_has_curve25519_onion_key	nodelist.c	/^node_has_curve25519_onion_key(const node_t *node)$/;"	f
node_has_descriptor	nodelist.c	/^node_has_descriptor(const node_t *node)$/;"	f
node_hex	or.h	/^  char node_hex[MAX_HEX_NICKNAME_LEN+1];$/;"	m	struct:measured_bw_line_t
node_id	onion.h	/^  uint8_t node_id[DIGEST_LEN];$/;"	m	struct:extend_cell_t
node_id	or.h	/^  char node_id[DIGEST_LEN];$/;"	m	struct:measured_bw_line_t
node_id_eq	nodelist.c	/^node_id_eq(const node_t *node1, const node_t *node2)$/;"	f	file:
node_id_hash	nodelist.c	/^node_id_hash(const node_t *node)$/;"	f	file:
node_in_nickname_smartlist	nodelist.c	/^node_in_nickname_smartlist(const smartlist_t *lst, const node_t *node)$/;"	f	file:
node_ipv6_preferred	nodelist.c	/^node_ipv6_preferred(const node_t *node)$/;"	f
node_is_a_configured_bridge	entrynodes.c	/^node_is_a_configured_bridge(const node_t *node)$/;"	f
node_is_bridge	nodelist.h	44;"	d
node_is_dir	nodelist.c	/^node_is_dir(const node_t *node)$/;"	f
node_is_good_exit	or.h	/^static INLINE int node_is_good_exit(const node_t *node)$/;"	f
node_is_me	nodelist.c	/^node_is_me(const node_t *node)$/;"	f
node_is_named	nodelist.c	/^node_is_named(const node_t *node)$/;"	f
node_is_unreliable	nodelist.c	/^node_is_unreliable(const node_t *node, int need_uptime,$/;"	f
node_is_usable	nodelist.c	/^node_is_usable(const node_t *node)$/;"	f	file:
node_nickname_matches	nodelist.c	/^node_nickname_matches(const node_t *node, const char *nickname)$/;"	f	file:
node_set_country	nodelist.c	/^node_set_country(node_t *node)$/;"	f
node_sl_choose_by_bandwidth	routerlist.c	/^node_sl_choose_by_bandwidth(const smartlist_t *sl,$/;"	f
node_t	or.h	/^typedef struct node_t {$/;"	s
node_t	or.h	/^} node_t;$/;"	t	typeref:struct:node_t
nodelist_add_microdesc	nodelist.c	/^nodelist_add_microdesc(microdesc_t *md)$/;"	f
nodelist_add_node_and_family	nodelist.c	/^nodelist_add_node_and_family(smartlist_t *sl, const node_t *node)$/;"	f
nodelist_assert_ok	nodelist.c	/^nodelist_assert_ok(void)$/;"	f
nodelist_drop_node	nodelist.c	/^nodelist_drop_node(node_t *node, int remove_from_ht)$/;"	f	file:
nodelist_find_nodes_with_microdesc	nodelist.c	/^nodelist_find_nodes_with_microdesc(const microdesc_t *md)$/;"	f
nodelist_free_all	nodelist.c	/^nodelist_free_all(void)$/;"	f
nodelist_idx	or.h	/^  int nodelist_idx;$/;"	m	struct:node_t
nodelist_purge	nodelist.c	/^nodelist_purge(void)$/;"	f
nodelist_refresh_countries	nodelist.c	/^nodelist_refresh_countries(void)$/;"	f
nodelist_remove_microdesc	nodelist.c	/^nodelist_remove_microdesc(const char *identity_digest, microdesc_t *md)$/;"	f
nodelist_remove_routerinfo	nodelist.c	/^nodelist_remove_routerinfo(routerinfo_t *ri)$/;"	f
nodelist_set_consensus	nodelist.c	/^nodelist_set_consensus(networkstatus_t *ns)$/;"	f
nodelist_set_routerinfo	nodelist.c	/^nodelist_set_routerinfo(routerinfo_t *ri, routerinfo_t **ri_old_out)$/;"	f
nodelist_t	nodelist.c	/^typedef struct nodelist_t {$/;"	s	file:
nodelist_t	nodelist.c	/^} nodelist_t;$/;"	t	typeref:struct:nodelist_t	file:
nodes	nodelist.c	/^  smartlist_t *nodes;$/;"	m	struct:nodelist_t	file:
nodes_in_same_family	nodelist.c	/^nodes_in_same_family(const node_t *node1, const node_t *node2)$/;"	f
non_guard_bw	entrynodes.h	/^  int non_guard_bw;$/;"	m	struct:guardfraction_bandwidth_t
nonlive_timeouts	or.h	/^  int nonlive_timeouts;$/;"	m	struct:__anon31
normalize_data_directory	config.c	/^normalize_data_directory(or_options_t *options)$/;"	f	file:
note_broken_connection	connection_or.c	/^note_broken_connection(const char *state)$/;"	f	file:
note_client_request	directory.c	/^note_client_request(int purpose, int compressed, size_t bytes)$/;"	f	file:
note_crypto_pk_op	rephist.c	/^note_crypto_pk_op(pk_op_t operation)$/;"	f
note_request	directory.c	/^note_request(const char *key, size_t bytes)$/;"	f
note_that_we_completed_a_circuit	main.c	/^note_that_we_completed_a_circuit(void)$/;"	f
note_that_we_maybe_cant_complete_circuits	main.c	/^note_that_we_maybe_cant_complete_circuits(void)$/;"	f
notice_bootstrap_percent	control.c	/^static int notice_bootstrap_percent = 0;$/;"	v	file:
notify_circ_active	circuitmux.h	/^  void (*notify_circ_active)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_circ_inactive	circuitmux.h	/^  void (*notify_circ_inactive)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_control_networkstatus_changed	networkstatus.c	/^notify_control_networkstatus_changed(const networkstatus_t *old_c,$/;"	f	file:
notify_pending_waitpid_callbacks	util_process.c	/^notify_pending_waitpid_callbacks(void)$/;"	f
notify_set_n_cells	circuitmux.h	/^  void (*notify_set_n_cells)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_waitpid_callback_by_pid	util_process.c	/^notify_waitpid_callback_by_pid(pid_t pid, int status)$/;"	f	file:
notify_xmit_cells	circuitmux.h	/^  void (*notify_xmit_cells)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
now_ms_for_buf_cmp	circuitlist.c	/^static uint32_t now_ms_for_buf_cmp;$/;"	v	file:
nr_streams	or.h	/^  int nr_streams;$/;"	m	struct:rend_data_t
ns_detached_signatures_free	dirvote.c	/^ns_detached_signatures_free(ns_detached_signatures_t *s)$/;"	f
ns_detached_signatures_t	or.h	/^typedef struct ns_detached_signatures_t {$/;"	s
ns_detached_signatures_t	or.h	/^} ns_detached_signatures_t;$/;"	t	typeref:struct:ns_detached_signatures_t
ns_v3_responses	geoip.c	/^static uint32_t ns_v3_responses[GEOIP_NS_RESPONSE_NUM];$/;"	v	file:
nt_service_body	ntmain.c	/^nt_service_body(int argc, char **argv)$/;"	f	file:
nt_service_cmd_start	ntmain.c	/^nt_service_cmd_start(void)$/;"	f	file:
nt_service_cmd_stop	ntmain.c	/^nt_service_cmd_stop(void)$/;"	f	file:
nt_service_command_line	ntmain.c	/^nt_service_command_line(int *using_default_torrc)$/;"	f	file:
nt_service_control	ntmain.c	/^nt_service_control(DWORD request)$/;"	f	file:
nt_service_install	ntmain.c	/^nt_service_install(int argc, char **argv)$/;"	f	file:
nt_service_is_stopping	ntmain.c	/^nt_service_is_stopping(void)$/;"	f
nt_service_is_stopping	ntmain.h	26;"	d
nt_service_loadlibrary	ntmain.c	/^nt_service_loadlibrary(void)$/;"	f	file:
nt_service_main	ntmain.c	/^nt_service_main(void)$/;"	f	file:
nt_service_open	ntmain.c	/^nt_service_open(SC_HANDLE hSCManager)$/;"	f	file:
nt_service_open_scm	ntmain.c	/^nt_service_open_scm(void)$/;"	f	file:
nt_service_parse_options	ntmain.c	/^nt_service_parse_options(int argc, char **argv, int *should_exit)$/;"	f
nt_service_remove	ntmain.c	/^nt_service_remove(void)$/;"	f	file:
nt_service_set_state	ntmain.c	/^nt_service_set_state(DWORD state)$/;"	f
nt_service_start	ntmain.c	/^nt_service_start(SC_HANDLE hService)$/;"	f	file:
nt_service_stop	ntmain.c	/^nt_service_stop(SC_HANDLE hService)$/;"	f	file:
ntohl	orconfig.h	2419;"	d
ntohs	orconfig.h	2418;"	d
ntor	or.h	/^    struct ntor_handshake_state_t *ntor;$/;"	m	union:__anon19::__anon20	typeref:struct:__anon19::__anon20::ntor_handshake_state_t
ntor_handshake_state_free	onion_ntor.c	/^ntor_handshake_state_free(ntor_handshake_state_t *state)$/;"	f
ntor_handshake_state_t	onion_ntor.h	/^struct ntor_handshake_state_t {$/;"	s
ntor_handshake_state_t	onion_ntor.h	/^typedef struct ntor_handshake_state_t ntor_handshake_state_t;$/;"	t	typeref:struct:ntor_handshake_state_t
ntor_key_map_free	router.c	/^ntor_key_map_free(di_digest256_map_t *map)$/;"	f
ntor_key_map_free_helper	router.c	/^ntor_key_map_free_helper(void *arg)$/;"	f	file:
num_bridges_usable	entrynodes.c	/^num_bridges_usable(void)$/;"	f	file:
num_bytes_queued	channel.h	/^  size_t (*num_bytes_queued)(channel_t *);$/;"	m	struct:channel_s
num_cells_writeable	channel.h	/^  int (*num_cells_writeable)(channel_t *);$/;"	m	struct:channel_s
num_circuits_launched	or.h	/^  unsigned int num_circuits_launched:4;$/;"	m	struct:entry_connection_t
num_cpus	compat_libevent.h	/^  int num_cpus;$/;"	m	struct:tor_libevent_cfg
num_live_entry_guards	entrynodes.c	/^num_live_entry_guards(int for_directory)$/;"	f
num_maxes_set	rephist.c	/^  int num_maxes_set;$/;"	m	struct:bw_array_t	file:
num_n_circuits	channel.h	/^  unsigned int num_n_circuits, num_p_circuits;$/;"	m	struct:channel_s
num_ntors_per_tap	onion.c	/^num_ntors_per_tap(void)$/;"	f	file:
num_p_circuits	channel.h	/^  unsigned int num_n_circuits, num_p_circuits;$/;"	m	struct:channel_s
num_recent_circs	or.h	/^  int num_recent_circs;$/;"	m	struct:__anon31
num_rend_services	rendservice.c	/^num_rend_services(void)$/;"	f
num_resolve_failures	addressmap.c	/^  short num_resolve_failures;$/;"	m	struct:__anon87	file:
num_socks_retries	or.h	/^  uint8_t num_socks_retries;$/;"	m	struct:entry_connection_t
num_used	container.h	/^  int num_used;$/;"	m	struct:smartlist_t
nym_epoch	or.h	/^  unsigned nym_epoch;$/;"	m	struct:entry_connection_t
nym_epoch	or.h	/^  unsigned nym_epoch;$/;"	m	struct:origin_circuit_t
obj_syntax	routerparse.c	/^} obj_syntax;$/;"	t	typeref:enum:__anon98	file:
object_body	routerparse.c	/^  char *object_body;           \/**< Contents of object, base64-decoded. *\/$/;"	m	struct:directory_token_t	file:
object_size	routerparse.c	/^  size_t object_size;          \/**< Bytes in object_body *\/$/;"	m	struct:directory_token_t	file:
object_type	routerparse.c	/^  char *object_type;           \/**< -----BEGIN [object_type]-----*\/$/;"	m	struct:directory_token_t	file:
obs	rephist.c	/^  uint64_t obs[NUM_SECS_ROLLING_MEASURE];$/;"	m	struct:bw_array_t	file:
ocall_num	TorSGX.cpp	/^int ocall_num;$/;"	v
off	or.h	/^  off_t off;$/;"	m	struct:microdesc_t
off64_t	torgzip.c	44;"	d	file:
off_t	orconfig.h	/^typedef long off_t;$/;"	t
ol_entries	onion.c	/^static int ol_entries[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
old	routerlist.c	/^  int old;$/;"	m	struct:duration_idx_t	file:
old_routers	or.h	/^  smartlist_t *old_routers;$/;"	m	struct:__anon17
old_sigaction	orconfig.h	/^struct old_sigaction {$/;"	s
old_sigset_t	orconfig.h	/^typedef unsigned long old_sigset_t;             \/* at least 32 bits *\/$/;"	t
on_circuit	or.h	/^  struct circuit_t *on_circuit; \/**< The circuit (if any) that this edge$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::circuit_t
on_pool	workqueue.c	/^  struct threadpool_s *on_pool;$/;"	m	struct:workqueue_entry_s	typeref:struct:workqueue_entry_s::threadpool_s	file:
one_tick	compat_libevent.c	/^static const struct timeval *one_tick = NULL;$/;"	v	typeref:struct:timeval	file:
onehop_tunnel	or.h	/^  unsigned int onehop_tunnel : 1;$/;"	m	struct:__anon22
onion_address	or.h	/^  char onion_address[REND_SERVICE_ADDRESS_LEN+1];$/;"	m	struct:rend_service_authorization_t
onion_address	or.h	/^  char onion_address[REND_SERVICE_ID_LEN_BASE32+1];$/;"	m	struct:rend_data_t
onion_append_hop	circuitbuild.c	/^onion_append_hop(crypt_path_t **head_ptr, extend_info_t *choice)$/;"	f	file:
onion_append_to_cpath	circuitbuild.c	/^onion_append_to_cpath(crypt_path_t **head_ptr, crypt_path_t *new_hop)$/;"	f
onion_curve25519_pkey	or.h	/^  curve25519_public_key_t *onion_curve25519_pkey;$/;"	m	struct:__anon14
onion_curve25519_pkey	or.h	/^  curve25519_public_key_t *onion_curve25519_pkey;$/;"	m	struct:microdesc_t
onion_extend_cpath	circuitbuild.c	/^onion_extend_cpath(origin_circuit_t *circ)$/;"	f	file:
onion_handshake_state_release	onion.c	/^onion_handshake_state_release(onion_handshake_state_t *state)$/;"	f
onion_handshake_state_t	or.h	/^} onion_handshake_state_t;$/;"	t	typeref:struct:__anon19
onion_handshakes_assigned	rephist.c	/^STATIC int onion_handshakes_assigned[MAX_ONION_HANDSHAKE_TYPE+1] = {0};$/;"	v
onion_handshakes_requested	rephist.c	/^STATIC int onion_handshakes_requested[MAX_ONION_HANDSHAKE_TYPE+1] = {0};$/;"	v
onion_key	onion.h	/^  crypto_pk_t *onion_key;$/;"	m	struct:server_onion_keys_t
onion_key	or.h	/^  crypto_pk_t *onion_key; \/**< Current onionskin key. *\/$/;"	m	struct:extend_info_t
onion_keys	cpuworker.c	/^  server_onion_keys_t *onion_keys;$/;"	m	struct:worker_state_s	file:
onion_next_hop_in_cpath	circuitbuild.c	/^onion_next_hop_in_cpath(crypt_path_t *cpath)$/;"	f	file:
onion_next_task	onion.c	/^onion_next_task(create_cell_t **onionskin_out)$/;"	f
onion_num_pending	onion.c	/^onion_num_pending(uint16_t handshake_type)$/;"	f
onion_pending_add	onion.c	/^onion_pending_add(or_circuit_t *circ, create_cell_t *onionskin)$/;"	f
onion_pending_remove	onion.c	/^onion_pending_remove(or_circuit_t *circ)$/;"	f
onion_pick_cpath_exit	circuitbuild.c	/^onion_pick_cpath_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f	file:
onion_pkey	or.h	/^  crypto_pk_t *onion_pkey; \/**< Public RSA key for onions. *\/$/;"	m	struct:__anon14
onion_pkey	or.h	/^  crypto_pk_t *onion_pkey;$/;"	m	struct:microdesc_t
onion_populate_cpath	circuitbuild.c	/^onion_populate_cpath(origin_circuit_t *circ)$/;"	f	file:
onion_queue_entry_remove	onion.c	/^onion_queue_entry_remove(onion_queue_t *victim)$/;"	f	file:
onion_queue_t	onion.c	/^typedef struct onion_queue_t {$/;"	s	file:
onion_queue_t	onion.c	/^} onion_queue_t;$/;"	t	typeref:struct:onion_queue_t	file:
onion_skin_TAP_client_handshake	onion_tap.c	/^onion_skin_TAP_client_handshake(crypto_dh_t *handshake_state,$/;"	f
onion_skin_TAP_create	onion_tap.c	/^onion_skin_TAP_create(crypto_pk_t *dest_router_key,$/;"	f
onion_skin_TAP_server_handshake	onion_tap.c	/^onion_skin_TAP_server_handshake($/;"	f
onion_skin_client_handshake	onion.c	/^onion_skin_client_handshake(int type,$/;"	f
onion_skin_create	onion.c	/^onion_skin_create(int type,$/;"	f
onion_skin_ntor_client_handshake	onion_ntor.c	/^onion_skin_ntor_client_handshake($/;"	f
onion_skin_ntor_create	onion_ntor.c	/^onion_skin_ntor_create(const uint8_t *router_id,$/;"	f
onion_skin_ntor_server_handshake	onion_ntor.c	/^onion_skin_ntor_server_handshake(const uint8_t *onion_skin,$/;"	f
onion_skin_server_handshake	onion.c	/^onion_skin_server_handshake(int type,$/;"	f
onionkey	router.c	/^static crypto_pk_t *onionkey=NULL;$/;"	v	file:
onionkey_set_at	router.c	/^static time_t onionkey_set_at=0; \/**< When was onionkey last changed? *\/$/;"	v	file:
onionqueue_entry	or.h	/^  struct onion_queue_t *onionqueue_entry;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::onion_queue_t
onions_seen_this_period	rephist.c	/^  digestmap_t *onions_seen_this_period;$/;"	m	struct:hs_stats_t	file:
onionskin	onion.c	/^  create_cell_t *onionskin;$/;"	m	struct:onion_queue_t	file:
onionskin	onion.h	/^  uint8_t onionskin[CELL_PAYLOAD_SIZE - 4];$/;"	m	struct:create_cell_t
onionskin_answer	circuitbuild.c	/^onionskin_answer(or_circuit_t *circ,$/;"	f
onionskins_n_processed	cpuworker.c	/^static uint64_t onionskins_n_processed[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
onionskins_usec_internal	cpuworker.c	/^static uint64_t onionskins_usec_internal[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
onionskins_usec_roundtrip	cpuworker.c	/^static uint64_t onionskins_usec_roundtrip[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
open	crypto_ed25519.c	/^  int (*open)(const unsigned char *, const unsigned char *, size_t, const$/;"	m	struct:__anon123	file:
open_batch	crypto_ed25519.c	/^  int (*open_batch)(const unsigned char **, size_t *, const unsigned char **,$/;"	m	struct:__anon123	file:
open_file_t	util.c	/^struct open_file_t {$/;"	s	file:
open_file_t	util.h	/^typedef struct open_file_t open_file_t;$/;"	t	typeref:struct:open_file_t
open_sockets	compat.c	/^static bitarray_t *open_sockets = NULL;$/;"	v	file:
openssl_dynlock_create_cb_	crypto.c	/^openssl_dynlock_create_cb_(const char *file, int line)$/;"	f	file:
openssl_dynlock_destroy_cb_	crypto.c	/^openssl_dynlock_destroy_cb_(struct CRYPTO_dynlock_value *v,$/;"	f	file:
openssl_dynlock_lock_cb_	crypto.c	/^openssl_dynlock_lock_cb_(int mode, struct CRYPTO_dynlock_value *v,$/;"	f	file:
openssl_locking_cb_	crypto.c	/^openssl_locking_cb_(int mode, int n, const char *file, int line)$/;"	f	file:
openssl_mutexes_	crypto.c	/^static tor_mutex_t **openssl_mutexes_ = NULL;$/;"	v	file:
opt_streq	config.c	/^opt_streq(const char *s1, const char *s2)$/;"	f	file:
optimistic_data_enabled	circuituse.c	/^optimistic_data_enabled(void)$/;"	f	file:
option_abbrevs_	config.c	/^static config_abbrev_t option_abbrevs_[] = {$/;"	v	file:
option_get_assignment	config.c	/^option_get_assignment(const or_options_t *options, const char *key)$/;"	f
option_get_canonical_name	config.c	/^option_get_canonical_name(const char *key)$/;"	f
option_is_recognized	config.c	/^option_is_recognized(const char *key)$/;"	f
option_vars_	config.c	/^static config_var_t option_vars_[] = {$/;"	v	file:
options_act	config.c	/^options_act(const or_options_t *old_options)$/;"	f	file:
options_act_reversible	config.c	/^options_act_reversible(const or_options_t *old_options, char **msg)$/;"	f	file:
options_dump	config.c	/^options_dump(const or_options_t *options, int how_to_dump)$/;"	f
options_format	config.c	/^STATIC config_format_t options_format = {$/;"	v
options_get_datadir_fname2	config.h	66;"	d
options_get_datadir_fname2_suffix	config.c	/^options_get_datadir_fname2_suffix(const or_options_t *options,$/;"	f
options_init	config.c	/^options_init(or_options_t *options)$/;"	f
options_init_from_string	config.c	/^options_init_from_string(const char *cf_defaults, const char *cf,$/;"	f
options_init_from_torrc	config.c	/^options_init_from_torrc(int argc, char **argv)$/;"	f
options_init_logs	config.c	/^options_init_logs(const or_options_t *old_options, or_options_t *options,$/;"	f	file:
options_need_geoip_info	config.c	/^options_need_geoip_info(const or_options_t *options, const char **reason_out)$/;"	f
options_new	config.c	/^options_new(void)$/;"	f
options_save_current	config.c	/^options_save_current(void)$/;"	f
options_transition_affects_descriptor	config.c	/^options_transition_affects_descriptor(const or_options_t *old_options,$/;"	f	file:
options_transition_affects_workers	config.c	/^options_transition_affects_workers(const or_options_t *old_options,$/;"	f	file:
options_transition_allowed	config.c	/^options_transition_allowed(const or_options_t *old,$/;"	f	file:
options_transition_requires_fresh_tls_context	config.c	/^options_transition_requires_fresh_tls_context(const or_options_t *old_options,$/;"	f	file:
options_trial_assign	config.c	/^options_trial_assign(config_line_t *list, int use_defaults,$/;"	f
options_validate	config.c	/^options_validate(or_options_t *old_options, or_options_t *options,$/;"	f
options_validate_cb	config.c	/^options_validate_cb(void *old_options, void *options, void *default_options,$/;"	f	file:
or_circuit_new	circuitlist.c	/^or_circuit_new(circid_t p_circ_id, channel_t *p_chan)$/;"	f
or_circuit_rendinfo_s	or.h	/^typedef struct or_circuit_rendinfo_s {$/;"	s
or_circuit_rendinfo_t	or.h	/^} or_circuit_rendinfo_t;$/;"	t	typeref:struct:or_circuit_rendinfo_s
or_circuit_t	or.h	/^typedef struct or_circuit_t {$/;"	s
or_circuit_t	or.h	/^} or_circuit_t;$/;"	t	typeref:struct:or_circuit_t
or_conn_status_event_t	or.h	/^typedef enum or_conn_status_event_t {$/;"	g
or_conn_status_event_t	or.h	/^} or_conn_status_event_t;$/;"	t	typeref:enum:or_conn_status_event_t
or_connection_new	connection.c	/^or_connection_new(int type, int socket_family)$/;"	f
or_connection_t	or.h	/^typedef struct or_connection_t {$/;"	s
or_connection_t	or.h	/^} or_connection_t;$/;"	t	typeref:struct:or_connection_t
or_handshake_state_free	connection_or.c	/^or_handshake_state_free(or_handshake_state_t *state)$/;"	f
or_handshake_state_record_cell	connection_or.c	/^or_handshake_state_record_cell(or_connection_t *conn,$/;"	f
or_handshake_state_record_var_cell	connection_or.c	/^or_handshake_state_record_var_cell(or_connection_t *conn,$/;"	f
or_handshake_state_t	or.h	/^typedef struct or_handshake_state_t {$/;"	s
or_handshake_state_t	or.h	/^} or_handshake_state_t;$/;"	t	typeref:struct:or_handshake_state_t
or_history_t	rephist.c	/^typedef struct or_history_t {$/;"	s	file:
or_history_t	rephist.c	/^} or_history_t;$/;"	t	typeref:struct:or_history_t	file:
or_options_free	config.c	/^or_options_free(or_options_t *options)$/;"	f
or_options_t	or.h	/^} or_options_t;$/;"	t	typeref:struct:__anon24
or_port	or.h	/^  uint16_t or_port; \/**< OR port for this router. *\/$/;"	m	struct:routerstatus_t
or_port	or.h	/^  uint16_t or_port; \/**< OR port of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
or_port	or.h	/^  uint16_t or_port; \/**< OR port: Used for tunneling connections. *\/$/;"	m	struct:dir_server_t
or_port	or.h	/^  uint16_t or_port; \/**< Port for TLS connections. *\/$/;"	m	struct:__anon14
or_protocol_versions	connection_or.c	/^static const uint16_t or_protocol_versions[] = { 1, 2, 3, 4 };$/;"	v	file:
or_state_free	statefile.c	/^or_state_free(or_state_t *state)$/;"	f
or_state_free_all	statefile.c	/^or_state_free_all(void)$/;"	f
or_state_load	statefile.c	/^or_state_load(void)$/;"	f
or_state_loaded	statefile.c	/^or_state_loaded(void)$/;"	f
or_state_mark_dirty	or.h	/^static INLINE void or_state_mark_dirty(or_state_t *state, time_t when)$/;"	f
or_state_new	statefile.c	/^or_state_new(void)$/;"	f
or_state_save	statefile.c	/^or_state_save(time_t now)$/;"	f
or_state_save_broken	statefile.c	/^or_state_save_broken(char *fname)$/;"	f	file:
or_state_set	statefile.c	/^or_state_set(or_state_t *new_state)$/;"	f	file:
or_state_t	or.h	/^} or_state_t;$/;"	t	typeref:struct:__anon30
or_state_validate	statefile.c	/^or_state_validate(or_state_t *state, char **msg)$/;"	f	file:
or_state_validate_cb	statefile.c	/^or_state_validate_cb(void *old_state, void *state, void *default_state,$/;"	f	file:
orconn_end_reason_to_control_string	reasons.c	/^orconn_end_reason_to_control_string(int r)$/;"	f
orconn_ext_or_id_map	connection_or.c	/^static digestmap_t *orconn_ext_or_id_map = NULL;$/;"	v	file:
orconn_identity_map	connection_or.c	/^static digestmap_t *orconn_identity_map = NULL;$/;"	v	file:
orconn_target_get_name	control.c	/^orconn_target_get_name(char *name, size_t len, or_connection_t *conn)$/;"	f	file:
orig_address	connection_edge.h	/^  char orig_address[MAX_SOCKS_ADDR_LEN];$/;"	m	struct:__anon86
origin_circuit_init	circuitbuild.c	/^origin_circuit_init(uint8_t purpose, int flags)$/;"	f
origin_circuit_new	circuitlist.c	/^origin_circuit_new(void)$/;"	f
origin_circuit_t	or.h	/^typedef struct origin_circuit_t {$/;"	s
origin_circuit_t	or.h	/^} origin_circuit_t;$/;"	t	typeref:struct:origin_circuit_t
original_dest_address	or.h	/^  char *original_dest_address;$/;"	m	struct:entry_connection_t
orport_ipv4	onion.h	/^  tor_addr_port_t orport_ipv4;$/;"	m	struct:extend_cell_t
orport_ipv6	onion.h	/^  tor_addr_port_t orport_ipv6;$/;"	m	struct:extend_cell_t
os	routerparse.c	/^  obj_syntax os;$/;"	m	struct:token_rule_t	file:
out_environ	TorSGX.cpp	/^char ***out_environ = NULL;$/;"	v
out_errno	TorSGX.cpp	/^int *out_errno = NULL;$/;"	v
out_system_dir	TorSGX.cpp	/^char *out_system_dir = NULL;$/;"	v
outbuf	or.h	/^  buf_t *outbuf; \/**< Buffer holding data to write over this connection. *\/$/;"	m	struct:connection_t
outbuf_flushlen	or.h	/^  size_t outbuf_flushlen; \/**< How much data should we try to flush from the$/;"	m	struct:connection_t
outgoing_addrs	connection.c	/^static smartlist_t *outgoing_addrs = NULL;$/;"	v	file:
outgoing_queue	channel.h	/^  chan_cell_queue_t outgoing_queue;$/;"	m	struct:channel_s
output_so_far	torgzip.c	/^  size_t output_so_far;$/;"	m	struct:tor_zlib_state_t	file:
owning_controller_process_monitor	control.c	/^static tor_process_monitor_t *owning_controller_process_monitor = NULL;$/;"	v	file:
owning_controller_process_spec	control.c	/^static char *owning_controller_process_spec = NULL;$/;"	v	file:
owning_controller_procmon_cb	control.c	/^owning_controller_procmon_cb(void *unused)$/;"	f	file:
p_chan	or.h	/^  channel_t *p_chan;$/;"	m	struct:or_circuit_t
p_chan_cells	or.h	/^  cell_queue_t p_chan_cells;$/;"	m	struct:or_circuit_t
p_circ_id	or.h	/^  circid_t p_circ_id;$/;"	m	struct:or_circuit_t
p_crypto	or.h	/^  crypto_cipher_t *p_crypto;$/;"	m	struct:or_circuit_t
p_delete_pending	or.h	/^  unsigned int p_delete_pending : 1;$/;"	m	struct:circuit_t
p_digest	or.h	/^  crypto_digest_t *p_digest;$/;"	m	struct:or_circuit_t
p_mux	or.h	/^  circuitmux_t *p_mux;$/;"	m	struct:or_circuit_t
p_streams	or.h	/^  edge_connection_t *p_streams;$/;"	m	struct:origin_circuit_t
package_lines	or.h	/^  smartlist_t *package_lines;$/;"	m	struct:networkstatus_t
package_window	or.h	/^  int package_window; \/**< How many cells are we allowed to originate ending$/;"	m	struct:crypt_path_t
package_window	or.h	/^  int package_window; \/**< How many more relay cells can I send into the$/;"	m	struct:edge_connection_t
package_window	or.h	/^  int package_window;$/;"	m	struct:circuit_t
packed	channel.h	/^    } packed;$/;"	m	union:cell_queue_entry_s::__anon75	typeref:struct:cell_queue_entry_s::__anon75::__anon78
packed121666121665	curve25519-donna-sse2.h	/^static const packedelem64 packed121666121665 = {{121666, 121665}};$/;"	v
packed2p0	curve25519-donna-sse2.h	/^static const packedelem32 packed2p0 = {{0x7ffffda,0x3fffffe,0x7fffffe,0x3fffffe}};$/;"	v
packed2p1	curve25519-donna-sse2.h	/^static const packedelem32 packed2p1 = {{0x7fffffe,0x3fffffe,0x7fffffe,0x3fffffe}};$/;"	v
packed2p2	curve25519-donna-sse2.h	/^static const packedelem32 packed2p2 = {{0x7fffffe,0x3fffffe,0x0000000,0x0000000}};$/;"	v
packed32bignum25519	curve25519-donna-sse2.h	/^typedef packedelem32 packed32bignum25519[5];$/;"	t
packed32packed2p0	curve25519-donna-sse2.h	/^static const packedelem32 packed32packed2p0 = {{0x7ffffda,0x7ffffda,0x3fffffe,0x3fffffe}};$/;"	v
packed32packed2p1	curve25519-donna-sse2.h	/^static const packedelem32 packed32packed2p1 = {{0x7fffffe,0x7fffffe,0x3fffffe,0x3fffffe}};$/;"	v
packed32packed4p0	curve25519-donna-sse2.h	/^static const packedelem32 packed32packed4p0 = {{0xfffffb4,0xfffffb4,0x7fffffc,0x7fffffc}};$/;"	v
packed32packed4p1	curve25519-donna-sse2.h	/^static const packedelem32 packed32packed4p1 = {{0xffffffc,0xffffffc,0x7fffffc,0x7fffffc}};$/;"	v
packed3819	curve25519-donna-sse2.h	/^static const packedelem64 packed3819 = {{19*2,19}};$/;"	v
packed4p0	curve25519-donna-sse2.h	/^static const packedelem32 packed4p0 = {{0xfffffb4,0x7fffffc,0xffffffc,0x7fffffc}};$/;"	v
packed4p1	curve25519-donna-sse2.h	/^static const packedelem32 packed4p1 = {{0xffffffc,0x7fffffc,0xffffffc,0x7fffffc}};$/;"	v
packed4p2	curve25519-donna-sse2.h	/^static const packedelem32 packed4p2 = {{0xffffffc,0x7fffffc,0x0000000,0x0000000}};$/;"	v
packed64bignum25519	curve25519-donna-sse2.h	/^typedef packedelem64 packed64bignum25519[10];$/;"	t
packed9638	curve25519-donna-sse2.h	/^static const packedelem64 packed9638 = {{19*4,19*2}};$/;"	v
packed_cell	channel.h	/^      packed_cell_t *packed_cell;$/;"	m	struct:cell_queue_entry_s::__anon75::__anon78
packed_cell_copy	relay.c	/^packed_cell_copy(const cell_t *cell, int wide_circ_ids)$/;"	f	file:
packed_cell_free	relay.c	/^packed_cell_free(packed_cell_t *cell)$/;"	f
packed_cell_free_unchecked	relay.c	/^packed_cell_free_unchecked(packed_cell_t *cell)$/;"	f	file:
packed_cell_get_circid	relay.c	/^packed_cell_get_circid(const packed_cell_t *cell, int wide_circ_ids)$/;"	f
packed_cell_get_command	relay.c	/^packed_cell_get_command(const packed_cell_t *cell, int wide_circ_ids)$/;"	f	file:
packed_cell_is_destroy	channel.c	/^packed_cell_is_destroy(channel_t *chan,$/;"	f
packed_cell_mem_cost	relay.c	/^packed_cell_mem_cost(void)$/;"	f
packed_cell_new	relay.c	/^packed_cell_new(void)$/;"	f
packed_cell_t	or.h	/^typedef struct packed_cell_t {$/;"	s
packed_cell_t	or.h	/^} packed_cell_t;$/;"	t	typeref:struct:packed_cell_t
packedelem32	curve25519-donna-sse2.h	/^} packedelem32;$/;"	t	typeref:union:packedelem32_t
packedelem32_t	curve25519-donna-sse2.h	/^typedef union packedelem32_t {$/;"	u
packedelem64	curve25519-donna-sse2.h	/^} packedelem64;$/;"	t	typeref:union:packedelem64_t
packedelem64_t	curve25519-donna-sse2.h	/^typedef union packedelem64_t {$/;"	u
packedelem8	curve25519-donna-sse2.h	/^} packedelem8;$/;"	t	typeref:union:packedelem8_t
packedelem8_t	curve25519-donna-sse2.h	/^typedef union packedelem8_t {$/;"	u
packedmask25	curve25519-donna-sse2.h	/^static const packedelem64 packedmask25 = {{0x01ffffff, 0x01ffffff}};$/;"	v
packedmask25252525	curve25519-donna-sse2.h	/^static const packedelem32 packedmask25252525 = {{0x01ffffff, 0x01ffffff, 0x01ffffff, 0x01ffffff}};$/;"	v
packedmask26	curve25519-donna-sse2.h	/^static const packedelem64 packedmask26 = {{0x03ffffff, 0x03ffffff}};$/;"	v
packedmask2625	curve25519-donna-sse2.h	/^static const packedelem32 packedmask2625 = {{0x3ffffff,0,0x1ffffff,0}};$/;"	v
packedmask26262626	curve25519-donna-sse2.h	/^static const packedelem32 packedmask26262626 = {{0x03ffffff, 0x03ffffff, 0x03ffffff, 0x03ffffff}};$/;"	v
packednineteen	curve25519-donna-sse2.h	/^static const packedelem64 packednineteen = {{19, 19}};$/;"	v
packednineteenone	curve25519-donna-sse2.h	/^static const packedelem64 packednineteenone = {{19, 1}};$/;"	v
packedthirtyeight	curve25519-donna-sse2.h	/^static const packedelem64 packedthirtyeight = {{38, 38}};$/;"	v
param	sandbox.h	/^  smp_param_t *param;$/;"	m	struct:sandbox_cfg_elem
parse_addr_policy	policies.c	/^parse_addr_policy(config_line_t *cfg, smartlist_t **dest,$/;"	f	file:
parse_bridge_line	config.c	/^parse_bridge_line(const char *line)$/;"	f
parse_client_method_error	transports.c	113;"	d	file:
parse_cmethod_line	transports.c	/^parse_cmethod_line(const char *line, managed_proxy_t *mp)$/;"	f
parse_commandline	tor-gencert.c	/^parse_commandline(const char *_month, const char *_addr)$/;"	f	file:
parse_config_line_from_str	util.h	470;"	d
parse_config_line_from_str_verbose	util.c	/^parse_config_line_from_str_verbose(const char *line, char **key_out,$/;"	f
parse_create2_payload	onion.c	/^parse_create2_payload(create_cell_t *cell_out, const uint8_t *p, size_t p_len)$/;"	f	file:
parse_dir_authority_line	config.c	/^parse_dir_authority_line(const char *line, dirinfo_type_t required_type,$/;"	f	file:
parse_dir_fallback_line	config.c	/^parse_dir_fallback_line(const char *line,$/;"	f
parse_env_error	transports.c	/^parse_env_error(const char *line)$/;"	f
parse_extended_hostname	connection_edge.c	/^parse_extended_hostname(char *address)$/;"	f
parse_http_response	directory.c	/^parse_http_response(const char *headers, int *code, time_t *date,$/;"	f
parse_http_time	util.c	/^parse_http_time(const char *date, struct tm *tm)$/;"	f
parse_http_url	directory.c	/^parse_http_url(const char *headers, char **url)$/;"	f
parse_iso_time	util.c	/^parse_iso_time(const char *cp, time_t *t)$/;"	f
parse_iso_time_	util.c	/^parse_iso_time_(const char *cp, time_t *t, int strict)$/;"	f
parse_log_domain	log.c	/^parse_log_domain(const char *domain)$/;"	f	file:
parse_log_level	log.c	/^parse_log_level(const char *level)$/;"	f
parse_log_severity_config	log.c	/^parse_log_severity_config(const char **cfg_ptr,$/;"	f
parse_method_error	transports.c	/^parse_method_error(const char *line, int is_server)$/;"	f	file:
parse_openssl_version_str	crypto.c	/^parse_openssl_version_str(const char *raw_version)$/;"	f	file:
parse_outbound_addresses	config.c	/^parse_outbound_addresses(or_options_t *options, int validate_only, char **msg)$/;"	f	file:
parse_port_config	config.c	/^parse_port_config(smartlist_t *out,$/;"	f	file:
parse_port_range	address.c	/^parse_port_range(const char *port, uint16_t *port_min_out,$/;"	f
parse_ports	config.c	/^parse_ports(or_options_t *options, int validate_only,$/;"	f	file:
parse_possibly_bad_iso_time	rephist.c	/^parse_possibly_bad_iso_time(const char *s, time_t *time_out)$/;"	f	file:
parse_process_specifier	procmon.c	/^parse_process_specifier(const char *process_spec,$/;"	f	file:
parse_proxy_error	transports.c	/^parse_proxy_error(const char *line)$/;"	f
parse_reachable_addresses	policies.c	/^parse_reachable_addresses(void)$/;"	f	file:
parse_rfc1123_time	util.c	/^parse_rfc1123_time(const char *buf, time_t *t)$/;"	f
parse_server_method_error	transports.c	112;"	d	file:
parse_short_policy	policies.c	/^parse_short_policy(const char *summary)$/;"	f
parse_smethod_line	transports.c	/^parse_smethod_line(const char *line, managed_proxy_t *mp)$/;"	f
parse_socks	buffers.c	/^parse_socks(const char *data, size_t datalen, socks_request_t *req,$/;"	f	file:
parse_socks_client	buffers.c	/^parse_socks_client(const uint8_t *data, size_t datalen,$/;"	f	file:
parse_transport_line	config.c	/^parse_transport_line(const or_options_t *options,$/;"	f
parse_version	transports.c	/^parse_version(const char *line, managed_proxy_t *mp)$/;"	f
parse_virtual_addr_network	addressmap.c	/^parse_virtual_addr_network(const char *val, sa_family_t family,$/;"	f
parsed	rendcache.h	/^  rend_service_descriptor_t *parsed; \/**< Parsed value of 'desc' *\/$/;"	m	struct:rend_cache_entry_t
parsed	rendservice.h	/^  uint8_t parsed;$/;"	m	struct:rend_intro_cell_s
parsed_process_specifier_t	procmon.c	/^struct parsed_process_specifier_t {$/;"	s	file:
passphrase	tor-gencert.c	/^char *passphrase = NULL;$/;"	v
passphrase_len	tor-gencert.c	/^size_t passphrase_len = 0;$/;"	v
passwd	orconfig.h	/^struct passwd$/;"	s
passwd_cached	compat.c	/^static struct passwd *passwd_cached = NULL;$/;"	v	typeref:struct:passwd	file:
password	or.h	/^  char *password;$/;"	m	struct:socks_request_t
passwordlen	or.h	/^  uint8_t passwordlen;$/;"	m	struct:socks_request_t
patchlevel	or.h	/^  int patchlevel;$/;"	m	struct:tor_version_t
path_bias_disabled	entrynodes.h	/^  unsigned int path_bias_disabled : 1; \/**< Have we disabled this node because$/;"	m	struct:entry_guard_t
path_bias_extreme	entrynodes.h	/^  unsigned int path_bias_extreme : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_noticed	entrynodes.h	/^  unsigned int path_bias_noticed : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_use_extreme	entrynodes.h	/^  unsigned int path_bias_use_extreme : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_use_noticed	entrynodes.h	/^  unsigned int path_bias_use_noticed : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_warned	entrynodes.h	/^  unsigned int path_bias_warned : 1; \/**< Did we alert the user about path bias$/;"	m	struct:entry_guard_t
path_is_relative	util.c	/^path_is_relative(const char *filename)$/;"	f
path_state	or.h	/^  path_state_bitfield_t path_state : 3;$/;"	m	struct:origin_circuit_t
path_state_bitfield_t	or.h	2978;"	d
path_state_t	or.h	/^} path_state_t;$/;"	t	typeref:enum:__anon23
pathbias_check_close	circpathbias.c	/^pathbias_check_close(origin_circuit_t *ocirc, int reason)$/;"	f
pathbias_check_probe_response	circpathbias.c	/^pathbias_check_probe_response(circuit_t *circ, const cell_t *cell)$/;"	f
pathbias_count_build_attempt	circpathbias.c	/^pathbias_count_build_attempt(origin_circuit_t *circ)$/;"	f
pathbias_count_build_success	circpathbias.c	/^pathbias_count_build_success(origin_circuit_t *circ)$/;"	f
pathbias_count_circs_in_states	circpathbias.c	/^pathbias_count_circs_in_states(entry_guard_t *guard,$/;"	f	file:
pathbias_count_collapse	circpathbias.c	/^pathbias_count_collapse(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_successful_close	circpathbias.c	/^pathbias_count_successful_close(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_timeout	circpathbias.c	/^pathbias_count_timeout(origin_circuit_t *circ)$/;"	f
pathbias_count_use_attempt	circpathbias.c	/^pathbias_count_use_attempt(origin_circuit_t *circ)$/;"	f
pathbias_count_use_failed	circpathbias.c	/^pathbias_count_use_failed(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_use_success	circpathbias.c	/^pathbias_count_use_success(origin_circuit_t *circ)$/;"	f	file:
pathbias_get_close_success_count	circpathbias.c	/^pathbias_get_close_success_count(entry_guard_t *guard)$/;"	f
pathbias_get_dropguards	circpathbias.c	/^pathbias_get_dropguards(const or_options_t *options)$/;"	f
pathbias_get_extreme_rate	circpathbias.c	/^pathbias_get_extreme_rate(const or_options_t *options)$/;"	f
pathbias_get_extreme_use_rate	circpathbias.c	/^pathbias_get_extreme_use_rate(const or_options_t *options)$/;"	f
pathbias_get_min_circs	circpathbias.c	/^pathbias_get_min_circs(const or_options_t *options)$/;"	f	file:
pathbias_get_min_use	circpathbias.c	/^pathbias_get_min_use(const or_options_t *options)$/;"	f	file:
pathbias_get_notice_rate	circpathbias.c	/^pathbias_get_notice_rate(const or_options_t *options)$/;"	f	file:
pathbias_get_notice_use_rate	circpathbias.c	/^pathbias_get_notice_use_rate(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_ratio	circpathbias.c	/^pathbias_get_scale_ratio(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_threshold	circpathbias.c	/^pathbias_get_scale_threshold(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_use_threshold	circpathbias.c	/^pathbias_get_scale_use_threshold(const or_options_t *options)$/;"	f	file:
pathbias_get_use_success_count	circpathbias.c	/^pathbias_get_use_success_count(entry_guard_t *guard)$/;"	f
pathbias_get_warn_rate	circpathbias.c	/^pathbias_get_warn_rate(const or_options_t *options)$/;"	f	file:
pathbias_is_new_circ_attempt	circpathbias.c	/^pathbias_is_new_circ_attempt(origin_circuit_t *circ)$/;"	f	file:
pathbias_mark_use_rollback	circpathbias.c	/^pathbias_mark_use_rollback(origin_circuit_t *circ)$/;"	f
pathbias_mark_use_success	circpathbias.c	/^pathbias_mark_use_success(origin_circuit_t *circ)$/;"	f
pathbias_measure_close_rate	circpathbias.c	/^pathbias_measure_close_rate(entry_guard_t *guard)$/;"	f	file:
pathbias_measure_use_rate	circpathbias.c	/^pathbias_measure_use_rate(entry_guard_t *guard)$/;"	f	file:
pathbias_probe_id	or.h	/^  streamid_t pathbias_probe_id;$/;"	m	struct:origin_circuit_t
pathbias_probe_nonce	or.h	/^  uint32_t pathbias_probe_nonce;$/;"	m	struct:origin_circuit_t
pathbias_scale_close_rates	circpathbias.c	/^pathbias_scale_close_rates(entry_guard_t *guard)$/;"	f	file:
pathbias_scale_use_rates	circpathbias.c	/^pathbias_scale_use_rates(entry_guard_t *guard)$/;"	f
pathbias_send_usable_probe	circpathbias.c	/^pathbias_send_usable_probe(circuit_t *circ)$/;"	f	file:
pathbias_should_count	circpathbias.c	/^pathbias_should_count(origin_circuit_t *circ)$/;"	f	file:
pathbias_shouldcount	or.h	/^  uint8_t pathbias_shouldcount;$/;"	m	struct:origin_circuit_t
pathbias_state_to_string	circpathbias.c	/^pathbias_state_to_string(path_state_t state)$/;"	f
payload	or.h	/^  uint8_t payload[CELL_PAYLOAD_SIZE]; \/**< Cell body. *\/$/;"	m	struct:cell_t
payload	or.h	/^  uint8_t payload[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:var_cell_t
payload	remote_attestation_result.h	/^    uint8_t         payload[];          \/\/ 32: Ciphertext of the payload$/;"	m	struct:sp_aes_gcm_data_t
payload_len	or.h	/^  uint16_t payload_len;$/;"	m	struct:var_cell_t
payload_size	remote_attestation_result.h	/^    uint32_t        payload_size;       \/\/  0: Size of the payload which is$/;"	m	struct:sp_aes_gcm_data_t
payload_tag	remote_attestation_result.h	/^    uint8_t	        payload_tag[SAMPLE_SP_TAG_SIZE];$/;"	m	struct:sp_aes_gcm_data_t
pce_svn	ias_ra.h	/^    sample_isv_svn_t        pce_svn;                \/\/ 10$/;"	m	struct:sample_quote_t
peek_buf_has_control0_command	buffers.c	/^peek_buf_has_control0_command(buf_t *buf)$/;"	f
peek_connection_has_control0_command	control.c	/^peek_connection_has_control0_command(connection_t *conn)$/;"	f	file:
peek_evbuffer_has_control0_command	buffers.c	/^peek_evbuffer_has_control0_command(struct evbuffer *buf)$/;"	f
peek_from_buf	buffers.c	/^peek_from_buf(char *string, size_t string_len, const buf_t *buf)$/;"	f	file:
pending	workqueue.c	/^  uint8_t pending;$/;"	m	struct:workqueue_entry_s	file:
pending_cb_messages	log.c	/^static smartlist_t *pending_cb_messages = NULL;$/;"	v	file:
pending_connection_t	dns_structs.h	/^typedef struct pending_connection_t {$/;"	s
pending_connection_t	dns_structs.h	/^} pending_connection_t;$/;"	t	typeref:struct:pending_connection_t
pending_connections	dns_structs.h	/^  pending_connection_t *pending_connections;$/;"	m	struct:cached_resolve_t
pending_consensus_signature_list	dirvote.c	/^static smartlist_t *pending_consensus_signature_list = NULL;$/;"	v	file:
pending_consensus_signatures	dirvote.c	/^static char *pending_consensus_signatures = NULL;$/;"	v	file:
pending_consensus_t	dirvote.c	/^typedef struct pending_consensus_t {$/;"	s	file:
pending_consensus_t	dirvote.c	/^} pending_consensus_t;$/;"	t	typeref:struct:pending_consensus_t	file:
pending_consensuses	dirvote.c	/^static pending_consensus_t pending_consensuses[N_CONSENSUS_FLAVORS];$/;"	v	file:
pending_final_cpath	or.h	/^  crypt_path_t *pending_final_cpath;$/;"	m	struct:__anon22
pending_log_message_free	log.c	/^pending_log_message_free(pending_log_message_t *msg)$/;"	f	file:
pending_log_message_new	log.c	/^pending_log_message_new(int severity, log_domain_mask_t domain,$/;"	f	file:
pending_log_message_t	log.c	/^typedef struct pending_log_message_t {$/;"	s	file:
pending_log_message_t	log.c	/^} pending_log_message_t;$/;"	t	typeref:struct:pending_log_message_t	file:
pending_optimistic_data	or.h	/^  generic_buffer_t *pending_optimistic_data;$/;"	m	struct:entry_connection_t
pending_sig	or.h	/^  char *pending_sig;$/;"	m	struct:extrainfo_t
pending_sig_len	or.h	/^  size_t pending_sig_len;$/;"	m	struct:extrainfo_t
pending_startup_messages	log.c	/^static smartlist_t *pending_startup_messages = NULL;$/;"	v	file:
pending_startup_messages_len	log.c	/^static size_t pending_startup_messages_len;$/;"	v	file:
pending_vote_list	dirvote.c	/^static smartlist_t *pending_vote_list = NULL;$/;"	v	file:
pending_vote_t	dirvote.c	/^typedef struct pending_vote_t {$/;"	s	file:
pending_vote_t	dirvote.c	/^} pending_vote_t;$/;"	t	typeref:struct:pending_vote_t	file:
periodic_timer_cb	compat_libevent.c	/^periodic_timer_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
periodic_timer_free	compat_libevent.c	/^periodic_timer_free(periodic_timer_t *timer)$/;"	f
periodic_timer_new	compat_libevent.c	/^periodic_timer_new(struct event_base *base,$/;"	f
periodic_timer_t	compat_libevent.c	/^struct periodic_timer_t {$/;"	s	file:
periodic_timer_t	compat_libevent.h	/^typedef struct periodic_timer_t periodic_timer_t;$/;"	t	typeref:struct:periodic_timer_t
pf_socket	connection_edge.c	/^static int pf_socket = -1;$/;"	v	file:
pick_active_circuit	circuitmux.h	/^  circuit_t * (*pick_active_circuit)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
pick_curve25519_basepoint_impl	crypto_curve25519.c	/^pick_curve25519_basepoint_impl(void)$/;"	f	file:
pick_ed25519_impl	crypto_ed25519.c	/^pick_ed25519_impl(void)$/;"	f	file:
pick_entry_guards	entrynodes.c	/^pick_entry_guards(const or_options_t *options, int for_directory)$/;"	f	file:
pick_hsdir	rendclient.c	/^pick_hsdir(const char *desc_id, const char *desc_id_base32)$/;"	f	file:
pick_rendezvous_node	circuitbuild.c	/^pick_rendezvous_node(router_crn_flags_t flags)$/;"	f	file:
pick_tor2web_rendezvous_node	circuitbuild.c	/^pick_tor2web_rendezvous_node(router_crn_flags_t flags,$/;"	f
pid	procmon.c	/^  pid_t pid;$/;"	m	struct:parsed_process_specifier_t	file:
pid	procmon.c	/^  pid_t pid;$/;"	m	struct:tor_process_monitor_t	file:
pid	transports.h	/^  int pid; \/* The Process ID this managed proxy is using. *\/$/;"	m	struct:__anon1
pid	util.h	/^  PROCESS_INFORMATION pid;$/;"	m	struct:process_handle_t
pid	util.h	/^  pid_t pid;$/;"	m	struct:process_handle_t
pid	util_process.c	/^  pid_t pid;$/;"	m	struct:waitpid_callback_t	file:
pid_t	orconfig.h	/^typedef unsigned int pid_t;$/;"	t
pid_t	procmon.c	/^typedef int pid_t;$/;"	t	file:
pipe_alert	compat_threads.c	/^pipe_alert(int fd)$/;"	f	file:
pipe_drain	compat_threads.c	/^pipe_drain(int fd)$/;"	f	file:
pk	or.h	/^  crypto_pk_t *pk; \/**< This service's public key. *\/$/;"	m	struct:rend_service_descriptor_t
pk	rendservice.h	/^  uint8_t pk[DIGEST_LEN];$/;"	m	struct:rend_intro_cell_s
pk_digest	rendservice.c	/^  char pk_digest[DIGEST_LEN]; \/**< Hash of permanent hidden-service key. *\/$/;"	m	struct:rend_service_t	file:
pk_op_counts	rephist.c	/^} pk_op_counts = {0,0,0,0,0,0,0,0,0,0,0};$/;"	v	typeref:struct:__anon103	file:
pk_op_t	or.h	/^} pk_op_t;$/;"	t	typeref:enum:__anon41
pkey_digests	tortls.c	/^  digests_t pkey_digests;$/;"	m	struct:tor_x509_cert_t	file:
pkey_digests_set	tortls.c	/^  unsigned pkey_digests_set : 1;$/;"	m	struct:tor_x509_cert_t	file:
plaintext	rendservice.h	/^  uint8_t *plaintext;$/;"	m	struct:rend_intro_cell_s
plaintext_len	rendservice.h	/^  ssize_t plaintext_len;$/;"	m	struct:rend_intro_cell_s
platform	or.h	/^  char *platform; \/**< What software\/operating system is this OR using? *\/$/;"	m	struct:__anon14
platform_info	remote_attestation_result.h	/^    uint8_t platform_info[SAMPLE_PLATFORM_INFO_SIZE];$/;"	m	struct:_ias_platform_info_blob_t
platform_info_blob	remote_attestation_result.h	/^    ias_platform_info_blob_t    platform_info_blob;$/;"	m	struct:sample_ra_att_result_msg_t
points	ed25519-donna-batchverify.h	/^	ge25519 points[heap_batch_size];$/;"	m	struct:batch_heap_t
policies	routerset.h	/^  smartlist_t *policies;$/;"	m	struct:routerset_t
policies_exit_policy_append_reject_star	policies.c	/^policies_exit_policy_append_reject_star(smartlist_t **dest)$/;"	f
policies_free_all	policies.c	/^policies_free_all(void)$/;"	f
policies_parse_exit_policy	policies.c	/^policies_parse_exit_policy(config_line_t *cfg, smartlist_t **dest,$/;"	f
policies_parse_exit_policy_from_options	policies.c	/^policies_parse_exit_policy_from_options(const or_options_t *or_options,$/;"	f
policies_parse_exit_policy_internal	policies.c	/^policies_parse_exit_policy_internal(config_line_t *cfg, smartlist_t **dest,$/;"	f	file:
policies_parse_from_options	policies.c	/^policies_parse_from_options(const or_options_t *options)$/;"	f
policies_set_node_exitpolicy_to_reject_all	policies.c	/^policies_set_node_exitpolicy_to_reject_all(node_t *node)$/;"	f
policy	circuitmux.c	/^  const circuitmux_policy_t *policy;$/;"	m	struct:circuitmux_s	file:
policy	policies.c	/^  addr_policy_t *policy;$/;"	m	struct:policy_map_ent_t	file:
policy_data	circuitmux.c	/^  circuitmux_policy_circ_data_t *policy_data;$/;"	m	struct:circuit_muxinfo_s	file:
policy_data	circuitmux.c	/^  circuitmux_policy_data_t *policy_data;$/;"	m	struct:circuitmux_s	file:
policy_eq	policies.c	/^policy_eq(policy_map_ent_t *a, policy_map_ent_t *b)$/;"	f	file:
policy_expand_private	policies.c	/^policy_expand_private(smartlist_t **policy)$/;"	f
policy_expand_unspec	policies.c	/^policy_expand_unspec(smartlist_t **policy)$/;"	f
policy_hash	policies.c	/^policy_hash(const policy_map_ent_t *ent)$/;"	f	file:
policy_is_reject_star	or.h	/^  unsigned int policy_is_reject_star:1; \/**< True iff the exit policy for this$/;"	m	struct:__anon14
policy_is_reject_star	policies.c	/^policy_is_reject_star(const smartlist_t *policy, sa_family_t family)$/;"	f
policy_map_ent_t	policies.c	/^typedef struct policy_map_ent_t {$/;"	s	file:
policy_map_ent_t	policies.c	/^} policy_map_ent_t;$/;"	t	typeref:struct:policy_map_ent_t	file:
policy_summarize	policies.c	/^policy_summarize(smartlist_t *policy, sa_family_t family)$/;"	f
policy_summary_accept	policies.c	/^policy_summary_accept(smartlist_t *summary,$/;"	f	file:
policy_summary_add_item	policies.c	/^policy_summary_add_item(smartlist_t *summary, addr_policy_t *p)$/;"	f	file:
policy_summary_create	policies.c	/^policy_summary_create(void)$/;"	f	file:
policy_summary_item_split	policies.c	/^policy_summary_item_split(policy_summary_item_t* old, uint16_t new_starts)$/;"	f	file:
policy_summary_item_t	policies.c	/^typedef struct policy_summary_item_t {$/;"	s	file:
policy_summary_item_t	policies.c	/^} policy_summary_item_t;$/;"	t	typeref:struct:policy_summary_item_t	file:
policy_summary_reject	policies.c	/^policy_summary_reject(smartlist_t *summary,$/;"	f	file:
policy_summary_split	policies.c	/^policy_summary_split(smartlist_t *summary,$/;"	f	file:
policy_type	or.h	/^  addr_policy_action_bitfield_t policy_type:2;$/;"	m	struct:addr_policy_t
policy_write_item	policies.c	/^policy_write_item(char *buf, size_t buflen, addr_policy_t *policy,$/;"	f
poll_hproc	procmon.c	/^  int poll_hproc;$/;"	m	struct:tor_process_monitor_t	file:
poll_interval_tv	procmon.c	/^static struct timeval poll_interval_tv = {15, 0};$/;"	v	typeref:struct:timeval	file:
pop_first_cell_ewma	circuitmux_ewma.c	/^pop_first_cell_ewma(ewma_policy_data_t *pol)$/;"	f	file:
populate_live_entry_guards	entrynodes.c	/^populate_live_entry_guards(smartlist_t *live_entry_guards,$/;"	f
port	address.h	/^  uint16_t port;$/;"	m	struct:tor_addr_port_t
port	config.h	/^  uint16_t port; \/* The TCP port of the bridge. *\/$/;"	m	struct:bridge_line_t
port	connection_edge.h	/^  uint16_t port;$/;"	m	struct:begin_cell_t
port	entrynodes.c	/^  uint16_t port;$/;"	m	struct:__anon122	file:
port	or.h	/^  int port; \/**< The configured port, or CFG_AUTO_PORT to tell Tor to pick its$/;"	m	struct:port_cfg_t
port	or.h	/^  uint16_t port; \/**< If non-zero, port on the other end$/;"	m	struct:connection_t
port	or.h	/^  uint16_t port; \/**< OR port. *\/$/;"	m	struct:extend_info_t
port	or.h	/^  uint16_t port; \/**< What port did the client ask to connect to? *\/$/;"	m	struct:socks_request_t
port	rephist.c	/^  uint16_t port;$/;"	m	struct:predicted_port_t	file:
port	transports.h	/^  uint16_t port;$/;"	m	struct:transport_t
port_cfg_free	config.c	/^port_cfg_free(port_cfg_t *port)$/;"	f	file:
port_cfg_new	config.c	/^port_cfg_new(size_t namelen)$/;"	f	file:
port_cfg_t	or.h	/^typedef struct port_cfg_t {$/;"	s
port_cfg_t	or.h	/^} port_cfg_t;$/;"	t	typeref:struct:port_cfg_t
ports	rendservice.c	/^  smartlist_t *ports; \/**< List of rend_service_port_config_t *\/$/;"	m	struct:rend_service_t	file:
pos	aes.c	/^  unsigned int pos;$/;"	m	struct:aes_cnt_cipher	file:
pos	buffers.c	/^  int pos;\/**< Which character inside the chunk's data are we pointing to? *\/$/;"	m	struct:buf_pos_t	file:
pos	routerparse.c	/^  int pos;$/;"	m	struct:token_rule_t	file:
post_quote	TorSGX.cpp	/^int post_quote(ra_samp_request_header_t * p_msg3_full)$/;"	f
predicted_internal_capacity_time	rephist.c	/^static time_t predicted_internal_capacity_time = 0;$/;"	v	file:
predicted_internal_time	rephist.c	/^static time_t predicted_internal_time = 0;$/;"	v	file:
predicted_internal_uptime_time	rephist.c	/^static time_t predicted_internal_uptime_time = 0;$/;"	v	file:
predicted_port_t	rephist.c	/^typedef struct predicted_port_t {$/;"	s	file:
predicted_port_t	rephist.c	/^} predicted_port_t;$/;"	t	typeref:struct:predicted_port_t	file:
predicted_ports_free	rephist.c	/^predicted_ports_free(void)$/;"	f	file:
predicted_ports_init	rephist.c	/^predicted_ports_init(void)$/;"	f	file:
predicted_ports_list	rephist.c	/^static smartlist_t *predicted_ports_list=NULL;$/;"	v	file:
prefer_ipv6	or.h	/^  unsigned int prefer_ipv6 : 1;$/;"	m	struct:entry_port_cfg_t
prefer_ipv6_virtaddr	or.h	/^  unsigned int prefer_ipv6_virtaddr : 1;$/;"	m	struct:entry_port_cfg_t
preferred_chunk_size	buffers.c	/^preferred_chunk_size(size_t target)$/;"	f	file:
prefix	tinytest.h	/^	const char *prefix; \/**< Prefix to prepend to testnames. *\/$/;"	m	struct:testgroup_t
prepend_policy	or.h	/^  smartlist_t *prepend_policy;$/;"	m	struct:origin_circuit_t
pretty_fn_has_parens	log.c	/^static int pretty_fn_has_parens = 0;$/;"	v	file:
prev	or.h	/^  struct crypt_path_t *prev; \/**< Link to previous crypt_path_t in the$/;"	m	struct:crypt_path_t	typeref:struct:crypt_path_t::crypt_path_t
prev_active_on_n_chan	or.h	/^  struct circuit_t *prev_active_on_n_chan;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::circuit_t
prev_active_on_p_chan	or.h	/^  struct circuit_t *prev_active_on_p_chan;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::circuit_t
previous_vote_list	dirvote.c	/^static smartlist_t *previous_vote_list = NULL;$/;"	v	file:
print_usage	config.c	/^print_usage(void)$/;"	f	file:
private_key	rendservice.c	/^  crypto_pk_t *private_key; \/**< Permanent hidden-service key. *\/$/;"	m	struct:rend_service_t	file:
private_nets	policies.c	/^static const char *private_nets[] = {$/;"	v	file:
process_environment_free	util.c	/^process_environment_free(process_environment_t *env)$/;"	f
process_environment_make	util.c	/^process_environment_make(struct smartlist_t *env_vars)$/;"	f
process_environment_t	util.h	/^struct process_environment_t {$/;"	s
process_environment_t	util.h	/^typedef struct process_environment_t process_environment_t;$/;"	t	typeref:struct:process_environment_t
process_handle	transports.h	/^  process_handle_t *process_handle;$/;"	m	struct:__anon1
process_handle_new	util.c	/^process_handle_new(void)$/;"	f	file:
process_handle_t	util.h	/^struct process_handle_t {$/;"	s
process_handle_t	util.h	/^typedef struct process_handle_t process_handle_t;$/;"	t	typeref:struct:process_handle_t
process_handle_waitpid_cb	util.c	/^process_handle_waitpid_cb(int status, void *arg)$/;"	f	file:
process_map_entries_eq_	util_process.c	/^process_map_entries_eq_(const waitpid_callback_t *a,$/;"	f	file:
process_map_entry_hash_	util_process.c	/^process_map_entry_hash_(const waitpid_callback_t *ent)$/;"	f	file:
process_signal	main.c	/^process_signal(int sig)$/;"	f	file:
processed_cells	or.h	/^  uint32_t processed_cells;$/;"	m	struct:or_circuit_t
processed_cells	rephist.c	/^  uint32_t processed_cells;$/;"	m	struct:circ_buffer_stats_t	file:
prot	sandbox.h	/^  int prot;$/;"	m	struct:smp_param
prot_strings	sandbox.c	/^prot_strings(scmp_filter_ctx ctx, sandbox_cfg_t* cfg)$/;"	f	file:
prot_strings_helper	sandbox.c	/^prot_strings_helper(strmap_t *locations,$/;"	f	file:
proto1_tweaks	onion_ntor.c	/^const tweakset_t proto1_tweaks = {$/;"	v
protocols	or.h	/^  unsigned protocols : REND_PROTOCOL_VERSION_BITMASK_WIDTH;$/;"	m	struct:rend_service_descriptor_t
proxy_configuration_finished	transports.c	/^proxy_configuration_finished(const managed_proxy_t *mp)$/;"	f	file:
proxy_mode	router.c	/^proxy_mode(const or_options_t *options)$/;"	f
proxy_needs_restart	transports.c	/^proxy_needs_restart(const managed_proxy_t *mp)$/;"	f	file:
proxy_prepare_for_restart	transports.c	/^proxy_prepare_for_restart(managed_proxy_t *mp)$/;"	f	file:
proxy_state	or.h	/^  unsigned int proxy_state:4;$/;"	m	struct:connection_t
proxy_supported	transports.h	/^  unsigned int proxy_supported : 1; \/* the proxy honors TOR_PT_PROXY *\/$/;"	m	struct:__anon1
proxy_type	or.h	/^  unsigned int proxy_type:2; \/**< One of PROXY_NONE...PROXY_SOCKS5 *\/$/;"	m	struct:or_connection_t
proxy_type_to_string	connection.c	/^proxy_type_to_string(int proxy_type)$/;"	f	file:
proxy_uri	transports.h	/^  char *proxy_uri;  \/* the outgoing proxy in TOR_PT_PROXY URI format *\/$/;"	m	struct:__anon1
prt_max	or.h	/^  uint16_t prt_max; \/**< Highest port number to accept\/reject. *\/$/;"	m	struct:addr_policy_t
prt_max	policies.c	/^    uint16_t prt_max; \/**< Highest port number to accept\/reject. *\/$/;"	m	struct:policy_summary_item_t	file:
prt_min	or.h	/^  uint16_t prt_min; \/**< Lowest port number to accept\/reject. *\/$/;"	m	struct:addr_policy_t
prt_min	policies.c	/^    uint16_t prt_min; \/**< Lowest port number to accept\/reject. *\/$/;"	m	struct:policy_summary_item_t	file:
prune_v2_cipher_list	tortls.c	/^prune_v2_cipher_list(const SSL *ssl)$/;"	f	file:
ps_sec_prop	service_provider.h	/^    sample_ps_sec_prop_desc_t   ps_sec_prop;$/;"	m	struct:_sp_db_item_t
ps_sec_prop	service_provider.h	/^    sample_ps_sec_prop_desc_t   ps_sec_prop;$/;"	m	struct:sample_ra_msg3_t
pse_status	ias_ra.h	/^    ias_pse_status_t        pse_status;$/;"	m	struct:_ias_att_report_t
pt_configure_remaining_proxies	transports.c	/^pt_configure_remaining_proxies(void)$/;"	f
pt_free_all	transports.c	/^pt_free_all(void)$/;"	f
pt_get_extra_info_descriptor_string	transports.c	/^pt_get_extra_info_descriptor_string(void)$/;"	f
pt_get_socks_args_for_proxy_addrport	transports.c	/^pt_get_socks_args_for_proxy_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
pt_kickstart_client_proxy	transports.h	46;"	d
pt_kickstart_server_proxy	transports.h	48;"	d
pt_prepare_proxy_list_for_config_read	transports.c	/^pt_prepare_proxy_list_for_config_read(void)$/;"	f
pt_proto_state	transports.h	/^enum pt_proto_state {$/;"	g
pt_proxies_configuration_pending	transports.c	/^pt_proxies_configuration_pending(void)$/;"	f
pt_stringify_socks_args	transports.c	/^pt_stringify_socks_args(const smartlist_t *socks_args)$/;"	f
ptable	TorSGX.cpp	/^static const unsigned short *const ptable = table+128;$/;"	v	file:
ptable2	TorSGX.cpp	/^static const int32_t *const ptable2 = table2+128;$/;"	v	file:
pthread_attr_t	orconfig.h	/^typedef int pthread_attr_t;$/;"	t
pthread_condattr_t	orconfig.h	/^typedef int pthread_condattr_t;$/;"	t
pthread_key_t	orconfig.h	/^typedef int pthread_key_t;$/;"	t
pthread_mutexattr_t	orconfig.h	/^typedef int pthread_mutexattr_t;$/;"	t
pthread_t	orconfig.h	/^typedef uint64_t pthread_t;$/;"	t
ptr	orconfig.h	/^    void    *ptr;$/;"	m	union:epoll_data
pubkey	crypto_curve25519.h	/^  curve25519_public_key_t pubkey;$/;"	m	struct:curve25519_keypair_t
pubkey	crypto_ed25519.c	/^  int (*pubkey)(unsigned char *, const unsigned char *);$/;"	m	struct:__anon123	file:
pubkey	crypto_ed25519.h	/^  const ed25519_public_key_t *pubkey;$/;"	m	struct:__anon96
pubkey	crypto_ed25519.h	/^  ed25519_public_key_t pubkey;$/;"	m	struct:__anon95
pubkey	crypto_ed25519.h	/^  uint8_t pubkey[ED25519_PUBKEY_LEN];$/;"	m	struct:__anon93
pubkey_B	onion_ntor.h	/^  curve25519_public_key_t pubkey_B;$/;"	m	struct:ntor_handshake_state_t
pubkey_X	onion_ntor.h	/^  curve25519_public_key_t pubkey_X;$/;"	m	struct:ntor_handshake_state_t
pubkey_from_curve25519_pubkey	crypto_ed25519.c	/^  int (*pubkey_from_curve25519_pubkey)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon123	file:
public_key	crypto_curve25519.h	/^  uint8_t public_key[CURVE25519_PUBKEY_LEN];$/;"	m	struct:curve25519_public_key_t
published	or.h	/^  time_t published; \/**< Vote only: Time when vote was written. *\/$/;"	m	struct:networkstatus_t
published	or.h	/^  time_t published; \/**< When was this object published. *\/$/;"	m	struct:cached_dir_t
published_on	or.h	/^  time_t published_on; \/**< When was this router published? *\/$/;"	m	struct:routerstatus_t
published_on	or.h	/^  time_t published_on;$/;"	m	struct:signed_descriptor_t
purge_expired_resolves	dns.c	/^purge_expired_resolves(time_t now)$/;"	f	file:
purge_hid_serv_from_last_hid_serv_requests	rendclient.c	/^purge_hid_serv_from_last_hid_serv_requests(const char *desc_id)$/;"	f	file:
purpose	or.h	/^  uint8_t purpose; \/**< Why are we creating this circuit? *\/$/;"	m	struct:circuit_t
purpose	or.h	/^  uint8_t purpose;$/;"	m	struct:__anon14
purpose	or.h	/^  unsigned int purpose:5; \/**< Only used for DIR and EXIT types currently. *\/$/;"	m	struct:connection_t
purpose_needs_anonymity	directory.c	/^purpose_needs_anonymity(uint8_t dir_purpose, uint8_t router_purpose)$/;"	f
pw_dir	orconfig.h	/^  char *pw_dir;			\/* Home directory.  *\/$/;"	m	struct:passwd
pw_gecos	orconfig.h	/^  char *pw_gecos;		\/* Real name.  *\/$/;"	m	struct:passwd
pw_gid	orconfig.h	/^  gid_t pw_gid;		\/* Group ID.  *\/$/;"	m	struct:passwd
pw_name	orconfig.h	/^  char *pw_name;		\/* Username.  *\/$/;"	m	struct:passwd
pw_passwd	orconfig.h	/^  char *pw_passwd;		\/* Password.  *\/$/;"	m	struct:passwd
pw_shell	orconfig.h	/^  char *pw_shell;		\/* Shell program.  *\/$/;"	m	struct:passwd
pw_uid	orconfig.h	/^  uid_t pw_uid;		\/* User ID.  *\/$/;"	m	struct:passwd
pwbox_deadcode_dummy__	pwbox.c	/^int pwbox_deadcode_dummy__ = 0;$/;"	v
pwbox_encoded_add_data	pwbox.c	/^pwbox_encoded_add_data(pwbox_encoded_t *inp, uint8_t elt)$/;"	f
pwbox_encoded_add_skey_header	pwbox.c	/^pwbox_encoded_add_skey_header(pwbox_encoded_t *inp, uint8_t elt)$/;"	f
pwbox_encoded_check	pwbox.c	/^pwbox_encoded_check(const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_clear	pwbox.c	/^pwbox_encoded_clear(pwbox_encoded_t *obj)$/;"	f	file:
pwbox_encoded_clear_errors	pwbox.c	/^pwbox_encoded_clear_errors(pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_encode	pwbox.c	/^pwbox_encoded_encode(uint8_t *output, size_t avail, const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_encoded_len	pwbox.c	/^pwbox_encoded_encoded_len(const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_free	pwbox.c	/^pwbox_encoded_free(pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_get_data	pwbox.c	/^pwbox_encoded_get_data(pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_fixedbytes0	pwbox.c	/^pwbox_encoded_get_fixedbytes0(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_fixedbytes1	pwbox.c	/^pwbox_encoded_get_fixedbytes1(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_header_len	pwbox.c	/^pwbox_encoded_get_header_len(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_hmac	pwbox.c	/^pwbox_encoded_get_hmac(const pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_iv	pwbox.c	/^pwbox_encoded_get_iv(const pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_skey_header	pwbox.c	/^pwbox_encoded_get_skey_header(pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_getarray_data	pwbox.c	/^pwbox_encoded_getarray_data(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_hmac	pwbox.c	/^pwbox_encoded_getarray_hmac(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_iv	pwbox.c	/^pwbox_encoded_getarray_iv(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_skey_header	pwbox.c	/^pwbox_encoded_getarray_skey_header(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_data	pwbox.c	/^pwbox_encoded_getlen_data(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_hmac	pwbox.c	/^pwbox_encoded_getlen_hmac(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_iv	pwbox.c	/^pwbox_encoded_getlen_iv(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_skey_header	pwbox.c	/^pwbox_encoded_getlen_skey_header(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_new	pwbox.c	/^pwbox_encoded_new(void)$/;"	f
pwbox_encoded_parse	pwbox.c	/^pwbox_encoded_parse(pwbox_encoded_t **output, const uint8_t *input, const size_t len_in)$/;"	f
pwbox_encoded_parse_into	pwbox.c	/^pwbox_encoded_parse_into(pwbox_encoded_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
pwbox_encoded_set_data	pwbox.c	/^pwbox_encoded_set_data(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_fixedbytes0	pwbox.c	/^pwbox_encoded_set_fixedbytes0(pwbox_encoded_t *inp, uint32_t val)$/;"	f
pwbox_encoded_set_fixedbytes1	pwbox.c	/^pwbox_encoded_set_fixedbytes1(pwbox_encoded_t *inp, uint32_t val)$/;"	f
pwbox_encoded_set_header_len	pwbox.c	/^pwbox_encoded_set_header_len(pwbox_encoded_t *inp, uint8_t val)$/;"	f
pwbox_encoded_set_hmac	pwbox.c	/^pwbox_encoded_set_hmac(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_iv	pwbox.c	/^pwbox_encoded_set_iv(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_skey_header	pwbox.c	/^pwbox_encoded_set_skey_header(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_setlen_data	pwbox.c	/^pwbox_encoded_setlen_data(pwbox_encoded_t *inp, size_t newlen)$/;"	f
pwbox_encoded_setlen_skey_header	pwbox.c	/^pwbox_encoded_setlen_skey_header(pwbox_encoded_t *inp, size_t newlen)$/;"	f
pwbox_encoded_st	pwbox.h	/^struct pwbox_encoded_st {$/;"	s
pwbox_encoded_t	pwbox.h	/^typedef struct pwbox_encoded_st pwbox_encoded_t;$/;"	t	typeref:struct:pwbox_encoded_st
qe_svn	ias_ra.h	/^    sample_isv_svn_t        qe_svn;                 \/\/ 8$/;"	m	struct:sample_quote_t
queue_heuristic	scheduler.c	/^STATIC uint64_t queue_heuristic = 0;$/;"	v
queue_heuristic_timestamp	scheduler.c	/^STATIC time_t queue_heuristic_timestamp = 0;$/;"	v
queue_pending_tasks	cpuworker.c	/^queue_pending_tasks(void)$/;"	f	file:
queue_reply	workqueue.c	/^queue_reply(replyqueue_t *queue, workqueue_entry_t *work)$/;"	f	file:
queue_startup_messages	log.c	/^static int queue_startup_messages = 1;$/;"	v	file:
queued_control_events	control.c	/^static smartlist_t *queued_control_events = NULL;$/;"	v	file:
queued_control_events_lock	control.c	/^static tor_mutex_t *queued_control_events_lock = NULL;$/;"	v	file:
queued_event_free	control.c	/^queued_event_free(queued_event_t *ev)$/;"	f	file:
queued_event_s	control.c	/^typedef struct queued_event_s {$/;"	s	file:
queued_event_t	control.c	/^} queued_event_t;$/;"	t	typeref:struct:queued_event_s	file:
queued_events_flush_all	control.c	/^queued_events_flush_all(int force)$/;"	f	file:
quiet_level	main.c	/^int quiet_level = 0;$/;"	v
quote	service_provider.h	/^    uint8_t                     quote[];$/;"	m	struct:sample_ra_msg3_t
quote_type	service_provider.h	/^    uint16_t                    quote_type; \/* unlinkable Quote(0) or linkable Quote(0) in little endian*\/$/;"	m	struct:sample_ra_msg2_t
r	ed25519-donna-batchverify.h	/^	unsigned char r[heap_batch_size][16]; \/* 128 bit random values *\/$/;"	m	struct:batch_heap_t
r	ias_ra.h	/^	uint8_t r[SAMPLE_ECP_KEY_SIZE];$/;"	m	struct:sample_ec_priv_t
ra_msg_type_t	network_ra.h	/^}ra_msg_type_t;$/;"	t	typeref:enum:_ra_msg_type_t
ra_samp_request_header_t	network_ra.h	/^}ra_samp_request_header_t;$/;"	t	typeref:struct:_ra_samp_request_header_t
ra_samp_response_header_t	network_ra.h	/^}ra_samp_response_header_t;$/;"	t	typeref:struct:_ra_samp_response_header_t
rand	ias_ra.h	/^    uint8_t                 rand[16];$/;"	m	struct:sample_quote_nonce_t
rand	link_handshake.h	/^  uint8_t rand[24];$/;"	m	struct:auth1_st
randombytes	randombytes.h	3;"	d
rate	util.h	/^  int rate;$/;"	m	struct:ratelim_t
rate_limit_is_ready	util.c	/^rate_limit_is_ready(ratelim_t *lim, time_t now)$/;"	f	file:
rate_limit_log	util.c	/^rate_limit_log(ratelim_t *lim, time_t now)$/;"	f
ratelim_t	util.h	/^typedef struct ratelim_t {$/;"	s
ratelim_t	util.h	/^} ratelim_t;$/;"	t	typeref:struct:ratelim_t
rc	rendservice.h	/^  uint8_t rc[REND_COOKIE_LEN];$/;"	m	struct:rend_intro_cell_s
rcsid	strlcat.c	/^static char *rcsid = "$OpenBSD: strlcat.c,v 1.8 2001\/05\/13 15:40:15 deraadt Exp $";$/;"	v	file:
rcsid	strlcpy.c	/^static char *rcsid = "$OpenBSD: strlcpy.c,v 1.2 1998\/11\/06 04:33:16 wvdputte Exp $";$/;"	v	file:
reachable_dir_addr_policy	policies.c	/^static smartlist_t *reachable_dir_addr_policy = NULL;$/;"	v	file:
reachable_or_addr_policy	policies.c	/^static smartlist_t *reachable_or_addr_policy = NULL;$/;"	v	file:
read	orconfig.h	2428;"	d
read	rephist.c	/^  size_t read; \/**< Number of read bytes *\/$/;"	m	struct:bidi_map_entry_t	file:
read_all	util.c	/^read_all(tor_socket_t fd, char *buf, size_t count, int isSocket)$/;"	f
read_array	rephist.c	/^static bw_array_t *read_array = NULL;$/;"	v	file:
read_bandwidth_usage	hibernate.c	/^read_bandwidth_usage(void)$/;"	f	file:
read_blocked_on_bw	or.h	/^  unsigned int read_blocked_on_bw:1; \/**< Boolean: should we start reading$/;"	m	struct:connection_t
read_bucket	or.h	/^  int read_bucket; \/**< When this hits 0, stop receiving. Every second we$/;"	m	struct:or_connection_t
read_emptied_time	or.h	/^  uint32_t read_emptied_time;$/;"	m	struct:or_connection_t
read_encrypted_secret_key	routerkeys.c	/^read_encrypted_secret_key(ed25519_secret_key_t *out,$/;"	f
read_escaped_data	control.c	/^read_escaped_data(const char *data, size_t len, char **out)$/;"	f
read_event	or.h	/^  struct event *read_event; \/**< Libevent event structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::event
read_fd	compat_threads.h	/^  tor_socket_t read_fd;$/;"	m	struct:alert_sockets_s
read_file_to_str	util.c	/^read_file_to_str(const char *filename, int flags, struct stat *stat_out)$/;"	f
read_file_to_str_until_eof	util.c	/^read_file_to_str_until_eof(int fd, size_t max_bytes_to_read, size_t *sz_out)$/;"	f
read_ni	compat_threads.c	/^read_ni(int fd, void *buf, size_t n)$/;"	f	file:
read_to_buf	buffers.c	/^read_to_buf(tor_socket_t s, size_t at_most, buf_t *buf, int *reached_eof,$/;"	f
read_to_buf_tls	buffers.c	/^read_to_buf_tls(tor_tls_t *tls, size_t at_most, buf_t *buf)$/;"	f
read_to_chunk	buffers.c	/^read_to_chunk(buf_t *buf, chunk_t *chunk, tor_socket_t fd, size_t at_most,$/;"	f	file:
read_to_chunk_tls	buffers.c	/^read_to_chunk_tls(buf_t *buf, chunk_t *chunk, tor_tls_t *tls,$/;"	f	file:
reading_from_linked_conn	or.h	/^  unsigned int reading_from_linked_conn:1;$/;"	m	struct:connection_t
real_abort_writing_to_file	util.c	/^real_abort_writing_to_file(real_open_file_t *file_data)$/;"	f
real_addr	or.h	/^  tor_addr_t real_addr; \/**< The actual address that this connection came from$/;"	m	struct:or_connection_t
real_addr	rendservice.c	/^  tor_addr_t real_addr;$/;"	m	struct:rend_service_port_config_s	file:
real_append_bytes_to_file	util.c	/^real_append_bytes_to_file(const char *fname, const char *str, size_t len,$/;"	f
real_file_status	util.c	/^real_file_status(const char *fname)$/;"	f
real_finish_writing_to_file	util.c	/^real_finish_writing_to_file(real_open_file_t *file_data)$/;"	f
real_finish_writing_to_file_impl	util.c	/^real_finish_writing_to_file_impl(real_open_file_t *file_data, int abort_write)$/;"	f	file:
real_open_file_t	util.c	/^struct real_open_file_t {$/;"	s	file:
real_open_file_t	util.h	/^typedef struct real_open_file_t real_open_file_t;$/;"	t	typeref:struct:real_open_file_t
real_port	rendservice.c	/^  uint16_t real_port;$/;"	m	struct:rend_service_port_config_s	file:
real_read_all	util.c	/^real_read_all(tor_socket_t fd, char *buf, size_t count, int isSocket)$/;"	f
real_read_file_to_str	util.c	/^real_read_file_to_str(const char *filename, int flags, struct stat *stat_out)$/;"	f
real_read_file_to_str_until_eof	util.c	/^real_read_file_to_str_until_eof(int fd, size_t max_bytes_to_read, size_t *sz_out)$/;"	f
real_replace_file	compat.c	/^real_replace_file(const char *from, const char *to)$/;"	f
real_sgx_close	TorSGX.cpp	/^int real_sgx_close(int fd)$/;"	f
real_sgx_fclose	TorSGX.cpp	/^int real_sgx_fclose(FILE * file)$/;"	f
real_sgx_fcntl	TorSGX.cpp	/^int real_sgx_fcntl(int fd, int cmd, long arg)$/;"	f
real_sgx_fcntl2	TorSGX.cpp	/^int real_sgx_fcntl2(int fd, int cmd, void *lock)$/;"	f
real_sgx_fileno_stdout	TorSGX.cpp	/^int real_sgx_fileno_stdout()$/;"	f
real_sgx_fstat	TorSGX.cpp	/^int real_sgx_fstat(int fd, struct stat *buf)$/;"	f
real_sgx_ftruncate	TorSGX.cpp	/^int real_sgx_ftruncate(int fd, off_t length)$/;"	f
real_sgx_lseek	TorSGX.cpp	/^off_t real_sgx_lseek(int fildes, off_t offset, int whence)$/;"	f
real_sgx_mkdir	TorSGX.cpp	/^int real_sgx_mkdir(const char *path, int mode)$/;"	f
real_sgx_open	TorSGX.cpp	/^int real_sgx_open(const char *pathname, int flags, unsigned mode)$/;"	f
real_sgx_read	TorSGX.cpp	/^int real_sgx_read(int fd, void *buf, int n)$/;"	f
real_sgx_rename	TorSGX.cpp	/^int real_sgx_rename(const char *from_str, const char *to_str)$/;"	f
real_sgx_stat	TorSGX.cpp	/^int real_sgx_stat(const char *filename, struct stat *st) $/;"	f
real_sgx_unlink	TorSGX.cpp	/^int real_sgx_unlink(const char *filename) $/;"	f
real_sgx_write	TorSGX.cpp	/^int real_sgx_write(int fd, const void *buf, int n)$/;"	f
real_start_writing_to_file	util.c	/^real_start_writing_to_file(const char *fname, int open_flags, int mode,$/;"	f
real_tor_calloc	util.h	157;"	d
real_tor_calloc_	util.c	/^real_tor_calloc_(size_t nmemb, size_t size DMALLOC_PARAMS)$/;"	f
real_tor_fd_getpos	compat.c	/^real_tor_fd_getpos(int fd)$/;"	f
real_tor_fd_seekend	compat.c	/^real_tor_fd_seekend(int fd)$/;"	f
real_tor_fd_setpos	compat.c	/^real_tor_fd_setpos(int fd, off_t pos)$/;"	f
real_tor_free	util.h	144;"	d
real_tor_ftruncate	compat.c	/^real_tor_ftruncate(int fd)$/;"	f
real_tor_malloc	util.h	153;"	d
real_tor_malloc_	util.c	/^real_tor_malloc_(size_t size DMALLOC_PARAMS)$/;"	f
real_tor_malloc_zero	util.h	155;"	d
real_tor_malloc_zero_	util.c	/^real_tor_malloc_zero_(size_t size DMALLOC_PARAMS)$/;"	f
real_tor_memdup	util.h	167;"	d
real_tor_memdup_	util.c	/^real_tor_memdup_(const void *mem, size_t len DMALLOC_PARAMS)$/;"	f
real_tor_mmap_file	compat.c	/^real_tor_mmap_file(const char *filename)$/;"	f
real_tor_munmap_file	compat.c	/^real_tor_munmap_file(tor_mmap_t *handle)$/;"	f
real_tor_open_cloexec	compat.c	/^real_tor_open_cloexec(const char *path, int flags, unsigned mode)$/;"	f
real_tor_realloc	util.h	159;"	d
real_tor_realloc_	util.c	/^real_tor_realloc_(void *ptr, size_t size DMALLOC_PARAMS)$/;"	f
real_tor_reallocarray	util.h	162;"	d
real_tor_reallocarray_	util.c	/^real_tor_reallocarray_(void *ptr, size_t sz1, size_t sz2 DMALLOC_PARAMS)$/;"	f
real_tor_rename	compat.c	/^real_tor_rename(const char *path_old, const char *path_new)$/;"	f
real_uptime	dirserv.c	/^real_uptime(const routerinfo_t *router, time_t now)$/;"	f	file:
real_write_all	util.c	/^real_write_all(tor_socket_t fd, const char *buf, size_t count, int isSocket)$/;"	f
real_write_bytes_to_file_impl	util.c	/^real_write_bytes_to_file_impl(const char *fname, const char *str, size_t len,$/;"	f	file:
real_write_bytes_to_new_file	util.c	/^real_write_bytes_to_new_file(const char *fname, const char *str, size_t len,$/;"	f
real_write_chunks_to_file	util.c	/^real_write_chunks_to_file(const char *fname, const smartlist_t *chunks, int bin,$/;"	f
real_write_chunks_to_file_impl	util.c	/^real_write_chunks_to_file_impl(const char *fname, const smartlist_t *chunks,$/;"	f	file:
real_write_str_to_file	util.c	/^real_write_str_to_file(const char *fname, const char *str, int bin)$/;"	f
realign_pointer	memarea.c	/^realign_pointer(void *ptr)$/;"	f	file:
reason_for_closing	channel.h	/^  } reason_for_closing;$/;"	m	struct:channel_listener_s	typeref:enum:channel_listener_s::__anon73
reason_for_closing	channel.h	/^  } reason_for_closing;$/;"	m	struct:channel_s	typeref:enum:channel_s::__anon71
received_auth_challenge	or.h	/^  unsigned int received_auth_challenge : 1;$/;"	m	struct:or_handshake_state_t
received_authenticate	or.h	/^  unsigned int received_authenticate : 1;$/;"	m	struct:or_handshake_state_t
received_certs_cell	or.h	/^  unsigned int received_certs_cell : 1;$/;"	m	struct:or_handshake_state_t
received_destroy	or.h	/^  unsigned int received_destroy : 1;$/;"	m	struct:circuit_t
received_versions	or.h	/^  unsigned int received_versions : 1;$/;"	m	struct:or_handshake_state_t
recheck_bandwidth	main.c	/^  time_t recheck_bandwidth;$/;"	m	struct:__anon107	file:
recognized	or.h	/^  uint16_t recognized; \/**< Used to tell whether cell is for us. *\/$/;"	m	struct:__anon9
record_num_bytes_transferred	connection.c	/^record_num_bytes_transferred(connection_t *conn,$/;"	f	file:
record_num_bytes_transferred_impl	connection.c	/^record_num_bytes_transferred_impl(connection_t *conn,$/;"	f	file:
recv	orconfig.h	2421;"	d
recv_byte	TorSGX.cpp	/^int recv_byte;$/;"	v
recv_cnt	TorSGX.cpp	/^int recv_cnt;$/;"	v
recv_ni	compat_threads.c	/^recv_ni(int fd, void *buf, size_t n, int flags)$/;"	f	file:
reduce256_modm	modm-donna-32bit.h	/^reduce256_modm(bignum256modm r) {$/;"	f
reduce256_modm	modm-donna-64bit.h	/^reduce256_modm(bignum256modm r) {$/;"	f
reduce_mask_25	curve25519-donna-32bit.h	/^static const uint32_t reduce_mask_25 = (1 << 25) - 1;$/;"	v
reduce_mask_26	curve25519-donna-32bit.h	/^static const uint32_t reduce_mask_26 = (1 << 26) - 1;$/;"	v
reduce_mask_40	curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_40 = ((uint64_t)1 << 40) - 1;$/;"	v
reduce_mask_51	curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_51 = ((uint64_t)1 << 51) - 1;$/;"	v
reduce_mask_56	curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_56 = ((uint64_t)1 << 56) - 1;$/;"	v
refcnt	or.h	/^  int refcnt; \/**< Reference count *\/$/;"	m	struct:addr_policy_t
refcnt	or.h	/^  int refcnt; \/**< Reference count for this cached_dir_t. *\/$/;"	m	struct:cached_dir_t
refcnt	tortls.c	/^  int refcnt;$/;"	m	struct:tor_tls_context_t	file:
refcount	or.h	/^  unsigned int refcount;$/;"	m	struct:__anon21
refill_callback	main.c	/^refill_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
refill_timer	main.c	/^static periodic_timer_t *refill_timer = NULL;$/;"	v	file:
refresh_all_country_info	routerlist.c	/^refresh_all_country_info(void)$/;"	f
refs	crypto.c	/^  int refs; \/**< reference count, so we don't have to copy keys *\/$/;"	m	struct:crypto_pk_t	file:
register_cfg	sandbox.c	/^register_cfg(sandbox_cfg_t* cfg)$/;"	f	file:
register_client_proxy	transports.c	/^register_client_proxy(const managed_proxy_t *mp)$/;"	f	file:
register_proxy	transports.c	/^register_proxy(const managed_proxy_t *mp)$/;"	f	file:
register_server_proxy	transports.c	/^register_server_proxy(const managed_proxy_t *mp)$/;"	f	file:
registered	channel.h	/^  unsigned char registered:1;$/;"	m	struct:channel_listener_s
registered	channel.h	/^  unsigned char registered:1;$/;"	m	struct:channel_s
reject_count	policies.c	/^    uint64_t reject_count; \/**< Number of IP-Addresses that are rejected to$/;"	m	struct:policy_summary_item_t	file:
rejects_all	or.h	/^  unsigned int rejects_all:1;$/;"	m	struct:node_t
relaxed_timeout	or.h	/^  unsigned int relaxed_timeout : 1;$/;"	m	struct:origin_circuit_t
relay_command_to_string	relay.c	/^relay_command_to_string(uint8_t command)$/;"	f	file:
relay_crypt	relay.c	/^relay_crypt(circuit_t *circ, cell_t *cell, cell_direction_t cell_direction,$/;"	f
relay_crypt_one_payload	relay.c	/^relay_crypt_one_payload(crypto_cipher_t *cipher, uint8_t *in,$/;"	f	file:
relay_digest_matches	relay.c	/^relay_digest_matches(crypto_digest_t *digest, cell_t *cell)$/;"	f	file:
relay_early_cells_sent	or.h	/^  int relay_early_cells_sent;$/;"	m	struct:origin_circuit_t
relay_early_commands	or.h	/^  uint8_t relay_early_commands[MAX_RELAY_EARLY_CELLS_PER_CIRCUIT];$/;"	m	struct:origin_circuit_t
relay_header_pack	relay.c	/^relay_header_pack(uint8_t *dest, const relay_header_t *src)$/;"	f
relay_header_t	or.h	/^} relay_header_t;$/;"	t	typeref:struct:__anon9
relay_header_unpack	relay.c	/^relay_header_unpack(relay_header_t *dest, const uint8_t *src)$/;"	f
relay_lookup_conn	relay.c	/^relay_lookup_conn(circuit_t *circ, cell_t *cell,$/;"	f	file:
relay_send_command_from_edge	relay.h	27;"	d
relay_send_command_from_edge_	relay.c	/^relay_send_command_from_edge_(streamid_t stream_id, circuit_t *circ,$/;"	f
relay_send_end_cell_from_edge	connection_edge.c	/^relay_send_end_cell_from_edge(streamid_t stream_id, circuit_t *circ,$/;"	f	file:
relay_set_digest	relay.c	/^relay_set_digest(crypto_digest_t *digest, cell_t *cell)$/;"	f	file:
release_lockfile	main.c	/^release_lockfile(void)$/;"	f
remaining_relay_early_cells	or.h	/^  unsigned int remaining_relay_early_cells : 4;$/;"	m	struct:or_circuit_t
remaining_relay_early_cells	or.h	/^  unsigned int remaining_relay_early_cells : 4;$/;"	m	struct:origin_circuit_t
remap_event_helper	relay.c	/^remap_event_helper(entry_connection_t *conn, const tor_addr_t *new_addr)$/;"	f	file:
remote_accept_list	TorSGX.cpp	/^list<unsigned long *> remote_accept_list;$/;"	v
remote_attest_server_port	TorSGX.cpp	/^int remote_attest_server_port = -1;$/;"	v
remote_mutex	TorSGX.cpp	/^sgx_thread_mutex_t remote_mutex;$/;"	v
remove_all_entry_guards	entrynodes.c	/^remove_all_entry_guards(void)$/;"	f
remove_bt_handler	backtrace.c	/^remove_bt_handler(void)$/;"	f	file:
remove_cell_ewma	circuitmux_ewma.c	/^remove_cell_ewma(ewma_policy_data_t *pol, cell_ewma_t *ewma)$/;"	f	file:
remove_dead_entry_guards	entrynodes.c	/^remove_dead_entry_guards(time_t now)$/;"	f	file:
remove_file_if_very_old	config.c	/^remove_file_if_very_old(const char *fname, time_t now)$/;"	f
remove_invalid_intro_points	rendservice.c	/^remove_invalid_intro_points(rend_service_t *service,$/;"	f	file:
remove_obsolete_entry_guards	entrynodes.c	/^remove_obsolete_entry_guards(time_t now)$/;"	f	file:
remove_old_client_helper_	geoip.c	/^remove_old_client_helper_(struct clientmap_entry_t *ent, void *_cutoff)$/;"	f	file:
removed	or.h	/^  unsigned int removed:1; \/**< 0 for added to, 1 for removed from queue. *\/$/;"	m	struct:testing_cell_stats_entry_t
removed_cells_appward	control.h	/^  uint64_t removed_cells_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
removed_cells_exitward	control.h	/^  uint64_t removed_cells_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
rename	orconfig.h	2435;"	d
rename_on_close	util.c	/^  unsigned rename_on_close:1; \/**< Are we using the temporary file or not? *\/$/;"	m	struct:open_file_t	file:
rename_on_close	util.c	/^  unsigned rename_on_close:1; \/**< Are we using the temporary file or not? *\/$/;"	m	struct:real_open_file_t	file:
rend_add_service	rendservice.c	/^rend_add_service(rend_service_t *service)$/;"	f	file:
rend_auth_material	cpuworker.c	/^  uint8_t rend_auth_material[DIGEST_LEN];$/;"	m	struct:cpuworker_reply_t	file:
rend_auth_type_t	or.h	/^typedef enum rend_auth_type_t {$/;"	g
rend_auth_type_t	or.h	/^} rend_auth_type_t;$/;"	t	typeref:enum:rend_auth_type_t
rend_auth_type_to_string	control.c	/^rend_auth_type_to_string(rend_auth_type_t auth_type)$/;"	f
rend_authorized_client_free	rendservice.c	/^rend_authorized_client_free(rend_authorized_client_t *client)$/;"	f	file:
rend_authorized_client_strmap_item_free	rendservice.c	/^rend_authorized_client_strmap_item_free(void *authorized_client)$/;"	f	file:
rend_authorized_client_t	or.h	/^typedef struct rend_authorized_client_t {$/;"	s
rend_authorized_client_t	or.h	/^} rend_authorized_client_t;$/;"	t	typeref:struct:rend_authorized_client_t
rend_cache	rendcache.c	/^static strmap_t *rend_cache = NULL;$/;"	v	file:
rend_cache_clean	rendcache.c	/^rend_cache_clean(time_t now)$/;"	f
rend_cache_clean_v2_descs_as_dir	rendcache.c	/^rend_cache_clean_v2_descs_as_dir(time_t now, size_t force_remove)$/;"	f
rend_cache_decrement_allocation	rendcache.c	/^rend_cache_decrement_allocation(size_t n)$/;"	f	file:
rend_cache_entry_allocation	rendcache.c	/^rend_cache_entry_allocation(const rend_cache_entry_t *e)$/;"	f	file:
rend_cache_entry_free	rendcache.c	/^rend_cache_entry_free(rend_cache_entry_t *e)$/;"	f	file:
rend_cache_entry_free_	rendcache.c	/^rend_cache_entry_free_(void *p)$/;"	f	file:
rend_cache_entry_t	rendcache.h	/^typedef struct rend_cache_entry_t {$/;"	s
rend_cache_entry_t	rendcache.h	/^} rend_cache_entry_t;$/;"	t	typeref:struct:rend_cache_entry_t
rend_cache_failure	rendcache.c	/^static strmap_t *rend_cache_failure = NULL;$/;"	v	file:
rend_cache_failure_clean	rendcache.c	/^rend_cache_failure_clean(time_t now)$/;"	f
rend_cache_failure_entry_free	rendcache.c	/^rend_cache_failure_entry_free(rend_cache_failure_t *entry)$/;"	f	file:
rend_cache_failure_entry_free_	rendcache.c	/^rend_cache_failure_entry_free_(void *entry)$/;"	f	file:
rend_cache_failure_entry_new	rendcache.c	/^rend_cache_failure_entry_new(void)$/;"	f	file:
rend_cache_failure_intro_entry_free	rendcache.c	/^rend_cache_failure_intro_entry_free(rend_cache_failure_intro_t *entry)$/;"	f	file:
rend_cache_failure_intro_entry_free_	rendcache.c	/^rend_cache_failure_intro_entry_free_(void *entry)$/;"	f	file:
rend_cache_failure_intro_entry_new	rendcache.c	/^rend_cache_failure_intro_entry_new(rend_intro_point_failure_t failure)$/;"	f	file:
rend_cache_failure_intro_t	rendcache.h	/^typedef struct rend_cache_failure_intro_t {$/;"	s
rend_cache_failure_intro_t	rendcache.h	/^} rend_cache_failure_intro_t;$/;"	t	typeref:struct:rend_cache_failure_intro_t
rend_cache_failure_purge	rendcache.c	/^rend_cache_failure_purge(void)$/;"	f
rend_cache_failure_remove	rendcache.c	/^rend_cache_failure_remove(rend_service_descriptor_t *desc)$/;"	f	file:
rend_cache_failure_t	rendcache.h	/^typedef struct rend_cache_failure_t {$/;"	s
rend_cache_failure_t	rendcache.h	/^} rend_cache_failure_t;$/;"	t	typeref:struct:rend_cache_failure_t
rend_cache_free_all	rendcache.c	/^rend_cache_free_all(void)$/;"	f
rend_cache_get_total_allocation	rendcache.c	/^rend_cache_get_total_allocation(void)$/;"	f
rend_cache_increment_allocation	rendcache.c	/^rend_cache_increment_allocation(size_t n)$/;"	f	file:
rend_cache_init	rendcache.c	/^rend_cache_init(void)$/;"	f
rend_cache_intro_failure_note	rendcache.c	/^rend_cache_intro_failure_note(rend_intro_point_failure_t failure,$/;"	f
rend_cache_lookup_entry	rendcache.c	/^rend_cache_lookup_entry(const char *query, int version, rend_cache_entry_t **e)$/;"	f
rend_cache_lookup_v2_desc_as_dir	rendcache.c	/^rend_cache_lookup_v2_desc_as_dir(const char *desc_id, const char **desc)$/;"	f
rend_cache_purge	rendcache.c	/^rend_cache_purge(void)$/;"	f
rend_cache_store_status_t	rendcache.h	/^} rend_cache_store_status_t;$/;"	t	typeref:enum:__anon2
rend_cache_store_v2_desc_as_client	rendcache.c	/^rend_cache_store_v2_desc_as_client(const char *desc,$/;"	f
rend_cache_store_v2_desc_as_dir	rendcache.c	/^rend_cache_store_v2_desc_as_dir(const char *desc)$/;"	f
rend_cache_total_allocation	rendcache.c	/^static size_t rend_cache_total_allocation = 0;$/;"	v	file:
rend_cache_v2_dir	rendcache.c	/^static digestmap_t *rend_cache_v2_dir = NULL;$/;"	v	file:
rend_check_authorization	rendservice.c	/^rend_check_authorization(rend_service_t *service,$/;"	f	file:
rend_circ_nonce	or.h	/^  char rend_circ_nonce[DIGEST_LEN];\/* KH in tor-spec.txt *\/$/;"	m	struct:crypt_path_t
rend_circ_nonce	or.h	/^  char rend_circ_nonce[DIGEST_LEN];\/* KH in tor-spec.txt *\/$/;"	m	struct:or_circuit_t
rend_client_any_intro_points_usable	rendclient.c	/^rend_client_any_intro_points_usable(const rend_cache_entry_t *entry)$/;"	f
rend_client_cancel_descriptor_fetches	rendclient.c	/^rend_client_cancel_descriptor_fetches(void)$/;"	f
rend_client_close_other_intros	rendclient.c	/^rend_client_close_other_intros(const char *onion_address)$/;"	f	file:
rend_client_desc_trynow	rendclient.c	/^rend_client_desc_trynow(const char *query)$/;"	f
rend_client_fetch_v2_desc	rendclient.c	/^rend_client_fetch_v2_desc(rend_data_t *query, smartlist_t *hsdirs)$/;"	f
rend_client_get_random_intro	rendclient.c	/^rend_client_get_random_intro(const rend_data_t *rend_query)$/;"	f
rend_client_get_random_intro_impl	rendclient.c	/^rend_client_get_random_intro_impl(const rend_cache_entry_t *entry,$/;"	f	file:
rend_client_introcirc_has_opened	rendclient.c	/^rend_client_introcirc_has_opened(origin_circuit_t *circ)$/;"	f
rend_client_introduction_acked	rendclient.c	/^rend_client_introduction_acked(origin_circuit_t *circ,$/;"	f
rend_client_lookup_service_authorization	rendclient.c	/^rend_client_lookup_service_authorization(const char *onion_address)$/;"	f
rend_client_note_connection_attempt_ended	rendclient.c	/^rend_client_note_connection_attempt_ended(const rend_data_t *rend_data)$/;"	f
rend_client_purge_last_hid_serv_requests	rendclient.c	/^rend_client_purge_last_hid_serv_requests(void)$/;"	f
rend_client_purge_state	rendclient.c	/^rend_client_purge_state(void)$/;"	f
rend_client_receive_rendezvous	rendclient.c	/^rend_client_receive_rendezvous(origin_circuit_t *circ, const uint8_t *request,$/;"	f
rend_client_reextend_intro_circuit	rendclient.c	/^rend_client_reextend_intro_circuit(origin_circuit_t *circ)$/;"	f	file:
rend_client_refetch_v2_renddesc	rendclient.c	/^rend_client_refetch_v2_renddesc(rend_data_t *rend_query)$/;"	f
rend_client_rendcirc_has_opened	rendclient.c	/^rend_client_rendcirc_has_opened(origin_circuit_t *circ)$/;"	f
rend_client_rendezvous_acked	rendclient.c	/^rend_client_rendezvous_acked(origin_circuit_t *circ, const uint8_t *request,$/;"	f
rend_client_report_intro_point_failure	rendclient.c	/^rend_client_report_intro_point_failure(extend_info_t *failed_intro,$/;"	f
rend_client_send_establish_rendezvous	rendclient.c	/^rend_client_send_establish_rendezvous(origin_circuit_t *circ)$/;"	f	file:
rend_client_send_introduction	rendclient.c	/^rend_client_send_introduction(origin_circuit_t *introcirc,$/;"	f
rend_cmp_service_ids	rendcommon.c	/^rend_cmp_service_ids(const char *one, const char *two)$/;"	f
rend_compute_v2_desc_id	rendcommon.c	/^rend_compute_v2_desc_id(char *desc_id_out, const char *service_id,$/;"	f
rend_config_services	rendservice.c	/^rend_config_services(const or_options_t *options, int validate_only)$/;"	f
rend_consider_descriptor_republication	rendservice.c	/^rend_consider_descriptor_republication(void)$/;"	f
rend_consider_services_intro_points	rendservice.c	/^rend_consider_services_intro_points(void)$/;"	f
rend_consider_services_upload	rendservice.c	/^rend_consider_services_upload(time_t now)$/;"	f
rend_cookie	or.h	/^  char rend_cookie[REND_COOKIE_LEN];$/;"	m	struct:rend_data_t
rend_cookie_map	circuitlist.c	/^static digestmap_t *rend_cookie_map = NULL;$/;"	v	file:
rend_data	or.h	/^  rend_data_t *rend_data;$/;"	m	struct:dir_connection_t
rend_data	or.h	/^  rend_data_t *rend_data;$/;"	m	struct:edge_connection_t
rend_data	or.h	/^  rend_data_t *rend_data;$/;"	m	struct:origin_circuit_t
rend_data_client_create	rendcommon.c	/^rend_data_client_create(const char *onion_address, const char *desc_id,$/;"	f
rend_data_dup	rendcommon.c	/^rend_data_dup(const rend_data_t *data)$/;"	f
rend_data_free	rendcommon.h	/^rend_data_free(rend_data_t *data)$/;"	f
rend_data_service_create	rendcommon.c	/^rend_data_service_create(const char *onion_address, const char *pk_digest,$/;"	f
rend_data_t	or.h	/^typedef struct rend_data_t {$/;"	s
rend_data_t	or.h	/^} rend_data_t;$/;"	t	typeref:struct:rend_data_t
rend_decrypt_introduction_points	routerparse.c	/^rend_decrypt_introduction_points(char **ipos_decrypted,$/;"	f
rend_desc_v2_is_parsable	rendcommon.c	/^rend_desc_v2_is_parsable(rend_encoded_v2_service_descriptor_t *desc)$/;"	f	file:
rend_dh_handshake_state	or.h	/^  crypto_dh_t *rend_dh_handshake_state;$/;"	m	struct:crypt_path_t
rend_encode_v2_descriptors	rendcommon.c	/^rend_encode_v2_descriptors(smartlist_t *descs_out,$/;"	f
rend_encode_v2_intro_points	rendcommon.c	/^rend_encode_v2_intro_points(char **encoded, rend_service_descriptor_t *desc)$/;"	f	file:
rend_encoded_v2_service_descriptor_free	rendcommon.c	/^rend_encoded_v2_service_descriptor_free($/;"	f
rend_encoded_v2_service_descriptor_t	or.h	/^typedef struct rend_encoded_v2_service_descriptor_t {$/;"	s
rend_encoded_v2_service_descriptor_t	or.h	/^} rend_encoded_v2_service_descriptor_t;$/;"	t	typeref:struct:rend_encoded_v2_service_descriptor_t
rend_encrypt_v2_intro_points_basic	rendcommon.c	/^rend_encrypt_v2_intro_points_basic(char **encrypted_out,$/;"	f	file:
rend_encrypt_v2_intro_points_stealth	rendcommon.c	/^rend_encrypt_v2_intro_points_stealth(char **encrypted_out,$/;"	f	file:
rend_get_descriptor_id_bytes	rendcommon.c	/^rend_get_descriptor_id_bytes(char *descriptor_id_out,$/;"	f
rend_get_service_id	rendcommon.c	/^rend_get_service_id(crypto_pk_t *pk, char *out)$/;"	f
rend_hsaddress_str_or_unknown	control.c	/^rend_hsaddress_str_or_unknown(const char *onion_address)$/;"	f	file:
rend_hsdir_routers_changed	rendservice.c	/^rend_hsdir_routers_changed(void)$/;"	f
rend_id_is_in_interval	rendcommon.c	/^rend_id_is_in_interval(const char *a, const char *b, const char *c)$/;"	f
rend_intro_cell_s	rendservice.h	/^struct rend_intro_cell_s {$/;"	s
rend_intro_cell_t	rendservice.h	/^typedef struct rend_intro_cell_s rend_intro_cell_t;$/;"	t	typeref:struct:rend_intro_cell_s
rend_intro_point_failure_t	rendcommon.h	/^typedef enum rend_intro_point_failure_t {$/;"	g
rend_intro_point_failure_t	rendcommon.h	/^} rend_intro_point_failure_t;$/;"	t	typeref:enum:rend_intro_point_failure_t
rend_intro_point_free	rendcommon.c	/^rend_intro_point_free(rend_intro_point_t *intro)$/;"	f
rend_intro_point_t	or.h	/^typedef struct rend_intro_point_t {$/;"	s
rend_intro_point_t	or.h	/^} rend_intro_point_t;$/;"	t	typeref:struct:rend_intro_point_t
rend_mid_establish_intro	rendmid.c	/^rend_mid_establish_intro(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_establish_rendezvous	rendmid.c	/^rend_mid_establish_rendezvous(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_introduce	rendmid.c	/^rend_mid_introduce(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_rendezvous	rendmid.c	/^rend_mid_rendezvous(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_parse_client_keys	routerparse.c	/^rend_parse_client_keys(strmap_t *parsed_clients, const char *ckstr)$/;"	f
rend_parse_introduction_points	routerparse.c	/^rend_parse_introduction_points(rend_service_descriptor_t *parsed,$/;"	f
rend_parse_service_authorization	rendclient.c	/^rend_parse_service_authorization(const or_options_t *options,$/;"	f
rend_parse_v2_service_descriptor	routerparse.c	/^rend_parse_v2_service_descriptor(rend_service_descriptor_t **parsed_out,$/;"	f
rend_pk_digest	or.h	/^  char rend_pk_digest[DIGEST_LEN];$/;"	m	struct:rend_data_t
rend_process_relay_cell	rendcommon.c	/^rend_process_relay_cell(circuit_t *circ, const crypt_path_t *layer_hint,$/;"	f
rend_service_add_ephemeral	rendservice.c	/^rend_service_add_ephemeral(crypto_pk_t *pk,$/;"	f
rend_service_add_ephemeral_status_t	rendservice.h	/^} rend_service_add_ephemeral_status_t;$/;"	t	typeref:enum:__anon120
rend_service_add_filenames_to_list	rendservice.c	/^rend_service_add_filenames_to_list(smartlist_t *lst, const rend_service_t *s)$/;"	f	file:
rend_service_authorization_free	rendclient.c	/^rend_service_authorization_free(rend_service_authorization_t *auth)$/;"	f	file:
rend_service_authorization_free_all	rendclient.c	/^rend_service_authorization_free_all(void)$/;"	f
rend_service_authorization_strmap_item_free	rendclient.c	/^rend_service_authorization_strmap_item_free(void *service_auth)$/;"	f	file:
rend_service_authorization_t	or.h	/^typedef struct rend_service_authorization_t {$/;"	s
rend_service_authorization_t	or.h	/^} rend_service_authorization_t;$/;"	t	typeref:struct:rend_service_authorization_t
rend_service_begin_parse_intro	rendservice.c	/^rend_service_begin_parse_intro(const uint8_t *request,$/;"	f
rend_service_decrypt_intro	rendservice.c	/^rend_service_decrypt_intro($/;"	f
rend_service_del_ephemeral	rendservice.c	/^rend_service_del_ephemeral(const char *service_id)$/;"	f
rend_service_derive_key_digests	rendservice.c	/^rend_service_derive_key_digests(struct rend_service_t *s)$/;"	f	file:
rend_service_desc_has_uploaded	rendservice.c	/^rend_service_desc_has_uploaded(const rend_data_t *rend_data)$/;"	f
rend_service_descriptor_free	rendcommon.c	/^rend_service_descriptor_free(rend_service_descriptor_t *desc)$/;"	f
rend_service_descriptor_t	or.h	/^typedef struct rend_service_descriptor_t {$/;"	s
rend_service_descriptor_t	or.h	/^} rend_service_descriptor_t;$/;"	t	typeref:struct:rend_service_descriptor_t
rend_service_dump_stats	rendservice.c	/^rend_service_dump_stats(int severity)$/;"	f
rend_service_escaped_dir	rendservice.c	/^rend_service_escaped_dir(const struct rend_service_t *s)$/;"	f	file:
rend_service_free	rendservice.c	/^rend_service_free(rend_service_t *service)$/;"	f	file:
rend_service_free_all	rendservice.c	/^rend_service_free_all(void)$/;"	f
rend_service_free_intro	rendservice.c	/^rend_service_free_intro(rend_intro_cell_t *request)$/;"	f
rend_service_get_by_pk_digest	rendservice.c	/^rend_service_get_by_pk_digest(const char* digest)$/;"	f	file:
rend_service_get_by_service_id	rendservice.c	/^rend_service_get_by_service_id(const char *id)$/;"	f	file:
rend_service_intro_established	rendservice.c	/^rend_service_intro_established(origin_circuit_t *circuit,$/;"	f
rend_service_intro_has_opened	rendservice.c	/^rend_service_intro_has_opened(origin_circuit_t *circuit)$/;"	f
rend_service_launch_establish_intro	rendservice.c	/^rend_service_launch_establish_intro(rend_service_t *service,$/;"	f	file:
rend_service_list	rendservice.c	/^static smartlist_t *rend_service_list = NULL;$/;"	v	file:
rend_service_load_all_keys	rendservice.c	/^rend_service_load_all_keys(void)$/;"	f
rend_service_load_auth_keys	rendservice.c	/^rend_service_load_auth_keys(rend_service_t *s, const char *hfname)$/;"	f	file:
rend_service_load_keys	rendservice.c	/^rend_service_load_keys(rend_service_t *s)$/;"	f	file:
rend_service_parse_intro_for_v0_or_v1	rendservice.c	/^rend_service_parse_intro_for_v0_or_v1($/;"	f	file:
rend_service_parse_intro_for_v2	rendservice.c	/^rend_service_parse_intro_for_v2($/;"	f	file:
rend_service_parse_intro_for_v3	rendservice.c	/^rend_service_parse_intro_for_v3($/;"	f	file:
rend_service_parse_intro_plaintext	rendservice.c	/^rend_service_parse_intro_plaintext($/;"	f
rend_service_parse_port_config	rendservice.c	/^rend_service_parse_port_config(const char *string, const char *sep,$/;"	f
rend_service_port_config_free	rendservice.c	/^rend_service_port_config_free(rend_service_port_config_t *p)$/;"	f
rend_service_port_config_new	rendservice.c	/^rend_service_port_config_new(const char *socket_path)$/;"	f	file:
rend_service_port_config_s	rendservice.c	/^struct rend_service_port_config_s {$/;"	s	file:
rend_service_port_config_t	rendservice.h	/^typedef struct rend_service_port_config_s rend_service_port_config_t;$/;"	t	typeref:struct:rend_service_port_config_s
rend_service_receive_introduction	rendservice.c	/^rend_service_receive_introduction(origin_circuit_t *circuit,$/;"	f
rend_service_relaunch_rendezvous	rendservice.c	/^rend_service_relaunch_rendezvous(origin_circuit_t *oldcirc)$/;"	f
rend_service_rendezvous_has_opened	rendservice.c	/^rend_service_rendezvous_has_opened(origin_circuit_t *circuit)$/;"	f
rend_service_requires_uptime	rendservice.c	/^rend_service_requires_uptime(rend_service_t *service)$/;"	f	file:
rend_service_set_connection_addr_port	rendservice.c	/^rend_service_set_connection_addr_port(edge_connection_t *conn,$/;"	f
rend_service_t	rendservice.c	/^typedef struct rend_service_t {$/;"	s	file:
rend_service_t	rendservice.c	/^} rend_service_t;$/;"	t	typeref:struct:rend_service_t	file:
rend_service_update_descriptor	rendservice.c	/^rend_service_update_descriptor(rend_service_t *service)$/;"	f	file:
rend_service_validate_intro_late	rendservice.c	/^rend_service_validate_intro_late(const rend_intro_cell_t *intro,$/;"	f
rend_services_add_filenames_to_lists	rendservice.c	/^rend_services_add_filenames_to_lists(smartlist_t *open_lst,$/;"	f
rend_splice	or.h	/^  struct or_circuit_t *rend_splice;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::or_circuit_t
rend_token	or.h	/^  char rend_token[REND_TOKEN_LEN];$/;"	m	struct:or_circuit_rendinfo_s
rend_valid_descriptor_id	rendcommon.c	/^rend_valid_descriptor_id(const char *query)$/;"	f
rend_valid_service_id	rendcommon.c	/^rend_valid_service_id(const char *query)$/;"	f
rendinfo	or.h	/^  struct or_circuit_rendinfo_s *rendinfo;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::or_circuit_rendinfo_s
rep_hist_add_buffer_stats	rephist.c	/^rep_hist_add_buffer_stats(double mean_num_cells_in_queue,$/;"	f
rep_hist_bandwidth_assess	rephist.c	/^rep_hist_bandwidth_assess(void)$/;"	f
rep_hist_buffer_stats_add_circ	rephist.c	/^rep_hist_buffer_stats_add_circ(circuit_t *circ, time_t end_of_interval)$/;"	f
rep_hist_buffer_stats_init	rephist.c	/^rep_hist_buffer_stats_init(time_t now)$/;"	f
rep_hist_buffer_stats_term	rephist.c	/^rep_hist_buffer_stats_term(void)$/;"	f
rep_hist_buffer_stats_write	rephist.c	/^rep_hist_buffer_stats_write(time_t now)$/;"	f
rep_hist_circbuilding_dormant	rephist.c	/^rep_hist_circbuilding_dormant(time_t now)$/;"	f
rep_hist_conn_stats_init	rephist.c	/^rep_hist_conn_stats_init(time_t now)$/;"	f
rep_hist_conn_stats_term	rephist.c	/^rep_hist_conn_stats_term(void)$/;"	f
rep_hist_conn_stats_write	rephist.c	/^rep_hist_conn_stats_write(time_t now)$/;"	f
rep_hist_desc_stats_init	rephist.c	/^rep_hist_desc_stats_init(time_t now)$/;"	f
rep_hist_desc_stats_term	rephist.c	/^rep_hist_desc_stats_term(void)$/;"	f
rep_hist_desc_stats_write	rephist.c	/^rep_hist_desc_stats_write(time_t now)$/;"	f
rep_hist_downrate_old_runs	rephist.c	/^rep_hist_downrate_old_runs(time_t now)$/;"	f
rep_hist_dump_stats	rephist.c	/^rep_hist_dump_stats(time_t now, int severity)$/;"	f
rep_hist_exit_stats_init	rephist.c	/^rep_hist_exit_stats_init(time_t now)$/;"	f
rep_hist_exit_stats_term	rephist.c	/^rep_hist_exit_stats_term(void)$/;"	f
rep_hist_exit_stats_write	rephist.c	/^rep_hist_exit_stats_write(time_t now)$/;"	f
rep_hist_fill_bandwidth_history	rephist.c	/^rep_hist_fill_bandwidth_history(char *buf, size_t len, const bw_array_t *b)$/;"	f	file:
rep_hist_format_buffer_stats	rephist.c	/^rep_hist_format_buffer_stats(time_t now)$/;"	f
rep_hist_format_conn_stats	rephist.c	/^rep_hist_format_conn_stats(time_t now)$/;"	f
rep_hist_format_desc_stats	rephist.c	/^rep_hist_format_desc_stats(time_t now)$/;"	f	file:
rep_hist_format_exit_stats	rephist.c	/^rep_hist_format_exit_stats(time_t now)$/;"	f
rep_hist_format_hs_stats	rephist.c	/^rep_hist_format_hs_stats(time_t now)$/;"	f	file:
rep_hist_free_all	rephist.c	/^rep_hist_free_all(void)$/;"	f
rep_hist_get_bandwidth_lines	rephist.c	/^rep_hist_get_bandwidth_lines(void)$/;"	f
rep_hist_get_predicted_internal	rephist.c	/^rep_hist_get_predicted_internal(time_t now, int *need_uptime,$/;"	f
rep_hist_get_predicted_ports	rephist.c	/^rep_hist_get_predicted_ports(time_t now)$/;"	f
rep_hist_get_stability	rephist.c	/^rep_hist_get_stability(const char *id, time_t when)$/;"	f
rep_hist_get_uptime	rephist.c	/^rep_hist_get_uptime(const char *id, time_t when)$/;"	f
rep_hist_get_weighted_fractional_uptime	rephist.c	/^rep_hist_get_weighted_fractional_uptime(const char *id, time_t when)$/;"	f
rep_hist_get_weighted_time_known	rephist.c	/^rep_hist_get_weighted_time_known(const char *id, time_t when)$/;"	f
rep_hist_have_measured_enough_stability	rephist.c	/^rep_hist_have_measured_enough_stability(void)$/;"	f
rep_hist_hs_stats_init	rephist.c	/^rep_hist_hs_stats_init(time_t now)$/;"	f
rep_hist_hs_stats_term	rephist.c	/^rep_hist_hs_stats_term(void)$/;"	f
rep_hist_hs_stats_write	rephist.c	/^rep_hist_hs_stats_write(time_t now)$/;"	f
rep_hist_init	rephist.c	/^rep_hist_init(void)$/;"	f
rep_hist_load_bwhist_state_section	rephist.c	/^rep_hist_load_bwhist_state_section(bw_array_t *b,$/;"	f	file:
rep_hist_load_mtbf_data	rephist.c	/^rep_hist_load_mtbf_data(time_t now)$/;"	f
rep_hist_load_state	rephist.c	/^rep_hist_load_state(or_state_t *state, char **err)$/;"	f
rep_hist_log_circuit_handshake_stats	rephist.c	/^rep_hist_log_circuit_handshake_stats(time_t now)$/;"	f
rep_hist_log_link_protocol_counts	rephist.c	/^rep_hist_log_link_protocol_counts(void)$/;"	f
rep_hist_make_router_pessimal	rephist.c	/^rep_hist_make_router_pessimal(const char *id, time_t when)$/;"	f
rep_hist_note_bytes_read	rephist.c	/^rep_hist_note_bytes_read(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_bytes_written	rephist.c	/^rep_hist_note_bytes_written(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_circuit_handshake_assigned	rephist.c	/^rep_hist_note_circuit_handshake_assigned(uint16_t type)$/;"	f
rep_hist_note_circuit_handshake_requested	rephist.c	/^rep_hist_note_circuit_handshake_requested(uint16_t type)$/;"	f
rep_hist_note_connect_failed	rephist.c	/^rep_hist_note_connect_failed(const char* id, time_t when)$/;"	f
rep_hist_note_connect_succeeded	rephist.c	/^rep_hist_note_connect_succeeded(const char* id, time_t when)$/;"	f
rep_hist_note_connection_died	rephist.c	/^rep_hist_note_connection_died(const char* id, time_t when)$/;"	f
rep_hist_note_desc_served	rephist.c	/^rep_hist_note_desc_served(const char * desc)$/;"	f
rep_hist_note_dir_bytes_read	rephist.c	/^rep_hist_note_dir_bytes_read(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_dir_bytes_written	rephist.c	/^rep_hist_note_dir_bytes_written(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_disconnect	rephist.c	/^rep_hist_note_disconnect(const char* id, time_t when)$/;"	f
rep_hist_note_exit_bytes	rephist.c	/^rep_hist_note_exit_bytes(uint16_t port, size_t num_written,$/;"	f
rep_hist_note_exit_stream_opened	rephist.c	/^rep_hist_note_exit_stream_opened(uint16_t port)$/;"	f
rep_hist_note_extend_failed	rephist.c	/^rep_hist_note_extend_failed(const char *from_id, const char *to_id)$/;"	f
rep_hist_note_extend_succeeded	rephist.c	/^rep_hist_note_extend_succeeded(const char *from_id, const char *to_id)$/;"	f
rep_hist_note_negotiated_link_proto	rephist.c	/^rep_hist_note_negotiated_link_proto(unsigned link_proto, int started_here)$/;"	f
rep_hist_note_or_conn_bytes	rephist.c	/^rep_hist_note_or_conn_bytes(uint64_t conn_id, size_t num_read,$/;"	f
rep_hist_note_router_reachable	rephist.c	/^rep_hist_note_router_reachable(const char *id, const tor_addr_t *at_addr,$/;"	f
rep_hist_note_router_unreachable	rephist.c	/^rep_hist_note_router_unreachable(const char *id, time_t when)$/;"	f
rep_hist_note_used_internal	rephist.c	/^rep_hist_note_used_internal(time_t now, int need_uptime, int need_capacity)$/;"	f
rep_hist_note_used_port	rephist.c	/^rep_hist_note_used_port(time_t now, uint16_t port)$/;"	f
rep_hist_note_used_resolve	rephist.c	/^rep_hist_note_used_resolve(time_t now)$/;"	f
rep_hist_record_mtbf_data	rephist.c	/^rep_hist_record_mtbf_data(time_t now, int missing_means_down)$/;"	f
rep_hist_remove_predicted_ports	rephist.c	/^rep_hist_remove_predicted_ports(const smartlist_t *rmv_ports)$/;"	f
rep_hist_reset_buffer_stats	rephist.c	/^rep_hist_reset_buffer_stats(time_t now)$/;"	f
rep_hist_reset_conn_stats	rephist.c	/^rep_hist_reset_conn_stats(time_t now)$/;"	f
rep_hist_reset_desc_stats	rephist.c	/^rep_hist_reset_desc_stats(time_t now)$/;"	f	file:
rep_hist_reset_exit_stats	rephist.c	/^rep_hist_reset_exit_stats(time_t now)$/;"	f
rep_hist_reset_hs_stats	rephist.c	/^rep_hist_reset_hs_stats(time_t now)$/;"	f	file:
rep_hist_seen_new_rp_cell	rephist.c	/^rep_hist_seen_new_rp_cell(void)$/;"	f
rep_hist_stored_maybe_new_hs	rephist.c	/^rep_hist_stored_maybe_new_hs(const crypto_pk_t *pubkey)$/;"	f
rep_hist_update_bwhist_state_section	rephist.c	/^rep_hist_update_bwhist_state_section(or_state_t *state,$/;"	f	file:
rep_hist_update_state	rephist.c	/^rep_hist_update_state(or_state_t *state)$/;"	f
rep_history_clean	rephist.c	/^rep_history_clean(time_t before)$/;"	f
rephist_total_alloc	rephist.c	/^uint64_t rephist_total_alloc=0;$/;"	v
rephist_total_num	rephist.c	/^uint32_t rephist_total_num=0;$/;"	v
replace_file	compat.c	/^replace_file(const char *from, const char *to)$/;"	f
replaycache_add_and_test	replaycache.c	/^replaycache_add_and_test(replaycache_t *r, const void *data, size_t len)$/;"	f
replaycache_add_and_test_internal	replaycache.c	/^replaycache_add_and_test_internal($/;"	f
replaycache_add_test_and_elapsed	replaycache.c	/^replaycache_add_test_and_elapsed($/;"	f
replaycache_free	replaycache.c	/^replaycache_free(replaycache_t *r)$/;"	f
replaycache_new	replaycache.c	/^replaycache_new(time_t horizon, time_t interval)$/;"	f
replaycache_s	replaycache.h	/^struct replaycache_s {$/;"	s
replaycache_scrub_if_needed	replaycache.c	/^replaycache_scrub_if_needed(replaycache_t *r)$/;"	f
replaycache_scrub_if_needed_internal	replaycache.c	/^replaycache_scrub_if_needed_internal(time_t present, replaycache_t *r)$/;"	f
replaycache_t	replaycache.h	/^typedef struct replaycache_s replaycache_t;$/;"	t	typeref:struct:replaycache_s
reply	cpuworker.c	/^    cpuworker_reply_t reply;$/;"	m	union:cpuworker_job_u::__anon110	file:
reply	onion.h	/^  uint8_t reply[CELL_PAYLOAD_SIZE - 2];$/;"	m	struct:created_cell_t
reply	or.h	/^  uint8_t reply[MAX_SOCKS_REPLY_LEN]; \/**< Write an entry into this string if$/;"	m	struct:socks_request_t
reply_event	cpuworker.c	/^static struct event *reply_event = NULL;$/;"	v	typeref:struct:event	file:
reply_fn	workqueue.c	/^  void (*reply_fn)(void *arg);$/;"	m	struct:workqueue_entry_s	file:
reply_queue	workqueue.c	/^  replyqueue_t *reply_queue;$/;"	m	struct:threadpool_s	file:
reply_queue	workqueue.c	/^  replyqueue_t *reply_queue;$/;"	m	struct:workerthread_s	file:
replylen	or.h	/^  size_t replylen; \/**< Length of <b>reply<\/b>. *\/$/;"	m	struct:socks_request_t
replyqueue	cpuworker.c	/^static replyqueue_t *replyqueue = NULL;$/;"	v	file:
replyqueue_get_socket	workqueue.c	/^replyqueue_get_socket(replyqueue_t *rq)$/;"	f
replyqueue_new	workqueue.c	/^replyqueue_new(uint32_t alertsocks_flags)$/;"	f
replyqueue_process	workqueue.c	/^replyqueue_process(replyqueue_t *queue)$/;"	f
replyqueue_process_cb	cpuworker.c	/^replyqueue_process_cb(evutil_socket_t sock, short events, void *arg)$/;"	f	file:
replyqueue_s	workqueue.c	/^struct replyqueue_s {$/;"	s	file:
replyqueue_t	workqueue.h	/^typedef struct replyqueue_s replyqueue_t;$/;"	t	typeref:struct:replyqueue_s
report_body	ias_ra.h	/^    sample_report_body_t    report_body;            \/\/ 48$/;"	m	struct:sample_quote_t
report_data	ias_ra.h	/^    sample_report_data_t    report_data;    \/\/ (320) Data provided by the user$/;"	m	struct:sample_report_body_t
request	cpuworker.c	/^    cpuworker_request_t request;$/;"	m	union:cpuworker_job_u::__anon110	file:
request_map	directory.c	/^static strmap_t *request_map = NULL;$/;"	v	file:
request_sample_rng	cpuworker.c	/^static tor_weak_rng_t request_sample_rng = TOR_WEAK_RNG_INIT;$/;"	v	file:
request_t	directory.c	/^typedef struct request_t {$/;"	s	file:
request_t	directory.c	/^} request_t;$/;"	t	typeref:struct:request_t	file:
request_time	geoip.c	/^  struct timeval request_time;$/;"	m	struct:dirreq_map_entry_t	typeref:struct:dirreq_map_entry_t::timeval	file:
requested_resource	or.h	/^  char *requested_resource;$/;"	m	struct:dir_connection_t
res	sandbox.c	/^  struct addrinfo *res;$/;"	m	struct:cached_getaddrinfo_item_t	typeref:struct:cached_getaddrinfo_item_t::addrinfo	file:
res_status_hostname	dns_structs.h	/^  unsigned int res_status_hostname : 2;$/;"	m	struct:cached_resolve_t
res_status_ipv4	dns_structs.h	/^  unsigned int res_status_ipv4 : 2;$/;"	m	struct:cached_resolve_t
res_status_ipv6	dns_structs.h	/^  unsigned int res_status_ipv6 : 2;$/;"	m	struct:cached_resolve_t
reschedule_descriptor_update_check	main.c	/^reschedule_descriptor_update_check(void)$/;"	f
reschedule_directory_downloads	main.c	/^reschedule_directory_downloads(void)$/;"	f
reserved	remote_attestation_result.h	/^    uint8_t         reserved[12];       \/\/  4: Reserved bits$/;"	m	struct:sp_aes_gcm_data_t
reserved1	ias_ra.h	/^    uint8_t                 reserved1[32];  \/\/ ( 16)$/;"	m	struct:sample_report_body_t
reserved2	ias_ra.h	/^    uint8_t                 reserved2[32];  \/\/ ( 96)$/;"	m	struct:sample_report_body_t
reserved3	ias_ra.h	/^    uint8_t                 reserved3[32];  \/\/ (160)$/;"	m	struct:sample_report_body_t
reserved4	ias_ra.h	/^    uint8_t                 reserved4[60];  \/\/ (260)$/;"	m	struct:sample_report_body_t
reset_accounting	hibernate.c	/^reset_accounting(time_t now)$/;"	f	file:
reset_all_main_loop_timers	main.c	/^reset_all_main_loop_timers(void)$/;"	f
reset_bandwidth_test	circuituse.c	/^reset_bandwidth_test(void)$/;"	f
reset_descriptor_failures	main.c	/^  time_t reset_descriptor_failures;$/;"	m	struct:__anon107	file:
reset_last_resolved_addr	config.c	/^reset_last_resolved_addr(void)$/;"	f
resolv_conf_fname	dns.c	/^static char *resolv_conf_fname = NULL;$/;"	v	file:
resolv_conf_mtime	dns.c	/^static time_t resolv_conf_mtime = 0;$/;"	v	file:
resolve_my_address	config.c	/^resolve_my_address(int warn_severity, const or_options_t *options,$/;"	f
resolved_cell_parse	relay.c	/^resolved_cell_parse(const cell_t *cell, const relay_header_t *rh,$/;"	f
resolving_streams	or.h	/^  edge_connection_t *resolving_streams;$/;"	m	struct:or_circuit_t
response_size	geoip.c	/^  size_t response_size; \/**< What is the size of the response in bytes? *\/$/;"	m	struct:dirreq_map_entry_t	file:
result_ipv4	dns_structs.h	/^  } result_ipv4; \/**< Outcome of IPv4 lookup *\/$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon60
result_ipv6	dns_structs.h	/^  } result_ipv6; \/**< Outcome of IPv6 lookup, if any *\/$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon61
result_ptr	dns_structs.h	/^  } result_ptr;$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon62
retry_all_listeners	connection.c	/^retry_all_listeners(smartlist_t *replaced_conns,$/;"	f
retry_bridge_descriptor_fetch_directly	entrynodes.c	/^retry_bridge_descriptor_fetch_directly(const char *digest)$/;"	f
retry_dns_init	main.c	/^  time_t retry_dns_init;$/;"	m	struct:__anon107	file:
retry_listener_ports	connection.c	/^retry_listener_ports(smartlist_t *old_conns,$/;"	f	file:
revocation_reason	ias_ra.h	/^    uint32_t                revocation_reason;$/;"	m	struct:_ias_att_report_t
rewrite_node_address_for_bridge	entrynodes.c	/^rewrite_node_address_for_bridge(const bridge_info_t *bridge, node_t *node)$/;"	f	file:
rewrite_result_t	connection_edge.h	/^} rewrite_result_t;$/;"	t	typeref:struct:__anon86
ri	or.h	/^  routerinfo_t *ri;$/;"	m	struct:node_t
rlim_t	compat.h	/^typedef unsigned long rlim_t;$/;"	t
rollback_log_changes	log.c	/^rollback_log_changes(void)$/;"	f
rotate_onion_key	router.c	/^rotate_onion_key(void)$/;"	f
round_int64_to_next_multiple_of	util.c	/^round_int64_to_next_multiple_of(int64_t number, int64_t divisor)$/;"	f
round_to_next_multiple_of	util.c	/^round_to_next_multiple_of(unsigned number, unsigned divisor)$/;"	f
round_to_power_of_2	util.c	/^round_to_power_of_2(uint64_t u64)$/;"	f
round_uint32_to_next_multiple_of	util.c	/^round_uint32_to_next_multiple_of(uint32_t number, uint32_t divisor)$/;"	f
round_uint64_to_next_multiple_of	util.c	/^round_uint64_to_next_multiple_of(uint64_t number, uint64_t divisor)$/;"	f
router_add_exit_policy	routerparse.c	/^router_add_exit_policy(routerinfo_t *router, directory_token_t *tok)$/;"	f	file:
router_add_extrainfo_to_routerlist	routerlist.c	/^router_add_extrainfo_to_routerlist(extrainfo_t *ei, const char **msg,$/;"	f
router_add_running_nodes_to_smartlist	routerlist.c	/^router_add_running_nodes_to_smartlist(smartlist_t *sl, int allow_invalid,$/;"	f
router_add_to_routerlist	routerlist.c	/^router_add_to_routerlist(routerinfo_t *router, const char **msg,$/;"	f
router_addr_is_trusted_dir	routerlist.c	/^router_addr_is_trusted_dir(uint32_t addr)$/;"	f
router_append_dirobj_signature	routerparse.c	/^router_append_dirobj_signature(char *buf, size_t buf_len, const char *digest,$/;"	f
router_build_fresh_descriptor	router.c	/^router_build_fresh_descriptor(routerinfo_t **r, extrainfo_t **e)$/;"	f
router_choose_random_node	routerlist.c	/^router_choose_random_node(smartlist_t *excludedsmartlist,$/;"	f
router_compare_to_my_exit_policy	router.c	/^router_compare_to_my_exit_policy(const tor_addr_t *addr, uint16_t port)$/;"	f
router_counts_toward_thresholds	dirserv.c	/^router_counts_toward_thresholds(const node_t *node, time_t now,$/;"	f	file:
router_crn_flags_t	or.h	/^} router_crn_flags_t;$/;"	t	typeref:enum:__anon42
router_describe	router.c	/^router_describe(const routerinfo_t *ri)$/;"	f
router_differences_are_cosmetic	routerlist.c	/^router_differences_are_cosmetic(const routerinfo_t *r1, const routerinfo_t *r2)$/;"	f
router_digest_is_me	router.c	/^router_digest_is_me(const char *digest)$/;"	f
router_digest_is_trusted_dir	routerlist.h	81;"	d
router_digest_is_trusted_dir_type	routerlist.c	/^router_digest_is_trusted_dir_type(const char *digest, dirinfo_type_t type)$/;"	f
router_dir_info_changed	nodelist.c	/^router_dir_info_changed(void)$/;"	f
router_dirport_found_reachable	router.c	/^router_dirport_found_reachable(void)$/;"	f
router_dump_exit_policy_to_string	router.c	/^router_dump_exit_policy_to_string(const routerinfo_t *router,$/;"	f
router_dump_router_to_string	router.c	/^router_dump_router_to_string(routerinfo_t *router,$/;"	f
router_exit_policy_all_nodes_reject	nodelist.c	/^router_exit_policy_all_nodes_reject(const tor_addr_t *addr, uint16_t port,$/;"	f
router_exit_policy_rejects_all	routerlist.c	/^router_exit_policy_rejects_all(const routerinfo_t *router)$/;"	f
router_extrainfo_digest_is_me	router.c	/^router_extrainfo_digest_is_me(const char *digest)$/;"	f
router_find_exact_exit_enclave	nodelist.c	/^router_find_exact_exit_enclave(const char *address, uint16_t port)$/;"	f
router_free_all	router.c	/^router_free_all(void)$/;"	f
router_get_active_listener_port_by_type_af	router.c	/^router_get_active_listener_port_by_type_af(int listener_type,$/;"	f
router_get_advertised_bandwidth	routerlist.c	/^router_get_advertised_bandwidth(const routerinfo_t *router)$/;"	f
router_get_advertised_bandwidth_capped	routerlist.c	/^router_get_advertised_bandwidth_capped(const routerinfo_t *router)$/;"	f
router_get_advertised_dir_port	router.c	/^router_get_advertised_dir_port(const or_options_t *options, uint16_t dirport)$/;"	f
router_get_advertised_or_port	router.c	/^router_get_advertised_or_port(const or_options_t *options)$/;"	f
router_get_advertised_or_port_by_af	router.c	/^router_get_advertised_or_port_by_af(const or_options_t *options,$/;"	f
router_get_all_orports	router.c	/^router_get_all_orports(const routerinfo_t *ri)$/;"	f
router_get_by_descriptor_digest	routerlist.c	/^router_get_by_descriptor_digest(const char *digest)$/;"	f
router_get_by_id_digest	routerlist.c	/^router_get_by_id_digest(const char *digest)$/;"	f
router_get_consensus_status_by_descriptor_digest	networkstatus.c	/^router_get_consensus_status_by_descriptor_digest(networkstatus_t *consensus,$/;"	f
router_get_consensus_status_by_id	networkstatus.c	/^router_get_consensus_status_by_id(const char *digest)$/;"	f
router_get_consensus_status_by_nickname	networkstatus.c	/^router_get_consensus_status_by_nickname(const char *nickname,$/;"	f
router_get_description	router.c	/^router_get_description(char *buf, const routerinfo_t *ri)$/;"	f
router_get_descriptor_gen_reason	router.c	/^router_get_descriptor_gen_reason(void)$/;"	f
router_get_dir_hash	routerparse.c	/^router_get_dir_hash(const char *s, char *digest)$/;"	f
router_get_dirobj_signature	routerparse.c	/^router_get_dirobj_signature(const char *digest,$/;"	f
router_get_extrainfo_hash	routerparse.c	/^router_get_extrainfo_hash(const char *s, size_t s_len, char *digest)$/;"	f
router_get_fallback_dir_servers	routerlist.c	/^router_get_fallback_dir_servers(void)$/;"	f
router_get_fallback_dirserver_by_digest	routerlist.c	/^router_get_fallback_dirserver_by_digest(const char *digest)$/;"	f
router_get_hash_impl	routerparse.c	/^router_get_hash_impl(const char *s, size_t s_len, char *digest,$/;"	f	file:
router_get_hash_impl_helper	routerparse.c	/^router_get_hash_impl_helper(const char *s, size_t s_len,$/;"	f	file:
router_get_hashes_impl	routerparse.c	/^router_get_hashes_impl(const char *s, size_t s_len, digests_t *digests,$/;"	f	file:
router_get_mutable_by_digest	routerlist.c	/^router_get_mutable_by_digest(const char *digest)$/;"	f
router_get_mutable_consensus_status_by_id	networkstatus.c	/^router_get_mutable_consensus_status_by_id(const char *digest)$/;"	f
router_get_my_descriptor	router.c	/^router_get_my_descriptor(void)$/;"	f
router_get_my_extrainfo	router.c	/^router_get_my_extrainfo(void)$/;"	f
router_get_my_id_digest	router.c	/^router_get_my_id_digest(void)$/;"	f
router_get_networkstatus_v3_hashes	routerparse.c	/^router_get_networkstatus_v3_hashes(const char *s, digests_t *digests)$/;"	f
router_get_prim_orport	router.c	/^router_get_prim_orport(const routerinfo_t *router, tor_addr_port_t *ap_out)$/;"	f
router_get_router_hash	routerparse.c	/^router_get_router_hash(const char *s, size_t s_len, char *digest)$/;"	f
router_get_routerlist	routerlist.c	/^router_get_routerlist(void)$/;"	f
router_get_trusted_dir_servers	routerlist.c	/^router_get_trusted_dir_servers(void)$/;"	f
router_get_trusteddirserver_by_digest	routerlist.c	/^router_get_trusteddirserver_by_digest(const char *digest)$/;"	f
router_get_verbose_nickname	router.c	/^router_get_verbose_nickname(char *buf, const routerinfo_t *router)$/;"	f
router_guess_address_from_dir_headers	router.c	/^router_guess_address_from_dir_headers(uint32_t *guess)$/;"	f	file:
router_has_addr	router.c	/^router_has_addr(const routerinfo_t *router, const tor_addr_t *addr)$/;"	f
router_has_orport	router.c	/^router_has_orport(const routerinfo_t *router, const tor_addr_port_t *orport)$/;"	f
router_have_consensus_path	nodelist.c	/^router_have_consensus_path(void)$/;"	f
router_have_minimum_dir_info	nodelist.c	/^router_have_minimum_dir_info(void)$/;"	f
router_id	onion_ntor.h	/^  uint8_t router_id[DIGEST_LEN];$/;"	m	struct:ntor_handshake_state_t
router_initialize_tls_context	router.c	/^router_initialize_tls_context(void)$/;"	f
router_is_active	dirserv.c	/^router_is_active(const routerinfo_t *ri, const node_t *node, time_t now)$/;"	f	file:
router_is_me	router.c	/^router_is_me(const routerinfo_t *router)$/;"	f
router_is_named	routerlist.c	/^router_is_named(const routerinfo_t *router)$/;"	f
router_load_extrainfo_from_string	routerlist.c	/^router_load_extrainfo_from_string(const char *s, const char *eos,$/;"	f
router_load_routers_from_string	routerlist.c	/^router_load_routers_from_string(const char *s, const char *eos,$/;"	f
router_load_single_router	routerlist.c	/^router_load_single_router(const char *s, uint8_t purpose, int cache,$/;"	f
router_my_exit_policy_is_reject_star	router.c	/^router_my_exit_policy_is_reject_star(void)$/;"	f
router_new_address_suggestion	router.c	/^router_new_address_suggestion(const char *suggestion,$/;"	f
router_orport_found_reachable	router.c	/^router_orport_found_reachable(void)$/;"	f
router_parse_addr_policy	routerparse.c	/^router_parse_addr_policy(directory_token_t *tok, unsigned fmt_flags)$/;"	f	file:
router_parse_addr_policy_private	routerparse.c	/^router_parse_addr_policy_private(directory_token_t *tok)$/;"	f	file:
router_parse_entry_from_string	routerparse.c	/^router_parse_entry_from_string(const char *s, const char *end,$/;"	f
router_parse_list_from_string	routerparse.c	/^router_parse_list_from_string(const char **s, const char *eos,$/;"	f
router_perform_bandwidth_test	router.c	/^router_perform_bandwidth_test(int num_circs, time_t now)$/;"	f
router_pick_directory_server	routerlist.c	/^router_pick_directory_server(dirinfo_type_t type, int flags)$/;"	f
router_pick_directory_server_impl	routerlist.c	/^router_pick_directory_server_impl(dirinfo_type_t type, int flags,$/;"	f	file:
router_pick_dirserver_generic	routerlist.c	/^router_pick_dirserver_generic(smartlist_t *sourcelist,$/;"	f	file:
router_pick_fallback_dirserver	routerlist.c	/^router_pick_fallback_dirserver(dirinfo_type_t type, int flags)$/;"	f
router_pick_published_address	router.c	/^router_pick_published_address(const or_options_t *options, uint32_t *addr)$/;"	f
router_pick_trusteddirserver	routerlist.c	/^router_pick_trusteddirserver(dirinfo_type_t type, int flags)$/;"	f
router_pick_trusteddirserver_impl	routerlist.c	/^router_pick_trusteddirserver_impl(const smartlist_t *sourcelist,$/;"	f	file:
router_purpose	or.h	/^  uint8_t router_purpose;$/;"	m	struct:dir_connection_t
router_purpose_from_string	router.c	/^router_purpose_from_string(const char *s)$/;"	f
router_purpose_to_string	router.c	/^router_purpose_to_string(uint8_t p)$/;"	f
router_rebuild_descriptor	router.c	/^router_rebuild_descriptor(int force)$/;"	f
router_rebuild_store	routerlist.c	/^router_rebuild_store(int flags, desc_store_t *store)$/;"	f	file:
router_reload_consensus_networkstatus	networkstatus.c	/^router_reload_consensus_networkstatus(void)$/;"	f
router_reload_router_list	routerlist.c	/^router_reload_router_list(void)$/;"	f
router_reload_router_list_impl	routerlist.c	/^router_reload_router_list_impl(desc_store_t *store)$/;"	f	file:
router_reset_descriptor_download_failures	routerlist.c	/^router_reset_descriptor_download_failures(void)$/;"	f
router_reset_reachability	router.c	/^router_reset_reachability(void)$/;"	f
router_reset_status_download_failures	routerlist.c	/^router_reset_status_download_failures(void)$/;"	f
router_reset_warnings	router.c	/^router_reset_warnings(void)$/;"	f
router_set_status	nodelist.c	/^router_set_status(const char *digest, int up)$/;"	f
router_should_rebuild_store	routerlist.c	/^router_should_rebuild_store(desc_store_t *store)$/;"	f	file:
router_status_t	dirserv.c	/^typedef uint32_t router_status_t;$/;"	t	file:
router_supports_extrainfo	directory.c	/^router_supports_extrainfo(const char *identity_digest, int is_authority)$/;"	f
router_upload_dir_desc_to_dirservers	router.c	/^router_upload_dir_desc_to_dirservers(int force)$/;"	f
router_write_fingerprint	router.c	/^router_write_fingerprint(int hashed)$/;"	f
routerdesc_token_table	routerparse.c	/^static token_rule_t routerdesc_token_table[] = {$/;"	v	file:
routerinfo_free	routerlist.c	/^routerinfo_free(routerinfo_t *router)$/;"	f
routerinfo_incompatible_with_extrainfo	routerlist.c	/^routerinfo_incompatible_with_extrainfo(const routerinfo_t *ri,$/;"	f
routerinfo_is_a_configured_bridge	entrynodes.c	/^routerinfo_is_a_configured_bridge(const routerinfo_t *ri)$/;"	f
routerinfo_t	or.h	/^} routerinfo_t;$/;"	t	typeref:struct:__anon14
routerkeys_free_all	routerkeys.c	/^routerkeys_free_all(void)$/;"	f
routerlist	routerlist.c	/^static routerlist_t *routerlist = NULL;$/;"	v	file:
routerlist_add_node_and_family	routerlist.c	/^routerlist_add_node_and_family(smartlist_t *sl, const routerinfo_t *router)$/;"	f	file:
routerlist_assert_ok	routerlist.c	/^routerlist_assert_ok(const routerlist_t *rl)$/;"	f
routerlist_descriptors_added	routerlist.c	/^routerlist_descriptors_added(smartlist_t *sl, int from_cache)$/;"	f
routerlist_find_elt_	routerlist.c	/^routerlist_find_elt_(smartlist_t *sl, void *ri, int idx)$/;"	f	file:
routerlist_find_my_routerinfo	routerlist.c	/^routerlist_find_my_routerinfo(void)$/;"	f
routerlist_free	routerlist.c	/^routerlist_free(routerlist_t *rl)$/;"	f
routerlist_free_all	routerlist.c	/^routerlist_free_all(void)$/;"	f
routerlist_index	or.h	/^  int routerlist_index;$/;"	m	struct:signed_descriptor_t
routerlist_insert	routerlist.c	/^routerlist_insert(routerlist_t *rl, routerinfo_t *ri)$/;"	f	file:
routerlist_insert_old	routerlist.c	/^routerlist_insert_old(routerlist_t *rl, routerinfo_t *ri)$/;"	f	file:
routerlist_remove	routerlist.c	/^routerlist_remove(routerlist_t *rl, routerinfo_t *ri, int make_old, time_t now)$/;"	f
routerlist_remove_old	routerlist.c	/^routerlist_remove_old(routerlist_t *rl, signed_descriptor_t *sd, int idx)$/;"	f	file:
routerlist_remove_old_cached_routers_with_id	routerlist.c	/^routerlist_remove_old_cached_routers_with_id(time_t now,$/;"	f	file:
routerlist_remove_old_routers	routerlist.c	/^routerlist_remove_old_routers(void)$/;"	f
routerlist_reparse_old	routerlist.c	/^routerlist_reparse_old(routerlist_t *rl, signed_descriptor_t *sd)$/;"	f	file:
routerlist_replace	routerlist.c	/^routerlist_replace(routerlist_t *rl, routerinfo_t *ri_old,$/;"	f	file:
routerlist_reset_warnings	routerlist.c	/^routerlist_reset_warnings(void)$/;"	f
routerlist_retry_directory_downloads	routerlist.c	/^routerlist_retry_directory_downloads(time_t now)$/;"	f
routerlist_t	or.h	/^} routerlist_t;$/;"	t	typeref:struct:__anon17
routers	or.h	/^  smartlist_t *routers;$/;"	m	struct:__anon17
routers_have_same_or_addrs	routerlist.c	/^routers_have_same_or_addrs(const routerinfo_t *r1, const routerinfo_t *r2)$/;"	f
routers_sort_by_identity	routerlist.c	/^routers_sort_by_identity(smartlist_t *routers)$/;"	f
routers_update_all_from_networkstatus	networkstatus.c	/^routers_update_all_from_networkstatus(time_t now, int dir_version)$/;"	f
routers_update_status_from_consensus_networkstatus	networkstatus.c	/^routers_update_status_from_consensus_networkstatus(smartlist_t *routers,$/;"	f
routers_with_measured_bw	dirserv.c	/^static int routers_with_measured_bw = 0;$/;"	v	file:
routerset_add_unknown_ccs	routerset.c	/^routerset_add_unknown_ccs(routerset_t **setp, int only_if_some_cc_set)$/;"	f
routerset_contains	routerset.c	/^routerset_contains(const routerset_t *set, const tor_addr_t *addr,$/;"	f
routerset_contains_bridge	entrynodes.c	/^routerset_contains_bridge(const routerset_t *routerset,$/;"	f	file:
routerset_contains_extendinfo	routerset.c	/^routerset_contains_extendinfo(const routerset_t *set, const extend_info_t *ei)$/;"	f
routerset_contains_node	routerset.c	/^routerset_contains_node(const routerset_t *set, const node_t *node)$/;"	f
routerset_contains_router	routerset.c	/^routerset_contains_router(const routerset_t *set, const routerinfo_t *ri,$/;"	f
routerset_contains_routerstatus	routerset.c	/^routerset_contains_routerstatus(const routerset_t *set,$/;"	f
routerset_equal	routerset.c	/^routerset_equal(const routerset_t *old, const routerset_t *new)$/;"	f
routerset_free	routerset.c	/^routerset_free(routerset_t *routerset)$/;"	f
routerset_get_all_nodes	routerset.c	/^routerset_get_all_nodes(smartlist_t *out, const routerset_t *routerset,$/;"	f
routerset_get_countryname	routerset.c	/^routerset_get_countryname(const char *c)$/;"	f
routerset_is_empty	routerset.c	/^routerset_is_empty(const routerset_t *set)$/;"	f
routerset_is_list	routerset.c	/^routerset_is_list(const routerset_t *set)$/;"	f
routerset_len	routerset.c	/^routerset_len(const routerset_t *set)$/;"	f
routerset_needs_geoip	routerset.c	/^routerset_needs_geoip(const routerset_t *set)$/;"	f
routerset_new	routerset.c	/^routerset_new(void)$/;"	f
routerset_parse	routerset.c	/^routerset_parse(routerset_t *target, const char *s, const char *description)$/;"	f
routerset_refresh_countries	routerset.c	/^routerset_refresh_countries(routerset_t *target)$/;"	f
routerset_subtract_nodes	routerset.c	/^routerset_subtract_nodes(smartlist_t *lst, const routerset_t *routerset)$/;"	f
routerset_t	or.h	/^typedef struct routerset_t routerset_t;$/;"	t	typeref:struct:routerset_t
routerset_t	routerset.h	/^struct routerset_t {$/;"	s
routerset_to_string	routerset.c	/^routerset_to_string(const routerset_t *set)$/;"	f
routerset_union	routerset.c	/^routerset_union(routerset_t *target, const routerset_t *source)$/;"	f
routerstatus_describe	router.c	/^routerstatus_describe(const routerstatus_t *rs)$/;"	f
routerstatus_format_entry	dirserv.c	/^routerstatus_format_entry(const routerstatus_t *rs, const char *version,$/;"	f
routerstatus_format_type_t	or.h	/^} routerstatus_format_type_t;$/;"	t	typeref:enum:__anon35
routerstatus_free	networkstatus.c	/^routerstatus_free(routerstatus_t *rs)$/;"	f
routerstatus_get_description	router.c	/^routerstatus_get_description(char *buf, const routerstatus_t *rs)$/;"	f
routerstatus_has_changed	networkstatus.c	/^routerstatus_has_changed(const routerstatus_t *a, const routerstatus_t *b)$/;"	f	file:
routerstatus_list	or.h	/^  smartlist_t *routerstatus_list;$/;"	m	struct:networkstatus_t
routerstatus_list_update_named_server_map	networkstatus.c	/^routerstatus_list_update_named_server_map(void)$/;"	f	file:
routerstatus_parse_entry_from_string	routerparse.c	/^routerstatus_parse_entry_from_string(memarea_t *area,$/;"	f	file:
routerstatus_parse_guardfraction	routerparse.c	/^routerstatus_parse_guardfraction(const char *guardfraction_str,$/;"	f
routerstatus_t	or.h	/^typedef struct routerstatus_t {$/;"	s
routerstatus_t	or.h	/^} routerstatus_t;$/;"	t	typeref:struct:routerstatus_t
rp	rendservice.h	/^      uint8_t rp[42];$/;"	m	struct:rend_intro_cell_s::__anon116::__anon117
rp_relay_cells_seen	rephist.c	/^  int64_t rp_relay_cells_seen;$/;"	m	struct:hs_stats_t	file:
rs	or.h	/^  routerstatus_t *rs;$/;"	m	struct:node_t
rsa_ed_crosscert	routerkeys.c	/^static uint8_t *rsa_ed_crosscert = NULL;$/;"	v	file:
rsa_ed_crosscert_add_sig	link_handshake.c	/^rsa_ed_crosscert_add_sig(rsa_ed_crosscert_t *inp, uint8_t elt)$/;"	f
rsa_ed_crosscert_check	link_handshake.c	/^rsa_ed_crosscert_check(const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_clear	link_handshake.c	/^rsa_ed_crosscert_clear(rsa_ed_crosscert_t *obj)$/;"	f	file:
rsa_ed_crosscert_clear_errors	link_handshake.c	/^rsa_ed_crosscert_clear_errors(rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_encode	link_handshake.c	/^rsa_ed_crosscert_encode(uint8_t *output, const size_t avail, const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_encoded_len	link_handshake.c	/^rsa_ed_crosscert_encoded_len(const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_free	link_handshake.c	/^rsa_ed_crosscert_free(rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_get_ed_key	link_handshake.c	/^rsa_ed_crosscert_get_ed_key(const rsa_ed_crosscert_t *inp, size_t idx)$/;"	f
rsa_ed_crosscert_get_end_of_signed	link_handshake.c	/^rsa_ed_crosscert_get_end_of_signed(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_get_expiration	link_handshake.c	/^rsa_ed_crosscert_get_expiration(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_get_sig	link_handshake.c	/^rsa_ed_crosscert_get_sig(rsa_ed_crosscert_t *inp, size_t idx)$/;"	f
rsa_ed_crosscert_get_sig_len	link_handshake.c	/^rsa_ed_crosscert_get_sig_len(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getarray_ed_key	link_handshake.c	/^rsa_ed_crosscert_getarray_ed_key(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getarray_sig	link_handshake.c	/^rsa_ed_crosscert_getarray_sig(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getlen_ed_key	link_handshake.c	/^rsa_ed_crosscert_getlen_ed_key(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getlen_sig	link_handshake.c	/^rsa_ed_crosscert_getlen_sig(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_len	routerkeys.c	/^static size_t rsa_ed_crosscert_len = 0;$/;"	v	file:
rsa_ed_crosscert_new	link_handshake.c	/^rsa_ed_crosscert_new(void)$/;"	f
rsa_ed_crosscert_parse	link_handshake.c	/^rsa_ed_crosscert_parse(rsa_ed_crosscert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
rsa_ed_crosscert_parse_into	link_handshake.c	/^rsa_ed_crosscert_parse_into(rsa_ed_crosscert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
rsa_ed_crosscert_set_ed_key	link_handshake.c	/^rsa_ed_crosscert_set_ed_key(rsa_ed_crosscert_t *inp, size_t idx, uint8_t elt)$/;"	f
rsa_ed_crosscert_set_expiration	link_handshake.c	/^rsa_ed_crosscert_set_expiration(rsa_ed_crosscert_t *inp, uint32_t val)$/;"	f
rsa_ed_crosscert_set_sig	link_handshake.c	/^rsa_ed_crosscert_set_sig(rsa_ed_crosscert_t *inp, size_t idx, uint8_t elt)$/;"	f
rsa_ed_crosscert_set_sig_len	link_handshake.c	/^rsa_ed_crosscert_set_sig_len(rsa_ed_crosscert_t *inp, uint8_t val)$/;"	f
rsa_ed_crosscert_setlen_sig	link_handshake.c	/^rsa_ed_crosscert_setlen_sig(rsa_ed_crosscert_t *inp, size_t newlen)$/;"	f
rsa_ed_crosscert_st	link_handshake.h	/^struct rsa_ed_crosscert_st {$/;"	s
rsa_ed_crosscert_t	link_handshake.h	/^typedef struct rsa_ed_crosscert_st rsa_ed_crosscert_t;$/;"	t	typeref:struct:rsa_ed_crosscert_st
rsa_id	keypin.h	/^  uint8_t rsa_id[DIGEST_LEN];$/;"	m	struct:keypin_ent_st
rsamap_node	keypin.h	/^  HT_ENTRY(keypin_ent_st) rsamap_node;$/;"	m	struct:keypin_ent_st
rtrstatus_token_table	routerparse.c	/^static token_rule_t rtrstatus_token_table[] = {$/;"	v	file:
run_connection_housekeeping	main.c	/^run_connection_housekeeping(int i, time_t now)$/;"	f	file:
run_main_loop_once	main.c	/^run_main_loop_once(void)$/;"	f	file:
run_main_loop_until_done	main.c	/^run_main_loop_until_done(void)$/;"	f	file:
run_sched_ev	scheduler.c	/^STATIC struct event *run_sched_ev = NULL;$/;"	v	typeref:struct:event
run_scheduled_events	main.c	/^run_scheduled_events(time_t now)$/;"	f	file:
running	util_process.c	/^  unsigned running;$/;"	m	struct:waitpid_callback_t	file:
running_long_enough_to_decide_unreachable	dirserv.c	/^running_long_enough_to_decide_unreachable(void)$/;"	f	file:
s	ias_ra.h	/^	uint8_t s[SAMPLE_ECP_KEY_SIZE];$/;"	m	struct:sample_ec_dh_shared_t
s	or.h	/^  tor_socket_t s;$/;"	m	struct:connection_t
s32	curve25519-donna.c	/^typedef int32_t s32;$/;"	t	file:
s32_eq	curve25519-donna.c	/^static s32 s32_eq(s32 a, s32 b) {$/;"	f	file:
s32_gte	curve25519-donna.c	/^static s32 s32_gte(s32 a, s32 b) {$/;"	f	file:
s6_addr	orconfig.h	1627;"	d
s6_addr16	compat.h	490;"	d
s6_addr16	orconfig.h	1628;"	d
s6_addr32	compat.h	493;"	d
s6_addr32	orconfig.h	1629;"	d
s_addr	orconfig.h	/^      in_addr_t s_addr;$/;"	m	struct:in_addr
s_connect	TorSGX.cpp	/^SSL * s_connect(int sock, char * dest_url)$/;"	f
sa	orconfig.h	/^        struct sigaction sa;$/;"	m	struct:k_sigaction	typeref:struct:k_sigaction::sigaction
sa_data	orconfig.h	/^  char sa_data[14];           \/* Address data.  *\/$/;"	m	struct:sockaddr
sa_family_t	compat.h	/^typedef uint16_t sa_family_t;$/;"	t
sa_family_t	orconfig.h	/^typedef unsigned short sa_family_t;$/;"	t
sa_flags	orconfig.h	/^        unsigned long sa_flags;$/;"	m	struct:old_sigaction
sa_flags	orconfig.h	/^        unsigned long sa_flags;$/;"	m	struct:sigaction
sa_handler	orconfig.h	/^        __sighandler_t sa_handler;$/;"	m	struct:old_sigaction
sa_handler	orconfig.h	/^        __sighandler_t sa_handler;$/;"	m	struct:sigaction
sa_handler	orconfig.h	881;"	d
sa_mask	orconfig.h	/^        old_sigset_t sa_mask;$/;"	m	struct:old_sigaction
sa_mask	orconfig.h	/^        sigset_t sa_mask;               \/* mask last for extensibility *\/$/;"	m	struct:sigaction
sa_mask	orconfig.h	/^        sigset_t sa_mask;$/;"	m	struct:sigaction
sa_restorer	orconfig.h	/^        void (*sa_restorer)(void);$/;"	m	struct:old_sigaction
sa_restorer	orconfig.h	/^        void (*sa_restorer)(void);$/;"	m	struct:sigaction
sa_sigaction	orconfig.h	882;"	d
safe_mem_is_zero	di_ops.c	/^safe_mem_is_zero(const void *mem, size_t sz)$/;"	f
safe_str	config.c	/^safe_str(const char *address)$/;"	f
safe_str_client	config.c	/^safe_str_client(const char *address)$/;"	f
safecookie_client_hash	or.h	/^  char *safecookie_client_hash;$/;"	m	struct:control_connection_t
sample_attributes_t	ias_ra.h	/^typedef struct sample_attributes_t$/;"	s
sample_attributes_t	ias_ra.h	/^} sample_attributes_t;$/;"	t	typeref:struct:sample_attributes_t
sample_basename_t	ias_ra.h	/^typedef struct sample_basename_t$/;"	s
sample_basename_t	ias_ra.h	/^} sample_basename_t;$/;"	t	typeref:struct:sample_basename_t
sample_cpu_svn_t	ias_ra.h	/^typedef uint8_t             sample_cpu_svn_t[SAMPLE_CPUSVN_SIZE];$/;"	t
sample_ec_dh_shared_t	ias_ra.h	/^typedef struct sample_ec_dh_shared_t$/;"	s
sample_ec_dh_shared_t	ias_ra.h	/^}sample_ec_dh_shared_t;$/;"	t	typeref:struct:sample_ec_dh_shared_t
sample_ec_key_128bit_t	ias_ra.h	/^typedef uint8_t sample_ec_key_128bit_t[16];$/;"	t
sample_ec_priv_t	ias_ra.h	/^typedef struct sample_ec_priv_t$/;"	s
sample_ec_priv_t	ias_ra.h	/^} sample_ec_priv_t;$/;"	t	typeref:struct:sample_ec_priv_t
sample_ec_pub_t	service_provider.h	/^typedef struct sample_ec_pub_t$/;"	s
sample_ec_pub_t	service_provider.h	/^} sample_ec_pub_t;$/;"	t	typeref:struct:sample_ec_pub_t
sample_ec_sign256_t	remote_attestation_result.h	/^typedef struct sample_ec_sign256_t$/;"	s
sample_ec_sign256_t	remote_attestation_result.h	/^} sample_ec_sign256_t;$/;"	t	typeref:struct:sample_ec_sign256_t
sample_enroll	service_provider.h	/^typedef int (*sample_enroll)(int sp_credentials, sample_spid_t* spid,$/;"	t
sample_epid_group_id_t	ias_ra.h	/^typedef uint8_t sample_epid_group_id_t[4];$/;"	t
sample_extended_epid_group	service_provider.h	/^typedef struct sample_extended_epid_group$/;"	s
sample_extended_epid_group	service_provider.h	/^} sample_extended_epid_group;$/;"	t	typeref:struct:sample_extended_epid_group
sample_get_sigrl	service_provider.h	/^typedef int(*sample_get_sigrl)(const sample_epid_group_id_t gid, uint32_t* p_sig_rl_size,$/;"	t
sample_isv_svn_t	ias_ra.h	/^typedef uint16_t            sample_isv_svn_t;$/;"	t
sample_key_128bit_t	service_provider.h	/^typedef uint8_t                 sample_key_128bit_t[16];$/;"	t
sample_laplace_distribution	util.c	/^sample_laplace_distribution(double mu, double b, double p)$/;"	f
sample_mac_t	ias_ra.h	/^typedef uint8_t             sample_mac_t[SAMPLE_MAC_SIZE];$/;"	t
sample_mac_t	remote_attestation_result.h	/^typedef uint8_t                     sample_mac_t[SAMPLE_MAC_SIZE];$/;"	t
sample_measurement_t	ias_ra.h	/^typedef uint8_t             sample_measurement_t[SAMPLE_HASH_SIZE];$/;"	t
sample_prod_id_t	ias_ra.h	/^typedef uint16_t            sample_prod_id_t;$/;"	t
sample_ps_sec_prop_desc	service_provider.h	/^    uint8_t  sample_ps_sec_prop_desc[256];$/;"	m	struct:sample_ps_sec_prop_desc_t
sample_ps_sec_prop_desc_t	service_provider.h	/^typedef struct sample_ps_sec_prop_desc_t$/;"	s
sample_ps_sec_prop_desc_t	service_provider.h	/^} sample_ps_sec_prop_desc_t;$/;"	t	typeref:struct:sample_ps_sec_prop_desc_t
sample_quote_nonce_t	ias_ra.h	/^typedef struct sample_quote_nonce_t$/;"	s
sample_quote_nonce_t	ias_ra.h	/^} sample_quote_nonce_t;$/;"	t	typeref:struct:sample_quote_nonce_t
sample_quote_t	ias_ra.h	/^typedef struct sample_quote_t {$/;"	s
sample_quote_t	ias_ra.h	/^} sample_quote_t;$/;"	t	typeref:struct:sample_quote_t
sample_ra_att_result_msg_t	remote_attestation_result.h	/^typedef struct sample_ra_att_result_msg_t {$/;"	s
sample_ra_att_result_msg_t	remote_attestation_result.h	/^} sample_ra_att_result_msg_t;$/;"	t	typeref:struct:sample_ra_att_result_msg_t
sample_ra_context_t	service_provider.h	/^typedef uint32_t                sample_ra_context_t;$/;"	t
sample_ra_key_128_t	service_provider.h	/^typedef sample_key_128bit_t     sample_ra_key_128_t;$/;"	t
sample_ra_msg0_t	service_provider.h	/^typedef struct sample_ra_msg0_t$/;"	s
sample_ra_msg0_t	service_provider.h	/^} sample_ra_msg0_t;$/;"	t	typeref:struct:sample_ra_msg0_t
sample_ra_msg1_t	service_provider.h	/^typedef struct sample_ra_msg1_t$/;"	s
sample_ra_msg1_t	service_provider.h	/^} sample_ra_msg1_t;$/;"	t	typeref:struct:sample_ra_msg1_t
sample_ra_msg2_t	service_provider.h	/^typedef struct sample_ra_msg2_t$/;"	s
sample_ra_msg2_t	service_provider.h	/^} sample_ra_msg2_t;$/;"	t	typeref:struct:sample_ra_msg2_t
sample_ra_msg3_t	service_provider.h	/^typedef struct sample_ra_msg3_t$/;"	s
sample_ra_msg3_t	service_provider.h	/^} sample_ra_msg3_t;$/;"	t	typeref:struct:sample_ra_msg3_t
sample_report_body_t	ias_ra.h	/^typedef struct sample_report_body_t {$/;"	s
sample_report_body_t	ias_ra.h	/^} sample_report_body_t;$/;"	t	typeref:struct:sample_report_body_t
sample_report_data_t	ias_ra.h	/^typedef uint8_t             sample_report_data_t[SAMPLE_REPORT_DATA_SIZE];$/;"	t
sample_spid_t	ias_ra.h	/^typedef struct sample_spid_t$/;"	s
sample_spid_t	ias_ra.h	/^} sample_spid_t;$/;"	t	typeref:struct:sample_spid_t
sample_verify_attestation_evidence	service_provider.h	/^typedef int(*sample_verify_attestation_evidence)(sample_quote_t* p_isv_quote,$/;"	t
sandbox_active	sandbox.c	/^static int sandbox_active = 0;$/;"	v	file:
sandbox_add_addrinfo	sandbox.c	/^sandbox_add_addrinfo(const char *name)$/;"	f
sandbox_add_addrinfo	sandbox.h	126;"	d
sandbox_cfg_allow_open_filename	sandbox.c	/^sandbox_cfg_allow_open_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_allow_openat_filename	sandbox.c	/^sandbox_cfg_allow_openat_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_allow_rename	sandbox.c	/^sandbox_cfg_allow_rename(sandbox_cfg_t **cfg, char *file1, char *file2)$/;"	f
sandbox_cfg_allow_stat_filename	sandbox.c	/^sandbox_cfg_allow_stat_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_elem	sandbox.h	/^struct sandbox_cfg_elem {$/;"	s
sandbox_cfg_new	sandbox.c	/^sandbox_cfg_new(void)$/;"	f
sandbox_cfg_t	sandbox.h	/^typedef struct sandbox_cfg_elem sandbox_cfg_t;$/;"	t	typeref:struct:sandbox_cfg_elem
sandbox_disable_getaddrinfo_cache	sandbox.c	/^sandbox_disable_getaddrinfo_cache(void)$/;"	f
sandbox_filter_func_t	sandbox.h	/^typedef int (*sandbox_filter_func_t)(scmp_filter_ctx ctx,$/;"	t
sandbox_free_getaddrinfo_cache	sandbox.c	/^sandbox_free_getaddrinfo_cache(void)$/;"	f
sandbox_free_getaddrinfo_cache	sandbox.h	130;"	d
sandbox_freeaddrinfo	sandbox.c	/^sandbox_freeaddrinfo(struct addrinfo *ai)$/;"	f
sandbox_freeaddrinfo	sandbox.h	128;"	d
sandbox_getaddrinfo	sandbox.c	/^sandbox_getaddrinfo(const char *name, const char *servname,$/;"	f
sandbox_getaddrinfo	sandbox.h	124;"	d
sandbox_getaddrinfo_cache_disabled	sandbox.c	/^static int sandbox_getaddrinfo_cache_disabled = 0;$/;"	v	file:
sandbox_init	sandbox.c	/^sandbox_init(sandbox_cfg_t *cfg)$/;"	f
sandbox_init_filter	main.c	/^sandbox_init_filter(void)$/;"	f	file:
sandbox_intern_string	sandbox.c	/^sandbox_intern_string(const char *str)$/;"	f
sandbox_intern_string	sandbox.h	139;"	d
sandbox_is_active	sandbox.c	/^sandbox_is_active(void)$/;"	f
sandbox_t	sandbox.h	/^} sandbox_t;$/;"	t	typeref:struct:__anon85
save_stability	main.c	/^  time_t save_stability;$/;"	m	struct:__anon107	file:
save_transport_to_state	statefile.c	/^save_transport_to_state(const char *transport,$/;"	f
saved_location	or.h	/^  saved_location_bitfield_t saved_location : 3;$/;"	m	struct:microdesc_t
saved_location	or.h	/^  saved_location_t saved_location;$/;"	m	struct:signed_descriptor_t
saved_location_bitfield_t	or.h	1949;"	d
saved_location_t	or.h	/^} saved_location_t;$/;"	t	typeref:enum:__anon12
saved_offset	or.h	/^  off_t saved_offset;$/;"	m	struct:signed_descriptor_t
sb__sysctl	sandbox.c	/^sb__sysctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_accept4	sandbox.c	/^sb_accept4(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_epoll_ctl	sandbox.c	/^sb_epoll_ctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_fcntl64	sandbox.c	/^sb_fcntl64(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_flock	sandbox.c	/^sb_flock(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_futex	sandbox.c	/^sb_futex(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_getsockopt	sandbox.c	/^sb_getsockopt(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mmap2	sandbox.c	/^sb_mmap2(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mprotect	sandbox.c	/^sb_mprotect(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mremap	sandbox.c	/^sb_mremap(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_open	sandbox.c	/^sb_open(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_openat	sandbox.c	/^sb_openat(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_poll	sandbox.c	/^sb_poll(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_prctl	sandbox.c	/^sb_prctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rename	sandbox.c	/^sb_rename(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rt_sigaction	sandbox.c	/^sb_rt_sigaction(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rt_sigprocmask	sandbox.c	/^sb_rt_sigprocmask(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_setsockopt	sandbox.c	/^sb_setsockopt(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_socket	sandbox.c	/^sb_socket(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_socketpair	sandbox.c	/^sb_socketpair(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_stat64	sandbox.c	/^sb_stat64(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_time	sandbox.c	/^sb_time(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sc_muladd	sc.h	10;"	d
sc_muladd	sc_muladd.c	/^void sc_muladd(unsigned char *s,const unsigned char *a,const unsigned char *b,const unsigned char *c)$/;"	f
sc_reduce	sc.h	9;"	d
sc_reduce	sc_reduce.c	/^void sc_reduce(unsigned char *s)$/;"	f
scalars	ed25519-donna-batchverify.h	/^	bignum256modm scalars[heap_batch_size];$/;"	m	struct:batch_heap_t
scale_active_circuits	circuitmux_ewma.c	/^scale_active_circuits(ewma_policy_data_t *pol, unsigned cur_tick)$/;"	f	file:
scale_array_elements_to_u64	routerlist.c	/^scale_array_elements_to_u64(u64_dbl_t *entries, int n_entries,$/;"	f
scale_single_cell_ewma	circuitmux_ewma.c	/^scale_single_cell_ewma(cell_ewma_t *ewma, unsigned cur_tick)$/;"	f	file:
scan_double	util.c	/^scan_double(const char **bufp, double *out, int width)$/;"	f	file:
scan_signed	util.c	/^scan_signed(const char **bufp, long *out, int width)$/;"	f	file:
scan_string	util.c	/^scan_string(const char **bufp, char *out, int width)$/;"	f	file:
scan_unsigned	util.c	/^scan_unsigned(const char **bufp, unsigned long *out, int width, int base)$/;"	f	file:
scert	link_handshake.h	/^  uint8_t scert[32];$/;"	m	struct:auth1_st
sched_heap_idx	channel.h	/^  int sched_heap_idx;$/;"	m	struct:channel_s
sched_max_flush_cells	scheduler.c	/^static uint32_t sched_max_flush_cells = 16;$/;"	v	file:
sched_q_high_water	scheduler.c	/^static uint32_t sched_q_high_water = 32768;$/;"	v	file:
sched_q_low_water	scheduler.c	/^static uint32_t sched_q_low_water = 16384;$/;"	v	file:
schedule	or.h	/^  download_schedule_bitfield_t schedule : 8;$/;"	m	struct:download_status_t
scheduler_adjust_queue_size	scheduler.c	/^scheduler_adjust_queue_size(channel_t *chan, int dir, uint64_t adj)$/;"	f
scheduler_channel_wants_writes	scheduler.c	/^scheduler_channel_wants_writes(channel_t *chan)$/;"	f
scheduler_evt_callback	scheduler.c	/^scheduler_evt_callback(evutil_socket_t fd, short events, void *arg)$/;"	f	file:
scheduler_free_all	scheduler.c	/^scheduler_free_all(void)$/;"	f
scheduler_get_queue_heuristic	scheduler.c	/^scheduler_get_queue_heuristic(void)$/;"	f
scheduler_init	scheduler.c	/^scheduler_init(void)$/;"	f
scheduler_more_work	scheduler.c	/^scheduler_more_work(void)$/;"	f	file:
scheduler_retrigger	scheduler.c	/^scheduler_retrigger(void)$/;"	f	file:
scheduler_set_watermarks	scheduler.c	/^scheduler_set_watermarks(uint32_t lo, uint32_t hi, uint32_t max_flush)$/;"	f
scheduler_state	channel.h	/^  } scheduler_state;$/;"	m	struct:channel_s	typeref:enum:channel_s::__anon72
scheduler_touch_channel	scheduler.c	/^scheduler_touch_channel(channel_t *chan)$/;"	f
scheduler_update_queue_heuristic	scheduler.c	/^scheduler_update_queue_heuristic(time_t now)$/;"	f
scrub_interval	replaycache.h	/^  time_t scrub_interval;$/;"	m	struct:replaycache_s
scrubbed	replaycache.h	/^  time_t scrubbed;$/;"	m	struct:replaycache_s
seccomp_rule_add_0	sandbox.c	224;"	d	file:
seccomp_rule_add_1	sandbox.c	226;"	d	file:
seccomp_rule_add_2	sandbox.c	228;"	d	file:
seccomp_rule_add_3	sandbox.c	230;"	d	file:
seccomp_rule_add_4	sandbox.c	232;"	d	file:
seckey	crypto_curve25519.h	/^  curve25519_secret_key_t seckey;$/;"	m	struct:curve25519_keypair_t
seckey	crypto_ed25519.c	/^  int (*seckey)(unsigned char *);$/;"	m	struct:__anon123	file:
seckey	crypto_ed25519.h	/^  ed25519_secret_key_t seckey;$/;"	m	struct:__anon95
seckey	crypto_ed25519.h	/^  uint8_t seckey[ED25519_SECKEY_LEN];$/;"	m	struct:__anon94
seckey_expand	crypto_ed25519.c	/^  int (*seckey_expand)(unsigned char *, const unsigned char *);$/;"	m	struct:__anon123	file:
seckey_x	onion_ntor.h	/^  curve25519_secret_key_t seckey_x;$/;"	m	struct:ntor_handshake_state_t
second	or.h	/^  char second[DIGEST_LEN];$/;"	m	struct:__anon34
second_elapsed_callback	main.c	/^second_elapsed_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
second_timer	main.c	/^static periodic_timer_t *second_timer = NULL;$/;"	v	file:
secret	remote_attestation_result.h	/^    sp_aes_gcm_data_t           secret;$/;"	m	struct:sample_ra_att_result_msg_t
secret_key	crypto_curve25519.h	/^  uint8_t secret_key[CURVE25519_SECKEY_LEN];$/;"	m	struct:curve25519_secret_key_t
secret_to_key_check	crypto_s2k.c	/^secret_to_key_check(const uint8_t *spec_and_key, size_t spec_and_key_len,$/;"	f
secret_to_key_compute_key	crypto_s2k.c	/^secret_to_key_compute_key(uint8_t *key_out, size_t key_out_len,$/;"	f
secret_to_key_derivekey	crypto_s2k.c	/^secret_to_key_derivekey(uint8_t *key_out, size_t key_out_len,$/;"	f
secret_to_key_get_type	crypto_s2k.c	/^secret_to_key_get_type(const uint8_t *spec_and_key, size_t spec_and_key_len,$/;"	f	file:
secret_to_key_key_len	crypto_s2k.c	/^secret_to_key_key_len(uint8_t type)$/;"	f	file:
secret_to_key_make_specifier	crypto_s2k.c	/^secret_to_key_make_specifier(uint8_t *buf, size_t buf_len, unsigned flags)$/;"	f
secret_to_key_new	crypto_s2k.c	/^secret_to_key_new(uint8_t *buf,$/;"	f
secret_to_key_rfc2440	crypto_s2k.c	/^secret_to_key_rfc2440(char *key_out, size_t key_out_len, const char *secret,$/;"	f
secret_to_key_spec_len	crypto_s2k.c	/^secret_to_key_spec_len(uint8_t type)$/;"	f	file:
secs_to_uptime	status.c	/^secs_to_uptime(long secs)$/;"	f
seek	orconfig.h	/^	long seek;$/;"	m	struct:_sgx_file
seems_dead	log.c	/^  int seems_dead; \/**< Boolean: true if the stream seems to be kaput. *\/$/;"	m	struct:logfile_t	file:
select	ge_scalarmult_base.c	/^static void select(ge_precomp *t,int pos,signed char b)$/;"	f	file:
select	ge_scalarmult_base.c	6;"	d	file:
selftest	crypto_ed25519.c	/^  int (*selftest)(void);$/;"	m	struct:__anon123	file:
send	orconfig.h	2422;"	d
send_byte	TorSGX.cpp	/^int send_byte;$/;"	v
send_cnt	TorSGX.cpp	/^int send_cnt;$/;"	v
send_control_done	control.c	/^send_control_done(control_connection_t *conn)$/;"	f	file:
send_control_event	control.c	/^send_control_event(uint16_t event,$/;"	f	file:
send_control_event_impl	control.c	/^send_control_event_impl(uint16_t event,$/;"	f	file:
send_ni	compat_threads.c	/^send_ni(int fd, const void *buf, size_t n, int flags)$/;"	f	file:
send_unencrypted	or.h	/^  unsigned int send_unencrypted : 1;$/;"	m	struct:signed_descriptor_t
sending_optimistic_data	or.h	/^  generic_buffer_t *sending_optimistic_data;$/;"	m	struct:entry_connection_t
sent_netinfo	or.h	/^  unsigned int sent_netinfo : 1;$/;"	m	struct:or_handshake_state_t
sent_versions_at	or.h	/^  time_t sent_versions_at;$/;"	m	struct:or_handshake_state_t
served_descs	rephist.c	/^static digestmap_t *served_descs = NULL;$/;"	v	file:
server_cfg	or.h	/^  server_port_cfg_t server_cfg;$/;"	m	struct:port_cfg_t
server_handshake_count	tortls.c	/^  uint8_t server_handshake_count;$/;"	m	struct:tor_tls_t	file:
server_identity_key_is_set	router.c	/^server_identity_key_is_set(void)$/;"	f
server_identitykey	router.c	/^static crypto_pk_t *server_identitykey=NULL;$/;"	v	file:
server_identitykey_digest	router.c	/^static char server_identitykey_digest[DIGEST_LEN];$/;"	v	file:
server_is_advertised	router.c	/^static int server_is_advertised=0;$/;"	v	file:
server_onion_keys_free	onion.c	/^server_onion_keys_free(server_onion_keys_t *keys)$/;"	f
server_onion_keys_new	onion.c	/^server_onion_keys_new(void)$/;"	f
server_onion_keys_t	onion.h	/^typedef struct server_onion_keys_t {$/;"	s
server_onion_keys_t	onion.h	/^} server_onion_keys_t;$/;"	t	typeref:struct:server_onion_keys_t
server_port_cfg_t	or.h	/^typedef struct server_port_cfg_t {$/;"	s
server_port_cfg_t	or.h	/^} server_port_cfg_t;$/;"	t	typeref:struct:server_port_cfg_t
server_tls_context	tortls.c	/^static tor_tls_context_t *server_tls_context = NULL;$/;"	v	file:
server_versions	or.h	/^  char *server_versions;$/;"	m	struct:networkstatus_t
service_fns	ntmain.c	/^struct service_fns {$/;"	s	file:
service_fns	ntmain.c	/^} service_fns = { 0,$/;"	v	typeref:struct:service_fns
service_id	rendservice.c	/^  char service_id[REND_SERVICE_ID_LEN_BASE32+1]; \/**< Onion address without$/;"	m	struct:rend_service_t	file:
service_pending_final_cpath_ref	or.h	/^  crypt_path_reference_t *service_pending_final_cpath_ref;$/;"	m	struct:__anon22
service_status	ntmain.c	/^static SERVICE_STATUS service_status;$/;"	v	file:
session_group	or.h	/^  int session_group; \/**< A session group, or -1 if this port is not in a$/;"	m	struct:entry_port_cfg_t
session_group	or.h	/^  int session_group;$/;"	m	struct:origin_circuit_t
set_at	networkstatus.c	/^  time_t set_at;$/;"	m	struct:consensus_waiting_for_certs_t	file:
set_buffer_lengths_to_zero	main.c	/^set_buffer_lengths_to_zero(tor_socket_t s)$/;"	f	file:
set_cached_network_liveness	control.c	/^set_cached_network_liveness(int liveness)$/;"	f	file:
set_cert_key_stuff	TorSGX.cpp	/^int set_cert_key_stuff(SSL_CTX *ctx, X509 *cert, EVP_PKEY *key,	STACK_OF(X509) *chain, int build_chain)$/;"	f
set_client_identity_key	router.c	/^set_client_identity_key(crypto_pk_t *k)$/;"	f
set_constrained_socket_buffers	connection.c	/^set_constrained_socket_buffers(tor_socket_t sock, int size)$/;"	f	file:
set_environment_variable_in_smartlist	util.c	/^set_environment_variable_in_smartlist(struct smartlist_t *env_vars,$/;"	f
set_exitconn_info_from_resolve	dns.c	/^set_exitconn_info_from_resolve(edge_connection_t *exitconn,$/;"	f	file:
set_expiry	dns.c	/^set_expiry(cached_resolve_t *resolve, time_t expires)$/;"	f	file:
set_log_severity_config	log.c	/^set_log_severity_config(int loglevelMin, int loglevelMax,$/;"	f
set_log_time_granularity	log.c	/^set_log_time_granularity(int granularity_msec)$/;"	f
set_main_thread	compat_threads.c	/^set_main_thread(void)$/;"	f
set_max_file_descriptors	compat.c	/^set_max_file_descriptors(rlim_t limit, int *max_out)$/;"	f
set_onion_key	router.c	/^set_onion_key(crypto_pk_t *k)$/;"	f	file:
set_options	config.c	/^set_options(or_options_t *new_val, char **msg)$/;"	f
set_routerstatus_from_routerinfo	dirserv.c	/^set_routerstatus_from_routerinfo(routerstatus_t *rs,$/;"	f
set_server_advertised	router.c	/^set_server_advertised(int s)$/;"	f	file:
set_server_identity_key	router.c	/^set_server_identity_key(crypto_pk_t *k)$/;"	f
set_socket_nonblocking	compat.c	/^set_socket_nonblocking(tor_socket_t socket)$/;"	f
set_streams_blocked_on_circ	relay.c	/^set_streams_blocked_on_circ(circuit_t *circ, channel_t *chan,$/;"	f	file:
set_uint16	compat.c	/^set_uint16(void *cp, uint16_t v)$/;"	f
set_uint32	compat.c	/^set_uint32(void *cp, uint32_t v)$/;"	f
set_uint64	compat.c	/^set_uint64(void *cp, uint64_t v)$/;"	f
set_uint8	compat.h	/^set_uint8(void *cp, uint8_t v)$/;"	f
set_unix_port	rendservice.c	/^set_unix_port(edge_connection_t *conn, rend_service_port_config_t *p)$/;"	f	file:
set_waitpid_callback	util_process.c	/^set_waitpid_callback(pid_t pid, void (*fn)(int, void *), void *arg)$/;"	f
setopt_err_t	or.h	/^typedef enum setopt_err_t {$/;"	g
setopt_err_t	or.h	/^} setopt_err_t;$/;"	t	typeref:enum:setopt_err_t
setup	tinytest.h	/^	const struct testcase_setup_t *setup; \/**< Optional setup\/cleanup fns*\/$/;"	m	struct:testcase_t	typeref:struct:testcase_t::testcase_setup_t
setup_data	tinytest.h	/^	void *setup_data; \/**< Extra data usable by setup function *\/$/;"	m	struct:testcase_t
setup_fn	tinytest.h	/^	void *(*setup_fn)(const struct testcase_t *);$/;"	m	struct:testcase_setup_t
setup_openssl_threading	crypto.c	/^setup_openssl_threading(void)$/;"	f	file:
sev_to_string	log.c	/^sev_to_string(int severity)$/;"	f	file:
severities	log.c	/^  log_severity_list_t *severities; \/**< Which severity of messages should we$/;"	m	struct:logfile_t	file:
severity	log.c	/^  int severity; \/**< The severity of the message *\/$/;"	m	struct:pending_log_message_t	file:
sgx_accept	TorSGX.cpp	/^int sgx_accept(int s, struct sockaddr *addr, int *addrlen)$/;"	f
sgx_authority_certificate	tor-gencert.c	/^char *sgx_authority_certificate;$/;"	v
sgx_bind	TorSGX.cpp	/^int sgx_bind(int s, const struct sockaddr *addr, int addrlen)$/;"	f
sgx_calloc	TorSGX.cpp	/^void *sgx_calloc(int m_cnt, int m_size)$/;"	f
sgx_chdir	TorSGX.cpp	/^int sgx_chdir(const char *path)$/;"	f
sgx_check_remote_accept_list	TorSGX.cpp	/^int sgx_check_remote_accept_list(unsigned long ip)$/;"	f
sgx_chmod	TorSGX.cpp	/^int sgx_chmod(const char *pathname, int mode)$/;"	f
sgx_clock	TorSGX.cpp	/^long sgx_clock(void)$/;"	f
sgx_clock_gettime	TorSGX.cpp	/^int sgx_clock_gettime(clockid_t clk_id, struct timespec *tp)$/;"	f
sgx_close	TorSGX.cpp	/^int sgx_close(int fd)$/;"	f
sgx_connect	TorSGX.cpp	/^int sgx_connect(int s, const struct sockaddr *addr, int addrlen)$/;"	f
sgx_dup2	TorSGX.cpp	/^int sgx_dup2(int oldfd, int newfd)$/;"	f
sgx_environ	TorSGX.cpp	/^char ***sgx_environ(void)$/;"	f
sgx_epoll_create	TorSGX.cpp	/^int sgx_epoll_create(int size)$/;"	f
sgx_epoll_ctl	TorSGX.cpp	/^int sgx_epoll_ctl(int epfd, int op, int fd, void *event)$/;"	f
sgx_epoll_wait	TorSGX.cpp	/^int sgx_epoll_wait(int epfd, void *events, int maxevents, int timeout)$/;"	f
sgx_errno	orconfig.h	2444;"	d
sgx_eventfd	TorSGX.cpp	/^int sgx_eventfd(unsigned int initval, int flags)$/;"	f
sgx_exit	TorSGX.cpp	/^void sgx_exit(int exit_status)$/;"	f
sgx_fclose	TorSGX.cpp	/^int sgx_fclose(sgx_file *f)$/;"	f
sgx_fdopen	TorSGX.cpp	/^sgx_file *sgx_fdopen(int fd, const char *format)$/;"	f
sgx_file	orconfig.h	/^} sgx_file;$/;"	t	typeref:struct:_sgx_file
sgx_fileFMap	TorSGX.cpp	/^map<int, sgx_file*> sgx_fileFMap;$/;"	v
sgx_fileNMap	TorSGX.cpp	/^map<string, int> sgx_fileNMap;$/;"	v
sgx_fopen	TorSGX.cpp	/^sgx_file *sgx_fopen(const char *fname, const char *mode)$/;"	f
sgx_fork	TorSGX.cpp	/^unsigned int sgx_fork(void)$/;"	f
sgx_fputs	TorSGX.cpp	/^int sgx_fputs(const char *str, sgx_file *f)$/;"	f
sgx_free	TorSGX.cpp	/^void sgx_free(void *ptr)$/;"	f
sgx_freeaddrinfo	TorSGX.cpp	/^void sgx_freeaddrinfo(void *res)$/;"	f
sgx_fstat	TorSGX.cpp	/^int sgx_fstat(int fd, struct stat *_Stat)$/;"	f
sgx_ftime	TorSGX.cpp	/^void sgx_ftime(struct timeb *tb, int sizetb)$/;"	f
sgx_get_current_time	TorSGX.cpp	/^void sgx_get_current_time(struct timeval *t)$/;"	f
sgx_get_file	TorSGX.cpp	/^sgx_file *sgx_get_file(const char *pathname)$/;"	f
sgx_get_torrc	TorSGX.cpp	/^char *sgx_get_torrc(void)$/;"	f
sgx_get_windows_conf_root	TorSGX.cpp	/^char *sgx_get_windows_conf_root(void)$/;"	f
sgx_getaddrinfo	TorSGX.cpp	/^int sgx_getaddrinfo(const char *node, const char *service, const void *hints, void **res)$/;"	f
sgx_getegid	TorSGX.cpp	/^unsigned int sgx_getegid(void)$/;"	f
sgx_getenv	TorSGX.cpp	/^char *sgx_getenv(const char *env)$/;"	f
sgx_geteuid	TorSGX.cpp	/^unsigned int sgx_geteuid(void)$/;"	f
sgx_getgid	TorSGX.cpp	/^unsigned int sgx_getgid(void)$/;"	f
sgx_getgroups	TorSGX.cpp	/^int sgx_getgroups(int size, unsigned int *list, int list_num)$/;"	f
sgx_gethostbyname	TorSGX.cpp	/^struct hostent *sgx_gethostbyname(const char *name)$/;"	f
sgx_gethostname	TorSGX.cpp	/^int sgx_gethostname(char *name, size_t namelen)$/;"	f
sgx_getpid	TorSGX.cpp	/^unsigned int sgx_getpid(void)$/;"	f
sgx_getprotobynumber	TorSGX.cpp	/^void sgx_getprotobynumber(int number, void *proto, int proto_len, char *proto_name, int proto_name_len)$/;"	f
sgx_getservbyname	TorSGX.cpp	/^void sgx_getservbyname(const char *name, int name_len, const char *proto, int proto_len, void *serv_ptr, int serv_len)$/;"	f
sgx_getsockname	TorSGX.cpp	/^int sgx_getsockname(int s,  struct sockaddr *name, int *namelen)$/;"	f
sgx_getsockopt	TorSGX.cpp	/^int sgx_getsockopt(int s, int level, int optname, char *optval, int* optlen)$/;"	f
sgx_gettimeofday	TorSGX.cpp	/^int sgx_gettimeofday(struct timeval *tv)$/;"	f
sgx_getuid	TorSGX.cpp	/^unsigned int sgx_getuid(void)$/;"	f
sgx_gmtime	TorSGX.cpp	/^struct tm * sgx_gmtime(const time_t *timep)$/;"	f
sgx_htonl	TorSGX.cpp	/^unsigned long sgx_htonl(unsigned long hostlong)$/;"	f
sgx_htons	TorSGX.cpp	/^unsigned short sgx_htons(unsigned short hostshort)$/;"	f
sgx_identity_key	tor-gencert.c	/^char *sgx_identity_key;$/;"	v
sgx_listen	TorSGX.cpp	/^int sgx_listen(int s, int backlog)$/;"	f
sgx_localtime	TorSGX.cpp	/^struct tm * sgx_localtime(const time_t *timep)$/;"	f
sgx_lseek	TorSGX.cpp	/^off_t sgx_lseek(int fildes, off_t offset, int whence)$/;"	f
sgx_malloc	TorSGX.cpp	/^void *sgx_malloc(int m_size)$/;"	f
sgx_mktime	TorSGX.cpp	/^time_t sgx_mktime(struct tm *timeptr)$/;"	f
sgx_ntohl	TorSGX.cpp	/^unsigned long sgx_ntohl(unsigned long netlong)$/;"	f
sgx_ntohs	TorSGX.cpp	/^unsigned short sgx_ntohs(unsigned short netshort)$/;"	f
sgx_open	TorSGX.cpp	/^int sgx_open(const char *pathname, int flags, unsigned mode)$/;"	f
sgx_pipe	TorSGX.cpp	/^int sgx_pipe(int pipefd[2])$/;"	f
sgx_poll	TorSGX.cpp	/^int sgx_poll(void *fds, int fd_size, int nfds, int timeout)$/;"	f
sgx_process_msg_all	TorSGX.cpp	/^int sgx_process_msg_all(const ra_samp_request_header_t *p_req, int p_req_size, ra_samp_response_header_t **p_resp, uint32_t p_resp_size) {$/;"	f
sgx_pthread_create	TorSGX.cpp	/^int sgx_pthread_create(void (*fn)(void *), int num, void *port, int port_len)$/;"	f
sgx_pthread_exit	TorSGX.cpp	/^void sgx_pthread_exit(void *retval)$/;"	f
sgx_pthread_getspecific	TorSGX.cpp	/^void *sgx_pthread_getspecific(pthread_key_t key)$/;"	f
sgx_pthread_setspecific	TorSGX.cpp	/^int sgx_pthread_setspecific(pthread_key_t key, const void *value)$/;"	f
sgx_rand	TorSGX.cpp	/^long sgx_rand(void)$/;"	f
sgx_read	TorSGX.cpp	/^int sgx_read(int fd, void *buf, int n)$/;"	f
sgx_realloc	TorSGX.cpp	/^void *sgx_realloc(void *old_mem, int m_size)$/;"	f
sgx_recv	TorSGX.cpp	/^int sgx_recv(int s, char *buf, int len, int flags)$/;"	f
sgx_recvfrom	TorSGX.cpp	/^int sgx_recvfrom(int s, void *msg, int len, int flags, struct sockaddr *fr, int *in_len)$/;"	f
sgx_rename	TorSGX.cpp	/^int sgx_rename(const char *from, const char *to)$/;"	f
sgx_seal_files	TorSGX.cpp	/^void sgx_seal_files(char *fname, void *fcont)$/;"	f
sgx_select	TorSGX.cpp	/^int sgx_select(int nfds, void *rfd, void *wfd,  void *efd, int fd_size, struct timeval *timeout)$/;"	f
sgx_send	TorSGX.cpp	/^int sgx_send(int s, const char *buf, int len, int flags)$/;"	f
sgx_sendto	TorSGX.cpp	/^int sgx_sendto(int s, const void *msg, int len, int flags, const struct sockaddr *to, int tolen)$/;"	f
sgx_setegid	TorSGX.cpp	/^int sgx_setegid(unsigned int gid)$/;"	f
sgx_seteuid	TorSGX.cpp	/^int sgx_seteuid(unsigned int uid)$/;"	f
sgx_setgid	TorSGX.cpp	/^int sgx_setgid(unsigned int gid)$/;"	f
sgx_setgroups	TorSGX.cpp	/^int sgx_setgroups(size_t size, const unsigned int *list, int list_num)$/;"	f
sgx_setsid	TorSGX.cpp	/^unsigned int sgx_setsid(void)$/;"	f
sgx_setsockopt	TorSGX.cpp	/^int sgx_setsockopt(int s, int level, int optname, const char *optval, int optlen)$/;"	f
sgx_setuid	TorSGX.cpp	/^int sgx_setuid(unsigned int uid)$/;"	f
sgx_shutdown	TorSGX.cpp	/^int sgx_shutdown(int fd, int how)$/;"	f
sgx_sigaction	TorSGX.cpp	/^int sgx_sigaction(int signum, const void *act, void *oldact)$/;"	f
sgx_sigemptyset	TorSGX.cpp	/^int sgx_sigemptyset(void *set)$/;"	f
sgx_sigfillset	TorSGX.cpp	/^int sgx_sigfillset(void *set)$/;"	f
sgx_signal	TorSGX.cpp	/^void (*sgx_signal(int signum, void(*_Func)(int)))(int)$/;"	f
sgx_signal_handle_caller	TorSGX.cpp	/^void sgx_signal_handle_caller(int signum, int f_id)$/;"	f
sgx_signing_key	tor-gencert.c	/^char *sgx_signing_key;$/;"	v
sgx_sleep	TorSGX.cpp	/^void sgx_sleep(unsigned int s)$/;"	f
sgx_socket	TorSGX.cpp	/^int sgx_socket(int af, int type, int protocol)$/;"	f
sgx_socketpair	TorSGX.cpp	/^int sgx_socketpair(int domain, int type, int protocol, int *sv)$/;"	f
sgx_start_fingerprint	TorSGX.cpp	/^void sgx_start_fingerprint(char *fingerprint, char *data_dir, const char *app_torrc, unsigned long long app_errno)$/;"	f
sgx_start_gencert	TorSGX.cpp	/^void  sgx_start_gencert(char * tor_cert, unsigned long long  app_errno, const char *month, const char *address)$/;"	f
sgx_start_remote_attestation_server	TorSGX.cpp	/^void sgx_start_remote_attestation_server(int remote_server_port, void *sgx_cert_cont, int sgx_cert_size, $/;"	f
sgx_stat	TorSGX.cpp	/^int sgx_stat(const char * _Filename, struct stat * _Stat)$/;"	f
sgx_sysctl	TorSGX.cpp	/^int sgx_sysctl(int *name, int nlen, void *oldval, int oldval_len, size_t *oldlenp, void *newval, size_t newlen)$/;"	f
sgx_time	TorSGX.cpp	/^time_t sgx_time(time_t *timep)$/;"	f
sgx_unlink	TorSGX.cpp	/^int sgx_unlink(const char *to)$/;"	f
sgx_unseal_files	TorSGX.cpp	/^void sgx_unseal_files(char *fname, void *fcont)$/;"	f
sgx_vsnprintf	TorSGX.cpp	/^int sgx_vsnprintf(char *s1, size_t n, const char *s2, __va_list v)$/;"	f
sgx_waitpid	TorSGX.cpp	/^unsigned int sgx_waitpid(unsigned int pid, int *_status, int status_len, int options)$/;"	f
sgx_write	TorSGX.cpp	/^int sgx_write(int fd, const void *buf, int n)$/;"	f
sha1	crypto.c	/^    SHA_CTX sha1; \/**< state for SHA1 *\/$/;"	m	union:crypto_digest_t::__anon44	file:
sha2	crypto.c	/^    SHA256_CTX sha2; \/**< state for SHA256 *\/$/;"	m	union:crypto_digest_t::__anon44	file:
sha512_LOAD64_BE	ed25519-hash.h	/^sha512_LOAD64_BE(const uint8_t *p) {$/;"	f
sha512_ROTR64	ed25519-hash.h	/^sha512_ROTR64(uint64_t x, int k) {$/;"	f
sha512_STORE64_BE	ed25519-hash.h	/^sha512_STORE64_BE(uint8_t *p, uint64_t v) {$/;"	f
sha512_blocks	ed25519-hash.h	/^sha512_blocks(sha512_state *S, const uint8_t *in, size_t blocks) {$/;"	f
sha512_constants	ed25519-hash.h	/^static const uint64_t sha512_constants[80] = {$/;"	v
sha512_state	ed25519-hash.h	/^} sha512_state;$/;"	t	typeref:struct:sha512_state_t
sha512_state_t	ed25519-hash.h	/^typedef struct sha512_state_t {$/;"	s
shl128	ed25519-donna-portable.h	47;"	d
shl128	ed25519-donna-portable.h	68;"	d
shl128	ed25519-donna-portable.h	82;"	d
shl128_pair	ed25519-donna-portable.h	45;"	d
shl128_pair	ed25519-donna-portable.h	66;"	d
shl128_pair	ed25519-donna-portable.h	80;"	d
short_policy_entry_t	or.h	/^typedef struct short_policy_entry_t {$/;"	s
short_policy_entry_t	or.h	/^} short_policy_entry_t;$/;"	t	typeref:struct:short_policy_entry_t
short_policy_free	policies.c	/^short_policy_free(short_policy_t *policy)$/;"	f
short_policy_is_reject_star	policies.c	/^short_policy_is_reject_star(const short_policy_t *policy)$/;"	f
short_policy_t	or.h	/^typedef struct short_policy_t {$/;"	s
short_policy_t	or.h	/^} short_policy_t;$/;"	t	typeref:struct:short_policy_t
should_add_entry_nodes	entrynodes.c	/^static int should_add_entry_nodes = 0;$/;"	v	file:
should_apply_guardfraction	entrynodes.c	/^should_apply_guardfraction(const networkstatus_t *ns)$/;"	f
should_cache_old_descriptors	routerlist.c	2944;"	d	file:
should_close	connection_edge.h	/^  int should_close;$/;"	m	struct:__anon86
should_delay_dir_fetches	networkstatus.c	/^should_delay_dir_fetches(const or_options_t *options, const char **msg_out)$/;"	f
should_log_function_name	log.c	/^should_log_function_name(log_domain_mask_t domain, int severity)$/;"	f	file:
should_make_new_ed_keys	routerkeys.c	/^should_make_new_ed_keys(const or_options_t *options, const time_t now)$/;"	f
should_rebuild_md_cache	microdesc.c	/^should_rebuild_md_cache(microdesc_cache_t *cache)$/;"	f	file:
should_record_bridge_info	geoip.c	/^should_record_bridge_info(const or_options_t *options)$/;"	f
should_refuse_unknown_exits	router.c	/^should_refuse_unknown_exits(const or_options_t *options)$/;"	f
should_time_request	cpuworker.c	/^should_time_request(uint16_t onionskin_type)$/;"	f	file:
should_use_EVP	aes.c	/^static int should_use_EVP = 0;$/;"	v	file:
should_use_create_fast_for_circuit	circuitbuild.c	/^should_use_create_fast_for_circuit(origin_circuit_t *circ)$/;"	f	file:
should_use_directory_guards	directory.c	/^should_use_directory_guards(const or_options_t *options)$/;"	f	file:
should_use_openssl_CTR	aes.c	/^static int should_use_openssl_CTR = 0;$/;"	v	file:
shr128	ed25519-donna-portable.h	46;"	d
shr128	ed25519-donna-portable.h	67;"	d
shr128	ed25519-donna-portable.h	81;"	d
shr128_pair	ed25519-donna-portable.h	44;"	d
shr128_pair	ed25519-donna-portable.h	65;"	d
shr128_pair	ed25519-donna-portable.h	79;"	d
shutdown_time	hibernate.c	/^static time_t shutdown_time = 0;$/;"	v	file:
si_addr	orconfig.h	/^	    void *si_addr;	\/* Faulting insn\/memory ref.  *\/$/;"	m	struct:siginfo::__anon45::__anon50
si_band	orconfig.h	/^	    long int si_band;	\/* Band event for SIGPOLL.  *\/$/;"	m	struct:siginfo::__anon45::__anon51
si_code	orconfig.h	/^    int si_code;		\/* Signal code.  *\/$/;"	m	struct:siginfo
si_errno	orconfig.h	/^    int si_errno;		\/* If non-zero, an errno value associated with$/;"	m	struct:siginfo
si_fd	orconfig.h	/^	    int si_fd;$/;"	m	struct:siginfo::__anon45::__anon51
si_overrun	orconfig.h	/^	    int si_overrun;	\/* Overrun count.  *\/$/;"	m	struct:siginfo::__anon45::__anon47
si_pid	orconfig.h	/^	    __pid_t si_pid;	\/* Sending process ID.  *\/$/;"	m	struct:siginfo::__anon45::__anon46
si_pid	orconfig.h	/^	    __pid_t si_pid;	\/* Sending process ID.  *\/$/;"	m	struct:siginfo::__anon45::__anon48
si_pid	orconfig.h	/^	    __pid_t si_pid;	\/* Which child.  *\/$/;"	m	struct:siginfo::__anon45::__anon49
si_signo	orconfig.h	/^    int si_signo;		\/* Signal number.  *\/$/;"	m	struct:siginfo
si_sigval	orconfig.h	/^	    sigval_t si_sigval;	\/* Signal value.  *\/$/;"	m	struct:siginfo::__anon45::__anon47
si_sigval	orconfig.h	/^	    sigval_t si_sigval;	\/* Signal value.  *\/$/;"	m	struct:siginfo::__anon45::__anon48
si_status	orconfig.h	/^	    int si_status;	\/* Exit value or signal.  *\/$/;"	m	struct:siginfo::__anon45::__anon49
si_stime	orconfig.h	/^	    __clock_t si_stime;$/;"	m	struct:siginfo::__anon45::__anon49
si_tid	orconfig.h	/^	    int si_tid;		\/* Timer ID.  *\/$/;"	m	struct:siginfo::__anon45::__anon47
si_uid	orconfig.h	/^	    __uid_t si_uid;	\/* Real user ID of sending process.  *\/$/;"	m	struct:siginfo::__anon45::__anon46
si_uid	orconfig.h	/^	    __uid_t si_uid;	\/* Real user ID of sending process.  *\/$/;"	m	struct:siginfo::__anon45::__anon48
si_uid	orconfig.h	/^	    __uid_t si_uid;	\/* Real user ID of sending process.  *\/$/;"	m	struct:siginfo::__anon45::__anon49
si_utime	orconfig.h	/^	    __clock_t si_utime;$/;"	m	struct:siginfo::__anon45::__anon49
sid	link_handshake.h	/^  uint8_t sid[32];$/;"	m	struct:auth1_st
sig	control.c	/^  int sig;$/;"	m	struct:signal_t	file:
sig	crypto_ed25519.h	/^  uint8_t sig[ED25519_SIG_LEN];$/;"	m	struct:__anon92
sig	link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) sig;$/;"	m	struct:auth1_st
sig	link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) sig;$/;"	m	struct:rsa_ed_crosscert_st
sig	orconfig.h	/^        unsigned long sig[_NSIG_WORDS];$/;"	m	struct:__anon52
sig_bad	torcert.h	/^  unsigned sig_bad : 1;$/;"	m	struct:tor_cert_st
sig_len	link_handshake.h	/^  uint8_t sig_len;$/;"	m	struct:rsa_ed_crosscert_st
sig_ok	torcert.h	/^  unsigned sig_ok : 1;$/;"	m	struct:tor_cert_st
sig_rl	service_provider.h	/^    uint8_t                     sig_rl[];$/;"	m	struct:sample_ra_msg2_t
sig_rl_size	service_provider.h	/^    uint32_t                    sig_rl_size;$/;"	m	struct:sample_ra_msg2_t
sigaction	orconfig.h	/^struct sigaction {$/;"	s
siginfo	orconfig.h	/^typedef struct siginfo$/;"	s
siginfo_t	orconfig.h	/^  } siginfo_t;$/;"	t	typeref:struct:siginfo
sign	crypto_ed25519.c	/^  int (*sign)(unsigned char *, const unsigned char *, size_t,$/;"	m	struct:__anon123	file:
sign_gb_ga	service_provider.h	/^    sample_ec_sign256_t         sign_gb_ga; \/\/ In little endian$/;"	m	struct:sample_ra_msg2_t
sign_type	ias_ra.h	/^    uint16_t                sign_type;              \/\/ 2$/;"	m	struct:sample_quote_t
signal_callback	main.c	/^signal_callback(evutil_socket_t fd, short events, void *arg)$/;"	f	file:
signal_event	main.c	/^  struct event *signal_event;$/;"	m	struct:__anon108	typeref:struct:__anon108::event	file:
signal_handlers	main.c	/^} signal_handlers[] = {$/;"	v	typeref:struct:__anon108	file:
signal_name	control.c	/^  const char *signal_name;$/;"	m	struct:signal_t	file:
signal_t	control.c	/^struct signal_t {$/;"	s	file:
signal_table	control.c	/^static const struct signal_t signal_table[] = {$/;"	v	typeref:struct:signal_t	file:
signal_value	main.c	/^  int signal_value;$/;"	m	struct:__anon108	file:
signature	crypto_ed25519.h	/^  ed25519_signature_t signature;$/;"	m	struct:__anon96
signature	ed25519_cert.h	/^  uint8_t signature[64];$/;"	m	struct:ed25519_cert_st
signature	ias_ra.h	/^    uint8_t                 signature[];            \/\/ 436$/;"	m	struct:sample_quote_t
signature	or.h	/^  char *signature;$/;"	m	struct:document_signature_t
signature_len	ias_ra.h	/^    uint32_t                signature_len;          \/\/ 432$/;"	m	struct:sample_quote_t
signature_len	or.h	/^  int signature_len;$/;"	m	struct:document_signature_t
signatures	or.h	/^  strmap_t *signatures; \/**< Map from flavor name to list of$/;"	m	struct:ns_detached_signatures_t
signed_desc_append_to_journal	routerlist.c	/^signed_desc_append_to_journal(signed_descriptor_t *desc,$/;"	f	file:
signed_desc_digest_is_recognized	routerlist.c	/^signed_desc_digest_is_recognized(signed_descriptor_t *desc)$/;"	f	file:
signed_descriptor_body	or.h	/^  char *signed_descriptor_body;$/;"	m	struct:signed_descriptor_t
signed_descriptor_digest	or.h	/^  char signed_descriptor_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
signed_descriptor_free	routerlist.c	/^signed_descriptor_free(signed_descriptor_t *sd)$/;"	f	file:
signed_descriptor_from_routerinfo	routerlist.c	/^signed_descriptor_from_routerinfo(routerinfo_t *ri)$/;"	f	file:
signed_descriptor_get_annotations	routerlist.c	/^signed_descriptor_get_annotations(const signed_descriptor_t *desc)$/;"	f
signed_descriptor_get_body	routerlist.c	/^signed_descriptor_get_body(const signed_descriptor_t *desc)$/;"	f
signed_descriptor_get_body_impl	routerlist.c	/^signed_descriptor_get_body_impl(const signed_descriptor_t *desc,$/;"	f	file:
signed_descriptor_len	or.h	/^  size_t signed_descriptor_len;$/;"	m	struct:signed_descriptor_t
signed_descriptor_t	or.h	/^typedef struct signed_descriptor_t {$/;"	s
signed_descriptor_t	or.h	/^} signed_descriptor_t;$/;"	t	typeref:struct:signed_descriptor_t
signed_descs_update_status_from_consensus_networkstatus	networkstatus.c	/^signed_descs_update_status_from_consensus_networkstatus(smartlist_t *descs)$/;"	f
signed_key	torcert.h	/^  ed25519_public_key_t signed_key;$/;"	m	struct:tor_cert_st
signewnym_impl	main.c	/^signewnym_impl(time_t now)$/;"	f	file:
signewnym_is_pending	main.c	/^static int signewnym_is_pending = 0;$/;"	v	file:
signing_key	or.h	/^  crypto_pk_t *signing_key;$/;"	m	struct:authority_cert_t
signing_key	tor-gencert.c	/^EVP_PKEY *signing_key = NULL;$/;"	v
signing_key	torcert.h	/^  ed25519_public_key_t signing_key;$/;"	m	struct:tor_cert_st
signing_key_cert	or.h	/^  struct tor_cert_st *signing_key_cert;$/;"	m	struct:__anon14	typeref:struct:__anon14::tor_cert_st
signing_key_cert	or.h	/^  struct tor_cert_st *signing_key_cert;$/;"	m	struct:extrainfo_t	typeref:struct:extrainfo_t::tor_cert_st
signing_key_cert	routerkeys.c	/^static tor_cert_t *signing_key_cert = NULL;$/;"	v	file:
signing_key_digest	or.h	/^  char signing_key_digest[DIGEST_LEN];$/;"	m	struct:authority_cert_t
signing_key_digest	or.h	/^  char signing_key_digest[DIGEST_LEN];$/;"	m	struct:document_signature_t
signing_key_included	torcert.h	/^  unsigned signing_key_included : 1;$/;"	m	struct:tor_cert_st
sigs	or.h	/^  smartlist_t *sigs;$/;"	m	struct:networkstatus_voter_info_t
sigsafe_log_fds	log.c	/^static int sigsafe_log_fds[MAX_SIGSAFE_FDS] = { STDERR_FILENO };$/;"	v	file:
sigset_t	orconfig.h	/^typedef unsigned long sigset_t;$/;"	t
sigset_t	orconfig.h	/^} sigset_t;$/;"	t	typeref:struct:__anon52
sigsys_debugging	sandbox.c	/^sigsys_debugging(int nr, siginfo_t *info, void *void_context)$/;"	f	file:
sigval	orconfig.h	/^typedef union sigval$/;"	u
sigval_t	orconfig.h	/^  } sigval_t;$/;"	t	typeref:union:sigval
sin6_addr	compat.h	/^  struct in6_addr sin6_addr;$/;"	m	struct:sockaddr_in6	typeref:struct:sockaddr_in6::in6_addr
sin6_addr	orconfig.h	/^     struct in6_addr sin6_addr;  \/* IPv6 address *\/$/;"	m	struct:sockaddr_in6	typeref:struct:sockaddr_in6::in6_addr
sin6_family	compat.h	/^  sa_family_t sin6_family;$/;"	m	struct:sockaddr_in6
sin6_flowinfo	orconfig.h	/^     __uint32_t sin6_flowinfo;     \/* IPv6 flow information *\/$/;"	m	struct:sockaddr_in6
sin6_port	compat.h	/^  uint16_t sin6_port;$/;"	m	struct:sockaddr_in6
sin6_port	orconfig.h	/^     in_port_t sin6_port;        \/* Transport layer port # *\/$/;"	m	struct:sockaddr_in6
sin6_scope_id	orconfig.h	/^     __uint32_t sin6_scope_id;     \/* IPv6 scope-id *\/$/;"	m	struct:sockaddr_in6
sin_addr	orconfig.h	/^	struct in_addr sin_addr;            \/* Internet address.  *\/$/;"	m	struct:sockaddr_in	typeref:struct:sockaddr_in::in_addr
sin_port	orconfig.h	/^	in_port_t sin_port;                 \/* Port number.  *\/$/;"	m	struct:sockaddr_in
sin_zero	orconfig.h	/^	unsigned char sin_zero[sizeof(struct sockaddr) -__SOCKADDR_COMMON_SIZE - sizeof (in_port_t) - sizeof (struct in_addr)];$/;"	m	struct:sockaddr_in
since	rephist.c	/^  time_t since;$/;"	m	struct:link_history_t	file:
since	rephist.c	/^  time_t since;$/;"	m	struct:or_history_t	file:
single_conn_free_bytes	circuitlist.c	/^single_conn_free_bytes(connection_t *conn)$/;"	f	file:
siphash24	csiphash.c	/^uint64_t siphash24(const void *src, unsigned long src_sz, const struct sipkey *key) {$/;"	f
siphash24g	csiphash.c	/^uint64_t siphash24g(const void *src, unsigned long src_sz) {$/;"	f
siphash_set_global_key	csiphash.c	/^void siphash_set_global_key(const struct sipkey *key)$/;"	f
sipkey	siphash.h	/^struct sipkey {$/;"	s
sival_int	orconfig.h	/^    int sival_int;$/;"	m	union:sigval
sival_ptr	orconfig.h	/^    void *sival_ptr;$/;"	m	union:sigval
size	compat.h	/^  size_t size; \/**< Size of the file. *\/$/;"	m	struct:tor_mmap_t
size	confparse.h	/^  size_t size; \/**< Size of the struct that everything gets parsed into. *\/$/;"	m	struct:config_format_t
size	ed25519-donna-batchverify.h	/^	size_t size;$/;"	m	struct:batch_heap_t
size	network_ra.h	/^    uint32_t size;  \/\/size of the response body$/;"	m	struct:_ra_samp_response_header_t
size	network_ra.h	/^    uint32_t size; \/\/size of request body,$/;"	m	struct:_ra_samp_request_header_t
size_mul_check	util.c	/^size_mul_check(const size_t x, const size_t y)$/;"	f	file:
sized_chunk_t	util.h	/^typedef struct sized_chunk_t {$/;"	s
sized_chunk_t	util.h	/^} sized_chunk_t;$/;"	t	typeref:struct:sized_chunk_t
sk_key	service_provider.h	/^    sample_ec_key_128bit_t      sk_key;\/\/ Shared secret key for encryption$/;"	m	struct:_sp_db_item_t
skey_header	pwbox.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) skey_header;$/;"	m	struct:pwbox_encoded_st
slide	ge_double_scalarmult.c	/^static void slide(signed char *r,const unsigned char *a)$/;"	f	file:
slog	link_handshake.h	/^  uint8_t slog[32];$/;"	m	struct:auth1_st
smartlist_add	container.c	/^smartlist_add(smartlist_t *sl, void *element)$/;"	f
smartlist_add_all	container.c	/^smartlist_add_all(smartlist_t *s1, const smartlist_t *s2)$/;"	f
smartlist_add_asprintf	util.c	/^smartlist_add_asprintf(struct smartlist_t *sl, const char *pattern, ...)$/;"	f
smartlist_add_vasprintf	util.c	/^smartlist_add_vasprintf(struct smartlist_t *sl, const char *pattern,$/;"	f
smartlist_bsearch	container.c	/^smartlist_bsearch(smartlist_t *sl, const void *key,$/;"	f
smartlist_bsearch_idx	container.c	/^smartlist_bsearch_idx(const smartlist_t *sl, const void *key,$/;"	f
smartlist_choose	crypto.c	/^smartlist_choose(const smartlist_t *sl)$/;"	f
smartlist_choose_node_by_bandwidth_weights	routerlist.c	/^smartlist_choose_node_by_bandwidth_weights(const smartlist_t *sl,$/;"	f	file:
smartlist_clear	container.c	/^smartlist_clear(smartlist_t *sl)$/;"	f
smartlist_contains	container.c	/^smartlist_contains(const smartlist_t *sl, const void *element)$/;"	f
smartlist_contains_digest	container.c	/^smartlist_contains_digest(const smartlist_t *sl, const char *element)$/;"	f
smartlist_contains_int_as_string	container.c	/^smartlist_contains_int_as_string(const smartlist_t *sl, int num)$/;"	f
smartlist_contains_string	container.c	/^smartlist_contains_string(const smartlist_t *sl, const char *element)$/;"	f
smartlist_contains_string_case	container.c	/^smartlist_contains_string_case(const smartlist_t *sl, const char *element)$/;"	f
smartlist_del	container.c	/^smartlist_del(smartlist_t *sl, int idx)$/;"	f
smartlist_del_keeporder	container.c	/^smartlist_del_keeporder(smartlist_t *sl, int idx)$/;"	f
smartlist_ensure_capacity	container.c	/^smartlist_ensure_capacity(smartlist_t *sl, int size)$/;"	f	file:
smartlist_get	container.h	/^static INLINE void *smartlist_get(const smartlist_t *sl, int idx) {$/;"	f
smartlist_get	container.h	78;"	d
smartlist_get_most_frequent	container.h	101;"	d
smartlist_get_most_frequent_	container.c	/^smartlist_get_most_frequent_(const smartlist_t *sl,$/;"	f
smartlist_get_most_frequent_digest256	container.c	/^smartlist_get_most_frequent_digest256(smartlist_t *sl)$/;"	f
smartlist_get_most_frequent_string	container.c	/^smartlist_get_most_frequent_string(smartlist_t *sl)$/;"	f
smartlist_get_most_frequent_string_	container.c	/^smartlist_get_most_frequent_string_(smartlist_t *sl, int *count_out)$/;"	f
smartlist_heapify	container.c	/^smartlist_heapify(smartlist_t *sl,$/;"	f	file:
smartlist_insert	container.c	/^smartlist_insert(smartlist_t *sl, int idx, void *val)$/;"	f
smartlist_intersect	container.c	/^smartlist_intersect(smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_ints_eq	container.c	/^smartlist_ints_eq(const smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_join_strings	container.c	/^smartlist_join_strings(smartlist_t *sl, const char *join,$/;"	f
smartlist_join_strings2	container.c	/^smartlist_join_strings2(smartlist_t *sl, const char *join,$/;"	f
smartlist_len	container.h	/^static INLINE int smartlist_len(const smartlist_t *sl) {$/;"	f
smartlist_len	container.h	77;"	d
smartlist_overlap	container.c	/^smartlist_overlap(const smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_pop_last	container.c	/^smartlist_pop_last(smartlist_t *sl)$/;"	f
smartlist_pos	container.c	/^smartlist_pos(const smartlist_t *sl, const void *element)$/;"	f
smartlist_pqueue_add	container.c	/^smartlist_pqueue_add(smartlist_t *sl,$/;"	f
smartlist_pqueue_assert_ok	container.c	/^smartlist_pqueue_assert_ok(smartlist_t *sl,$/;"	f
smartlist_pqueue_pop	container.c	/^smartlist_pqueue_pop(smartlist_t *sl,$/;"	f
smartlist_pqueue_remove	container.c	/^smartlist_pqueue_remove(smartlist_t *sl,$/;"	f
smartlist_remove	container.c	/^smartlist_remove(smartlist_t *sl, const void *element)$/;"	f
smartlist_reverse	container.c	/^smartlist_reverse(smartlist_t *sl)$/;"	f
smartlist_set	container.h	/^static INLINE void smartlist_set(smartlist_t *sl, int idx, void *val) {$/;"	f
smartlist_set	container.h	79;"	d
smartlist_shuffle	crypto.c	/^smartlist_shuffle(smartlist_t *sl)$/;"	f
smartlist_sort	container.c	/^smartlist_sort(smartlist_t *sl, int (*compare)(const void **a, const void **b))$/;"	f
smartlist_sort_digests	container.c	/^smartlist_sort_digests(smartlist_t *sl)$/;"	f
smartlist_sort_digests256	container.c	/^smartlist_sort_digests256(smartlist_t *sl)$/;"	f
smartlist_sort_pointers	container.c	/^smartlist_sort_pointers(smartlist_t *sl)$/;"	f
smartlist_sort_strings	container.c	/^smartlist_sort_strings(smartlist_t *sl)$/;"	f
smartlist_split_string	container.c	/^smartlist_split_string(smartlist_t *sl, const char *str, const char *sep,$/;"	f
smartlist_string_pos	container.c	/^smartlist_string_pos(const smartlist_t *sl, const char *element)$/;"	f
smartlist_string_remove	container.c	/^smartlist_string_remove(smartlist_t *sl, const char *element)$/;"	f
smartlist_strings_eq	container.c	/^smartlist_strings_eq(const smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_subtract	container.c	/^smartlist_subtract(smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_swap	container.h	/^static INLINE void smartlist_swap(smartlist_t *sl, int idx1, int idx2)$/;"	f
smartlist_t	container.h	/^typedef struct smartlist_t {$/;"	s
smartlist_t	container.h	/^} smartlist_t;$/;"	t	typeref:struct:smartlist_t
smartlist_uniq	container.c	/^smartlist_uniq(smartlist_t *sl,$/;"	f
smartlist_uniq_digests	container.c	/^smartlist_uniq_digests(smartlist_t *sl)$/;"	f
smartlist_uniq_digests256	container.c	/^smartlist_uniq_digests256(smartlist_t *sl)$/;"	f
smartlist_uniq_strings	container.c	/^smartlist_uniq_strings(smartlist_t *sl)$/;"	f
smk_key	service_provider.h	/^    sample_ec_key_128bit_t      smk_key;\/\/ Used only for SIGMA protocol$/;"	m	struct:_sp_db_item_t
smp_param	sandbox.h	/^typedef struct smp_param {$/;"	s
smp_param_t	sandbox.h	/^} smp_param_t;$/;"	t	typeref:struct:smp_param
snprintf_disallowed	TorSGX.cpp	/^volatile int snprintf_disallowed, vsnprintf_disallowed;$/;"	v
sock_alert	compat_threads.c	/^sock_alert(tor_socket_t fd)$/;"	f	file:
sock_drain	compat_threads.c	/^sock_drain(tor_socket_t fd)$/;"	f	file:
sockaddr	orconfig.h	/^typedef struct sockaddr$/;"	s
sockaddr_in	orconfig.h	/^struct sockaddr_in {$/;"	s
sockaddr_in6	compat.h	/^struct sockaddr_in6 {$/;"	s
sockaddr_in6	orconfig.h	/^struct sockaddr_in6 {$/;"	s
sockaddr_storage	orconfig.h	/^struct sockaddr_storage {$/;"	s
socket	tortls.c	/^  int socket; \/**< The underlying file descriptor for this TLS connection. *\/$/;"	m	struct:tor_tls_t	file:
socket_accounting_lock	compat.c	/^socket_accounting_lock(void)$/;"	f	file:
socket_accounting_mutex	compat.c	/^static tor_mutex_t *socket_accounting_mutex = NULL;$/;"	v	file:
socket_accounting_unlock	compat.c	/^socket_accounting_unlock(void)$/;"	f	file:
socket_family	or.h	/^  int socket_family; \/**< Address family of this connection's socket.  Usually$/;"	m	struct:connection_t
socklen_t	compat.h	/^typedef int socklen_t;$/;"	t
socklen_t	orconfig.h	/^typedef int socklen_t;$/;"	t
socks4_response_code_to_string	reasons.c	/^socks4_response_code_to_string(uint8_t code)$/;"	f
socks5_reply_status_t	compat.h	/^} socks5_reply_status_t;$/;"	t	typeref:enum:__anon126
socks5_response_code_to_string	reasons.c	/^socks5_response_code_to_string(uint8_t code)$/;"	f
socks_args	config.h	/^  smartlist_t *socks_args; \/* SOCKS arguments for the pluggable$/;"	m	struct:bridge_line_t
socks_args	entrynodes.c	/^  smartlist_t *socks_args;$/;"	m	struct:__anon122	file:
socks_iso_keep_alive	or.h	/^  unsigned int socks_iso_keep_alive : 1;$/;"	m	struct:entry_port_cfg_t
socks_password	or.h	/^  char *socks_password;$/;"	m	struct:origin_circuit_t
socks_password_len	or.h	/^  uint8_t socks_password_len;$/;"	m	struct:origin_circuit_t
socks_policy	policies.c	/^static smartlist_t *socks_policy = NULL;$/;"	v	file:
socks_policy_permits_address	policies.c	/^socks_policy_permits_address(const tor_addr_t *addr)$/;"	f
socks_prefer_no_auth	or.h	/^  unsigned int socks_prefer_no_auth : 1;$/;"	m	struct:entry_port_cfg_t
socks_prefer_no_auth	or.h	/^  unsigned int socks_prefer_no_auth : 1;$/;"	m	struct:socks_request_t
socks_request	or.h	/^  socks_request_t *socks_request; \/**< SOCKS structure describing request (AP$/;"	m	struct:entry_connection_t
socks_request_free	buffers.c	/^socks_request_free(socks_request_t *req)$/;"	f
socks_request_new	buffers.c	/^socks_request_new(void)$/;"	f
socks_request_set_socks5_error	buffers.c	/^socks_request_set_socks5_error(socks_request_t *req,$/;"	f	file:
socks_request_t	or.h	/^struct socks_request_t {$/;"	s
socks_request_t	or.h	/^typedef struct socks_request_t socks_request_t;$/;"	t	typeref:struct:socks_request_t
socks_username	or.h	/^  char *socks_username;$/;"	m	struct:origin_circuit_t
socks_username_len	or.h	/^  size_t socks_username_len;$/;"	m	struct:origin_circuit_t
socks_version	or.h	/^  uint8_t socks_version;$/;"	m	struct:socks_request_t
socks_version	transports.h	/^  int socks_version;$/;"	m	struct:transport_t
soft_limit_hit_at	hibernate.c	/^static time_t soft_limit_hit_at = 0;$/;"	v	file:
sort_version_list	routerparse.c	/^sort_version_list(smartlist_t *versions, int remove_duplicates)$/;"	f
source	addressmap.c	/^  addressmap_entry_source_bitfield_t source:3;$/;"	m	struct:__anon87	file:
sp_aes_gcm_data_t	remote_attestation_result.h	/^typedef struct sp_aes_gcm_data_t {$/;"	s
sp_aes_gcm_data_t	remote_attestation_result.h	/^} sp_aes_gcm_data_t;$/;"	t	typeref:struct:sp_aes_gcm_data_t
sp_db_item_t	service_provider.h	/^}sp_db_item_t;$/;"	t	typeref:struct:_sp_db_item_t
sp_ra_msg_status_t	service_provider.h	/^} sp_ra_msg_status_t;$/;"	t	typeref:enum:__anon63
spawn_exit	compat_pthreads.c	/^spawn_exit(void)$/;"	f
spawn_func	compat_pthreads.c	/^spawn_func(void (*func)(void *), void *data, int data_len)$/;"	f
spid	service_provider.h	/^    sample_spid_t               spid;       \/\/ In little endian$/;"	m	struct:sample_ra_msg2_t
sprintf_disallowed	TorSGX.cpp	/^volatile int sprintf_disallowed, vsprintf_disallowed;$/;"	v
sqrtm1	ge_frombytes.c	/^static const fe sqrtm1 = {$/;"	v	file:
src_wildcard	addressmap.c	/^  unsigned src_wildcard:1;$/;"	m	struct:__anon87	file:
ss_family	orconfig.h	/^    sa_family_t ss_family;      \/\/ address family$/;"	m	struct:sockaddr_storage
sscanf	TorSGX.cpp	/^int sscanf(const char *str, const char *format, ...)$/;"	f
ssize_t	torint.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	torint.h	/^typedef int64_t ssize_t;$/;"	t
ssl	tortls.c	/^  SSL *ssl; \/**< An OpenSSL SSL object. *\/$/;"	m	struct:tor_tls_t	file:
st_atime	orconfig.h	/^        time_t st_atime;$/;"	m	struct:stat
st_ctime	orconfig.h	/^        time_t st_ctime;$/;"	m	struct:stat
st_dev	orconfig.h	/^        _dev_t     st_dev;$/;"	m	struct:stat
st_gid	orconfig.h	/^        short      st_gid;$/;"	m	struct:stat
st_ino	orconfig.h	/^        _ino_t     st_ino;$/;"	m	struct:stat
st_mode	orconfig.h	/^        unsigned short st_mode;$/;"	m	struct:stat
st_mtime	orconfig.h	/^        time_t st_mtime;$/;"	m	struct:stat
st_nlink	orconfig.h	/^        short      st_nlink;$/;"	m	struct:stat
st_rdev	orconfig.h	/^        _dev_t     st_rdev;$/;"	m	struct:stat
st_size	orconfig.h	/^        _off_t     st_size;$/;"	m	struct:stat
st_uid	orconfig.h	/^        short      st_uid;$/;"	m	struct:stat
stability_last_downrated	rephist.c	/^static time_t stability_last_downrated = 0;$/;"	v	file:
stable_mtbf	dirserv.c	/^static double stable_mtbf = 0.0;$/;"	v	file:
stable_uptime	dirserv.c	/^static uint32_t stable_uptime = 0; \/* start at a safe value *\/$/;"	v	file:
start_daemon	util.c	/^start_daemon(void)$/;"	f
start_daemon_called	util.c	/^static int start_daemon_called = 0;$/;"	v	file:
start_do_list_fingerprint	main.c	/^start_do_list_fingerprint(char *data_dir)$/;"	f
start_gencert	tor-gencert.c	/^start_gencert(const char *_month, const char *_addr)$/;"	f
start_of_accounting_period_after	hibernate.c	/^start_of_accounting_period_after(time_t now)$/;"	f	file:
start_of_accounting_period_containing	hibernate.c	/^start_of_accounting_period_containing(time_t now)$/;"	f	file:
start_of_bridge_stats_interval	geoip.c	/^static time_t start_of_bridge_stats_interval;$/;"	v	file:
start_of_buffer_stats_interval	rephist.c	/^static time_t start_of_buffer_stats_interval;$/;"	v	file:
start_of_conn_stats_interval	rephist.c	/^static time_t start_of_conn_stats_interval;$/;"	v	file:
start_of_dirreq_stats_interval	geoip.c	/^static time_t start_of_dirreq_stats_interval;$/;"	v	file:
start_of_downtime	rephist.c	/^  time_t start_of_downtime;$/;"	m	struct:or_history_t	file:
start_of_entry_stats_interval	geoip.c	/^static time_t start_of_entry_stats_interval;$/;"	v	file:
start_of_exit_stats_interval	rephist.c	/^static time_t start_of_exit_stats_interval;$/;"	v	file:
start_of_hs_stats_interval	rephist.c	/^static time_t start_of_hs_stats_interval;$/;"	v	file:
start_of_run	rephist.c	/^  time_t start_of_run;$/;"	m	struct:or_history_t	file:
start_of_served_descs_stats_interval	rephist.c	/^static time_t start_of_served_descs_stats_interval;$/;"	v	file:
start_time	TorSGX.cpp	/^long start_time, end_time;$/;"	v
start_time	control.c	/^  long start_time, end_time;$/;"	v
start_writing_to_file	util.c	/^start_writing_to_file(const char *fname, int open_flags, int mode,$/;"	f
start_writing_to_stdio_file	util.c	/^start_writing_to_stdio_file(const char *fname, int open_flags, int mode,$/;"	f
started_at	cpuworker.c	/^  struct timeval started_at;$/;"	m	struct:cpuworker_reply_t	typeref:struct:cpuworker_reply_t::timeval	file:
started_at	cpuworker.c	/^  struct timeval started_at;$/;"	m	struct:cpuworker_request_t	typeref:struct:cpuworker_request_t::timeval	file:
started_here	or.h	/^  unsigned int started_here : 1;$/;"	m	struct:or_handshake_state_t
started_tracking_stability	rephist.c	/^static time_t started_tracking_stability = 0;$/;"	v	file:
stat	orconfig.h	/^struct stat {$/;"	s
state	channel.h	/^  channel_listener_state_t state;$/;"	m	struct:channel_listener_s
state	channel.h	/^  channel_state_t state;$/;"	m	struct:channel_s
state	connection_or.c	/^  const char *state;$/;"	m	struct:broken_state_count_t	file:
state	dns_structs.h	/^  uint8_t state; \/**< Is this cached entry pending\/done\/informative? *\/$/;"	m	struct:cached_resolve_t
state	ed25519-randombytes.h	/^	uint32_t state[256];$/;"	m	struct:isaacp_state_t
state	geoip.c	/^  unsigned int state:3; \/**< State of this directory request. *\/$/;"	m	struct:dirreq_map_entry_t	file:
state	onion_fast.h	/^  uint8_t state[DIGEST_LEN];$/;"	m	struct:fast_handshake_state_t
state	or.h	/^  uint8_t state; \/**< Current state of this connection. *\/$/;"	m	struct:connection_t
state	or.h	/^  uint8_t state; \/**< Current status of this circuit. *\/$/;"	m	struct:circuit_t
state	or.h	/^  uint8_t state;$/;"	m	struct:crypt_path_t
state	tortls.c	/^  tor_tls_state_bitfield_t state : 3; \/**< The current SSL state,$/;"	m	struct:tor_tls_t	file:
state	util.h	/^  uint32_t state;$/;"	m	struct:tor_weak_rng_t
state	workqueue.c	/^  void *state;$/;"	m	struct:workerthread_s	file:
state_abbrevs_	statefile.c	/^static config_abbrev_t state_abbrevs_[] = {$/;"	v	file:
state_extra_var	statefile.c	/^static config_var_t state_extra_var = {$/;"	v	file:
state_format	statefile.c	/^static const config_format_t state_format = {$/;"	v	file:
state_transport_line_is_valid	statefile.c	/^state_transport_line_is_valid(const char *line)$/;"	f	file:
state_vars_	statefile.c	/^static config_var_t state_vars_[] = {$/;"	v	file:
stats_n_auth_challenge_cells_processed	channeltls.c	/^uint64_t stats_n_auth_challenge_cells_processed = 0;$/;"	v
stats_n_authenticate_cells_processed	channeltls.c	/^uint64_t stats_n_authenticate_cells_processed = 0;$/;"	v
stats_n_authorize_cells_processed	channeltls.c	/^uint64_t stats_n_authorize_cells_processed = 0;$/;"	v
stats_n_bytes_read	main.c	/^static uint64_t stats_n_bytes_read = 0;$/;"	v	file:
stats_n_bytes_written	main.c	/^static uint64_t stats_n_bytes_written = 0;$/;"	v	file:
stats_n_certs_cells_processed	channeltls.c	/^uint64_t stats_n_certs_cells_processed = 0;$/;"	v
stats_n_create_cells_processed	command.c	/^uint64_t stats_n_create_cells_processed = 0;$/;"	v
stats_n_created_cells_processed	command.c	/^uint64_t stats_n_created_cells_processed = 0;$/;"	v
stats_n_data_bytes_packaged	relay.c	/^uint64_t stats_n_data_bytes_packaged = 0;$/;"	v
stats_n_data_bytes_received	relay.c	/^uint64_t stats_n_data_bytes_received = 0;$/;"	v
stats_n_data_cells_packaged	relay.c	/^uint64_t stats_n_data_cells_packaged = 0;$/;"	v
stats_n_data_cells_received	relay.c	/^uint64_t stats_n_data_cells_received = 0;$/;"	v
stats_n_destroy_cells_processed	command.c	/^uint64_t stats_n_destroy_cells_processed = 0;$/;"	v
stats_n_netinfo_cells_processed	channeltls.c	/^uint64_t stats_n_netinfo_cells_processed = 0;$/;"	v
stats_n_padding_cells_processed	channeltls.c	/^uint64_t stats_n_padding_cells_processed = 0;$/;"	v
stats_n_relay_cells_delivered	relay.c	/^uint64_t stats_n_relay_cells_delivered = 0;$/;"	v
stats_n_relay_cells_processed	command.c	/^uint64_t stats_n_relay_cells_processed = 0;$/;"	v
stats_n_relay_cells_relayed	relay.c	/^uint64_t stats_n_relay_cells_relayed = 0;$/;"	v
stats_n_seconds_working	main.c	/^long stats_n_seconds_working = 0;$/;"	v
stats_n_versions_cells_processed	channeltls.c	/^uint64_t stats_n_versions_cells_processed = 0;$/;"	v
stats_n_vpadding_cells_processed	channeltls.c	/^uint64_t stats_n_vpadding_cells_processed = 0;$/;"	v
stats_prev_global_read_bucket	main.c	/^static int stats_prev_global_read_bucket;$/;"	v	file:
stats_prev_global_write_bucket	main.c	/^static int stats_prev_global_write_bucket;$/;"	v	file:
stats_prev_n_read	main.c	/^static uint64_t stats_prev_n_read = 0;$/;"	v	file:
stats_prev_n_written	main.c	/^static uint64_t stats_prev_n_written = 0;$/;"	v	file:
status	ias_ra.h	/^    ias_quote_status_t      status;$/;"	m	struct:_ias_att_report_t
status	network_ra.h	/^    uint8_t status[2];$/;"	m	struct:_ra_samp_response_header_t
status	or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	m	struct:tor_version_t	typeref:enum:tor_version_t::__anon43
status	or.h	/^  routerstatus_t status; \/**< Underlying 'status' object for this router.$/;"	m	struct:vote_routerstatus_t
status	util.h	/^  int status;$/;"	m	struct:process_handle_t
status_by_digest	dirserv.c	/^  digestmap_t *status_by_digest; \/**< Map from digest to router_status_t. *\/$/;"	m	struct:authdir_config_t	file:
status_tag	or.h	/^  char status_tag[MAX_STATUS_TAG_LEN];$/;"	m	struct:tor_version_t
stderr_handle	util.h	/^  FILE *stderr_handle;$/;"	m	struct:process_handle_t
stderr_pipe	util.h	/^  HANDLE stderr_pipe;$/;"	m	struct:process_handle_t
stderr_pipe	util.h	/^  int stderr_pipe;$/;"	m	struct:process_handle_t
stdin_handle	util.h	/^  FILE *stdin_handle;$/;"	m	struct:process_handle_t
stdin_pipe	util.h	/^  HANDLE stdin_pipe;$/;"	m	struct:process_handle_t
stdin_pipe	util.h	/^  int stdin_pipe;$/;"	m	struct:process_handle_t
stdio_file	util.c	/^  FILE *stdio_file; \/**< stdio wrapper for <b>fd<\/b>. *\/$/;"	m	struct:real_open_file_t	file:
stdio_file	util.c	/^  sgx_file *stdio_file; \/**< stdio wrapper for <b>fd<\/b>. *\/$/;"	m	struct:open_file_t	file:
stdout_handle	util.h	/^  FILE *stdout_handle;$/;"	m	struct:process_handle_t
stdout_pipe	util.h	/^  HANDLE stdout_pipe;$/;"	m	struct:process_handle_t
stdout_pipe	util.h	/^  int stdout_pipe;$/;"	m	struct:process_handle_t
store_len	or.h	/^  size_t store_len;$/;"	m	struct:desc_store_t
store_type_t	or.h	/^typedef enum store_type_t {$/;"	g
store_type_t	or.h	/^} store_type_t;$/;"	t	typeref:enum:store_type_t
stpcpy_disallowed	TorSGX.cpp	/^volatile int memset_disallowed, strcpy_disallowed, stpcpy_disallowed;$/;"	v
str_num_before	util.c	/^str_num_before(const char *s, char ch)$/;"	f	file:
strcasecmp	TorSGX.cpp	/^strcasecmp(const char *s1, const char *s2)$/;"	f
strcasecmp	compat.h	195;"	d
strcasecmpend	util.c	/^strcasecmpend(const char *s1, const char *s2)$/;"	f
strcasecmpstart	util.c	/^strcasecmpstart(const char *s1, const char *s2)$/;"	f
strcat_disallowed	TorSGX.cpp	/^volatile int strncpy_disallowed, strcat_disallowed, strncat_disallowed;$/;"	v
strcmp_len	util.c	/^strcmp_len(const char *s1, const char *s2, size_t s1_len)$/;"	f
strcmp_opt	util.c	/^strcmp_opt(const char *s1, const char *s2)$/;"	f
strcmpend	util.c	/^strcmpend(const char *s1, const char *s2)$/;"	f
strcmpstart	util.c	/^strcmpstart(const char *s1, const char *s2)$/;"	f
strcpy_disallowed	TorSGX.cpp	/^volatile int memset_disallowed, strcpy_disallowed, stpcpy_disallowed;$/;"	v
stream	torgzip.c	/^  struct z_stream_s stream; \/**< The zlib stream *\/$/;"	m	struct:tor_zlib_state_t	typeref:struct:tor_zlib_state_t::z_stream_s	file:
stream_choice_rng	relay.c	/^static tor_weak_rng_t stream_choice_rng = TOR_WEAK_RNG_INIT;$/;"	v	file:
stream_choice_seed_weak_rng	relay.c	/^stream_choice_seed_weak_rng(void)$/;"	f
stream_end_reason_to_control_string	reasons.c	/^stream_end_reason_to_control_string(int reason)$/;"	f
stream_end_reason_to_socks5_response	reasons.c	/^stream_end_reason_to_socks5_response(int reason)$/;"	f
stream_end_reason_to_string	reasons.c	/^stream_end_reason_to_string(int reason)$/;"	f
stream_id	connection_edge.h	/^  uint16_t stream_id;$/;"	m	struct:begin_cell_t
stream_id	or.h	/^  streamid_t stream_id; \/**< The stream ID used for this edge connection on its$/;"	m	struct:edge_connection_t
stream_id	or.h	/^  streamid_t stream_id; \/**< Which stream is this cell associated with? *\/$/;"	m	struct:__anon9
stream_status	util.h	/^enum stream_status {$/;"	g
stream_status_event_t	or.h	/^typedef enum stream_status_event_t {$/;"	g
stream_status_event_t	or.h	/^} stream_status_event_t;$/;"	t	typeref:enum:stream_status_event_t
stream_status_to_string	util.c	/^stream_status_to_string(enum stream_status stream_status)$/;"	f
streamid_t	or.h	/^typedef uint16_t streamid_t;$/;"	t
streams_blocked_on_n_chan	or.h	/^  unsigned int streams_blocked_on_n_chan : 1;$/;"	m	struct:circuit_t
streams_blocked_on_p_chan	or.h	/^  unsigned int streams_blocked_on_p_chan : 1;$/;"	m	struct:circuit_t
string_is_C_identifier	util.c	/^string_is_C_identifier(const char *string)$/;"	f
string_is_key_value	util.c	/^string_is_key_value(int severity, const char *string)$/;"	f
string_is_valid_hostname	util.c	/^string_is_valid_hostname(const char *string)$/;"	f
string_is_valid_ipv4_address	util.c	/^string_is_valid_ipv4_address(const char *string)$/;"	f
string_is_valid_ipv6_address	util.c	/^string_is_valid_ipv6_address(const char *string)$/;"	f
strlcat	compat.h	206;"	d
strlcat	strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	compat.h	207;"	d
strlcpy	strlcpy.c	/^size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strmap_assign_key	container.c	/^strmap_assign_key(strmap_entry_t *ent, const char *key)$/;"	f	file:
strmap_assign_tmp_key	container.c	/^strmap_assign_tmp_key(strmap_entry_t *ent, const char *key)$/;"	f	file:
strmap_entries_eq	container.c	/^strmap_entries_eq(const strmap_entry_t *a, const strmap_entry_t *b)$/;"	f	file:
strmap_entry_free	container.c	/^strmap_entry_free(strmap_entry_t *ent)$/;"	f	file:
strmap_entry_hash	container.c	/^strmap_entry_hash(const strmap_entry_t *a)$/;"	f	file:
strmap_get_lc	container.c	/^strmap_get_lc(const strmap_t *map, const char *key)$/;"	f
strmap_remove_lc	container.c	/^strmap_remove_lc(strmap_t *map, const char *key)$/;"	f
strmap_set_lc	container.c	/^strmap_set_lc(strmap_t *map, const char *key, void *val)$/;"	f
strncasecmp	TorSGX.cpp	/^strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
strncasecmp	compat.h	194;"	d
strncat_disallowed	TorSGX.cpp	/^volatile int strncpy_disallowed, strcat_disallowed, strncat_disallowed;$/;"	v
strncpy_disallowed	TorSGX.cpp	/^volatile int strncpy_disallowed, strcat_disallowed, strncat_disallowed;$/;"	v
strndup	util.c	134;"	d	file:
strtok_helper	compat.c	/^strtok_helper(char *cp, const char *sep)$/;"	f	file:
strtoll	TorSGX.cpp	/^strtoll(const char *nptr, char **endptr, int base)$/;"	f
sub256_modm_batch	modm-donna-32bit.h	/^sub256_modm_batch(bignum256modm out, const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
sub256_modm_batch	modm-donna-64bit.h	/^sub256_modm_batch(bignum256modm out, const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
success	cpuworker.c	/^  uint8_t success;$/;"	m	struct:cpuworker_reply_t	file:
successful_circuits_closed	entrynodes.h	/^  double successful_circuits_closed; \/**< Number of circuits that carried$/;"	m	struct:entry_guard_t
successful_uploads	or.h	/^  smartlist_t *successful_uploads;$/;"	m	struct:rend_service_descriptor_t
sum_up_cell_stats_by_command	control.c	/^sum_up_cell_stats_by_command(circuit_t *circ, cell_stats_t *cell_stats)$/;"	f
supported_methods	or.h	/^  smartlist_t *supported_methods;$/;"	m	struct:networkstatus_t
suppress_libevent_log_msg	compat_libevent.c	/^suppress_libevent_log_msg(const char *msg)$/;"	f
suppress_msg	compat_libevent.c	/^static const char *suppress_msg = NULL;$/;"	v	file:
svn_revision	or.h	/^  int svn_revision;$/;"	m	struct:tor_version_t
swap_conditional	curve25519-donna.c	/^swap_conditional(limb a[19], limb b[19], limb iswap) {$/;"	f	file:
sweep_bridge_list	entrynodes.c	/^sweep_bridge_list(void)$/;"	f
sweep_proxy_list	transports.c	/^sweep_proxy_list(void)$/;"	f
sweep_transport_list	transports.c	/^sweep_transport_list(void)$/;"	f
switch_id	compat.c	/^switch_id(const char *user)$/;"	f
switch_logs_debug	log.c	/^switch_logs_debug(void)$/;"	f
syscall	sandbox.h	/^  int syscall;$/;"	m	struct:smp_param
syscall_cb_buf	sandbox.c	/^static void *syscall_cb_buf[MAX_DEPTH];$/;"	v	file:
syslog_count	log.c	/^static int syslog_count = 0;$/;"	v	file:
systemd_watchdog_callback	main.c	/^systemd_watchdog_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
systemd_watchdog_timer	main.c	/^static periodic_timer_t *systemd_watchdog_timer = NULL;$/;"	v	file:
t	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
t	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
t	routerparse.c	/^  const char *t;$/;"	m	struct:token_rule_t	file:
t2d	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
t2d	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
t_key	onion_ntor.c	/^  const char *t_key;$/;"	m	struct:tweakset_t	file:
t_mac	onion_ntor.c	/^  const char *t_mac;$/;"	m	struct:tweakset_t	file:
t_verify	onion_ntor.c	/^  const char *t_verify;$/;"	m	struct:tweakset_t	file:
table	TorSGX.cpp	/^static const unsigned short table[] = {$/;"	v	file:
table2	TorSGX.cpp	/^static const int32_t table2[] = {$/;"	v	file:
tag	or.h	/^  uint16_t tag;$/;"	m	struct:__anon19
tail	buffers.h	/^  chunk_t *tail; \/**< Last chunk in the list, or NULL for none. *\/$/;"	m	struct:buf_t
takes_argument	config.c	/^  takes_argument_t takes_argument;$/;"	m	struct:__anon125	file:
takes_argument_t	config.c	/^} takes_argument_t;$/;"	t	typeref:enum:__anon124	file:
tap	or.h	/^    crypto_dh_t *tap;$/;"	m	union:__anon19::__anon20
tell_controller_about_resolved_result	connection_edge.c	/^tell_controller_about_resolved_result(entry_connection_t *conn,$/;"	f	file:
tempname	util.c	/^  char *tempname; \/**< Name of the temporary file. *\/$/;"	m	struct:open_file_t	file:
tempname	util.c	/^  char *tempname; \/**< Name of the temporary file. *\/$/;"	m	struct:real_open_file_t	file:
test_sgx_put_gencert	TorSGX.cpp	/^void test_sgx_put_gencert(char *fname, char *fcont, int fcont_len)$/;"	f
testcase_fn	tinytest.h	/^typedef void (*testcase_fn)(void *);$/;"	t
testcase_setup_t	tinytest.h	/^struct testcase_setup_t {$/;"	s
testcase_t	tinytest.h	/^struct testcase_t {$/;"	s
testgroup_t	tinytest.h	/^struct testgroup_t {$/;"	s
testing_cell_stats	or.h	/^  smartlist_t *testing_cell_stats;$/;"	m	struct:circuit_t
testing_cell_stats_entry_t	or.h	/^typedef struct testing_cell_stats_entry_t {$/;"	s
testing_cell_stats_entry_t	or.h	/^} testing_cell_stats_entry_t;$/;"	t	typeref:struct:testing_cell_stats_entry_t
testing_tor_network_defaults	config.c	/^static const config_var_t testing_tor_network_defaults[] = {$/;"	v	file:
testlist_alias_t	tinytest.h	/^struct testlist_alias_t {$/;"	s
tests	tinytest.h	/^	const char **tests;$/;"	m	struct:testlist_alias_t
the_evdns_base	dns.c	/^static struct evdns_base *the_evdns_base = NULL;$/;"	v	typeref:struct:evdns_base	file:
the_event_base	compat_libevent.c	/^struct event_base *the_event_base = NULL;$/;"	v	typeref:struct:event_base
the_microdesc_cache	microdesc.c	/^static microdesc_cache_t *the_microdesc_cache = NULL;$/;"	v	file:
the_nodelist	nodelist.c	/^static nodelist_t *the_nodelist=NULL;$/;"	v	file:
the_short_tor_version	config.c	/^static char *the_short_tor_version = NULL;$/;"	v	file:
the_siphash_key	csiphash.c	/^static struct sipkey the_siphash_key;$/;"	v	typeref:struct:sipkey	file:
the_siphash_key_is_set	csiphash.c	/^static int the_siphash_key_is_set = 0;$/;"	v	file:
the_tor_version	config.c	/^static char *the_tor_version = NULL;$/;"	v	file:
third_quartile_uint32	container.h	/^third_quartile_uint32(uint32_t *array, int n_elements)$/;"	f
threadpool	cpuworker.c	/^static threadpool_t *threadpool = NULL;$/;"	v	file:
threadpool_get_replyqueue	workqueue.c	/^threadpool_get_replyqueue(threadpool_t *tp)$/;"	f
threadpool_new	workqueue.c	/^threadpool_new(int n_threads,$/;"	f
threadpool_queue_update	workqueue.c	/^threadpool_queue_update(threadpool_t *pool,$/;"	f
threadpool_queue_work	workqueue.c	/^threadpool_queue_work(threadpool_t *pool,$/;"	f
threadpool_s	workqueue.c	/^struct threadpool_s {$/;"	s	file:
threadpool_start_threads	workqueue.c	/^threadpool_start_threads(threadpool_t *pool, int n)$/;"	f	file:
threadpool_t	workqueue.h	/^typedef struct threadpool_s threadpool_t;$/;"	t	typeref:struct:threadpool_s
threads	workqueue.c	/^  struct workerthread_s **threads;$/;"	m	struct:threadpool_s	typeref:struct:threadpool_s::workerthread_s	file:
threads_initialized	compat_pthreads.c	/^static int threads_initialized = 0;$/;"	v	file:
time	orconfig.h	/^	long	time;$/;"	m	struct:timeb
time	orconfig.h	2420;"	d
time	rephist.c	/^  time_t time;$/;"	m	struct:predicted_port_t	file:
time_msec_units	confparse.c	/^static struct unit_table_t time_msec_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
time_of_last_signewnym	main.c	/^static time_t time_of_last_signewnym = 0;$/;"	v	file:
time_of_process_start	main.c	/^time_t time_of_process_start = 0;$/;"	v
time_published	or.h	/^  time_t time_published;$/;"	m	struct:rend_intro_point_t
time_to	main.c	/^static time_to_t time_to = {$/;"	v	file:
time_to_download_next_consensus	networkstatus.c	/^static time_t time_to_download_next_consensus[N_CONSENSUS_FLAVORS];$/;"	v	file:
time_to_expire	or.h	/^  time_t time_to_expire;$/;"	m	struct:rend_intro_point_t
time_to_record_bandwidth_usage	hibernate.c	/^time_to_record_bandwidth_usage(time_t now)$/;"	f	file:
time_to_t	main.c	/^} time_to_t;$/;"	t	typeref:struct:__anon107	file:
time_unit_t	hibernate.c	/^} time_unit_t;$/;"	t	typeref:enum:__anon70	file:
time_units	confparse.c	/^static struct unit_table_t time_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
timeb	orconfig.h	/^struct timeb$/;"	s
timed	cpuworker.c	/^  unsigned int timed : 1;$/;"	m	struct:cpuworker_reply_t	file:
timed	cpuworker.c	/^  unsigned timed : 1;$/;"	m	struct:cpuworker_request_t	file:
timed_out	or.h	/^  unsigned int timed_out : 1;$/;"	m	struct:rend_intro_point_t
timeit	test-ticks.h	42;"	d
timeout_ms	circuitstats.h	/^  double timeout_ms;$/;"	m	struct:circuit_build_times_s
timeouts	entrynodes.h	/^  double timeouts; \/**< Number of 'right-censored' circuit timeouts for this$/;"	m	struct:entry_guard_t
timeouts_after_firsthop	or.h	/^  int8_t *timeouts_after_firsthop;$/;"	m	struct:__anon31
timeradd	compat.h	349;"	d
timercmp	compat.h	382;"	d
timersub	compat.h	363;"	d
timespec	orconfig.h	/^struct timespec {$/;"	s
timestamp	or.h	/^  time_t timestamp; \/**< Time when the descriptor was generated. *\/$/;"	m	struct:rend_service_descriptor_t
timestamp_accepted	channel.h	/^  time_t timestamp_accepted;$/;"	m	struct:channel_listener_s
timestamp_active	channel.h	/^  time_t timestamp_active; \/* Any activity *\/$/;"	m	struct:channel_listener_s
timestamp_active	channel.h	/^  time_t timestamp_active; \/* Any activity *\/$/;"	m	struct:channel_s
timestamp_began	or.h	/^  struct timeval timestamp_began;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::timeval
timestamp_client	channel.h	/^  time_t timestamp_client; \/* Client used this, according to relay.c *\/$/;"	m	struct:channel_s
timestamp_created	channel.h	/^  time_t timestamp_created; \/* Channel created *\/$/;"	m	struct:channel_listener_s
timestamp_created	channel.h	/^  time_t timestamp_created; \/* Channel created *\/$/;"	m	struct:channel_s
timestamp_created	or.h	/^  struct timeval timestamp_created;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::timeval
timestamp_created	or.h	/^  time_t timestamp_created; \/**< When was this connection_t created? *\/$/;"	m	struct:connection_t
timestamp_dirty	or.h	/^  time_t timestamp_dirty;$/;"	m	struct:circuit_t
timestamp_drained	channel.h	/^  time_t timestamp_drained; \/* Output queue empty *\/$/;"	m	struct:channel_s
timestamp_last_had_circuits	channel.h	/^  time_t timestamp_last_had_circuits;$/;"	m	struct:channel_s
timestamp_lastempty	or.h	/^  time_t timestamp_lastempty; \/**< When was the outbuf last completely empty?*\/$/;"	m	struct:or_connection_t
timestamp_lastread	or.h	/^  time_t timestamp_lastread; \/**< When was the last time libevent said we could$/;"	m	struct:connection_t
timestamp_lastwritten	or.h	/^  time_t timestamp_lastwritten; \/**< When was the last time libevent said we$/;"	m	struct:connection_t
timestamp_recv	channel.h	/^  time_t timestamp_recv; \/* Cell received from lower layer *\/$/;"	m	struct:channel_s
timestamp_xmit	channel.h	/^  time_t timestamp_xmit; \/* Cell sent to lower layer *\/$/;"	m	struct:channel_s
timeval	orconfig.h	/^struct timeval {$/;"	s
timezone	orconfig.h	/^	short	timezone;$/;"	m	struct:timeb
tinytest_skip	tinytest.h	88;"	d
tls	or.h	/^  tor_tls_t *tls; \/**< TLS connection state. *\/$/;"	m	struct:or_connection_t
tls_error	or.h	/^  int tls_error; \/**< Last tor_tls error code. *\/$/;"	m	struct:or_connection_t
tls_error_to_orconn_end_reason	reasons.c	/^tls_error_to_orconn_end_reason(int e)$/;"	f
tls_library_is_initialized	tortls.c	/^static int tls_library_is_initialized = 0;$/;"	v	file:
tls_log_errors	tortls.c	/^tls_log_errors(tor_tls_t *tls, int severity, int domain, const char *doing)$/;"	f	file:
tlssecrets	link_handshake.h	/^  uint8_t tlssecrets[32];$/;"	m	struct:auth1_st
token_check_object	routerparse.c	/^token_check_object(memarea_t *area, const char *kwd,$/;"	f	file:
token_clear	routerparse.c	/^token_clear(directory_token_t *tok)$/;"	f	file:
token_rule_t	routerparse.c	/^typedef struct token_rule_t {$/;"	s	file:
token_rule_t	routerparse.c	/^} token_rule_t;$/;"	t	typeref:struct:token_rule_t	file:
tokenize_string	routerparse.c	/^tokenize_string(memarea_t *area,$/;"	f	file:
top32bitmask	curve25519-donna-sse2.h	/^static const packedelem32 top32bitmask = {{0x00000000, 0xffffffff, 0x00000000, 0xffffffff}};$/;"	v
top64bitmask	curve25519-donna-sse2.h	/^static const packedelem32 top64bitmask = {{0x00000000, 0x00000000, 0xffffffff, 0xffffffff}};$/;"	v
tor_accept_socket	compat.c	/^tor_accept_socket(tor_socket_t sockfd, struct sockaddr *addr, socklen_t *len)$/;"	f
tor_accept_socket_nonblocking	compat.c	/^tor_accept_socket_nonblocking(tor_socket_t sockfd, struct sockaddr *addr,$/;"	f
tor_accept_socket_with_extensions	compat.c	/^tor_accept_socket_with_extensions(tor_socket_t sockfd, struct sockaddr *addr,$/;"	f
tor_add_bufferevent_to_rate_limit_group	compat_libevent.c	/^tor_add_bufferevent_to_rate_limit_group(struct bufferevent *bev,$/;"	f
tor_addr_compare	address.c	/^tor_addr_compare(const tor_addr_t *addr1, const tor_addr_t *addr2,$/;"	f
tor_addr_compare_masked	address.c	/^tor_addr_compare_masked(const tor_addr_t *addr1, const tor_addr_t *addr2,$/;"	f
tor_addr_comparison_t	address.h	/^} tor_addr_comparison_t;$/;"	t	typeref:enum:__anon4
tor_addr_copy	address.c	/^tor_addr_copy(tor_addr_t *dest, const tor_addr_t *src)$/;"	f
tor_addr_copy_tight	address.c	/^tor_addr_copy_tight(tor_addr_t *dest, const tor_addr_t *src)$/;"	f
tor_addr_eq	address.h	217;"	d
tor_addr_eq_ipv4h	address.h	/^tor_addr_eq_ipv4h(const tor_addr_t *a, uint32_t u)$/;"	f
tor_addr_family	address.h	/^tor_addr_family(const tor_addr_t *a)$/;"	f
tor_addr_from_in	address.h	264;"	d
tor_addr_from_in6	address.c	/^tor_addr_from_in6(tor_addr_t *dest, const struct in6_addr *in6)$/;"	f
tor_addr_from_ipv4h	address.h	260;"	d
tor_addr_from_ipv4n	address.c	/^tor_addr_from_ipv4n(tor_addr_t *dest, uint32_t v4addr)$/;"	f
tor_addr_from_ipv6_bytes	address.c	/^tor_addr_from_ipv6_bytes(tor_addr_t *dest, const char *ipv6_bytes)$/;"	f
tor_addr_from_sockaddr	address.c	/^tor_addr_from_sockaddr(tor_addr_t *a, const struct sockaddr *sa,$/;"	f
tor_addr_hash	address.c	/^tor_addr_hash(const tor_addr_t *addr)$/;"	f
tor_addr_hostname_is_local	address.c	/^tor_addr_hostname_is_local(const char *name)$/;"	f
tor_addr_is_internal	address.h	223;"	d
tor_addr_is_internal_	address.c	/^tor_addr_is_internal_(const tor_addr_t *addr, int for_listening,$/;"	f
tor_addr_is_loopback	address.c	/^tor_addr_is_loopback(const tor_addr_t *addr)$/;"	f
tor_addr_is_multicast	address.c	/^tor_addr_is_multicast(const tor_addr_t *a)$/;"	f
tor_addr_is_null	address.c	/^tor_addr_is_null(const tor_addr_t *addr)$/;"	f
tor_addr_is_v4	address.c	/^tor_addr_is_v4(const tor_addr_t *addr)$/;"	f
tor_addr_lookup	address.c	/^tor_addr_lookup(const char *name, uint16_t family, tor_addr_t *addr)$/;"	f
tor_addr_make_af_unix	address.c	/^tor_addr_make_af_unix(tor_addr_t *a)$/;"	f	file:
tor_addr_make_null	address.c	/^tor_addr_make_null(tor_addr_t *a, sa_family_t family)$/;"	f
tor_addr_make_unspec	address.c	/^tor_addr_make_unspec(tor_addr_t *a)$/;"	f
tor_addr_parse	address.c	/^tor_addr_parse(tor_addr_t *addr, const char *src)$/;"	f
tor_addr_parse_PTR_name	address.c	/^tor_addr_parse_PTR_name(tor_addr_t *result, const char *address,$/;"	f
tor_addr_parse_mask_ports	address.c	/^tor_addr_parse_mask_ports(const char *s,$/;"	f
tor_addr_port_lookup	address.c	/^tor_addr_port_lookup(const char *s, tor_addr_t *addr_out, uint16_t *port_out)$/;"	f
tor_addr_port_new	address.c	/^tor_addr_port_new(const tor_addr_t *addr, uint16_t port)$/;"	f
tor_addr_port_parse	address.c	/^tor_addr_port_parse(int severity, const char *addrport,$/;"	f
tor_addr_port_split	address.c	/^tor_addr_port_split(int severity, const char *addrport,$/;"	f
tor_addr_port_t	address.h	/^typedef struct tor_addr_port_t$/;"	s
tor_addr_port_t	address.h	/^} tor_addr_port_t;$/;"	t	typeref:struct:tor_addr_port_t
tor_addr_t	address.h	/^typedef struct tor_addr_t$/;"	s
tor_addr_t	address.h	/^} tor_addr_t;$/;"	t	typeref:struct:tor_addr_t
tor_addr_to_PTR_name	address.c	/^tor_addr_to_PTR_name(char *out, size_t outlen,$/;"	f
tor_addr_to_in	address.h	/^tor_addr_to_in(const tor_addr_t *a)$/;"	f
tor_addr_to_in6	address.h	/^tor_addr_to_in6(const tor_addr_t *a)$/;"	f
tor_addr_to_in6_addr16	address.h	110;"	d
tor_addr_to_in6_addr32	address.h	115;"	d
tor_addr_to_in6_addr8	address.h	105;"	d
tor_addr_to_ipv4h	address.h	/^tor_addr_to_ipv4h(const tor_addr_t *a)$/;"	f
tor_addr_to_ipv4n	address.h	/^tor_addr_to_ipv4n(const tor_addr_t *a)$/;"	f
tor_addr_to_mapped_ipv4h	address.h	/^tor_addr_to_mapped_ipv4h(const tor_addr_t *a)$/;"	f
tor_addr_to_sockaddr	address.c	/^tor_addr_to_sockaddr(const tor_addr_t *a,$/;"	f
tor_addr_to_str	address.c	/^tor_addr_to_str(char *dest, const tor_addr_t *addr, size_t len, int decorate)$/;"	f
tor_asprintf	compat.c	/^tor_asprintf(char **strp, const char *fmt, ...)$/;"	f
tor_assert	util.h	65;"	d
tor_assert	util.h	71;"	d
tor_assertion_failed_	util.c	/^tor_assertion_failed_(const char *fname, unsigned int line,$/;"	f
tor_calloc	util.h	156;"	d
tor_calloc_	util.c	/^tor_calloc_(size_t nmemb, size_t size DMALLOC_PARAMS)$/;"	f
tor_cert_checksig	torcert.c	/^tor_cert_checksig(tor_cert_t *cert,$/;"	f
tor_cert_create	torcert.c	/^tor_cert_create(const ed25519_keypair_t *signing_key,$/;"	f
tor_cert_dup	torcert.c	/^tor_cert_dup(const tor_cert_t *cert)$/;"	f
tor_cert_eq	torcert.c	/^tor_cert_eq(const tor_cert_t *cert1, const tor_cert_t *cert2)$/;"	f
tor_cert_free	torcert.c	/^tor_cert_free(tor_cert_t *cert)$/;"	f
tor_cert_get_checkable_sig	torcert.c	/^tor_cert_get_checkable_sig(ed25519_checkable_t *checkable_out,$/;"	f
tor_cert_opt_eq	torcert.c	/^tor_cert_opt_eq(const tor_cert_t *cert1, const tor_cert_t *cert2)$/;"	f
tor_cert_parse	torcert.c	/^tor_cert_parse(const uint8_t *encoded, const size_t len)$/;"	f
tor_cert_sign_impl	torcert.c	/^tor_cert_sign_impl(const ed25519_keypair_t *signing_key,$/;"	f	file:
tor_cert_st	torcert.h	/^typedef struct tor_cert_st {$/;"	s
tor_cert_t	torcert.h	/^} tor_cert_t;$/;"	t	typeref:struct:tor_cert_st
tor_check_dh_key	crypto.c	/^tor_check_dh_key(int severity, BIGNUM *bn)$/;"	f	file:
tor_check_libevent_header_compatibility	compat_libevent.c	/^tor_check_libevent_header_compatibility(void)$/;"	f
tor_check_port_forwarding	util.c	/^tor_check_port_forwarding(const char *filename,$/;"	f
tor_cleanup	main.c	/^tor_cleanup(void)$/;"	f
tor_close_socket	compat.c	/^tor_close_socket(tor_socket_t s)$/;"	f
tor_close_socket_simple	compat.c	/^tor_close_socket_simple(tor_socket_t s)$/;"	f
tor_cond_free	compat_threads.c	/^tor_cond_free(tor_cond_t *c)$/;"	f
tor_cond_init	compat_pthreads.c	/^tor_cond_init(tor_cond_t *cond)$/;"	f
tor_cond_new	compat_threads.c	/^tor_cond_new(void)$/;"	f
tor_cond_signal_all	compat_pthreads.c	/^tor_cond_signal_all(tor_cond_t *cond)$/;"	f
tor_cond_signal_one	compat_pthreads.c	/^tor_cond_signal_one(tor_cond_t *cond)$/;"	f
tor_cond_t	compat_threads.h	/^typedef struct tor_cond_t {$/;"	s
tor_cond_t	compat_threads.h	/^} tor_cond_t;$/;"	t	typeref:struct:tor_cond_t
tor_cond_uninit	compat_pthreads.c	/^tor_cond_uninit(tor_cond_t *cond)$/;"	f
tor_cond_wait	compat_pthreads.c	/^tor_cond_wait(tor_cond_t *cond, tor_mutex_t *mutex, const struct timeval *tv)$/;"	f
tor_decode_libevent_version	compat_libevent.c	/^tor_decode_libevent_version(const char *v)$/;"	f	file:
tor_digest256_is_zero	util.c	/^tor_digest256_is_zero(const char *digest)$/;"	f
tor_digest_is_zero	util.c	/^tor_digest_is_zero(const char *digest)$/;"	f
tor_disable_debugger_attach	compat.c	/^tor_disable_debugger_attach(void)$/;"	f
tor_dup_addr	address.c	/^tor_dup_addr(const tor_addr_t *addr)$/;"	f
tor_dup_ip	address.c	/^tor_dup_ip(uint32_t addr)$/;"	f
tor_errno_to_tls_error	tortls.c	/^tor_errno_to_tls_error(int e)$/;"	f	file:
tor_ersatz_socketpair	compat.c	/^tor_ersatz_socketpair(int family, int type, int protocol, tor_socket_t fd[2])$/;"	f
tor_escape_str_for_pt_args	util.c	/^tor_escape_str_for_pt_args(const char *string, const char *chars_to_escape)$/;"	f
tor_evdns_add_server_port	compat_libevent.h	32;"	d
tor_evdns_add_server_port	compat_libevent.h	42;"	d
tor_event_base_loopexit	compat_libevent.h	55;"	d
tor_event_free	compat_libevent.c	/^tor_event_free(struct event *ev)$/;"	f
tor_event_new	compat_libevent.c	/^tor_event_new(struct event_base *base, int sock, short what,$/;"	f
tor_event_new	compat_libevent.h	29;"	d
tor_evsignal_new	compat_libevent.c	/^tor_evsignal_new(struct event_base * base, int sig,$/;"	f
tor_evsignal_new	compat_libevent.h	31;"	d
tor_evtimer_new	compat_libevent.c	/^tor_evtimer_new(struct event_base *base,$/;"	f
tor_evtimer_new	compat_libevent.h	30;"	d
tor_fd_getpos	compat.c	/^tor_fd_getpos(int fd)$/;"	f
tor_fd_seekend	compat.c	/^tor_fd_seekend(int fd)$/;"	f
tor_fd_setpos	compat.c	/^tor_fd_setpos(int fd, off_t pos)$/;"	f
tor_fix_source_file	compat.c	/^tor_fix_source_file(const char *fname)$/;"	f
tor_fix_source_file	compat.h	337;"	d
tor_fopen_cloexec	compat.c	/^tor_fopen_cloexec(const char *path, const char *mode)$/;"	f
tor_fragile_assert	util.h	97;"	d
tor_free	util.h	123;"	d
tor_free	util.h	137;"	d
tor_free_	util.c	/^tor_free_(void *mem)$/;"	f
tor_free_all	main.c	/^tor_free_all(int postfork)$/;"	f
tor_ftruncate	compat.c	/^tor_ftruncate(int fd)$/;"	f
tor_get_avail_disk_space	compat.c	/^tor_get_avail_disk_space(const char *path)$/;"	f
tor_get_exit_code	util.c	/^tor_get_exit_code(process_handle_t *process_handle,$/;"	f
tor_get_root_bufferevent	compat_libevent.c	/^tor_get_root_bufferevent(struct bufferevent *bev)$/;"	f	file:
tor_get_thread_id	compat_pthreads.c	/^tor_get_thread_id(void)$/;"	f
tor_getpass	compat.c	/^tor_getpass(const char *prompt, char *output, size_t buflen)$/;"	f
tor_getpwnam	compat.c	/^tor_getpwnam(const char *username)$/;"	f
tor_getpwuid	compat.c	/^tor_getpwuid(uid_t uid)$/;"	f
tor_gettimeofday	compat.c	/^tor_gettimeofday(struct timeval *timeval)$/;"	f
tor_gettimeofday_cache_clear	compat_libevent.c	/^tor_gettimeofday_cache_clear(void)$/;"	f
tor_gettimeofday_cache_set	compat_libevent.c	/^tor_gettimeofday_cache_set(const struct timeval *tv)$/;"	f
tor_gettimeofday_cached	compat_libevent.c	/^tor_gettimeofday_cached(struct timeval *tv)$/;"	f
tor_gettimeofday_cached_monotonic	compat_libevent.c	/^tor_gettimeofday_cached_monotonic(struct timeval *tv)$/;"	f
tor_git_revision	tor_main.c	/^const char tor_git_revision[] =$/;"	v
tor_gmtime_r	compat.c	/^tor_gmtime_r(const time_t *timep, struct tm *result)$/;"	f
tor_gzip_compress	torgzip.c	/^tor_gzip_compress(char **out, size_t *out_len,$/;"	f
tor_gzip_uncompress	torgzip.c	/^tor_gzip_uncompress(char **out, size_t *out_len,$/;"	f
tor_inet_aton	compat.c	/^tor_inet_aton(const char *str, struct in_addr* addr)$/;"	f
tor_inet_ntoa	address.c	/^tor_inet_ntoa(const struct in_addr *in, char *buf, size_t buf_len)$/;"	f
tor_inet_ntop	compat.c	/^tor_inet_ntop(int af, const void *src, char *dst, size_t len)$/;"	f
tor_inet_pton	compat.c	/^tor_inet_pton(int af, const char *src, void *dst)$/;"	f
tor_init	main.c	/^tor_init(int argc, char *argv[])$/;"	f
tor_init_libevent_rng	compat_libevent.c	/^tor_init_libevent_rng(void)$/;"	f
tor_init_weak_random	util.c	/^tor_init_weak_random(tor_weak_rng_t *rng, unsigned seed)$/;"	f
tor_join_win_cmdline	util.c	/^tor_join_win_cmdline(const char *argv[])$/;"	f
tor_libevent_cfg	compat_libevent.h	/^typedef struct tor_libevent_cfg {$/;"	s
tor_libevent_cfg	compat_libevent.h	/^} tor_libevent_cfg;$/;"	t	typeref:struct:tor_libevent_cfg
tor_libevent_get_header_version_str	compat_libevent.c	/^tor_libevent_get_header_version_str(void)$/;"	f
tor_libevent_get_method	compat_libevent.c	/^tor_libevent_get_method(void)$/;"	f
tor_libevent_get_one_tick_timeout	compat_libevent.c	/^tor_libevent_get_one_tick_timeout(void)$/;"	f
tor_libevent_get_version_str	compat_libevent.c	/^tor_libevent_get_version_str(void)$/;"	f
tor_libevent_initialize	compat_libevent.c	/^tor_libevent_initialize(tor_libevent_cfg *torcfg)$/;"	f
tor_libevent_set_tick_timeout	compat_libevent.c	/^tor_libevent_set_tick_timeout(int msec_per_tick)$/;"	f	file:
tor_libevent_using_iocp_bufferevents	compat_libevent.c	/^tor_libevent_using_iocp_bufferevents(void)$/;"	f
tor_listdir	util.c	/^tor_listdir(const char *dirname)$/;"	f
tor_listen	connection.c	/^tor_listen(tor_socket_t fd)$/;"	f	file:
tor_llround	util.c	/^tor_llround(double d)$/;"	f
tor_localtime_r	compat.c	/^tor_localtime_r(const time_t *timep, struct tm *result)$/;"	f
tor_lockfile_lock	compat.c	/^tor_lockfile_lock(const char *filename, int blocking, int *locked_out)$/;"	f
tor_lockfile_t	compat.c	/^struct tor_lockfile_t {$/;"	s	file:
tor_lockfile_t	compat.h	/^typedef struct tor_lockfile_t tor_lockfile_t;$/;"	t	typeref:struct:tor_lockfile_t
tor_lockfile_unlock	compat.c	/^tor_lockfile_unlock(tor_lockfile_t *lockfile)$/;"	f
tor_log	log.c	/^tor_log(int severity, log_domain_mask_t domain, const char *format, ...)$/;"	f
tor_log2	util.c	/^tor_log2(uint64_t u64)$/;"	f
tor_log_err_sigsafe	log.c	/^tor_log_err_sigsafe(const char *m, ...)$/;"	f
tor_log_err_sigsafe_write	log.c	/^tor_log_err_sigsafe_write(const char *s)$/;"	f	file:
tor_log_get_logfile_names	log.c	/^tor_log_get_logfile_names(smartlist_t *out)$/;"	f
tor_log_get_sigsafe_err_fds	log.c	/^tor_log_get_sigsafe_err_fds(const int **out)$/;"	f
tor_log_mallinfo	util.c	/^tor_log_mallinfo(int severity)$/;"	f
tor_log_update_sigsafe_err_fds	log.c	/^tor_log_update_sigsafe_err_fds(void)$/;"	f
tor_lround	util.c	/^tor_lround(double d)$/;"	f
tor_main	main.c	/^tor_main(int argc, char *argv[])$/;"	f
tor_make_rsa_ed25519_crosscert	torcert.c	/^tor_make_rsa_ed25519_crosscert(const ed25519_public_key_t *ed_key,$/;"	f
tor_malloc	util.h	152;"	d
tor_malloc_	util.c	/^tor_malloc_(size_t size DMALLOC_PARAMS)$/;"	f
tor_malloc_zero	util.h	154;"	d
tor_malloc_zero_	util.c	/^tor_malloc_zero_(size_t size DMALLOC_PARAMS)$/;"	f
tor_mathlog	util.c	/^tor_mathlog(double d)$/;"	f
tor_mem_is_zero	util.c	/^tor_mem_is_zero(const char *mem, size_t len)$/;"	f
tor_memcmp	di_ops.c	/^tor_memcmp(const void *a, const void *b, size_t len)$/;"	f
tor_memdup	util.h	166;"	d
tor_memdup_	util.c	/^tor_memdup_(const void *mem, size_t len DMALLOC_PARAMS)$/;"	f
tor_memdup_nulterm	util.h	168;"	d
tor_memdup_nulterm_	util.c	/^tor_memdup_nulterm_(const void *mem, size_t len DMALLOC_PARAMS)$/;"	f
tor_memeq	di_ops.c	/^tor_memeq(const void *a, const void *b, size_t sz)$/;"	f
tor_memmem	compat.c	/^tor_memmem(const void *_haystack, size_t hlen,$/;"	f
tor_memneq	di_ops.h	19;"	d
tor_memstr	compat.h	/^tor_memstr(const void *haystack, size_t hlen, const char *needle)$/;"	f
tor_mlockall	compat.c	/^tor_mlockall(void)$/;"	f
tor_mmap_file	compat.c	/^tor_mmap_file(const char *filename)$/;"	f
tor_mmap_t	compat.h	/^typedef struct tor_mmap_t {$/;"	s
tor_mmap_t	compat.h	/^} tor_mmap_t;$/;"	t	typeref:struct:tor_mmap_t
tor_munmap_file	compat.c	/^tor_munmap_file(tor_mmap_t *handle)$/;"	f
tor_mutex_acquire	compat_pthreads.c	/^tor_mutex_acquire(tor_mutex_t *m)$/;"	f
tor_mutex_free	compat_threads.c	/^tor_mutex_free(tor_mutex_t *m)$/;"	f
tor_mutex_init	compat_pthreads.c	/^tor_mutex_init(tor_mutex_t *mutex)$/;"	f
tor_mutex_init_for_cond	compat_threads.h	72;"	d
tor_mutex_init_nonrecursive	compat_pthreads.c	/^tor_mutex_init_nonrecursive(tor_mutex_t *mutex)$/;"	f
tor_mutex_new	compat_threads.c	/^tor_mutex_new(void)$/;"	f
tor_mutex_new_nonrecursive	compat_threads.c	/^tor_mutex_new_nonrecursive(void)$/;"	f
tor_mutex_release	compat_pthreads.c	/^tor_mutex_release(tor_mutex_t *m)$/;"	f
tor_mutex_t	compat_threads.h	/^typedef struct tor_mutex_t {$/;"	s
tor_mutex_t	compat_threads.h	/^} tor_mutex_t;$/;"	t	typeref:struct:tor_mutex_t
tor_mutex_uninit	compat_pthreads.c	/^tor_mutex_uninit(tor_mutex_t *m)$/;"	f
tor_open_cloexec	compat.c	/^tor_open_cloexec(const char *path, int flags, unsigned mode)$/;"	f
tor_open_socket_nonblocking	compat.c	/^tor_open_socket_nonblocking(int domain, int type, int protocol)$/;"	f
tor_open_socket_with_extensions	compat.c	/^tor_open_socket_with_extensions(int domain, int type, int protocol,$/;"	f
tor_parse_double	util.c	/^tor_parse_double(const char *s, double min, double max, int *ok, char **next)$/;"	f
tor_parse_long	util.c	/^tor_parse_long(const char *s, int base, long min, long max,$/;"	f
tor_parse_uint64	util.c	/^tor_parse_uint64(const char *s, int base, uint64_t min,$/;"	f
tor_parse_ulong	util.c	/^tor_parse_ulong(const char *s, int base, unsigned long min,$/;"	f
tor_passwd_dup	compat.c	/^tor_passwd_dup(const struct passwd *pw)$/;"	f	file:
tor_passwd_free	compat.c	/^tor_passwd_free(struct passwd *pw)$/;"	f	file:
tor_process_get_pid	util.c	/^tor_process_get_pid(process_handle_t *process_handle)$/;"	f
tor_process_get_stdout_pipe	util.c	/^tor_process_get_stdout_pipe(process_handle_t *process_handle)$/;"	f
tor_process_monitor_free	procmon.c	/^tor_process_monitor_free(tor_process_monitor_t *procmon)$/;"	f
tor_process_monitor_new	procmon.c	/^tor_process_monitor_new(struct event_base *base,$/;"	f
tor_process_monitor_poll_cb	procmon.c	/^tor_process_monitor_poll_cb(evutil_socket_t unused1, short unused2,$/;"	f	file:
tor_process_monitor_t	procmon.c	/^struct tor_process_monitor_t {$/;"	s	file:
tor_process_monitor_t	procmon.h	/^typedef struct tor_process_monitor_t tor_process_monitor_t;$/;"	t	typeref:struct:tor_process_monitor_t
tor_procmon_callback_t	procmon.h	/^typedef void (*tor_procmon_callback_t)(void *);$/;"	t
tor_read_all_from_process_stderr	util.c	/^tor_read_all_from_process_stderr(const process_handle_t *process_handle,$/;"	f
tor_read_all_from_process_stdout	util.c	/^tor_read_all_from_process_stdout(const process_handle_t *process_handle,$/;"	f
tor_read_all_handle	util.c	/^tor_read_all_handle(FILE *h, char *buf, size_t count,$/;"	f
tor_read_all_handle	util.c	/^tor_read_all_handle(HANDLE h, char *buf, size_t count,$/;"	f
tor_realloc	util.h	158;"	d
tor_realloc_	util.c	/^tor_realloc_(void *ptr, size_t size DMALLOC_PARAMS)$/;"	f
tor_reallocarray	util.h	160;"	d
tor_reallocarray_	util.c	/^tor_reallocarray_(void *ptr, size_t sz1, size_t sz2 DMALLOC_PARAMS)$/;"	f
tor_rename	compat.c	/^tor_rename(const char *path_old, const char *path_new)$/;"	f
tor_set_bufferevent_rate_limit	compat_libevent.c	/^tor_set_bufferevent_rate_limit(struct bufferevent *bev,$/;"	f
tor_set_max_memlock	compat.c	/^tor_set_max_memlock(void)$/;"	f	file:
tor_set_openssl_thread_id	crypto.c	/^tor_set_openssl_thread_id(CRYPTO_THREADID *threadid)$/;"	f	file:
tor_sleep_msec	compat.c	/^tor_sleep_msec(int msec)$/;"	f
tor_snprintf	compat.c	/^tor_snprintf(char *str, size_t size, const char *format, ...)$/;"	f
tor_sockaddr_to_str	address.c	/^tor_sockaddr_to_str(const struct sockaddr *sa)$/;"	f
tor_socket_errno	compat.c	/^tor_socket_errno(tor_socket_t sock)$/;"	f
tor_socket_errno	compat.h	586;"	d
tor_socket_recv	compat.h	483;"	d
tor_socket_send	compat.h	482;"	d
tor_socket_strerror	compat.c	/^tor_socket_strerror(int e)$/;"	f
tor_socket_strerror	compat.h	587;"	d
tor_socket_t	compat.h	433;"	d
tor_socket_t	compat.h	442;"	d
tor_socket_t	compat.h	448;"	d
tor_socketpair	compat.c	/^tor_socketpair(int family, int type, int protocol, tor_socket_t fd[2])$/;"	f
tor_spawn_background	util.c	/^tor_spawn_background(const char *const filename, const char **argv,$/;"	f
tor_split_lines	util.c	/^tor_split_lines(smartlist_t *sl, char *buf, int len)$/;"	f
tor_sscanf	util.c	/^tor_sscanf(const char *buf, const char *pattern, ...)$/;"	f
tor_strdup	util.h	164;"	d
tor_strdup_	util.c	/^tor_strdup_(const char *s DMALLOC_PARAMS)$/;"	f
tor_strisnonupper	util.c	/^tor_strisnonupper(const char *s)$/;"	f
tor_strisprint	util.c	/^tor_strisprint(const char *s)$/;"	f
tor_strlower	util.c	/^tor_strlower(char *s)$/;"	f
tor_strndup	util.h	165;"	d
tor_strndup_	util.c	/^tor_strndup_(const char *s, size_t n DMALLOC_PARAMS)$/;"	f
tor_strstrip	util.c	/^tor_strstrip(char *s, const char *strip)$/;"	f
tor_strtok_r	compat.h	327;"	d
tor_strtok_r	compat.h	329;"	d
tor_strtok_r_impl	compat.c	/^tor_strtok_r_impl(char *str, const char *sep, char **lasts)$/;"	f
tor_strupper	util.c	/^tor_strupper(char *s)$/;"	f
tor_terminate_process	util.c	/^tor_terminate_process(process_handle_t *process_handle)$/;"	f
tor_threadlocal_destroy	compat_pthreads.c	/^tor_threadlocal_destroy(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_get	compat_pthreads.c	/^tor_threadlocal_get(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_init	compat_pthreads.c	/^tor_threadlocal_init(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_s	compat_threads.h	/^typedef struct tor_threadlocal_s {$/;"	s
tor_threadlocal_set	compat_pthreads.c	/^tor_threadlocal_set(tor_threadlocal_t *threadlocal, void *value)$/;"	f
tor_threadlocal_t	compat_threads.h	/^} tor_threadlocal_t;$/;"	t	typeref:struct:tor_threadlocal_s
tor_threads_init	compat_pthreads.c	/^tor_threads_init(void)$/;"	f
tor_timegm	util.c	/^tor_timegm(const struct tm *tm, time_t *time_out)$/;"	f
tor_tls_allocate_tor_tls_object_ex_data_index	tortls.c	/^tor_tls_allocate_tor_tls_object_ex_data_index(void)$/;"	f	file:
tor_tls_assert_renegotiation_unblocked	tortls.c	/^tor_tls_assert_renegotiation_unblocked(tor_tls_t *tls)$/;"	f
tor_tls_block_renegotiation	tortls.c	/^tor_tls_block_renegotiation(tor_tls_t *tls)$/;"	f
tor_tls_cert_get_key	tortls.c	/^tor_tls_cert_get_key(tor_x509_cert_t *cert)$/;"	f
tor_tls_cert_is_valid	tortls.c	/^tor_tls_cert_is_valid(int severity,$/;"	f
tor_tls_check_lifetime	tortls.c	/^tor_tls_check_lifetime(int severity, tor_tls_t *tls,$/;"	f
tor_tls_classify_client_ciphers	tortls.c	/^tor_tls_classify_client_ciphers(const SSL *ssl,$/;"	f	file:
tor_tls_client_is_using_v2_ciphers	tortls.c	/^tor_tls_client_is_using_v2_ciphers(const SSL *ssl)$/;"	f	file:
tor_tls_context_decref	tortls.c	/^tor_tls_context_decref(tor_tls_context_t *ctx)$/;"	f	file:
tor_tls_context_incref	tortls.c	/^tor_tls_context_incref(tor_tls_context_t *ctx)$/;"	f	file:
tor_tls_context_init	tortls.c	/^tor_tls_context_init(unsigned flags,$/;"	f
tor_tls_context_init_one	tortls.c	/^tor_tls_context_init_one(tor_tls_context_t **ppcontext,$/;"	f	file:
tor_tls_context_new	tortls.c	/^tor_tls_context_new(crypto_pk_t *identity, unsigned int key_lifetime,$/;"	f	file:
tor_tls_context_t	tortls.c	/^typedef struct tor_tls_context_t {$/;"	s	file:
tor_tls_context_t	tortls.c	/^} tor_tls_context_t;$/;"	t	typeref:struct:tor_tls_context_t	file:
tor_tls_create_certificate	tortls.c	/^tor_tls_create_certificate(crypto_pk_t *rsa,$/;"	f	file:
tor_tls_debug_state_callback	tortls.c	/^tor_tls_debug_state_callback(const SSL *ssl, int type, int val)$/;"	f	file:
tor_tls_err_to_string	tortls.c	/^tor_tls_err_to_string(int err)$/;"	f
tor_tls_finish_handshake	tortls.c	/^tor_tls_finish_handshake(tor_tls_t *tls)$/;"	f
tor_tls_free	tortls.c	/^tor_tls_free(tor_tls_t *tls)$/;"	f
tor_tls_free_all	tortls.c	/^tor_tls_free_all(void)$/;"	f
tor_tls_get_buffer_sizes	tortls.c	/^tor_tls_get_buffer_sizes(tor_tls_t *tls,$/;"	f
tor_tls_get_by_ssl	tortls.c	/^tor_tls_get_by_ssl(const SSL *ssl)$/;"	f	file:
tor_tls_get_ciphersuite_name	tortls.c	/^tor_tls_get_ciphersuite_name(tor_tls_t *tls)$/;"	f
tor_tls_get_error	tortls.c	/^tor_tls_get_error(tor_tls_t *tls, int r, int extra,$/;"	f	file:
tor_tls_get_forced_write_size	tortls.c	/^tor_tls_get_forced_write_size(tor_tls_t *tls)$/;"	f
tor_tls_get_my_certs	tortls.c	/^tor_tls_get_my_certs(int server,$/;"	f
tor_tls_get_my_client_auth_key	tortls.c	/^tor_tls_get_my_client_auth_key(void)$/;"	f
tor_tls_get_n_raw_bytes	tortls.c	/^tor_tls_get_n_raw_bytes(tor_tls_t *tls, size_t *n_read, size_t *n_written)$/;"	f
tor_tls_get_num_server_handshakes	tortls.c	/^tor_tls_get_num_server_handshakes(tor_tls_t *tls)$/;"	f
tor_tls_get_pending_bytes	tortls.c	/^tor_tls_get_pending_bytes(tor_tls_t *tls)$/;"	f
tor_tls_get_state_description	tortls.c	/^tor_tls_get_state_description(tor_tls_t *tls, char *buf, size_t sz)$/;"	f
tor_tls_handshake	tortls.c	/^tor_tls_handshake(tor_tls_t *tls)$/;"	f
tor_tls_init	tortls.c	/^tor_tls_init(void)$/;"	f	file:
tor_tls_init_bufferevent	tortls.c	/^tor_tls_init_bufferevent(tor_tls_t *tls, struct bufferevent *bufev_in,$/;"	f
tor_tls_is_server	tortls.c	/^tor_tls_is_server(tor_tls_t *tls)$/;"	f
tor_tls_log_one_error	tortls.c	/^tor_tls_log_one_error(tor_tls_t *tls, unsigned long err,$/;"	f
tor_tls_new	tortls.c	/^tor_tls_new(int sock, int isServer)$/;"	f
tor_tls_object_ex_data_index	tortls.c	/^static int tor_tls_object_ex_data_index = -1;$/;"	v	file:
tor_tls_peer_has_cert	tortls.c	/^tor_tls_peer_has_cert(tor_tls_t *tls)$/;"	f
tor_tls_received_v3_certificate	tortls.c	/^tor_tls_received_v3_certificate(tor_tls_t *tls)$/;"	f
tor_tls_renegotiate	tortls.c	/^tor_tls_renegotiate(tor_tls_t *tls)$/;"	f
tor_tls_server_got_renegotiate	tortls.c	/^tor_tls_server_got_renegotiate(tor_tls_t *tls)$/;"	f
tor_tls_server_info_callback	tortls.c	/^tor_tls_server_info_callback(const SSL *ssl, int type, int val)$/;"	f	file:
tor_tls_session_secret_cb	tortls.c	/^tor_tls_session_secret_cb(SSL *ssl, void *secret, int *secret_len,$/;"	f	file:
tor_tls_set_logged_address	tortls.c	/^tor_tls_set_logged_address(tor_tls_t *tls, const char *address)$/;"	f
tor_tls_set_renegotiate_callback	tortls.c	/^tor_tls_set_renegotiate_callback(tor_tls_t *tls,$/;"	f
tor_tls_setup_session_secret_cb	tortls.c	/^tor_tls_setup_session_secret_cb(tor_tls_t *tls)$/;"	f	file:
tor_tls_shutdown	tortls.c	/^tor_tls_shutdown(tor_tls_t *tls)$/;"	f
tor_tls_start_renegotiating	tortls.c	/^tor_tls_start_renegotiating(tor_tls_t *tls)$/;"	f
tor_tls_state_bitfield_t	tortls.c	166;"	d	file:
tor_tls_state_t	tortls.c	/^} tor_tls_state_t;$/;"	t	typeref:enum:__anon105	file:
tor_tls_t	tortls.c	/^struct tor_tls_t {$/;"	s	file:
tor_tls_t	tortls.h	/^typedef struct tor_tls_t tor_tls_t;$/;"	t	typeref:struct:tor_tls_t
tor_tls_unblock_renegotiation	tortls.c	/^tor_tls_unblock_renegotiation(tor_tls_t *tls)$/;"	f
tor_tls_used_v1_handshake	tortls.c	/^tor_tls_used_v1_handshake(tor_tls_t *tls)$/;"	f
tor_tls_verify	tortls.c	/^tor_tls_verify(int severity, tor_tls_t *tls, crypto_pk_t **identity_key)$/;"	f
tor_tls_write	tortls.c	/^tor_tls_write(tor_tls_t *tls, const char *cp, size_t n)$/;"	f
tor_validate_process_specifier	procmon.c	/^tor_validate_process_specifier(const char *process_spec,$/;"	f
tor_vasprintf	compat.c	/^tor_vasprintf(char **strp, const char *fmt, va_list args)$/;"	f
tor_version_as_new_as	routerparse.c	/^tor_version_as_new_as(const char *platform, const char *cutoff)$/;"	f
tor_version_compare	routerparse.c	/^tor_version_compare(tor_version_t *a, tor_version_t *b)$/;"	f
tor_version_is_obsolete	routerparse.c	/^tor_version_is_obsolete(const char *myversion, const char *versionlist)$/;"	f
tor_version_parse	routerparse.c	/^tor_version_parse(const char *s, tor_version_t *out)$/;"	f
tor_version_same_series	routerparse.c	/^tor_version_same_series(tor_version_t *a, tor_version_t *b)$/;"	f
tor_version_t	or.h	/^typedef struct tor_version_t {$/;"	s
tor_version_t	or.h	/^} tor_version_t;$/;"	t	typeref:struct:tor_version_t
tor_vsnprintf	compat.c	/^tor_vsnprintf(char *str, size_t size, const char *format, va_list args)$/;"	f
tor_vsscanf	util.c	/^tor_vsscanf(const char *buf, const char *pattern, va_list ap)$/;"	f
tor_weak_random	util.c	/^tor_weak_random(tor_weak_rng_t *rng)$/;"	f
tor_weak_random_one_in_n	util.h	616;"	d
tor_weak_random_range	util.c	/^tor_weak_random_range(tor_weak_rng_t *rng, int32_t top)$/;"	f
tor_weak_rng_t	util.h	/^typedef struct tor_weak_rng_t {$/;"	s
tor_weak_rng_t	util.h	/^} tor_weak_rng_t;$/;"	t	typeref:struct:tor_weak_rng_t
tor_x509_cert_decode	tortls.c	/^tor_x509_cert_decode(const uint8_t *certificate, size_t certificate_len)$/;"	f
tor_x509_cert_free	tortls.c	/^tor_x509_cert_free(tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_get_cert_digests	tortls.c	/^tor_x509_cert_get_cert_digests(const tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_get_der	tortls.c	/^tor_x509_cert_get_der(const tor_x509_cert_t *cert,$/;"	f
tor_x509_cert_get_id_digests	tortls.c	/^tor_x509_cert_get_id_digests(const tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_new	tortls.c	/^tor_x509_cert_new(X509 *x509_cert)$/;"	f	file:
tor_x509_cert_t	tortls.c	/^struct tor_x509_cert_t {$/;"	s	file:
tor_x509_cert_t	tortls.h	/^typedef struct tor_x509_cert_t tor_x509_cert_t;$/;"	t	typeref:struct:tor_x509_cert_t
tor_x509_name_new	tortls.c	/^tor_x509_name_new(const char *cname)$/;"	f	file:
tor_zlib_free	torgzip.c	/^tor_zlib_free(tor_zlib_state_t *state)$/;"	f
tor_zlib_get_header_version_str	torgzip.c	/^tor_zlib_get_header_version_str(void)$/;"	f
tor_zlib_get_total_allocation	torgzip.c	/^tor_zlib_get_total_allocation(void)$/;"	f
tor_zlib_get_version_str	torgzip.c	/^tor_zlib_get_version_str(void)$/;"	f
tor_zlib_new	torgzip.c	/^tor_zlib_new(int compress, compress_method_t method,$/;"	f
tor_zlib_output_t	torgzip.h	/^} tor_zlib_output_t;$/;"	t	typeref:enum:__anon68
tor_zlib_process	torgzip.c	/^tor_zlib_process(tor_zlib_state_t *state,$/;"	f
tor_zlib_state_size	torgzip.c	/^tor_zlib_state_size(const tor_zlib_state_t *state)$/;"	f
tor_zlib_state_size_precalc	torgzip.c	/^tor_zlib_state_size_precalc(int inflate, int windowbits, int memlevel)$/;"	f	file:
tor_zlib_state_t	torgzip.c	/^struct tor_zlib_state_t {$/;"	s	file:
tor_zlib_state_t	torgzip.h	/^typedef struct tor_zlib_state_t tor_zlib_state_t;$/;"	t	typeref:struct:tor_zlib_state_t
torrc	TorSGX.cpp	/^char *torrc = NULL;$/;"	v
torrc_defaults_fname	config.c	/^static char *torrc_defaults_fname;$/;"	v	file:
torrc_fname	config.c	/^static char *torrc_fname = NULL;$/;"	v	file:
total	geoip.c	/^  unsigned total; \/**< Total IP addresses seen in this country. *\/$/;"	m	struct:c_hist_t	file:
total_build_times	circuitstats.h	/^  int total_build_times;$/;"	m	struct:circuit_build_times_s
total_bytes_allocated_in_chunks	buffers.c	/^static size_t total_bytes_allocated_in_chunks = 0;$/;"	v	file:
total_bytes_written_by_tls	tortls.c	/^static uint64_t total_bytes_written_by_tls = 0;$/;"	v	file:
total_bytes_written_over_tls	tortls.c	/^static uint64_t total_bytes_written_over_tls = 0;$/;"	v	file:
total_cell_waiting_time	or.h	/^  uint64_t total_cell_waiting_time;$/;"	m	struct:or_circuit_t
total_cells_allocated	relay.c	/^static size_t total_cells_allocated = 0;$/;"	v	file:
total_descriptor_downloads	rephist.c	/^static unsigned long total_descriptor_downloads;$/;"	v	file:
total_in_period	rephist.c	/^  uint64_t total_in_period; \/**< Total bytes transferred in the current$/;"	m	struct:bw_array_t	file:
total_len_seen	microdesc.c	/^  uint64_t total_len_seen;$/;"	m	struct:microdesc_cache_t	file:
total_obs	rephist.c	/^  uint64_t total_obs; \/**< Total for all members of obs except$/;"	m	struct:bw_array_t	file:
total_pending_tasks	cpuworker.c	/^static int total_pending_tasks = 0;$/;"	v	file:
total_run_weights	rephist.c	/^  double total_run_weights;$/;"	m	struct:or_history_t	file:
total_time_appward	control.h	/^  uint64_t total_time_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
total_time_exitward	control.h	/^  uint64_t total_time_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
total_weighted_time	rephist.c	/^  unsigned long total_weighted_time;$/;"	m	struct:or_history_t	file:
total_zlib_allocation	torgzip.c	/^static size_t total_zlib_allocation = 0;$/;"	v	file:
totals	rephist.c	/^  uint64_t totals[NUM_TOTALS];$/;"	m	struct:bw_array_t	file:
touch_file	compat.c	/^touch_file(const char *fname)$/;"	f
tp	routerparse.c	/^  directory_keyword tp;        \/**< Type of the token. *\/$/;"	m	struct:directory_token_t	file:
transport_add	transports.c	/^transport_add(transport_t *t)$/;"	f	file:
transport_copy	transports.c	/^transport_copy(const transport_t *transport)$/;"	f	file:
transport_free	transports.c	/^transport_free(transport_t *transport)$/;"	f
transport_get_by_name	transports.c	/^transport_get_by_name(const char *name)$/;"	f
transport_list	transports.c	/^static smartlist_t *transport_list = NULL;$/;"	v	file:
transport_name	config.h	/^  char *transport_name; \/* The name of the pluggable transport that$/;"	m	struct:bridge_line_t
transport_name	entrynodes.c	/^  char *transport_name;$/;"	m	struct:__anon122	file:
transport_name	geoip.c	/^  char *transport_name;$/;"	m	struct:clientmap_entry_t	file:
transport_new	transports.c	/^transport_new(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
transport_resolve_conflicts	transports.c	/^transport_resolve_conflicts(const transport_t *t)$/;"	f	file:
transport_t	transports.h	/^typedef struct transport_t {$/;"	s
transport_t	transports.h	/^} transport_t;$/;"	t	typeref:struct:transport_t
transports	transports.h	/^  smartlist_t *transports;$/;"	m	struct:__anon1
transports_to_launch	transports.h	/^  smartlist_t *transports_to_launch;$/;"	m	struct:__anon1
truncate_logs	log.c	/^truncate_logs(void)$/;"	f
trunnel_abort	trunnel-impl.h	143;"	d
trunnel_assert	trunnel-impl.h	47;"	d
trunnel_assert	trunnel-local.h	15;"	d
trunnel_calloc	trunnel-impl.h	/^trunnel_calloc(size_t a, size_t b)$/;"	f
trunnel_calloc	trunnel-impl.h	126;"	d
trunnel_calloc	trunnel-local.h	10;"	d
trunnel_dynarray_expand	trunnel.c	/^trunnel_dynarray_expand(size_t *allocated_p, void *ptr,$/;"	f
trunnel_dynarray_setlen	trunnel.c	/^trunnel_dynarray_setlen(size_t *allocated_p, size_t *len_p,$/;"	f
trunnel_error_code_	ed25519_cert.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:ed25519_cert_extension_st
trunnel_error_code_	ed25519_cert.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:ed25519_cert_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth1_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth_challenge_cell_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth_ctx_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:certs_cell_cert_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:certs_cell_st
trunnel_error_code_	link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:rsa_ed_crosscert_st
trunnel_error_code_	pwbox.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:pwbox_encoded_st
trunnel_free	trunnel-impl.h	140;"	d
trunnel_free_	trunnel-impl.h	138;"	d
trunnel_free_	trunnel-local.h	12;"	d
trunnel_free_fn_t	trunnel-impl.h	/^typedef void (*trunnel_free_fn_t)(void *);$/;"	t
trunnel_get_uint16	trunnel-impl.h	/^trunnel_get_uint16(const void *p) {$/;"	f
trunnel_get_uint32	trunnel-impl.h	/^trunnel_get_uint32(const void *p) {$/;"	f
trunnel_get_uint64	trunnel-impl.h	/^trunnel_get_uint64(const void *p) {$/;"	f
trunnel_get_uint8	trunnel-impl.h	/^trunnel_get_uint8(const void *p) {$/;"	f
trunnel_htonl	trunnel-impl.h	38;"	d
trunnel_htonl	trunnel.c	/^trunnel_htonl(uint32_t s)$/;"	f
trunnel_htonll	trunnel.c	/^trunnel_htonll(uint64_t a)$/;"	f
trunnel_htons	trunnel-impl.h	39;"	d
trunnel_htons	trunnel.c	/^trunnel_htons(uint16_t s)$/;"	f
trunnel_malloc	trunnel-impl.h	/^trunnel_malloc(size_t n)$/;"	f
trunnel_malloc	trunnel-impl.h	123;"	d
trunnel_malloc	trunnel-local.h	9;"	d
trunnel_memwipe	trunnel-impl.h	147;"	d
trunnel_memwipe	trunnel-local.h	16;"	d
trunnel_ntohl	trunnel-impl.h	40;"	d
trunnel_ntohl	trunnel.c	/^trunnel_ntohl(uint32_t s)$/;"	f
trunnel_ntohll	trunnel.c	/^trunnel_ntohll(uint64_t a)$/;"	f
trunnel_ntohs	trunnel-impl.h	41;"	d
trunnel_ntohs	trunnel.c	/^trunnel_ntohs(uint16_t s)$/;"	f
trunnel_provoke_alloc_failure	trunnel.c	/^int trunnel_provoke_alloc_failure = 0;$/;"	v
trunnel_realloc	trunnel-impl.h	134;"	d
trunnel_realloc	trunnel-local.h	13;"	d
trunnel_reallocarray	trunnel-local.h	14;"	d
trunnel_reallocarray	trunnel.c	/^trunnel_reallocarray(void *a, size_t x, size_t y)$/;"	f
trunnel_set_uint16	trunnel-impl.h	/^trunnel_set_uint16(void *p, uint16_t v) {$/;"	f
trunnel_set_uint32	trunnel-impl.h	/^trunnel_set_uint32(void *p, uint32_t v) {$/;"	f
trunnel_set_uint64	trunnel-impl.h	/^trunnel_set_uint64(void *p, uint64_t v) {$/;"	f
trunnel_set_uint8	trunnel-impl.h	/^trunnel_set_uint8(void *p, uint8_t v) {$/;"	f
trunnel_strdup	trunnel-impl.h	/^trunnel_strdup(const char *s)$/;"	f
trunnel_strdup	trunnel-impl.h	129;"	d
trunnel_strdup	trunnel-local.h	11;"	d
trunnel_string_getstr	trunnel.c	/^trunnel_string_getstr(trunnel_string_t *str)$/;"	f
trunnel_string_setlen	trunnel.c	/^trunnel_string_setlen(trunnel_string_t *str, size_t newlen,$/;"	f
trunnel_string_setstr0	trunnel.c	/^trunnel_string_setstr0(trunnel_string_t *str, const char *val, size_t len,$/;"	f
trunnel_string_t	trunnel.h	/^typedef TRUNNEL_DYNARRAY_HEAD(trunnel_string_st, char) trunnel_string_t;$/;"	t
trunnel_wipestr	trunnel-impl.h	148;"	d
trunnel_wipestr	trunnel-impl.h	150;"	d
trusted_dir_certs	routerlist.c	/^static digestmap_t *trusted_dir_certs = NULL;$/;"	v	file:
trusted_dir_server_new	routerlist.c	/^trusted_dir_server_new(const char *nickname, const char *address,$/;"	f
trusted_dir_servers	routerlist.c	/^static smartlist_t *trusted_dir_servers = NULL;$/;"	v	file:
trusted_dir_servers_certs_changed	routerlist.c	/^static int trusted_dir_servers_certs_changed = 0;$/;"	v	file:
trusted_dirs_flush_certs_to_disk	routerlist.c	/^trusted_dirs_flush_certs_to_disk(void)$/;"	f
trusted_dirs_load_certs_from_string	routerlist.c	/^trusted_dirs_load_certs_from_string(const char *contents, int source,$/;"	f
trusted_dirs_reload_certs	routerlist.c	/^trusted_dirs_reload_certs(void)$/;"	f
trusted_dirs_remove_old_certs	routerlist.c	/^trusted_dirs_remove_old_certs(void)$/;"	f	file:
trusteddirserver_get_by_v3_auth_digest	routerlist.c	/^trusteddirserver_get_by_v3_auth_digest(const char *digest)$/;"	f
try_getting_descriptors	main.c	/^  time_t try_getting_descriptors;$/;"	m	struct:__anon107	file:
try_load_engine	crypto.c	/^try_load_engine(const char *path, const char *engine)$/;"	f	file:
try_locking	main.c	/^try_locking(const or_options_t *options, int err_if_locked)$/;"	f
try_to_extract_certs_from_tls	tortls.c	/^try_to_extract_certs_from_tls(int severity, tor_tls_t *tls,$/;"	f	file:
try_to_register	main.c	/^  int try_to_register;$/;"	m	struct:__anon108	file:
tt_abort	tinytest_macros.h	74;"	d
tt_abort_msg	tinytest_macros.h	73;"	d
tt_abort_perror	tinytest_macros.h	72;"	d
tt_abort_printf	tinytest_macros.h	71;"	d
tt_assert	tinytest_macros.h	111;"	d
tt_assert_msg	tinytest_macros.h	105;"	d
tt_assert_op_type	tinytest_macros.h	153;"	d
tt_assert_test_fmt_type	tinytest_macros.h	113;"	d
tt_assert_test_type	tinytest_macros.h	143;"	d
tt_assert_test_type_opt	tinytest_macros.h	147;"	d
tt_fail	tinytest_macros.h	80;"	d
tt_fail_msg	tinytest_macros.h	79;"	d
tt_fail_perror	tinytest_macros.h	78;"	d
tt_failprint_f	tinytest_macros.h	77;"	d
tt_int_op	tinytest_macros.h	157;"	d
tt_mem_op	tinytest_macros.h	174;"	d
tt_ptr_op	tinytest_macros.h	165;"	d
tt_skip	tinytest_macros.h	83;"	d
tt_str_op	tinytest_macros.h	169;"	d
tt_uint_op	tinytest_macros.h	161;"	d
tt_want	tinytest_macros.h	109;"	d
tt_want_	tinytest_macros.h	89;"	d
tt_want_int_op	tinytest_macros.h	184;"	d
tt_want_msg	tinytest_macros.h	101;"	d
tt_want_ptr_op	tinytest_macros.h	191;"	d
tt_want_str_op	tinytest_macros.h	195;"	d
tt_want_uint_op	tinytest_macros.h	187;"	d
ttl	relay.h	/^  int ttl;$/;"	m	struct:address_ttl_s
ttl_hostname	dns_structs.h	/^  uint32_t ttl_hostname; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
ttl_ipv4	dns_structs.h	/^  uint32_t ttl_ipv4; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
ttl_ipv6	dns_structs.h	/^  uint32_t ttl_ipv6; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
tv	compat_libevent.c	/^  struct timeval tv;$/;"	m	struct:periodic_timer_t	typeref:struct:periodic_timer_t::timeval	file:
tv_mdiff	util.c	/^tv_mdiff(const struct timeval *start, const struct timeval *end)$/;"	f
tv_nsec	orconfig.h	/^        long		 tv_nsec;        \/* and nanoseconds *\/$/;"	m	struct:timespec
tv_sec	orconfig.h	/^        long    tv_sec;         \/* seconds *\/$/;"	m	struct:timespec
tv_sec	orconfig.h	/^        long    tv_sec;         \/* seconds *\/$/;"	m	struct:timeval
tv_to_msec	util.c	/^tv_to_msec(const struct timeval *tv)$/;"	f
tv_udiff	util.c	/^tv_udiff(const struct timeval *start, const struct timeval *end)$/;"	f
tv_usec	orconfig.h	/^        long    tv_usec;        \/* and microseconds *\/$/;"	m	struct:timeval
tweakset_t	onion_ntor.c	/^typedef struct tweakset_t {$/;"	s	file:
tweakset_t	onion_ntor.c	/^} tweakset_t;$/;"	t	typeref:struct:tweakset_t	file:
twoP0	curve25519-donna-32bit.h	/^static const uint32_t twoP0       = 0x07ffffda;$/;"	v
twoP0	curve25519-donna-64bit.h	/^static const uint64_t twoP0      = 0x0fffffffffffda;$/;"	v
twoP1234	curve25519-donna-64bit.h	/^static const uint64_t twoP1234   = 0x0ffffffffffffe;$/;"	v
twoP13579	curve25519-donna-32bit.h	/^static const uint32_t twoP13579   = 0x03fffffe;$/;"	v
twoP2468	curve25519-donna-32bit.h	/^static const uint32_t twoP2468    = 0x07fffffe;$/;"	v
type	channel.h	/^  } type;$/;"	m	struct:cell_queue_entry_s	typeref:enum:cell_queue_entry_s::__anon74
type	confparse.h	/^  config_type_t type; \/**< How to interpret the type and turn it into a$/;"	m	struct:config_var_t
type	geoip.c	/^  unsigned int type:1; \/**< Is this a direct or a tunneled request? *\/$/;"	m	struct:dirreq_map_entry_t	file:
type	link_handshake.h	/^  uint8_t type[8];$/;"	m	struct:auth1_st
type	network_ra.h	/^    uint8_t type;   \/\/ set to one of ra_msg_type_t$/;"	m	struct:_ra_samp_response_header_t
type	network_ra.h	/^    uint8_t type;  \/\/ set to one of ra_msg_type_t$/;"	m	struct:_ra_samp_request_header_t
type	or.h	/^  dirinfo_type_t type;$/;"	m	struct:dir_server_t
type	or.h	/^  networkstatus_type_t type; \/**< Vote, consensus, or opinion? *\/$/;"	m	struct:networkstatus_t
type	or.h	/^  store_type_t type; \/**< What's stored in this store? *\/$/;"	m	struct:desc_store_t
type	or.h	/^  uint8_t type; \/**< One of CONN_TYPE_*_LISTENER *\/$/;"	m	struct:port_cfg_t
type	or.h	/^  unsigned int type:5; \/**< What kind of connection is this? *\/$/;"	m	struct:connection_t
type	rendservice.h	/^  uint8_t type;$/;"	m	struct:rend_intro_cell_s
u	channel.h	/^  } u;$/;"	m	struct:cell_queue_entry_s	typeref:union:cell_queue_entry_s::__anon75
u	cpuworker.c	/^  } u;$/;"	m	struct:cpuworker_job_u	typeref:union:cpuworker_job_u::__anon110	file:
u	curve25519-donna-sse2.h	/^	uint32_t u[4];$/;"	m	union:packedelem32_t
u	curve25519-donna-sse2.h	/^	uint64_t u[2];$/;"	m	union:packedelem64_t
u	curve25519-donna-sse2.h	/^	unsigned char u[16];$/;"	m	union:packedelem8_t
u	memarea.c	/^  } u;$/;"	m	struct:memarea_chunk_t	typeref:union:memarea_chunk_t::__anon109	file:
u	or.h	/^  } u;$/;"	m	struct:__anon19	typeref:union:__anon19::__anon20
u	rendservice.h	/^  } u;$/;"	m	struct:rend_intro_cell_s	typeref:union:rend_intro_cell_s::__anon116
u1_cid_ed	link_handshake.h	/^  uint8_t u1_cid_ed[32];$/;"	m	struct:auth1_st
u1_sid_ed	link_handshake.h	/^  uint8_t u1_sid_ed[32];$/;"	m	struct:auth1_st
u32	orconfig.h	/^    uint32_t u32;$/;"	m	union:epoll_data
u64	orconfig.h	/^    uint64_t u64;$/;"	m	union:epoll_data
u64	routerlist.h	/^  uint64_t u64;$/;"	m	union:u64_dbl_t
u64_dbl_t	routerlist.h	/^typedef union u64_dbl_t {$/;"	u
u64_dbl_t	routerlist.h	/^} u64_dbl_t;$/;"	t	typeref:union:u64_dbl_t
u6_addr16	orconfig.h	/^    __uint16_t u6_addr16[8];$/;"	m	union:in6_addr::__anon55
u6_addr32	orconfig.h	/^    __uint32_t u6_addr32[4];$/;"	m	union:in6_addr::__anon55
u6_addr8	orconfig.h	/^    __uint8_t u6_addr8[16];$/;"	m	union:in6_addr::__anon55
u8	curve25519-donna.c	/^typedef uint8_t u8;$/;"	t	file:
u_char	TorSGX.cpp	/^typedef unsigned char u_char;$/;"	t	file:
u_char	eventdns_tor.h	/^typedef unsigned char u_char;$/;"	t
u_short	orconfig.h	/^typedef unsigned short u_short;$/;"	t
uid_t	orconfig.h	/^typedef unsigned int uid_t;$/;"	t
uint	eventdns_tor.h	/^typedef unsigned int uint;$/;"	t
uint128_t	ed25519-donna-portable.h	/^			typedef struct uint128_t {$/;"	s
uint128_t	ed25519-donna-portable.h	/^			typedef unsigned __int128 uint128_t;$/;"	t
uint128_t	ed25519-donna-portable.h	/^			typedef unsigned uint128_t __attribute__((mode(TI)));$/;"	t
uint128_t	ed25519-donna-portable.h	/^			} uint128_t;$/;"	t	typeref:struct:uint128_t
uint128_t	ed25519-donna-portable.h	/^		typedef struct uint128_t {$/;"	s
uint128_t	ed25519-donna-portable.h	/^		typedef unsigned __int128 uint128_t;$/;"	t
uint128_t	ed25519-donna-portable.h	/^		} uint128_t;$/;"	t	typeref:struct:uint128_t
uint16_t	ed25519-donna-portable-identify.h	/^	typedef unsigned short uint16_t;$/;"	t
uint16_t	torint.h	/^typedef unsigned int uint16_t;$/;"	t
uint16_t	torint.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	trunnel-impl.h	23;"	d
uint32_t	ed25519-donna-portable-identify.h	/^	typedef unsigned int uint32_t;$/;"	t
uint32_t	orconfig.h	/^typedef __uint32_t       uint32_t;$/;"	t
uint32_t	torint.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	torint.h	/^typedef unsigned long uint32_t;$/;"	t
uint32_t	trunnel-impl.h	24;"	d
uint64_t	ed25519-donna-portable-identify.h	/^	typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	torint.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	torint.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	torint.h	/^typedef unsigned long uint64_t;$/;"	t
uint64_t	trunnel-impl.h	25;"	d
uint8_t	ed25519-donna-portable-identify.h	/^	typedef unsigned char uint8_t;$/;"	t
uint8_t	orconfig.h	/^typedef __uint8_t       uint8_t;$/;"	t
uint8_t	torint.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	trunnel-impl.h	22;"	d
uintptr_t	torint.h	/^typedef uint32_t uintptr_t;$/;"	t
uintptr_t	torint.h	/^typedef uint64_t uintptr_t;$/;"	t
un_signing_key	ed25519_cert.h	/^  uint8_t un_signing_key[32];$/;"	m	struct:ed25519_cert_extension_st
un_unparsed	ed25519_cert.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) un_unparsed;$/;"	m	struct:ed25519_cert_extension_st
uname_result	compat.c	/^static char uname_result[256];$/;"	v	file:
uname_result_is_set	compat.c	/^static int uname_result_is_set = 0;$/;"	v	file:
unconfigured_proxies_n	transports.c	/^static int unconfigured_proxies_n = 0;$/;"	v	file:
unescape_string	util.c	/^unescape_string(const char *s, char **result, size_t *size_out)$/;"	f	file:
unit	confparse.c	/^  const char *unit; \/**< The name of the unit *\/$/;"	m	struct:unit_table_t	file:
unit_table_t	confparse.c	/^struct unit_table_t {$/;"	s	file:
unit_tests	circuitstats.c	/^static int unit_tests = 0;$/;"	v	file:
unit_tests	circuitstats.c	41;"	d	file:
unix_addr	or.h	/^  char unix_addr[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:port_cfg_t
unix_addr	rendservice.c	/^  char unix_addr[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:rend_service_port_config_s	file:
unix_socket_prefix	config.c	/^static const char unix_socket_prefix[] = "unix:";$/;"	v	file:
unix_socket_purpose_to_string	connection.c	/^unix_socket_purpose_to_string(int purpose)$/;"	f	file:
unixoid_environment_block	util.h	/^  char **unixoid_environment_block;$/;"	m	struct:process_environment_t
unlink	orconfig.h	2436;"	d
unnamed_server_map	networkstatus.c	/^static strmap_t *unnamed_server_map = NULL;$/;"	v	file:
unreachable_count	or.h	/^  unsigned int unreachable_count : 3;$/;"	m	struct:rend_intro_point_t
unreachable_since	entrynodes.h	/^  time_t unreachable_since; \/**< 0 if we can connect to this guard, or the$/;"	m	struct:entry_guard_t
unusable_circuits	entrynodes.h	/^  double unusable_circuits; \/**< Number of circuits for which streams were$/;"	m	struct:entry_guard_t
unusable_for_new_conns	or.h	/^  unsigned int unusable_for_new_conns : 1;$/;"	m	struct:origin_circuit_t
up_since	rephist.c	/^  time_t up_since;$/;"	m	struct:or_history_t	file:
update_all_descriptor_downloads	routerlist.c	/^update_all_descriptor_downloads(time_t now)$/;"	f
update_approx_time	util.c	/^update_approx_time(time_t now)$/;"	f
update_approx_time	util.h	324;"	d
update_args	workqueue.c	/^  void **update_args;$/;"	m	struct:threadpool_s	file:
update_certificate_downloads	networkstatus.c	/^update_certificate_downloads(time_t now)$/;"	f
update_circuit_on_cmux	relay.h	69;"	d
update_circuit_on_cmux_	relay.c	/^update_circuit_on_cmux_(circuit_t *circ, cell_direction_t direction,$/;"	f
update_consensus_networkstatus_downloads	networkstatus.c	/^update_consensus_networkstatus_downloads(time_t now)$/;"	f	file:
update_consensus_networkstatus_fetch_time	networkstatus.c	/^update_consensus_networkstatus_fetch_time(time_t now)$/;"	f
update_consensus_networkstatus_fetch_time_impl	networkstatus.c	/^update_consensus_networkstatus_fetch_time_impl(time_t now, int flav)$/;"	f	file:
update_consensus_router_descriptor_downloads	routerlist.c	/^update_consensus_router_descriptor_downloads(time_t now, int is_vote,$/;"	f
update_expected_bandwidth	hibernate.c	/^update_expected_bandwidth(void)$/;"	f	file:
update_extrainfo_downloads	routerlist.c	/^update_extrainfo_downloads(time_t now)$/;"	f
update_fn	workqueue.c	/^  workqueue_reply_t (*update_fn)(void *, void *);$/;"	m	struct:threadpool_s	file:
update_microdesc_downloads	microdesc.c	/^update_microdesc_downloads(time_t now)$/;"	f
update_microdescs_from_networkstatus	microdesc.c	/^update_microdescs_from_networkstatus(time_t now)$/;"	f
update_networkstatus_downloads	networkstatus.c	/^update_networkstatus_downloads(time_t now)$/;"	f
update_node_guard_status	entrynodes.c	/^update_node_guard_status(void)$/;"	f	file:
update_or_history	rephist.c	/^update_or_history(or_history_t *hist, time_t when)$/;"	f	file:
update_router_descriptor_downloads	routerlist.c	/^update_router_descriptor_downloads(time_t now)$/;"	f
update_router_have_minimum_dir_info	nodelist.c	/^update_router_have_minimum_dir_info(void)$/;"	f	file:
update_state_threadfn	cpuworker.c	/^update_state_threadfn(void *state_, void *work_)$/;"	f	file:
update_total_bandwidth_weights	dirvote.c	/^update_total_bandwidth_weights(const routerstatus_t *rs,$/;"	f	file:
upload_service_descriptor	rendservice.c	/^upload_service_descriptor(rend_service_t *service)$/;"	f	file:
uptime	or.h	/^  long uptime; \/**< How many seconds the router claims to have been up *\/$/;"	m	struct:__anon14
uptime	rephist.c	/^  unsigned long uptime;$/;"	m	struct:or_history_t	file:
usable_consensus_flavor	microdesc.c	/^usable_consensus_flavor(void)$/;"	f
usable_descriptor_t	nodelist.c	/^} usable_descriptor_t;$/;"	t	typeref:enum:__anon69	file:
use_attempts	entrynodes.h	/^  double use_attempts; \/**< Number of circuits we tried to use with streams *\/$/;"	m	struct:entry_guard_t
use_begindir	or.h	/^  unsigned int use_begindir:1;$/;"	m	struct:entry_connection_t
use_cached_ipv4_answers	or.h	/^  unsigned int use_cached_ipv4_answers : 1;$/;"	m	struct:entry_port_cfg_t
use_cached_ipv6_answers	or.h	/^  unsigned int use_cached_ipv6_answers : 1;$/;"	m	struct:entry_port_cfg_t
use_keygen_passphrase_fd	or.h	/^  int use_keygen_passphrase_fd;$/;"	m	struct:__anon24
use_successes	entrynodes.h	/^  double use_successes; \/**< Number of successfully used circuits using$/;"	m	struct:entry_guard_t
userdata	util_process.c	/^  void *userdata;$/;"	m	struct:waitpid_callback_t	file:
userfn	util_process.c	/^  void (*userfn)(int, void *userdata);$/;"	m	struct:waitpid_callback_t	file:
username	or.h	/^  char *username;$/;"	m	struct:socks_request_t
usernamelen	or.h	/^  size_t usernamelen;$/;"	m	struct:socks_request_t
using_as_guard	or.h	/^  unsigned int using_as_guard:1;$/;"	m	struct:node_t
using_evp	aes.c	/^  uint8_t using_evp;$/;"	m	struct:aes_cnt_cipher	file:
using_iocp_bufferevents	compat_libevent.c	/^static int using_iocp_bufferevents = 0;$/;"	v	file:
utimbuf	orconfig.h	/^struct utimbuf {$/;"	s
v	curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem32_t
v	curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem64_t
v	curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem8_t
v	dirvote.c	/^  networkstatus_t *v;$/;"	m	struct:dir_src_ent_t	file:
v	routerparse.c	/^  directory_keyword v;$/;"	m	struct:token_rule_t	file:
v0_v1	rendservice.h	/^    } v0_v1;$/;"	m	union:rend_intro_cell_s::__anon116	typeref:struct:rend_intro_cell_s::__anon116::__anon117
v2	rendservice.h	/^    } v2;$/;"	m	union:rend_intro_cell_s::__anon116	typeref:struct:rend_intro_cell_s::__anon116::__anon118
v2_cipher_list	tortls.c	/^static uint16_t v2_cipher_list[] = {$/;"	v	file:
v2_cipher_list_pruned	tortls.c	/^static int v2_cipher_list_pruned = 0;$/;"	v	file:
v3	rendservice.h	/^    } v3;$/;"	m	union:rend_intro_cell_s::__anon116	typeref:struct:rend_intro_cell_s::__anon116::__anon119
v3_authority_check_key_expiry	router.c	/^v3_authority_check_key_expiry(void)$/;"	f
v3_identity_digest	or.h	/^  char v3_identity_digest[DIGEST_LEN]; \/**< Digest of v3 (authority only,$/;"	m	struct:dir_server_t
val	di_ops.c	/^  void *val;$/;"	m	struct:di_digest256_map_t	file:
val	fp_pair.c	/^  void *val;$/;"	m	struct:fp_pair_map_entry_s	file:
valid_after	or.h	/^  time_t valid_after; \/**< Time after which this vote or consensus applies. *\/$/;"	m	struct:networkstatus_t
valid_after	or.h	/^  time_t valid_after;$/;"	m	struct:ns_detached_signatures_t
valid_until	or.h	/^  time_t valid_until; \/**< Time after which this vote or consensus should not$/;"	m	struct:networkstatus_t
valid_until	or.h	/^  time_t valid_until;$/;"	m	struct:ns_detached_signatures_t
valid_until	torcert.h	/^  time_t valid_until;$/;"	m	struct:tor_cert_st
validate_addr_policies	policies.c	/^validate_addr_policies(const or_options_t *options, char **msg)$/;"	f
validate_bridge_stats	geoip.c	/^validate_bridge_stats(const char *stats_str, time_t now)$/;"	f	file:
validate_data_directory	config.c	/^validate_data_directory(or_options_t *options)$/;"	f	file:
validate_dir_servers	config.c	/^validate_dir_servers(or_options_t *options, or_options_t *old_options)$/;"	f	file:
validate_fn	confparse.h	/^  validate_fn_t validate_fn; \/**< Function to validate config. *\/$/;"	m	struct:config_format_t
validate_fn_t	confparse.h	/^typedef int (*validate_fn_t)(void*,void*,void*,int,char**);$/;"	t
validate_intro_point_failure	rendcache.c	/^validate_intro_point_failure(const rend_service_descriptor_t *desc,$/;"	f	file:
validate_ports_csv	config.c	/^validate_ports_csv(smartlist_t *sl, const char *name, char **msg)$/;"	f	file:
validate_recommended_package_line	dirserv.c	/^validate_recommended_package_line(const char *line)$/;"	f
validate_transport_socks_arguments	config.c	/^validate_transport_socks_arguments(const smartlist_t *args)$/;"	f	file:
validate_transports_in_state	statefile.c	/^validate_transports_in_state(or_state_t *state)$/;"	f	file:
value	or.h	/^  char *value;$/;"	m	struct:config_line_t
value	sandbox.h	/^  char *value;$/;"	m	struct:smp_param
value2	sandbox.h	/^  char *value2;$/;"	m	struct:smp_param
var	channel.h	/^    } var;$/;"	m	union:cell_queue_entry_s::__anon75	typeref:struct:cell_queue_entry_s::__anon75::__anon77
var_cell	channel.h	/^      var_cell_t *var_cell;$/;"	m	struct:cell_queue_entry_s::__anon75::__anon77
var_cell_free	connection_or.c	/^var_cell_free(var_cell_t *cell)$/;"	f
var_cell_handler	channel.h	/^  channel_var_cell_handler_fn_ptr var_cell_handler;$/;"	m	struct:channel_s
var_cell_new	connection_or.c	/^var_cell_new(uint16_t payload_len)$/;"	f
var_cell_pack_header	connection_or.c	/^var_cell_pack_header(const var_cell_t *cell, char *hdr_out, int wide_circ_ids)$/;"	f
var_cell_t	or.h	/^typedef struct var_cell_t {$/;"	s
var_cell_t	or.h	/^} var_cell_t;$/;"	t	typeref:struct:var_cell_t
var_offset	confparse.h	/^  off_t var_offset; \/**< Offset of the corresponding member of or_options_t. *\/$/;"	m	struct:config_var_t
varname	control.c	/^  const char *varname; \/**< The value (or prefix) of the question. *\/$/;"	m	struct:getinfo_item_t	file:
vars	confparse.h	/^  config_var_t *vars; \/**< List of variables we recognize, their default$/;"	m	struct:config_format_t
verified_digests	routerparse.c	/^static digestmap_t *verified_digests = NULL;$/;"	v	file:
verify_att_result_mac	TorSGX.cpp	/^sgx_status_t verify_att_result_mac(sgx_ra_context_t context,$/;"	f
verify_attestation_evidence	service_provider.h	/^    sample_verify_attestation_evidence verify_attestation_evidence;$/;"	m	struct:sample_extended_epid_group
version	ed25519_cert.h	/^  uint8_t version;$/;"	m	struct:ed25519_cert_st
version	ias_ra.h	/^    uint16_t                version;                \/\/ 0$/;"	m	struct:sample_quote_t
version	or.h	/^  char *version; \/**< The version that the authority says this router is$/;"	m	struct:vote_routerstatus_t
version	or.h	/^  int version; \/**< Version of the descriptor format: 0 or 2. *\/$/;"	m	struct:rend_service_descriptor_t
version	rendservice.h	/^  uint8_t version;$/;"	m	struct:rend_intro_cell_s
version_from_platform	dirserv.c	/^version_from_platform(const char *platform)$/;"	f	file:
version_known	or.h	/^  unsigned int version_known:1;$/;"	m	struct:routerstatus_t
version_status_t	or.h	/^typedef enum version_status_t {$/;"	g
version_status_t	or.h	/^} version_status_t;$/;"	t	typeref:enum:version_status_t
version_supports_extend2_cells	or.h	/^  unsigned int version_supports_extend2_cells:1;$/;"	m	struct:routerstatus_t
virtaddr_conf_ipv4	addressmap.c	/^static virtual_addr_conf_t virtaddr_conf_ipv4;$/;"	v	file:
virtaddr_conf_ipv6	addressmap.c	/^static virtual_addr_conf_t virtaddr_conf_ipv6;$/;"	v	file:
virtaddress_entry_t	addressmap.c	/^} virtaddress_entry_t;$/;"	t	typeref:struct:__anon88	file:
virtaddress_reversemap	addressmap.c	/^static strmap_t *virtaddress_reversemap=NULL;$/;"	v	file:
virtual_addr_conf_t	addressmap.h	/^typedef struct virtual_addr_conf_t {$/;"	s
virtual_addr_conf_t	addressmap.h	/^} virtual_addr_conf_t;$/;"	t	typeref:struct:virtual_addr_conf_t
virtual_port	rendservice.c	/^  uint16_t virtual_port;$/;"	m	struct:rend_service_port_config_s	file:
vk_key	service_provider.h	/^    sample_ec_key_128bit_t      vk_key;\/\/ Shared secret key for the REPORT_DATA$/;"	m	struct:_sp_db_item_t
void_for_alignment_	memarea.c	/^    void *void_for_alignment_; \/**< Dummy; used to make sure mem is aligned. *\/$/;"	m	union:memarea_chunk_t::__anon109	file:
vote	dirvote.c	/^  networkstatus_t *vote;$/;"	m	struct:pending_vote_t	file:
vote_body	dirvote.c	/^  cached_dir_t *vote_body;$/;"	m	struct:pending_vote_t	file:
vote_delay	or.h	/^  int vote_delay;$/;"	m	struct:vote_timing_t
vote_digest	or.h	/^  char vote_digest[DIGEST_LEN]; \/**< Digest of this voter's vote, as signed. *\/$/;"	m	struct:networkstatus_voter_info_t
vote_interval	or.h	/^  int vote_interval;$/;"	m	struct:vote_timing_t
vote_microdesc_hash_t	or.h	/^typedef struct vote_microdesc_hash_t {$/;"	s
vote_microdesc_hash_t	or.h	/^} vote_microdesc_hash_t;$/;"	t	typeref:struct:vote_microdesc_hash_t
vote_routerstatus_find_microdesc_hash	dirvote.c	/^vote_routerstatus_find_microdesc_hash(char *digest256_out,$/;"	f
vote_routerstatus_free	networkstatus.c	/^vote_routerstatus_free(vote_routerstatus_t *rs)$/;"	f
vote_routerstatus_t	or.h	/^typedef struct vote_routerstatus_t {$/;"	s
vote_routerstatus_t	or.h	/^} vote_routerstatus_t;$/;"	t	typeref:struct:vote_routerstatus_t
vote_seconds	or.h	/^  int vote_seconds;$/;"	m	struct:networkstatus_t
vote_timing_t	or.h	/^typedef struct vote_timing_t {$/;"	s
vote_timing_t	or.h	/^} vote_timing_t;$/;"	t	typeref:struct:vote_timing_t
voter_get_sig_by_algorithm	dirvote.c	/^voter_get_sig_by_algorithm(const networkstatus_voter_info_t *voter,$/;"	f
voters	or.h	/^  smartlist_t *voters;$/;"	m	struct:networkstatus_t
voting_ends	dirvote.c	/^  time_t voting_ends;$/;"	m	struct:__anon113	file:
voting_schedule	dirvote.c	/^} voting_schedule = {0,0,0,0,0,0,0,0,0,0};$/;"	v	typeref:struct:__anon113	file:
voting_starts	dirvote.c	/^  time_t voting_starts;$/;"	m	struct:__anon113	file:
vrs_lst	dircollate.c	/^  vote_routerstatus_t *vrs_lst[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:ddmap_entry_s	file:
vsnprintf_disallowed	TorSGX.cpp	/^volatile int snprintf_disallowed, vsnprintf_disallowed;$/;"	v
vsprintf_disallowed	TorSGX.cpp	/^volatile int sprintf_disallowed, vsprintf_disallowed;$/;"	v
waiting_time	or.h	/^  unsigned int waiting_time:22;$/;"	m	struct:testing_cell_stats_entry_t
waitpid_callback_t	util_process.c	/^struct waitpid_callback_t {$/;"	s	file:
waitpid_callback_t	util_process.h	/^typedef struct waitpid_callback_t waitpid_callback_t;$/;"	t	typeref:struct:waitpid_callback_t
waitpid_cb	util.h	/^  struct waitpid_callback_t *waitpid_cb;$/;"	m	struct:process_handle_t	typeref:struct:process_handle_t::waitpid_callback_t
waitpid_exit_status	util.h	/^  int waitpid_exit_status;$/;"	m	struct:process_handle_t
want_onehop	or.h	/^  unsigned int want_onehop:1;$/;"	m	struct:entry_connection_t
wants_to_be_hs_dir	or.h	/^  unsigned int wants_to_be_hs_dir:1; \/**< True iff this router claims to be$/;"	m	struct:__anon14
wantwrite_n	tortls.c	/^  size_t wantwrite_n; \/**< 0 normally, >0 if we returned wantwrite last$/;"	m	struct:tor_tls_t	file:
warn	confparse.h	/^  int warn;$/;"	m	struct:config_abbrev_t
warn_about_relative_paths	config.c	/^warn_about_relative_paths(or_options_t *options)$/;"	f	file:
warn_if_last_router_excluded	circuitbuild.c	/^warn_if_last_router_excluded(origin_circuit_t *circ, const extend_info_t *exit)$/;"	f	file:
warn_if_option_path_is_relative	config.c	/^warn_if_option_path_is_relative(const char *option,$/;"	f	file:
warn_nonlocal_client_ports	config.c	/^warn_nonlocal_client_ports(const smartlist_t *ports, const char *portname,$/;"	f	file:
warn_nonlocal_controller_ports	config.c	/^warn_nonlocal_controller_ports(smartlist_t *ports, unsigned forbid_nonlocal)$/;"	f	file:
warn_nonlocal_ext_orports	config.c	/^warn_nonlocal_ext_orports(const smartlist_t *ports, const char *portname)$/;"	f	file:
warn_too_many_conns	connection.c	/^warn_too_many_conns(void)$/;"	f	file:
warned_nicknames	routerlist.c	/^static smartlist_t *warned_nicknames = NULL;$/;"	v	file:
warned_nonexistent_family	router.c	/^static smartlist_t *warned_nonexistent_family = NULL;$/;"	v	file:
wasV2Handshake	tortls.c	/^  unsigned int wasV2Handshake:1; \/**< True iff the original handshake for$/;"	m	struct:tor_tls_t	file:
was_around_before_config_read	transports.h	/^  unsigned int was_around_before_config_read : 1;$/;"	m	struct:__anon1
was_router_added_t	or.h	/^typedef enum was_router_added_t {$/;"	g
was_router_added_t	or.h	/^} was_router_added_t;$/;"	t	typeref:enum:was_router_added_t
watchable_events	main.h	/^typedef enum watchable_events {$/;"	g
watchable_events_t	main.h	/^} watchable_events_t;$/;"	t	typeref:enum:watchable_events
we_fetch_microdescriptors	microdesc.c	/^we_fetch_microdescriptors(const or_options_t *options)$/;"	f
we_fetch_router_descriptors	microdesc.c	/^we_fetch_router_descriptors(const or_options_t *options)$/;"	f
we_use_microdescriptors_for_circuits	microdesc.c	/^we_use_microdescriptors_for_circuits(const or_options_t *options)$/;"	f
we_want_to_fetch_flavor	networkstatus.c	/^we_want_to_fetch_flavor(const or_options_t *options, int flavor)$/;"	f	file:
weight	or.h	/^  double weight; \/** Weight used when selecting this node at random *\/$/;"	m	struct:dir_server_t
weight_params	or.h	/^  smartlist_t *weight_params;$/;"	m	struct:networkstatus_t
weighted_run_length	rephist.c	/^  unsigned long weighted_run_length;$/;"	m	struct:or_history_t	file:
weighted_uptime	rephist.c	/^  unsigned long weighted_uptime;$/;"	m	struct:or_history_t	file:
when_added	onion.c	/^  time_t when_added;$/;"	m	struct:onion_queue_t	file:
wide_circ_ids	channel.h	/^  unsigned wide_circ_ids:1;$/;"	m	struct:channel_s
wide_circ_ids	or.h	/^  unsigned int wide_circ_ids:1;$/;"	m	struct:or_connection_t
wildcard_increment_answer	dns.c	/^wildcard_increment_answer(const char *id)$/;"	f	file:
windows_environment_block	util.h	/^  char *windows_environment_block;$/;"	m	struct:process_environment_t
windows_socket_errors	compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	v	typeref:struct:__anon111
worker_state_free	cpuworker.c	/^worker_state_free(void *arg)$/;"	f	file:
worker_state_new	cpuworker.c	/^worker_state_new(void *arg)$/;"	f	file:
worker_state_s	cpuworker.c	/^typedef struct worker_state_s {$/;"	s	file:
worker_state_t	cpuworker.c	/^} worker_state_t;$/;"	t	typeref:struct:worker_state_s	file:
worker_thread_has_work	workqueue.c	/^worker_thread_has_work(workerthread_t *thread)$/;"	f	file:
worker_thread_main	workqueue.c	/^worker_thread_main(void *thread_)$/;"	f	file:
workerthread_new	workqueue.c	/^workerthread_new(void *state, threadpool_t *pool, replyqueue_t *replyqueue)$/;"	f	file:
workerthread_s	workqueue.c	/^typedef struct workerthread_s {$/;"	s	file:
workerthread_t	workqueue.c	/^} workerthread_t;$/;"	t	typeref:struct:workerthread_s	file:
workqueue_entry	or.h	/^  struct workqueue_entry_s *workqueue_entry;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::workqueue_entry_s
workqueue_entry_cancel	workqueue.c	/^workqueue_entry_cancel(workqueue_entry_t *ent)$/;"	f
workqueue_entry_free	workqueue.c	/^workqueue_entry_free(workqueue_entry_t *ent)$/;"	f	file:
workqueue_entry_new	workqueue.c	/^workqueue_entry_new(workqueue_reply_t (*fn)(void*, void*),$/;"	f	file:
workqueue_entry_s	workqueue.c	/^struct workqueue_entry_s {$/;"	s	file:
workqueue_entry_t	workqueue.h	/^typedef struct workqueue_entry_s workqueue_entry_t;$/;"	t	typeref:struct:workqueue_entry_s
workqueue_reply_t	workqueue.h	/^} workqueue_reply_t;$/;"	t	typeref:enum:__anon101
write	orconfig.h	2427;"	d
write51	curve25519-donna-64bit.h	368;"	d
write51full	curve25519-donna-64bit.h	365;"	d
write_all	util.c	/^write_all(tor_socket_t fd, const char *buf, size_t count, int isSocket)$/;"	f
write_array	rephist.c	/^static bw_array_t *write_array = NULL;$/;"	v	file:
write_blocked_on_bw	or.h	/^  unsigned int write_blocked_on_bw:1; \/**< Boolean: should we start writing$/;"	m	struct:connection_t
write_bridge_stats	main.c	/^  time_t write_bridge_stats;$/;"	m	struct:__anon107	file:
write_bridge_status_file	main.c	/^  time_t write_bridge_status_file;$/;"	m	struct:__anon107	file:
write_bucket	or.h	/^  int write_bucket; \/**< When this hits 0, stop writing. Like read_bucket. *\/$/;"	m	struct:or_connection_t
write_buckets_empty_last_second	connection.c	/^static int write_buckets_empty_last_second = 0;$/;"	v	file:
write_bytes_to_file_impl	util.c	/^write_bytes_to_file_impl(const char *fname, const char *str, size_t len,$/;"	f	file:
write_bytes_to_new_file	util.c	/^write_bytes_to_new_file(const char *fname, const char *str, size_t len,$/;"	f
write_cell	channel.h	/^  int (*write_cell)(channel_t *, cell_t *);$/;"	m	struct:channel_s
write_chunks_to_file	util.c	/^write_chunks_to_file(const char *fname, const smartlist_t *chunks, int bin,$/;"	f
write_chunks_to_file_impl	util.c	/^write_chunks_to_file_impl(const char *fname, const smartlist_t *chunks,$/;"	f	file:
write_configuration_file	config.c	/^write_configuration_file(const char *fname, const or_options_t *options)$/;"	f	file:
write_emptied_time	or.h	/^  uint32_t write_emptied_time;$/;"	m	struct:or_connection_t
write_encrypted_secret_key	routerkeys.c	/^write_encrypted_secret_key(const ed25519_secret_key_t *key,$/;"	f
write_escaped_data	control.c	/^write_escaped_data(const char *data, size_t len, char **out)$/;"	f
write_event	or.h	/^  struct event *write_event; \/**< Libevent event structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::event
write_fd	compat_threads.h	/^  tor_socket_t write_fd;$/;"	m	struct:alert_sockets_s
write_http_response_header	directory.c	/^write_http_response_header(dir_connection_t *conn, ssize_t length,$/;"	f	file:
write_http_response_header_impl	directory.c	/^write_http_response_header_impl(dir_connection_t *conn, ssize_t length,$/;"	f	file:
write_http_status_line	directory.c	/^write_http_status_line(dir_connection_t *conn, int status,$/;"	f	file:
write_ni	compat_threads.c	/^write_ni(int fd, const void *buf, size_t n)$/;"	f	file:
write_packed_cell	channel.h	/^  int (*write_packed_cell)(channel_t *, packed_cell_t *);$/;"	m	struct:channel_s
write_pidfile	util.c	/^write_pidfile(const char *filename)$/;"	f
write_secret_key	routerkeys.c	/^write_secret_key(const ed25519_secret_key_t *key, int encrypted,$/;"	f	file:
write_short_policy	policies.c	/^write_short_policy(const short_policy_t *policy)$/;"	f
write_stats_files	main.c	/^  time_t write_stats_files;$/;"	m	struct:__anon107	file:
write_str_to_file	util.c	/^write_str_to_file(const char *fname, const char *str, int bin)$/;"	f
write_stream_target_to_buf	control.c	/^write_stream_target_to_buf(entry_connection_t *conn, char *buf, size_t len)$/;"	f	file:
write_to_buf	buffers.c	/^write_to_buf(const char *string, size_t string_len, buf_t *buf)$/;"	f
write_to_buf_zlib	buffers.c	/^write_to_buf_zlib(buf_t *buf, tor_zlib_state_t *state,$/;"	f
write_to_data_subdir	config.c	/^write_to_data_subdir(const char* subdir, const char* fname,$/;"	f
write_to_evbuffer_zlib	buffers.c	/^write_to_evbuffer_zlib(struct evbuffer *buf, tor_zlib_state_t *state,$/;"	f
write_var_cell	channel.h	/^  int (*write_var_cell)(channel_t *, var_cell_t *);$/;"	m	struct:channel_s
writing_to_linked_conn	or.h	/^  unsigned int writing_to_linked_conn:1;$/;"	m	struct:connection_t
written	rephist.c	/^  size_t written; \/**< Number of written bytes *\/$/;"	m	struct:bidi_map_entry_t	file:
x	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
x	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
x	remote_attestation_result.h	/^    uint32_t x[SAMPLE_NISTP256_KEY_SIZE];$/;"	m	struct:sample_ec_sign256_t
xaddy	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
xaddy	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
xfrm	ias_ra.h	/^    uint64_t                xfrm;$/;"	m	struct:sample_attributes_t
xmmi	curve25519-donna-sse2.h	/^typedef __m128i xmmi;$/;"	t
xy2d	ge.h	/^  fe xy2d;$/;"	m	struct:__anon82
y	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
y	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
y	remote_attestation_result.h	/^    uint32_t y[SAMPLE_NISTP256_KEY_SIZE];$/;"	m	struct:sample_ec_sign256_t
yminusx	ge.h	/^  fe yminusx;$/;"	m	struct:__anon82
yplusx	ge.h	/^  fe yplusx;$/;"	m	struct:__anon82
ysubx	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
ysubx	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
z	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
z	ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
z	ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
zero	fe_isnonzero.c	/^static const unsigned char zero[32];$/;"	v	file:
zlib_compression_level_t	torgzip.h	/^} zlib_compression_level_t;$/;"	t	typeref:enum:__anon67
zlib_state	or.h	/^  tor_zlib_state_t *zlib_state;$/;"	m	struct:dir_connection_t
